{"name":"Mathlib.Combinatorics.Digraph.Orientation","instances":[],"imports":["Init","Mathlib.Combinatorics.Digraph.Basic","Mathlib.Combinatorics.SimpleGraph.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L86-L88","name":"Digraph.toSimpleGraphStrict_bot","line":86,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_bot\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphStrict_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict\">toSimpleGraphStrict</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L82-L84","name":"Digraph.toSimpleGraphInclusive_bot","line":82,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_bot\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphInclusive_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive\">toSimpleGraphInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L78-L80","name":"Digraph.toSimpleGraphStrict_top","line":78,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_top\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphStrict_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict\">toSimpleGraphStrict</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L74-L76","name":"Digraph.toSimpleGraphInclusive_top","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_top\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphInclusive_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive\">toSimpleGraphInclusive</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L70-L72","name":"Digraph.toSimpleGraphStrict_mono","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_mono\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphStrict_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict\">toSimpleGraphStrict</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L62-L68","name":"Digraph.toSimpleGraphInclusive_mono","line":62,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive_mono\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphInclusive_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive\">toSimpleGraphInclusive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L58-L60","name":"Digraph.toSimpleGraphStrict_subgraph_toSimpleGraphInclusive","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_subgraph_toSimpleGraphInclusive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict_subgraph_toSimpleGraphInclusive\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphStrict_subgraph_toSimpleGraphInclusive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Digraph/Basic.html#Digraph\">Digraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict\">toSimpleGraphStrict</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive\">toSimpleGraphInclusive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L49-L56","name":"Digraph.toSimpleGraphStrict","line":49,"kind":"def","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict","doc":"Orientation-forgetting map from `Digraph` to `SimpleGraph` that gives an unoriented edge if\nboth orientations are present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphStrict\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphStrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Digraph/Basic.html#Digraph\">Digraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Digraph/Orientation.lean#L43-L47","name":"Digraph.toSimpleGraphInclusive","line":43,"kind":"def","docLink":"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive","doc":"Orientation-forgetting map from `Digraph` to `SimpleGraph` that gives an unoriented edge if\neither orientation is present.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Digraph/Orientation.html#Digraph.toSimpleGraphInclusive\"><span class=\"name\">Digraph</span>.<span class=\"name\">toSimpleGraphInclusive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Digraph/Basic.html#Digraph\">Digraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"}]}