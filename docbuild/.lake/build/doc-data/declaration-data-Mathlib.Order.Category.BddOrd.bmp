{"name":"Mathlib.Order.Category.BddOrd","instances":[{"typeNames":["BddOrd","_builtin_typeu"],"name":"BddOrd.instCoeSortType","className":"CoeSort"},{"typeNames":["BddOrd"],"name":"BddOrd.instCategory","className":"CategoryTheory.Category"},{"typeNames":["BddOrd"],"name":"BddOrd.instConcreteCategoryBoundedOrderHomCarrier","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["BddOrd"],"name":"BddOrd.instInhabited","className":"Inhabited"},{"typeNames":["BddOrd","PartOrd"],"name":"BddOrd.hasForgetToPartOrd","className":"CategoryTheory.HasForget₂"},{"typeNames":["BddOrd","Bipointed"],"name":"BddOrd.hasForgetToBipointed","className":"CategoryTheory.HasForget₂"}],"imports":["Init","Mathlib.CategoryTheory.Category.Bipointed","Mathlib.Order.Category.PartOrd","Mathlib.Order.Hom.Bounded"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L185-L188","name":"bddOrd_dual_comp_forget_to_bipointed","line":185,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_bipointed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_bipointed\"><span class=\"name\">bddOrd_dual_comp_forget_to_bipointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed.swap\">Bipointed.swap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L180-L183","name":"bddOrd_dual_comp_forget_to_partOrd","line":180,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_partOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#bddOrd_dual_comp_forget_to_partOrd\"><span class=\"name\">bddOrd_dual_comp_forget_to_partOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">BddOrd.dual</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget₂\">CategoryTheory.forget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd.dual\">PartOrd.dual</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L171-L171","name":"BddOrd.dualEquiv_inverse","line":171,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_inverse\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv_inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\">dualEquiv</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">dual</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L171-L171","name":"BddOrd.dualEquiv_functor","line":171,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv_functor\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv_functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\">dualEquiv</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">dual</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L170-L176","name":"BddOrd.dualEquiv","line":170,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv","doc":"The equivalence between `BddOrd` and itself induced by `OrderDual` both ways. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dualEquiv\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dualEquiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L163-L163","name":"BddOrd.Iso.mk_hom","line":163,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\">mk</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L163-L163","name":"BddOrd.Iso.mk_inv","line":163,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk_inv\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\">mk</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">symm</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L162-L168","name":"BddOrd.Iso.mk","line":162,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk","doc":"Constructs an equivalence between bounded orders from an order isomorphism between them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Iso.mk\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Iso</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">β</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L157-L157","name":"BddOrd.dual_map","line":157,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual_map\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dual_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\">dual</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom.dual\">BoundedOrderHom.dual</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L156-L160","name":"BddOrd.dual","line":156,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual","doc":"`OrderDual` as a functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.dual\"><span class=\"name\">BddOrd</span>.<span class=\"name\">dual</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L150-L154","name":"BddOrd.hasForgetToBipointed","line":150,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToBipointed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToBipointed\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hasForgetToBipointed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/CategoryTheory/Category/Bipointed.html#Bipointed\">Bipointed</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L146-L148","name":"BddOrd.hasForgetToPartOrd","line":146,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToPartOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hasForgetToPartOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hasForgetToPartOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.HasForget₂\">CategoryTheory.HasForget₂</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L143-L144","name":"BddOrd.instInhabited","line":143,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instInhabited\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L140-L141","name":"BddOrd.hom_inv_apply","line":140,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_inv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_inv_apply\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_inv_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>)</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L137-L138","name":"BddOrd.inv_hom_apply","line":137,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.inv_hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.inv_hom_apply\"><span class=\"name\">BddOrd</span>.<span class=\"name\">inv_hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L133-L135","name":"BddOrd.ofHom_apply","line":133,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_apply\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ofHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L126-L131","name":"BddOrd.ofHom_comp","line":126,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_comp\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ofHom_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">Y</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom.comp\">comp</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L122-L124","name":"BddOrd.ofHom_id","line":122,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_id\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ofHom_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom.id\">BoundedOrderHom.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">of</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L118-L120","name":"BddOrd.ofHom_hom","line":118,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom_hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ofHom_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L113-L116","name":"BddOrd.hom_ofHom","line":113,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ofHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ofHom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\">ofHom</a> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L109-L109","name":"BddOrd.hom_ext_iff","line":109,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ext_iff\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L109-L111","name":"BddOrd.hom_ext","line":109,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_ext\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L106-L107","name":"BddOrd.comp_apply","line":106,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.comp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.comp_apply\"><span class=\"name\">BddOrd</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L101-L103","name":"BddOrd.hom_comp","line":101,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_comp\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L98-L99","name":"BddOrd.id_apply","line":98,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.id_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.id_apply\"><span class=\"name\">BddOrd</span>.<span class=\"name\">id_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span>)</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L94-L95","name":"BddOrd.hom_id","line":94,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.hom_id\"><span class=\"name\">BddOrd</span>.<span class=\"name\">hom_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\">Hom.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom.id\">BoundedOrderHom.id</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L92-L92","name":"BddOrd.coe_of","line":92,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_of\"><span class=\"name\">BddOrd</span>.<span class=\"name\">coe_of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">of</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L87-L87","name":"BddOrd.ext_iff","line":87,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ext_iff\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L87-L89","name":"BddOrd.ext","line":87,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ext\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L83-L85","name":"BddOrd.forget_map","line":83,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.forget_map\"><span class=\"name\">BddOrd</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L80-L81","name":"BddOrd.coe_comp","line":80,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_comp\"><span class=\"name\">BddOrd</span>.<span class=\"name\">coe_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L77-L78","name":"BddOrd.coe_id","line":77,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.coe_id\"><span class=\"name\">BddOrd</span>.<span class=\"name\">coe_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L67-L69","name":"BddOrd.Hom.Simps.hom","line":67,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.Simps.hom","doc":"Use the `ConcreteCategory.hom` projection for `@[simps]` lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.Simps.hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span>.<span class=\"name\">Simps</span>.<span class=\"name\">hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\">Hom</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L61-L64","name":"BddOrd.ofHom","line":61,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom","doc":"Typecheck a `BoundedOrderHom` as a morphism in `BddOrd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.ofHom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">ofHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">X</span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">of</a> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\">of</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L57-L59","name":"BddOrd.Hom.hom","line":57,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom","doc":"Turn a morphism in `BddOrd` back into a `BoundedOrderHom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span>.<span class=\"name\">hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\">Hom</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L53-L55","name":"BddOrd.instConcreteCategoryBoundedOrderHomCarrier","line":53,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instConcreteCategoryBoundedOrderHomCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instConcreteCategoryBoundedOrderHomCarrier\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instConcreteCategoryBoundedOrderHomCarrier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x1</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x2</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L48-L51","name":"BddOrd.instCategory","line":48,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCategory\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u, u + 1}</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L46-L46","name":"BddOrd.Hom.hom'","line":46,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'","doc":"The underlying `BoundedOrderHom`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span>.<span class=\"name\">hom'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\">Hom</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Hom/Bounded.html#BoundedOrderHom\">BoundedOrderHom</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L42-L42","name":"BddOrd.Hom.ext","line":42,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.ext\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\">Hom</a></span> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hom'</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'\">hom'</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'\">hom'</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L42-L42","name":"BddOrd.Hom.ext_iff","line":42,"kind":"theorem","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.ext_iff\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\">Hom</a></span> <span class=\"fn\">Y</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'\">hom'</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom.hom'\">hom'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L41-L46","name":"BddOrd.Hom","line":41,"kind":"structure","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom","doc":"The type of morphisms in `BddOrd R`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.Hom\"><span class=\"name\">BddOrd</span>.<span class=\"name\">Hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L37-L39","name":"BddOrd.of","line":37,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.of","doc":"Construct a bundled `BddOrd` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.of\"><span class=\"name\">BddOrd</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L34-L35","name":"BddOrd.instCoeSortType","line":34,"kind":"instance","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.instCoeSortType\"><span class=\"name\">BddOrd</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L23-L23","name":"BddOrd.isBoundedOrder","line":23,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.isBoundedOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.isBoundedOrder\"><span class=\"name\">BddOrd</span>.<span class=\"name\">isBoundedOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\">toPartOrd</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L22-L22","name":"BddOrd.mk","line":22,"kind":"ctor","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.mk\"><span class=\"name\">BddOrd</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPartOrd</span> : <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">isBoundedOrder</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\">↑<span class=\"fn\">toPartOrd</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L22-L23","name":"BddOrd.toPartOrd","line":22,"kind":"def","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd","doc":"The underlying object in the category of partial orders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd.toPartOrd\"><span class=\"name\">BddOrd</span>.<span class=\"name\">toPartOrd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\">BddOrd</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Category/BddOrd.lean#L21-L23","name":"BddOrd","line":21,"kind":"structure","docLink":"./Mathlib/Order/Category/BddOrd.html#BddOrd","doc":"The category of bounded orders with monotone functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Category/BddOrd.html#BddOrd\"><span class=\"name\">BddOrd</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Mathlib/Order/Category/PartOrd.html#PartOrd\">PartOrd</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}