{"name":"Mathlib.CategoryTheory.ComposableArrows","instances":[],"imports":["Init","Mathlib.Algebra.Group.Nat.Defs","Mathlib.CategoryTheory.Category.Preorder","Mathlib.CategoryTheory.EqToHom","Mathlib.CategoryTheory.Functor.Const","Mathlib.Order.Fin.Basic","Mathlib.Tactic.FinCases","Mathlib.Tactic.SuppressCompilation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L903-L908","name":"CategoryTheory.Functor.mapComposableArrowsOpIso","line":903,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrowsOpIso","doc":"The functor `ComposableArrows C n ⥤ ComposableArrows D n` induced by `G : C ⥤ D`\ncommutes with `opEquivalence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrowsOpIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">mapComposableArrowsOpIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\">mapComposableArrows</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">ComposableArrows.opEquivalence</a> <span class=\"fn\">D</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.rightOp\">rightOp</a></span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">ComposableArrows.opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.rightOp\">rightOp</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\">mapComposableArrows</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L897-L897","name":"CategoryTheory.Functor.mapComposableArrows_obj_obj","line":897,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">mapComposableArrows_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\">mapComposableArrows</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L897-L897","name":"CategoryTheory.Functor.mapComposableArrows_obj_map","line":897,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_obj_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">mapComposableArrows_obj_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\">mapComposableArrows</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L897-L897","name":"CategoryTheory.Functor.mapComposableArrows_map_app","line":897,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows_map_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">mapComposableArrows_map_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\">mapComposableArrows</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L895-L900","name":"CategoryTheory.Functor.mapComposableArrows","line":895,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows","doc":"The functor `ComposableArrows C n ⥤ ComposableArrows D n` obtained by postcomposition\nwith a functor `C ⥤ D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.Functor.mapComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">mapComposableArrows</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">D</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_functor_map_app","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_map_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_functor_map_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">x✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\"><span class=\"fn\">x✝</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_inverse_obj","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_inverse_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_inverse_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_inverse_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.leftOp\">Functor.leftOp</a> <span class=\"fn\">X</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_unitIso_inv_app","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_unitIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_unitIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_unitIso_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.unitIso\">unitIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Whiskering.html#CategoryTheory.whiskerLeft\">CategoryTheory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>)</span>\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.rightOpLeftOpIso\">rightOpLeftOpIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.trans\">trans</a></span> <span class=\"fn\"><a href=\"./Mathlib/Order/Fin/Basic.html#Fin.revOrderIso\">Fin.revOrderIso</a>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#OrderIso.equivalence\">equivalence</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.funInvIdAssoc\">funInvIdAssoc</a></span>\n          <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_unitIso_hom_app","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_unitIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_unitIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_unitIso_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.unitIso\">unitIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.trans\">trans</a></span> <span class=\"fn\"><a href=\"./Mathlib/Order/Fin/Basic.html#Fin.revOrderIso\">Fin.revOrderIso</a>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#OrderIso.equivalence\">equivalence</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.funInvIdAssoc\">funInvIdAssoc</a></span>\n          <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Whiskering.html#CategoryTheory.whiskerLeft\">CategoryTheory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>)</span>\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.rightOpLeftOpIso\">rightOpLeftOpIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_functor_obj_map","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_obj_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_functor_obj_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">⋯</span>)</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_inverse_map","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_inverse_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_inverse_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_inverse_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Whiskering.html#CategoryTheory.whiskerLeft\">CategoryTheory.whiskerLeft</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">⋯</span>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#Monotone.functor\">functor</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.NatTrans.leftOp\">NatTrans.leftOp</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_counitIso_inv_app_app","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_counitIso_inv_app_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_counitIso_inv_app_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_counitIso_inv_app_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.counitIso\">counitIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.trans\">trans</a></span> <span class=\"fn\"><a href=\"./Mathlib/Order/Fin/Basic.html#Fin.revOrderIso\">Fin.revOrderIso</a>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#OrderIso.equivalence\">equivalence</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.counit\">counit</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span>\n        <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X✝</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_counitIso_hom_app_app","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_counitIso_hom_app_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_counitIso_hom_app_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_counitIso_hom_app_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.counitIso\">counitIso</a></span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.orderDualEquivalence\">orderDualEquivalence</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.trans\">trans</a></span> <span class=\"fn\"><a href=\"./Mathlib/Order/Fin/Basic.html#Fin.revOrderIso\">Fin.revOrderIso</a>.<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#OrderIso.equivalence\">equivalence</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.symm\">symm</a></span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.counitInv\">counitInv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span>\n        <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X✝</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L879-L879","name":"CategoryTheory.ComposableArrows.opEquivalence_functor_obj_obj","line":879,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence_functor_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence_functor_obj_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\">opEquivalence</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">X✝</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L877-L883","name":"CategoryTheory.ComposableArrows.opEquivalence","line":877,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence","doc":"The equivalence `(ComposableArrows C n)ᵒᵖ ≌ ComposableArrows Cᵒᵖ n` obtained\nby reversing the arrows. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.opEquivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">opEquivalence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L869-L871","name":"CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_arrow","line":869,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_arrow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mkOfObjOfMapSucc_arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapSucc</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc\">mkOfObjOfMapSucc</a> <span class=\"fn\">obj</span> <span class=\"fn\">mapSucc</span>)</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.arrow\">arrow</a></span> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">mk₁</a> <span class=\"fn\">(<span class=\"fn\">mapSucc</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">hi</span>⟩</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L865-L867","name":"CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_map_succ","line":865,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_map_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_map_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mkOfObjOfMapSucc_map_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapSucc</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc\">mkOfObjOfMapSucc</a> <span class=\"fn\">obj</span> <span class=\"fn\">mapSucc</span>)</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">mapSucc</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">hi</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L861-L863","name":"CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_obj","line":861,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mkOfObjOfMapSucc_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapSucc</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc\">mkOfObjOfMapSucc</a> <span class=\"fn\">obj</span> <span class=\"fn\">mapSucc</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L854-L859","name":"CategoryTheory.ComposableArrows.mkOfObjOfMapSucc","line":854,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc","doc":"Given `obj : Fin (n + 1) → C` and `mapSucc i : obj i.castSucc ⟶ obj i.succ`\nfor all `i : Fin n`, this is `F : ComposableArrows C n` such that `F.obj i` is\ndefinitionally equal to `obj i` and such that `F.map' i (i + 1) = mapSucc ⟨i, hi⟩`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mkOfObjOfMapSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapSucc</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L837-L852","name":"CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_exists","line":837,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mkOfObjOfMapSucc_exists\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mkOfObjOfMapSucc_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapSucc</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) → <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">e</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">i</span></span></span>),\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><span class=\"fn\">mapSucc</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">hi</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L829-L831","name":"CategoryTheory.ComposableArrows.arrow","line":829,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.arrow","doc":"The `i`th arrow of `F : ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.arrow\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">arrow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L823-L827","name":"CategoryTheory.ComposableArrows.mk₅_surjective","line":823,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₅_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₅_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₅_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₂</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₃</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₄</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₅</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>) (<span class=\"fn\">f₂</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>) (<span class=\"fn\">f₃</span> : <span class=\"fn\">X₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₄</span>) (<span class=\"fn\">f₄</span>\n  : <span class=\"fn\">X₄</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₅</span>), <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₅\">mk₅</a> <span class=\"fn\">f₀</span> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span> <span class=\"fn\">f₃</span> <span class=\"fn\">f₄</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L812-L821","name":"CategoryTheory.ComposableArrows.ext₅","line":812,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₅","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₅\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₅</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₀</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₂</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₃</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₄</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L794-L794","name":"CategoryTheory.ComposableArrows.isoMk₅_hom","line":794,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₅_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₅</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅\">isoMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₅</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L794-L794","name":"CategoryTheory.ComposableArrows.isoMk₅_inv","line":794,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₅_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₅</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅\">isoMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₅</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L793-L810","name":"CategoryTheory.ComposableArrows.isoMk₅","line":793,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅","doc":"Constructor for isomorphisms in `ComposableArrows C 5`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₅\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₅</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₅</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L786-L786","name":"CategoryTheory.ComposableArrows.hom_ext₅_iff","line":786,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₅_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₅_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₅_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L786-L791","name":"CategoryTheory.ComposableArrows.hom_ext₅","line":786,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₅","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₅\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₅</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₅</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L780-L782","name":"CategoryTheory.ComposableArrows.homMk₅_app_five","line":780,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_five","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_five\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_five</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">5</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₅</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L776-L778","name":"CategoryTheory.ComposableArrows.homMk₅_app_four","line":776,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_four","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_four\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">4</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₄</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L772-L774","name":"CategoryTheory.ComposableArrows.homMk₅_app_three","line":772,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_three\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">3</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L768-L770","name":"CategoryTheory.ComposableArrows.homMk₅_app_two","line":768,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_two\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">2</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L765-L766","name":"CategoryTheory.ComposableArrows.homMk₅_app_one","line":765,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L762-L763","name":"CategoryTheory.ComposableArrows.homMk₅_app_zero","line":762,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅_app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅_app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\">homMk₅</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">app₅</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span> <span class=\"fn\">w₄</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₀</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L759-L760","name":"CategoryTheory.ComposableArrows.homMk₅","line":759,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅","doc":"Constructor for morphisms in `ComposableArrows C 5`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₅\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₅</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₅</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₅</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₄</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">5</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L741-L745","name":"CategoryTheory.ComposableArrows.mk₄_surjective","line":741,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₄_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₄_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₄_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₂</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₃</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₄</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>) (<span class=\"fn\">f₂</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>) (<span class=\"fn\">f₃</span> : <span class=\"fn\">X₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₄</span>),\n  <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₄\">mk₄</a> <span class=\"fn\">f₀</span> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span> <span class=\"fn\">f₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L731-L739","name":"CategoryTheory.ComposableArrows.ext₄","line":731,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₄","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₄\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₄</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₀</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₂</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₃</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L715-L715","name":"CategoryTheory.ComposableArrows.isoMk₄_inv","line":715,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₄_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄\">isoMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L715-L715","name":"CategoryTheory.ComposableArrows.isoMk₄_hom","line":715,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₄_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄\">isoMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L714-L729","name":"CategoryTheory.ComposableArrows.isoMk₄","line":714,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄","doc":"Constructor for isomorphisms in `ComposableArrows C 4`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₄\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₄</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₄</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L708-L712","name":"CategoryTheory.ComposableArrows.map'_inv_eq_inv_map'","line":708,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_inv_eq_inv_map'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_inv_eq_inv_map'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">map'_inv_eq_inv_map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">n</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">h</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">n</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\"><span class=\"fn\">app'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">n</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">n</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\"><span class=\"fn\">app'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">n</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L701-L701","name":"CategoryTheory.ComposableArrows.hom_ext₄_iff","line":701,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₄_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₄_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₄_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L701-L706","name":"CategoryTheory.ComposableArrows.hom_ext₄","line":701,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₄","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₄\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₄</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₄</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L695-L697","name":"CategoryTheory.ComposableArrows.homMk₄_app_four","line":695,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_four","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_four\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄_app_four</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">4</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₄</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L691-L693","name":"CategoryTheory.ComposableArrows.homMk₄_app_three","line":691,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_three\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄_app_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">3</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L687-L689","name":"CategoryTheory.ComposableArrows.homMk₄_app_two","line":687,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_two\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄_app_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">2</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L684-L685","name":"CategoryTheory.ComposableArrows.homMk₄_app_one","line":684,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄_app_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L681-L682","name":"CategoryTheory.ComposableArrows.homMk₄_app_zero","line":681,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄_app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄_app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\">homMk₄</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">app₄</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span> <span class=\"fn\">w₃</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₀</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L678-L679","name":"CategoryTheory.ComposableArrows.homMk₄","line":678,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄","doc":"Constructor for morphisms in `ComposableArrows C 4`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₄\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₄</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₄</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₄</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₃</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">4</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L662-L665","name":"CategoryTheory.ComposableArrows.mk₃_surjective","line":662,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₃_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₃_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₃_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₂</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₃</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>) (<span class=\"fn\">f₂</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>), <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₃\">mk₃</a> <span class=\"fn\">f₀</span> <span class=\"fn\">f₁</span> <span class=\"fn\">f₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L654-L660","name":"CategoryTheory.ComposableArrows.ext₃","line":654,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₀</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₂</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L638-L638","name":"CategoryTheory.ComposableArrows.isoMk₃_inv","line":638,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₃_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃\">isoMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L638-L638","name":"CategoryTheory.ComposableArrows.isoMk₃_hom","line":638,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₃_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃\">isoMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L637-L652","name":"CategoryTheory.ComposableArrows.isoMk₃","line":637,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃","doc":"Constructor for isomorphisms in `ComposableArrows C 3`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₃</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L630-L630","name":"CategoryTheory.ComposableArrows.hom_ext₃_iff","line":630,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₃_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₃_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₃_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L630-L635","name":"CategoryTheory.ComposableArrows.hom_ext₃","line":630,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L624-L626","name":"CategoryTheory.ComposableArrows.homMk₃_app_three","line":624,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_three\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₃_app_three</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">3</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₃</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L620-L622","name":"CategoryTheory.ComposableArrows.homMk₃_app_two","line":620,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_two\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₃_app_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">2</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L617-L618","name":"CategoryTheory.ComposableArrows.homMk₃_app_one","line":617,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₃_app_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L614-L615","name":"CategoryTheory.ComposableArrows.homMk₃_app_zero","line":614,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃_app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₃_app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\">homMk₃</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">app₃</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span> <span class=\"fn\">w₂</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₀</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L611-L612","name":"CategoryTheory.ComposableArrows.homMk₃","line":611,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃","doc":"Constructor for morphisms in `ComposableArrows C 3`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₃</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">3</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L597-L599","name":"CategoryTheory.ComposableArrows.mk₂_surjective","line":597,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₂_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₂</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>), <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\">mk₂</a> <span class=\"fn\">f₀</span> <span class=\"fn\">f₁</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L591-L595","name":"CategoryTheory.ComposableArrows.ext₂","line":591,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₀</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₁</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L579-L579","name":"CategoryTheory.ComposableArrows.isoMk₂_inv","line":579,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₂_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂\">isoMk₂</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\">homMk₂</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L579-L579","name":"CategoryTheory.ComposableArrows.isoMk₂_hom","line":579,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₂_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂\">isoMk₂</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\">homMk₂</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L578-L589","name":"CategoryTheory.ComposableArrows.isoMk₂","line":578,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂","doc":"Constructor for isomorphisms in `ComposableArrows C 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₀</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">app₂</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">app₁</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L572-L572","name":"CategoryTheory.ComposableArrows.hom_ext₂_iff","line":572,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₂_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₂_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₂_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L572-L576","name":"CategoryTheory.ComposableArrows.hom_ext₂","line":572,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L567-L568","name":"CategoryTheory.ComposableArrows.homMk₂_app_two","line":567,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_two\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₂_app_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\">homMk₂</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">2</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L564-L565","name":"CategoryTheory.ComposableArrows.homMk₂_app_one","line":564,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₂_app_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\">homMk₂</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₁</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L561-L562","name":"CategoryTheory.ComposableArrows.homMk₂_app_zero","line":561,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂_app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₂_app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\">homMk₂</a> <span class=\"fn\">app₀</span> <span class=\"fn\">app₁</span> <span class=\"fn\">app₂</span> <span class=\"fn\">w₀</span> <span class=\"fn\">w₁</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">app₀</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L558-L559","name":"CategoryTheory.ComposableArrows.homMk₂","line":558,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂","doc":"Constructor for morphisms in `ComposableArrows C 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₀</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">app₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">app₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">2</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L546-L548","name":"CategoryTheory.ComposableArrows.precomp_surjective","line":546,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">precomp_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">F₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F₀</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>), <span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F₀</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp\">precomp</a></span> <span class=\"fn\">f₀</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L532-L544","name":"CategoryTheory.ComposableArrows.ext_succ","line":532,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">h₀</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L513-L513","name":"CategoryTheory.ComposableArrows.isoMkSucc_inv","line":513,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMkSucc_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc\">isoMkSucc</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc\">homMkSucc</a> <span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L513-L513","name":"CategoryTheory.ComposableArrows.isoMkSucc_hom","line":513,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMkSucc_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc\">isoMkSucc</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc\">homMkSucc</a> <span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L510-L530","name":"CategoryTheory.ComposableArrows.isoMkSucc","line":510,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc","doc":"Inductive construction of isomorphisms in `ComposableArrows C (n + 1)`: in order to\nconstruct an isomorphism `F ≅ G`, it suffices to provide `α : F.obj' 0 ≅ G.obj' 0` and\n`β : F.δ₀ ≅ G.δ₀` such that `F.map' 0 1 ≫ app' β.hom 0 = α.hom ≫ G.map' 0 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMkSucc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMkSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\"><span class=\"fn\">β</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L503-L508","name":"CategoryTheory.ComposableArrows.hom_ext_succ","line":503,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">f</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">g</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\">δ₀Functor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\">δ₀Functor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L497-L499","name":"CategoryTheory.ComposableArrows.homMkSucc_app_succ","line":497,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc_app_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc_app_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMkSucc_app_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">β</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc\">homMkSucc</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">hi</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">β</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L494-L495","name":"CategoryTheory.ComposableArrows.homMkSucc_app_zero","line":494,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc_app_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc_app_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMkSucc_app_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">β</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc\">homMkSucc</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L477-L489","name":"CategoryTheory.ComposableArrows.homMkSucc","line":477,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc","doc":"Inductive construction of morphisms in `ComposableArrows C (n + 1)`: in order to construct\na morphism `F ⟶ G`, it suffices to provide `α : F.obj' 0 ⟶ G.obj' 0` and `β : F.δ₀ ⟶ G.δ₀`\nsuch that `F.map' 0 1 ≫ app' β 0 = α ≫ G.map' 0 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMkSucc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMkSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">β</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L469-L470","name":"CategoryTheory.ComposableArrows.δlast","line":469,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlast","doc":"The `ComposableArrows C n` obtained by forgetting the first arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlast\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δlast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L465-L465","name":"CategoryTheory.ComposableArrows.δlastFunctor_obj_map","line":465,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_obj_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δlastFunctor_obj_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor\">δlastFunctor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L465-L465","name":"CategoryTheory.ComposableArrows.δlastFunctor_map_app","line":465,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_map_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δlastFunctor_map_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor\">δlastFunctor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L465-L465","name":"CategoryTheory.ComposableArrows.δlastFunctor_obj_obj","line":465,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δlastFunctor_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor\">δlastFunctor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L463-L467","name":"CategoryTheory.ComposableArrows.δlastFunctor","line":463,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor","doc":"The functor `ComposableArrows C (n + 1) ⥤ ComposableArrows C n` which forgets\nthe last arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δlastFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δlastFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L458-L458","name":"Fin.castSuccFunctor_map","line":458,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor_map\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccFunctor_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor\">castSuccFunctor</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hij</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hij</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L458-L458","name":"Fin.castSuccFunctor_obj","line":458,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor_obj\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor\">castSuccFunctor</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.castSucc\">castSucc</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L457-L461","name":"Fin.castSuccFunctor","line":457,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor","doc":"The functor `Fin n ⥤ Fin (n + 1)` which sends `i` to `i.castSucc`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.castSuccFunctor\"><span class=\"name\">Fin</span>.<span class=\"name\">castSuccFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L454-L455","name":"CategoryTheory.ComposableArrows.precomp_δ₀","line":454,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_δ₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_δ₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">precomp_δ₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp\">precomp</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\">δ₀</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L451-L452","name":"CategoryTheory.ComposableArrows.δ₀","line":451,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀","doc":"The `ComposableArrows C n` obtained by forgetting the first arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δ₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L447-L447","name":"CategoryTheory.ComposableArrows.δ₀Functor_obj_obj","line":447,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δ₀Functor_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\">δ₀Functor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L447-L447","name":"CategoryTheory.ComposableArrows.δ₀Functor_map_app","line":447,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_map_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δ₀Functor_map_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\">δ₀Functor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L447-L447","name":"CategoryTheory.ComposableArrows.δ₀Functor_obj_map","line":447,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor_obj_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δ₀Functor_obj_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\">δ₀Functor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L445-L449","name":"CategoryTheory.ComposableArrows.δ₀Functor","line":445,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor","doc":"The functor `ComposableArrows C (n + 1) ⥤ ComposableArrows C n` which forgets\nthe first arrow. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.δ₀Functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">δ₀Functor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L440-L440","name":"Fin.succFunctor_obj","line":440,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor_obj\"><span class=\"name\">Fin</span>.<span class=\"name\">succFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor\">succFunctor</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L440-L440","name":"Fin.succFunctor_map","line":440,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor_map\"><span class=\"name\">Fin</span>.<span class=\"name\">succFunctor_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">x✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x✝¹</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor\">succFunctor</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">hij</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">CategoryTheory.homOfLE</a> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L439-L443","name":"Fin.succFunctor","line":439,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor","doc":"The functor `Fin n ⥤ Fin (n + 1)` which sends `i` to `i.succ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#Fin.succFunctor\"><span class=\"name\">Fin</span>.<span class=\"name\">succFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L433-L433","name":"CategoryTheory.ComposableArrows.whiskerLeftFunctor_map_app","line":433,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_map_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeftFunctor_map_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor\">whiskerLeftFunctor</a> <span class=\"fn\">Φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L433-L433","name":"CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_obj","line":433,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeftFunctor_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor\">whiskerLeftFunctor</a> <span class=\"fn\">Φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L433-L433","name":"CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_map","line":433,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor_obj_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeftFunctor_obj_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor\">whiskerLeftFunctor</a> <span class=\"fn\">Φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L431-L437","name":"CategoryTheory.ComposableArrows.whiskerLeftFunctor","line":431,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor","doc":"The functor `ComposableArrows C m ⥤ ComposableArrows C n` obtained by precomposition with\na functor `Fin (n + 1) ⥤ Fin (m + 1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeftFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeftFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L427-L427","name":"CategoryTheory.ComposableArrows.whiskerLeft_obj","line":427,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeft_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft\">whiskerLeft</a></span> <span class=\"fn\">Φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L427-L427","name":"CategoryTheory.ComposableArrows.whiskerLeft_map","line":427,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeft_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft\">whiskerLeft</a></span> <span class=\"fn\">Φ</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L425-L429","name":"CategoryTheory.ComposableArrows.whiskerLeft","line":425,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft","doc":"The map `ComposableArrows C m → ComposableArrows C n` obtained by precomposition with\na functor `Fin (n + 1) ⥤ Fin (m + 1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.whiskerLeft\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">whiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Φ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L393-L398","name":"CategoryTheory.ComposableArrows.mk₅","line":393,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₅","doc":"Constructor for `ComposableArrows C 5`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₅\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₅</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂ </span><span class=\"fn\">X₃ </span><span class=\"fn\">X₄ </span><span class=\"fn\">X₅</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">X₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₄</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">X₄</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₅</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">5</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L387-L391","name":"CategoryTheory.ComposableArrows.mk₄","line":387,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₄","doc":"Constructor for `ComposableArrows C 4`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₄\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₄</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂ </span><span class=\"fn\">X₃ </span><span class=\"fn\">X₄</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">X₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₄</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">4</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L382-L385","name":"CategoryTheory.ComposableArrows.mk₃","line":382,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₃","doc":"Constructor for `ComposableArrows C 3`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₃\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂ </span><span class=\"fn\">X₃</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">X₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₃</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">3</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L377-L380","name":"CategoryTheory.ComposableArrows.mk₂","line":377,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂","doc":"Constructor for `ComposableArrows C 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁ </span><span class=\"fn\">X₂</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L370-L370","name":"CategoryTheory.ComposableArrows.precomp_map","line":370,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">precomp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp\">precomp</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">Precomp.map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">X✝</span> <span class=\"fn\">Y✝</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L370-L370","name":"CategoryTheory.ComposableArrows.precomp_obj","line":370,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">precomp_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp\">precomp</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">Precomp.obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L369-L375","name":"CategoryTheory.ComposableArrows.precomp","line":369,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp","doc":"\"Precomposition\" of `F : ComposableArrows C n` by a morphism `f : X ⟶ F.left`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.precomp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">precomp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L341-L365","name":"CategoryTheory.ComposableArrows.Precomp.map_comp","line":341,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j </span><span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjk</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">hjk</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L338-L339","name":"CategoryTheory.ComposableArrows.Precomp.map_id","line":338,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L334-L336","name":"CategoryTheory.ComposableArrows.Precomp.map_one_succ","line":334,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_one_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_one_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_one_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">⟨<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">hj</span>⟩</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">j</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L329-L332","name":"CategoryTheory.ComposableArrows.Precomp.map_succ_succ","line":329,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_succ_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">hi</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">hj</span>⟩</span> <span class=\"fn\">hij</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L325-L327","name":"CategoryTheory.ComposableArrows.Precomp.map_zero_succ_succ","line":325,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_succ_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_succ_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_zero_succ_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">0</span> <span class=\"fn\">⟨<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>, <span class=\"fn\">hj</span>⟩</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> (<span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L322-L323","name":"CategoryTheory.ComposableArrows.Precomp.map_zero_one'","line":322,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_one'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_one'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_zero_one'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">0</span> <span class=\"fn\">⟨<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L319-L320","name":"CategoryTheory.ComposableArrows.Precomp.map_zero_one","line":319,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_zero_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L316-L317","name":"CategoryTheory.ComposableArrows.Precomp.map_one_one","line":316,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_one_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_one_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_one_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">⋯</span>⟩</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L313-L314","name":"CategoryTheory.ComposableArrows.Precomp.map_zero_zero","line":313,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map_zero_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map_zero_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\">map</a> <span class=\"fn\">F</span> <span class=\"fn\">f</span> <span class=\"fn\">0</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L305-L311","name":"CategoryTheory.ComposableArrows.Precomp.map","line":305,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map","doc":"Auxiliary definition for the action on maps of the functor `F.precomp f`.\nIt sends `0 ≤ 1` to `f` and `i + 1 ≤ j + 1` to `F.map' i j`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> → (<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">j</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L300-L301","name":"CategoryTheory.ComposableArrows.Precomp.obj_succ","line":300,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">obj_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">hi</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L297-L298","name":"CategoryTheory.ComposableArrows.Precomp.obj_one","line":297,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_one\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">obj_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L294-L295","name":"CategoryTheory.ComposableArrows.Precomp.obj_zero","line":294,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj_zero\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">obj_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\">obj</a> <span class=\"fn\">F</span> <span class=\"fn\">X</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L288-L292","name":"CategoryTheory.ComposableArrows.Precomp.obj","line":288,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj","doc":"The map `Fin (n + 1 + 1) → C` which \"shifts\" `F.obj'` to the right and inserts `X` in\nthe zeroth position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Precomp.obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Precomp</span>.<span class=\"name\">obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L279-L280","name":"CategoryTheory.ComposableArrows.mk₁_surjective","line":279,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₁_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X₀</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>) (<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>), <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">mk₁</a> <span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L272-L277","name":"CategoryTheory.ComposableArrows.ext₁","line":272,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.right\">right</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.right\">right</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">left</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom\">hom</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L270-L270","name":"CategoryTheory.ComposableArrows.map'_eq_hom₁","line":270,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_eq_hom₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_eq_hom₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">map'_eq_hom₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom\">hom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L260-L260","name":"CategoryTheory.ComposableArrows.isoMk₁_hom_app","line":260,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₁_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">right</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁\">isoMk₁</a> <span class=\"fn\">left</span> <span class=\"fn\">right</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>\n  | <span class=\"fn\">⟨<span class=\"fn\">1</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">right</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L260-L260","name":"CategoryTheory.ComposableArrows.isoMk₁_inv_app","line":260,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₁_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">right</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁\">isoMk₁</a> <span class=\"fn\">left</span> <span class=\"fn\">right</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>\n  | <span class=\"fn\">⟨<span class=\"fn\">1</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">right</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L259-L268","name":"CategoryTheory.ComposableArrows.isoMk₁","line":259,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁","doc":"Constructor for isomorphisms in `ComposableArrows C 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\"><span class=\"fn\">right</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">left</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L250-L250","name":"CategoryTheory.ComposableArrows.hom_ext₁_iff","line":250,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₁_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₁_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₁_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L250-L257","name":"CategoryTheory.ComposableArrows.hom_ext₁","line":250,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L238-L238","name":"CategoryTheory.ComposableArrows.homMk₁_app","line":238,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₁_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₁_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₁_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">right</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">left</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₁\">homMk₁</a> <span class=\"fn\">left</span> <span class=\"fn\">right</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\">left</span>\n  | <span class=\"fn\">⟨<span class=\"fn\">1</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\">right</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L237-L248","name":"CategoryTheory.ComposableArrows.homMk₁","line":237,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₁","doc":"Constructor for morphisms in `ComposableArrows C 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">left</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">right</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">right</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">left</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span>)</span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L234-L235","name":"CategoryTheory.ComposableArrows.mk₀_surjective","line":234,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_surjective\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₀_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X</span> : <span class=\"fn\">C</span>), <span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀\">mk₀</a> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L230-L232","name":"CategoryTheory.ComposableArrows.ext₀","line":230,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L225-L225","name":"CategoryTheory.ComposableArrows.isoMk₀_hom_app","line":225,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₀_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀\">isoMk₀</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L225-L225","name":"CategoryTheory.ComposableArrows.isoMk₀_inv_app","line":225,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₀_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀\">isoMk₀</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L224-L228","name":"CategoryTheory.ComposableArrows.isoMk₀","line":224,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀","doc":"Constructor for isomorphisms in `ComposableArrows C 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L216-L216","name":"CategoryTheory.ComposableArrows.hom_ext₀_iff","line":216,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₀_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₀_iff\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₀_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L216-L222","name":"CategoryTheory.ComposableArrows.hom_ext₀","line":216,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom_ext₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom_ext₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">φ'</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ'</span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">φ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">φ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L211-L211","name":"CategoryTheory.ComposableArrows.homMk₀_app","line":211,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₀_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₀_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₀_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₀\">homMk₀</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">i</span> with\n  | <span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">isLt</span>⟩</span> =&gt; <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L210-L214","name":"CategoryTheory.ComposableArrows.homMk₀","line":210,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₀","doc":"Constructor for morphisms in `ComposableArrows C 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">0</span> <span class=\"fn\">⋯</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L204-L208","name":"CategoryTheory.ComposableArrows.ext","line":204,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L193-L193","name":"CategoryTheory.ComposableArrows.isoMk_hom","line":193,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk\">isoMk</a> <span class=\"fn\">app</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk\">homMk</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L193-L193","name":"CategoryTheory.ComposableArrows.isoMk_inv","line":193,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk\">isoMk</a> <span class=\"fn\">app</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk\">homMk</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>)</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L190-L202","name":"CategoryTheory.ComposableArrows.isoMk","line":190,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk","doc":"Constructor for isomorphisms `F ≅ G` in `ComposableArrows C n` which takes as inputs\na family of isomorphisms `F.obj i ≅ G.obj i` and the naturality condition only for the\nmaps in `Fin (n + 1)` given by inequalities of the form `i ≤ i + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.isoMk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">isoMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L165-L165","name":"CategoryTheory.ComposableArrows.homMk_app","line":165,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk\">homMk</a> <span class=\"fn\">app</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">app</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L162-L188","name":"CategoryTheory.ComposableArrows.homMk","line":162,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk","doc":"Constructor for morphisms `F ⟶ G` in `ComposableArrows C n` which takes as inputs\na family of morphisms `F.obj i ⟶ G.obj i` and the naturality condition only for the\nmaps in `Fin (n + 1)` given by inequalities of the form `i ≤ i + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.homMk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">homMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">app</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>),\n    <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span> <span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">⋯</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">app</span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L155-L155","name":"CategoryTheory.ComposableArrows.mk₁_obj","line":155,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₁_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">mk₁</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj\">Mk₁.obj</a> <span class=\"fn\">X₀</span> <span class=\"fn\">X₁</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L155-L155","name":"CategoryTheory.ComposableArrows.mk₁_map","line":155,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₁_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\">mk₁</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\">Mk₁.map</a> <span class=\"fn\">f</span> <span class=\"fn\">X✝</span> <span class=\"fn\">Y✝</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L154-L160","name":"CategoryTheory.ComposableArrows.mk₁","line":154,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁","doc":"Constructor for `ComposableArrows C 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₁\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L146-L150","name":"CategoryTheory.ComposableArrows.Mk₁.map_comp","line":146,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Mk₁</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j </span><span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjk</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">hjk</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L141-L144","name":"CategoryTheory.ComposableArrows.Mk₁.map_id","line":141,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Mk₁</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj\">obj</a> <span class=\"fn\">X₀</span> <span class=\"fn\">X₁</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L134-L139","name":"CategoryTheory.ComposableArrows.Mk₁.map","line":134,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map","doc":"The obvious map `obj X₀ X₁ i ⟶ obj X₀ X₁ j` whenever `i j : Fin 2` satisfy `i ≤ j`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Mk₁</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X₀</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> → (<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj\">obj</a> <span class=\"fn\">X₀</span> <span class=\"fn\">X₁</span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj\">obj</a> <span class=\"fn\">X₀</span> <span class=\"fn\">X₁</span> <span class=\"fn\">j</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L125-L129","name":"CategoryTheory.ComposableArrows.Mk₁.obj","line":125,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj","doc":"The map which sends `0 : Fin 2` to `X₀` and `1` to `X₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.Mk₁.obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">Mk₁</span>.<span class=\"name\">obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X₀ </span><span class=\"fn\">X₁</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span></span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L118-L118","name":"CategoryTheory.ComposableArrows.mk₀_obj","line":118,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₀_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀\">mk₀</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L118-L118","name":"CategoryTheory.ComposableArrows.mk₀_map","line":118,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₀_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀\">mk₀</a> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">x✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L117-L119","name":"CategoryTheory.ComposableArrows.mk₀","line":117,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀","doc":"Constructor for `ComposableArrows C 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.mk₀\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">mk₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L111-L111","name":"CategoryTheory.ComposableArrows.naturality'_assoc","line":111,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.naturality'_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.naturality'_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">naturality'_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> := by valid)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">j</span> <span class=\"fn\">hj</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span> <span class=\"fn\">hj</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">j</span> <span class=\"fn\">hj</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span> <span class=\"fn\">hj</span>)</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L111-L115","name":"CategoryTheory.ComposableArrows.naturality'","line":111,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.naturality'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.naturality'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">naturality'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> := by valid)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span> <span class=\"fn\">hj</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">j</span> <span class=\"fn\">hj</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\">app'</a> <span class=\"fn\">φ</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span> <span class=\"fn\">hj</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L105-L109","name":"CategoryTheory.ComposableArrows.app'","line":105,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'","doc":"The map `F.obj' i ⟶ G.obj' i` induced on `i`th objects by a morphism `F ⟶ G`\nin `ComposableArrows C n` when `i` is a natural number such that `i ≤ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.app'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">app'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\">obj'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">hi</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L100-L101","name":"CategoryTheory.ComposableArrows.hom","line":100,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom","doc":"The canonical map `F.left ⟶ F.right` for `F : ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\">left</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.right\">right</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L97-L98","name":"CategoryTheory.ComposableArrows.right","line":97,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.right","doc":"The rightmost object of `F : ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L94-L95","name":"CategoryTheory.ComposableArrows.left","line":94,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left","doc":"The leftmost object of `F : ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.left\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L89-L92","name":"CategoryTheory.ComposableArrows.map'_comp","line":89,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">map'_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> := by valid)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjk</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span> := by valid)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hk</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span> <span class=\"fn\">hk</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span> <span class=\"fn\">hij</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">j</span> <span class=\"fn\">k</span> <span class=\"fn\">hjk</span> <span class=\"fn\">hk</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L86-L87","name":"CategoryTheory.ComposableArrows.map'_self","line":86,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'_self\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">map'_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\">map'</a></span> <span class=\"fn\">i</span> <span class=\"fn\">i</span> <span class=\"fn\">⋯</span> <span class=\"fn\">hi</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L78-L84","name":"CategoryTheory.ComposableArrows.map'","line":78,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'","doc":"The map `F.obj' i ⟶ F.obj' j` when `F : ComposableArrows C n`, and `i` and `j`\nare natural numbers such that `i ≤ j ≤ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.map'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span> := by valid)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hjn</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">⟨<span class=\"fn\">j</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L74-L76","name":"CategoryTheory.ComposableArrows.obj'","line":74,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'","doc":"The `i`th object (with `i : ℕ` such that `i ≤ n`) of `F : ComposableArrows C n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.obj'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">obj'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\">ComposableArrows</a> <span class=\"fn\">C</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> := by valid)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L71-L72","name":"CategoryTheory.ComposableArrows.tacticValid","line":71,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.tacticValid","doc":"A wrapper for `omega` which prefaces it with some quick and useful attempts "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows.tacticValid\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span>.<span class=\"name\">tacticValid</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/ComposableArrows.lean#L62-L63","name":"CategoryTheory.ComposableArrows","line":62,"kind":"def","docLink":"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows","doc":"`ComposableArrows C n` is the type of functors `Fin (n + 1) ⥤ C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/ComposableArrows.html#CategoryTheory.ComposableArrows\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ComposableArrows</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_2 u_1)</div></div>"}]}