{"name":"Mathlib.Combinatorics.Quiver.ReflQuiver","instances":[{"typeNames":[],"name":"CategoryTheory.catToReflQuiver","className":"CategoryTheory.ReflQuiver"},{"typeNames":["CategoryTheory.ReflPrefunctor"],"name":"CategoryTheory.ReflPrefunctor.instInhabited","className":"Inhabited"},{"typeNames":["Opposite"],"name":"CategoryTheory.ReflQuiver.opposite","className":"CategoryTheory.ReflQuiver"},{"typeNames":["CategoryTheory.Discrete"],"name":"CategoryTheory.ReflQuiver.discreteReflQuiver","className":"CategoryTheory.ReflQuiver"}],"imports":["Init","Mathlib.Data.Set.Function","Mathlib.CategoryTheory.Category.Cat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L146-L147","name":"CategoryTheory.ReflQuiver.discreteReflQuiver","line":146,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.discreteReflQuiver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.discreteReflQuiver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">discreteReflQuiver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Discrete/Basic.html#CategoryTheory.Discrete\">Discrete</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L142-L144","name":"CategoryTheory.ReflQuiver.opposite","line":142,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.opposite","doc":"`Vᵒᵖ` reverses the direction of all arrows of `V`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.opposite\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">opposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L135-L137","name":"CategoryTheory.Functor.toReflPrefunctor_toPrefunctor","line":135,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor_toPrefunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor_toPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toReflPrefunctor_toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <span class=\"fn\">↑<span class=\"fn\">D</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">toReflPrefunctor</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor\">toPrefunctor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L131-L133","name":"CategoryTheory.Functor.toReflPrefunctor.map_comp","line":131,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor.map_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toReflPrefunctor</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_5, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_6, u_3}</a> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">D</span> <span class=\"fn\">E</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">toReflPrefunctor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">toReflPrefunctor</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\">toReflPrefunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L128-L129","name":"CategoryTheory.Functor.toReflPrefunctor","line":128,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor","doc":"A functor has an underlying refl prefunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.Functor.toReflPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">toReflPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_3, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_4, u_2}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">D</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L123-L124","name":"CategoryTheory.ReflPrefunctor.congr_map","line":123,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.congr_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.congr_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">congr_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L120-L121","name":"CategoryTheory.ReflPrefunctor.«term𝟭rq»","line":120,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term𝟭rq»","doc":"Notation for the identity prefunctor on a reflexive quiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term𝟭rq»\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">«term𝟭rq»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L117-L118","name":"CategoryTheory.ReflPrefunctor.«term_⋙rq_»","line":117,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term_⋙rq_»","doc":"Notation for composition of reflexive prefunctors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term_⋙rq_»\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">«term_⋙rq_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L114-L115","name":"CategoryTheory.ReflPrefunctor.«term_⥤rq_»","line":114,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term_⥤rq_»","doc":"Notation for a prefunctor between reflexive quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.«term_⥤rq_»\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">«term_⥤rq_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L109-L112","name":"CategoryTheory.ReflPrefunctor.comp_assoc","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">comp_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">Z</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">W</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> (<span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">H</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L105-L107","name":"CategoryTheory.ReflPrefunctor.id_comp","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">id_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\">𝟭rq</a> <span class=\"fn\">U</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L101-L103","name":"CategoryTheory.ReflPrefunctor.comp_id","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">comp_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\">𝟭rq</a> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L95-L95","name":"CategoryTheory.ReflPrefunctor.comp_obj","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">comp_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">U</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">G</span>).<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L95-L95","name":"CategoryTheory.ReflPrefunctor.comp_map","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">comp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\">⋙rq</a> <span class=\"fn\">G</span>).<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L94-L99","name":"CategoryTheory.ReflPrefunctor.comp","line":94,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp","doc":"Composition of morphisms between reflexive quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L91-L92","name":"CategoryTheory.ReflPrefunctor.instInhabited","line":91,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.instInhabited\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> (<span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L86-L86","name":"CategoryTheory.ReflPrefunctor.id_map","line":86,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">id_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\">𝟭rq</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L86-L86","name":"CategoryTheory.ReflPrefunctor.id_obj","line":86,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">id_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\">𝟭rq</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L85-L89","name":"CategoryTheory.ReflPrefunctor.id","line":85,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id","doc":"The identity morphism between reflexive quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">V</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L73-L83","name":"CategoryTheory.ReflPrefunctor.ext'","line":73,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.ext'","doc":"This may be a more useful form of `ReflPrefunctor.ext`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.ext'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">ext'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_obj</span> : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_map</span> : <span class=\"fn\">∀ (<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>) (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L59-L71","name":"CategoryTheory.ReflPrefunctor.ext","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.ext","doc":"Proving equality between reflexive prefunctors. This isn't an extensionality lemma,\nbecause usually you don't really want to do this. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_obj</span> : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_map</span> : <span class=\"fn\">∀ (<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>) (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Eq.recOn\">Eq.recOn</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Eq.recOn\">Eq.recOn</a> <span class=\"fn\">⋯</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">F</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L56-L57","name":"CategoryTheory.ReflPrefunctor.mk_map","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">mk_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">map</span> : <span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>} → <span class=\"fn\">(<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) → (<span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">Y</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">obj</span>, <span class=\"fn\">map</span> := <span class=\"fn\">map</span> }</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">map</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L53-L54","name":"CategoryTheory.ReflPrefunctor.mk_obj","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">mk_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">obj</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">map</span> : <span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>} → <span class=\"fn\">(<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) → (<span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">Y</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">obj</span> := <span class=\"fn\">obj</span>, <span class=\"fn\">map</span> := <span class=\"fn\">map</span> }</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">obj</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L47-L47","name":"CategoryTheory.ReflPrefunctor.map_id","line":47,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.map_id","doc":"A functor preserves identity morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.map_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L44-L44","name":"CategoryTheory.ReflPrefunctor.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toPrefunctor</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map_id</span> : <span class=\"fn\">∀ (<span class=\"fn\">X</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">toPrefunctor</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">ReflQuiver.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">toPrefunctor</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></span> := by aesop_cat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L44-L47","name":"CategoryTheory.ReflPrefunctor.toPrefunctor","line":44,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor.toPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span>.<span class=\"name\">toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\">⥤rq</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L43-L47","name":"CategoryTheory.ReflPrefunctor","line":43,"kind":"structure","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor","doc":"A morphism of reflexive quivers called a `ReflPrefunctor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflPrefunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u₁)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u₂)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\">W</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max (max (max (u₁ + 1) (u₂ + 1)) v₁) v₂)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L41-L41","name":"CategoryTheory.ReflQuiver.id_eq_id","line":41,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id_eq_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">id_eq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">id</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L38-L39","name":"CategoryTheory.catToReflQuiver","line":38,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.catToReflQuiver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.catToReflQuiver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">catToReflQuiver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L34-L36","name":"CategoryTheory.ReflQuiver.homOfEq_id","line":34,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.homOfEq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.homOfEq_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">homOfEq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">X'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">id</a> <span class=\"fn\">X</span>)</span> <span class=\"fn\">hX</span> <span class=\"fn\">hX</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\">id</a> <span class=\"fn\">X'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L31-L32","name":"CategoryTheory.«term𝟙rq»","line":31,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.«term𝟙rq»","doc":"Notation for the identity morphism in a category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.«term𝟙rq»\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">«term𝟙rq»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L29-L29","name":"CategoryTheory.ReflQuiver.id","line":29,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id","doc":"The identity morphism on an object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">obj</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">obj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">obj</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L27-L27","name":"CategoryTheory.ReflQuiver.mk","line":27,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">obj</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toQuiver</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">obj</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">obj</span>) → <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">obj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L27-L29","name":"CategoryTheory.ReflQuiver.toQuiver","line":27,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.toQuiver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver.toQuiver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span>.<span class=\"name\">toQuiver</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">obj</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\">ReflQuiver</a> <span class=\"fn\">obj</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">obj</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/ReflQuiver.lean#L23-L29","name":"CategoryTheory.ReflQuiver","line":23,"kind":"class","docLink":"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver","doc":"A reflexive quiver extends a quiver with a specified arrow `id X : X ⟶ X` for each `X` in its\ntype of objects. We denote these arrows by `id` since categories can be understood as an extension\nof refl quivers.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/ReflQuiver.html#CategoryTheory.ReflQuiver\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">ReflQuiver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">obj</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">obj</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}