{"name":"Mathlib.NumberTheory.Dioph","instances":[{"typeNames":["Poly","Int"],"name":"Poly.instFunLike","className":"DFunLike"},{"typeNames":["Poly"],"name":"Poly.instZero","className":"Zero"},{"typeNames":["Poly"],"name":"Poly.instOne","className":"One"},{"typeNames":["Poly"],"name":"Poly.instNeg","className":"Neg"},{"typeNames":["Poly"],"name":"Poly.instAdd","className":"Add"},{"typeNames":["Poly"],"name":"Poly.instSub","className":"Sub"},{"typeNames":["Poly"],"name":"Poly.instMul","className":"Mul"},{"typeNames":["Poly"],"name":"Poly.instInhabited","className":"Inhabited"},{"typeNames":["Poly"],"name":"Poly.instAddCommGroup","className":"AddCommGroup"},{"typeNames":["Poly"],"name":"Poly.instAddGroupWithOne","className":"AddGroupWithOne"},{"typeNames":["Poly"],"name":"Poly.instCommRing","className":"CommRing"}],"imports":["Init","Mathlib.Data.Fin.Fin2","Mathlib.Data.PFun","Mathlib.Data.Vector3","Mathlib.NumberTheory.PellMatiyasevic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L694-L718","name":"Dioph.pow_dioph","line":694,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.pow_dioph","doc":"A version of **Matiyasevic's theorem** "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.pow_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">pow_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L687-L692","name":"Dioph.xn_dioph","line":687,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.xn_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.xn_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">xn_dioph</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\">DiophPFun</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">2</span></span>) =&gt;\n  <span class=\"fn\">{ <span class=\"fn\">Dom</span> := <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">0</span>)</span></span>, <span class=\"fn\">get</span> := <span class=\"fn\">fun (<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">0</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/PellMatiyasevic.html#Pell.xn\">Pell.xn</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">1</span>)</span>)</span></span></span> }</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L662-L685","name":"Dioph.pell_dioph","line":662,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.pell_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.pell_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">pell_dioph</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">4</span></span>) =&gt;\n  <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">0</span>)</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/PellMatiyasevic.html#Pell.xn\">Pell.xn</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">1</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">2</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/PellMatiyasevic.html#Pell.yn\">Pell.yn</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">1</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">3</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L657-L658","name":"Dioph.«term_D/_»","line":657,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D/_»","doc":"Diophantine functions are closed under integer division. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D/_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D/_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L633-L653","name":"Dioph.div_dioph","line":633,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.div_dioph","doc":"Diophantine functions are closed under integer division. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.div_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">div_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L630-L631","name":"Dioph.«termD≡»","line":630,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD≡»","doc":"The set of places where two Diophantine functions are congruent modulo a third\nis Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD≡»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«termD≡»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L625-L628","name":"Dioph.modEq_dioph","line":625,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.modEq_dioph","doc":"The set of places where two Diophantine functions are congruent modulo a third\nis Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.modEq_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">modEq_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dh</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">h</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L622-L623","name":"Dioph.«term_D%_»","line":622,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D%_»","doc":"Diophantine functions are closed under the modulo operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D%_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D%_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L605-L620","name":"Dioph.mod_dioph","line":605,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.mod_dioph","doc":"Diophantine functions are closed under the modulo operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.mod_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">mod_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L602-L603","name":"Dioph.«term_D∣_»","line":602,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∣_»","doc":"The set of places where one Diophantine function divides another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∣_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D∣_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L598-L600","name":"Dioph.dvd_dioph","line":598,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.dvd_dioph","doc":"The set of places where one Diophantine function divides another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.dvd_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">dvd_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L595-L596","name":"Dioph.«term_D-_»","line":595,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D-_»","doc":"Diophantine functions are closed under subtraction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D-_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D-_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L579-L593","name":"Dioph.sub_dioph","line":579,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.sub_dioph","doc":"Diophantine functions are closed under subtraction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.sub_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">sub_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L576-L577","name":"Dioph.«term_D≠_»","line":576,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D≠_»","doc":"The set of places where two Diophantine functions are unequal is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D≠_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D≠_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L572-L574","name":"Dioph.ne_dioph","line":572,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.ne_dioph","doc":"The set of places where two Diophantine functions are unequal is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.ne_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">ne_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L569-L570","name":"Dioph.«term_D<_»","line":569,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D<_»","doc":"The set of places where one Diophantine function is less than another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D&lt;_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L566-L567","name":"Dioph.lt_dioph","line":566,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.lt_dioph","doc":"The set of places where one Diophantine function is less than another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.lt_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">lt_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L563-L564","name":"Dioph.«term_D≤_»","line":563,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D≤_»","doc":"The set of places where one Diophantine function is at most another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D≤_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D≤_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L558-L561","name":"Dioph.le_dioph","line":558,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.le_dioph","doc":"The set of places where one Diophantine function is at most another is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.le_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">le_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L555-L556","name":"Dioph.«term_D*_»","line":555,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D*_»","doc":"Diophantine functions are closed under multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D*_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D*_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L551-L553","name":"Dioph.mul_dioph","line":551,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.mul_dioph","doc":"Diophantine functions are closed under multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.mul_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">mul_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L548-L549","name":"Dioph.«term_D+_»","line":548,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D+_»","doc":"Diophantine functions are closed under addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D+_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D+_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L544-L546","name":"Dioph.add_dioph","line":544,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.add_dioph","doc":"Diophantine functions are closed under addition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.add_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">add_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L541-L542","name":"Dioph.«term_D=_»","line":541,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D=_»","doc":"The set of places where two Diophantine functions are equal is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D=_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L535-L539","name":"Dioph.eq_dioph","line":535,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.eq_dioph","doc":"The set of places where two Diophantine functions are equal is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.eq_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">eq_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L532-L533","name":"Dioph.diophFn_comp2","line":532,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp2\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_comp2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">2</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">0</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">1</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">v</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L529-L530","name":"Dioph.dioph_comp2","line":529,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.dioph_comp2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.dioph_comp2\"><span class=\"name\">Dioph</span>.<span class=\"name\">dioph_comp2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">2</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">0</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">1</span>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">v</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L522-L523","name":"Dioph.«termD._»","line":522,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD._»","doc":"The constant function is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD._»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«termD</span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L519-L520","name":"Dioph.const_dioph","line":519,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.const_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.const_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">const_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L516-L517","name":"Dioph.«termD&_»","line":516,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD&_»","doc":"Projection preserves Diophantine functions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD&amp;_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«termD&amp;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L513-L514","name":"Dioph.proj_dioph_of_nat","line":513,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.proj_dioph_of_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.proj_dioph_of_nat\"><span class=\"name\">Dioph</span>.<span class=\"name\">proj_dioph_of_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.IsLT\">Fin2.IsLT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.ofNat'\">Fin2.ofNat'</a> <span class=\"fn\">m</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L510-L511","name":"Dioph.«term&_»","line":510,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term&_»","doc":"Local abbreviation for `Fin2.ofNat'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term&amp;_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term&amp;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L507-L508","name":"Dioph.«termD∃»","line":507,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD∃»","doc":"Deleting the first component preserves the Diophantine property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«termD∃»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«termD∃»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L504-L505","name":"Dioph.«term_D∨_»","line":504,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∨_»","doc":"Diophantine sets are closed under union. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∨_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D∨_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L501-L502","name":"Dioph.«term_D∧_»","line":501,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∧_»","doc":"Diophantine sets are closed under intersection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.«term_D∧_»\"><span class=\"name\">Dioph</span>.<span class=\"name\">«term_D∧_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L494-L499","name":"Dioph.diophFn_comp","line":494,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dg</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#VectorAllP\">VectorAllP</a> <a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L490-L492","name":"Dioph.dioph_comp","line":490,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.dioph_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.dioph_comp\"><span class=\"name\">Dioph</span>.<span class=\"name\">dioph_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#VectorAllP\">VectorAllP</a> <a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L460-L488","name":"Dioph.diophFn_compn","line":460,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_compn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_compn\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_compn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span> →\n  <span class=\"fn\">∀ {<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <span class=\"fn\">n</span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#VectorAllP\">VectorAllP</a> <a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L457-L458","name":"Dioph.diophPFun_vec","line":457,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophPFun_vec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophPFun_vec\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophPFun_vec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\">DiophPFun</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/PFun.html#PFun.graph\">graph</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.fs\">Fin2.fs</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.fz\">Fin2.fz</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L454-L455","name":"Dioph.diophFn_vec","line":454,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_vec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_vec\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_vec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.fs\">Fin2.fs</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2.fz\">Fin2.fz</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L445-L452","name":"Dioph.vec_ex1_dioph","line":445,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.vec_ex1_dioph","doc":"Deleting the first component preserves the Diophantine property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.vec_ex1_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">vec_ex1_dioph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3.cons\">Vector3.cons</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L437-L443","name":"Dioph.diophFn_vec_comp1","line":437,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_vec_comp1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_vec_comp1\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_vec_comp1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3\">Vector3</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Vector3.html#Vector3.cons\">Vector3.cons</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L422-L425","name":"Dioph.diophFn_comp1","line":422,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_comp1\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_comp1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L412-L420","name":"Dioph.diophPFun_comp1","line":412,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophPFun_comp1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophPFun_comp1\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophPFun_comp1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">df</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\">DiophPFun</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/PFun.html#PFun.Dom\">Dom</a></span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/PFun.html#PFun.fn\">fn</a></span> <span class=\"fn\">v</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L409-L410","name":"Dioph.proj_dioph","line":409,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.proj_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.proj_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">proj_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L405-L407","name":"Dioph.abs_poly_dioph","line":405,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.abs_poly_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.abs_poly_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">abs_poly_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L402-L403","name":"Dioph.diophFn_iff_pFun","line":402,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_iff_pFun","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.diophFn_iff_pFun\"><span class=\"name\">Dioph</span>.<span class=\"name\">diophFn_iff_pFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\">DiophPFun</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L399-L400","name":"Dioph.dom_dioph","line":399,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.dom_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.dom_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">dom_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\">DiophPFun</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/PFun.html#PFun.Dom\">Dom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L381-L397","name":"Dioph.ex1_dioph","line":381,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.ex1_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.ex1_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">ex1_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.elim'\">Option.elim'</a> <span class=\"fn\">x</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L364-L379","name":"Dioph.ex_dioph","line":364,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.ex_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.ex_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">ex_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L361-L362","name":"Dioph.reindex_diophFn","line":361,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.reindex_diophFn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.reindex_diophFn\"><span class=\"name\">Dioph</span>.<span class=\"name\">reindex_diophFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\">DiophFn</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L357-L359","name":"Dioph.DiophFn","line":357,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn","doc":"A function is Diophantine if its graph is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophFn\"><span class=\"name\">Dioph</span>.<span class=\"name\">DiophFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L353-L355","name":"Dioph.DiophPFun","line":353,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun","doc":"A partial function is Diophantine if its graph is Diophantine. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophPFun\"><span class=\"name\">Dioph</span>.<span class=\"name\">DiophPFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L336-L351","name":"Dioph.union","line":336,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.union","doc":"Diophantine sets are closed under union. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.union\"><span class=\"name\">Dioph</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">S'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S'</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> (<span class=\"fn\">S</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">S'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L333-L334","name":"Dioph.inter","line":333,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.inter","doc":"Diophantine sets are closed under intersection. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.inter\"><span class=\"name\">Dioph</span>.<span class=\"name\">inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">S'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> (<span class=\"fn\">S</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">S'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L298-L331","name":"Dioph.DiophList.forall","line":298,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophList.forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.DiophList.forall\"><span class=\"name\">Dioph</span>.<span class=\"name\">DiophList</span>.<span class=\"name\">forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Defs.html#List.Forall\">List.Forall</a> <a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/Defs.html#List.Forall\">List.Forall</a> <span class=\"fn\">(fun (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>) =&gt; <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span>)</span> <span class=\"fn\">l</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L291-L296","name":"Dioph.reindex_dioph","line":291,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.reindex_dioph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.reindex_dioph\"><span class=\"name\">Dioph</span>.<span class=\"name\">reindex_dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L285-L288","name":"Dioph.inject_dummies","line":285,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.inject_dummies","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.inject_dummies\"><span class=\"name\">Dioph</span>.<span class=\"name\">inject_dummies</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">γ</span>)</span>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">q</span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L275-L283","name":"Dioph.inject_dummies_lem","line":275,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.inject_dummies_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.inject_dummies_lem\"><span class=\"name\">Dioph</span>.<span class=\"name\">inject_dummies_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">t</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.map\">Poly.map</a> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> (<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>))</span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">v</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L272-L273","name":"Dioph.of_no_dummies","line":272,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.of_no_dummies","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.of_no_dummies\"><span class=\"name\">Dioph</span>.<span class=\"name\">of_no_dummies</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L270-L270","name":"Dioph.ext","line":270,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph.ext\"><span class=\"name\">Dioph</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">S'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\">Dioph</a> <span class=\"fn\">S'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L259-L262","name":"Dioph","line":259,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Dioph","doc":"A set `S ⊆ ℕ^α` is Diophantine if there exists a polynomial on\n`α ⊕ β` such that `v ∈ S` iff there exists `t : ℕ^β` with `p (v, t) = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Dioph\"><span class=\"name\">Dioph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L249-L250","name":"Poly.map_apply","line":249,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.map_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.map_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">map_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L242-L247","name":"Poly.map","line":242,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.map","doc":"Map the index set of variables, replacing `x_i` with `x_(f i)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.map\"><span class=\"name\">Poly</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L223-L238","name":"Poly.sumsq_eq_zero","line":223,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq_eq_zero\"><span class=\"name\">Poly</span>.<span class=\"name\">sumsq_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq\">sumsq</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/Defs.html#List.Forall\">List.Forall</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L217-L221","name":"Poly.sumsq_nonneg","line":217,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq_nonneg\"><span class=\"name\">Poly</span>.<span class=\"name\">sumsq_nonneg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq\">sumsq</a> <span class=\"fn\">l</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L209-L215","name":"Poly.sumsq","line":209,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq","doc":"The sum of squares of a list of polynomials. This is relevant for\nDiophantine equations, because it means that a list of equations\ncan be encoded as a single equation: `x = 0 ∧ y = 0 ∧ z = 0` is\nequivalent to `x^2 + y^2 + z^2 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sumsq\"><span class=\"name\">Poly</span>.<span class=\"name\">sumsq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L200-L207","name":"Poly.induction","line":200,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.induction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.induction\"><span class=\"name\">Poly</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.proj\">proj</a> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const\">const</a> <span class=\"fn\">n</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H3</span> : <span class=\"fn\">∀ (<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H4</span> : <span class=\"fn\">∀ (<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L186-L198","name":"Poly.instCommRing","line":186,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instCommRing\"><span class=\"name\">Poly</span>.<span class=\"name\">instCommRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L180-L184","name":"Poly.instAddGroupWithOne","line":180,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instAddGroupWithOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instAddGroupWithOne\"><span class=\"name\">Poly</span>.<span class=\"name\">instAddGroupWithOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddGroupWithOne\">AddGroupWithOne</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L167-L178","name":"Poly.instAddCommGroup","line":167,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instAddCommGroup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instAddCommGroup\"><span class=\"name\">Poly</span>.<span class=\"name\">instAddCommGroup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L165-L165","name":"Poly.instInhabited","line":165,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instInhabited\"><span class=\"name\">Poly</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L162-L163","name":"Poly.mul_apply","line":162,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.mul_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.mul_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">mul_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L159-L160","name":"Poly.sub_apply","line":159,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.sub_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.sub_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">sub_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L156-L157","name":"Poly.add_apply","line":156,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.add_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.add_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">add_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L153-L154","name":"Poly.neg_apply","line":153,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.neg_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.neg_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">neg_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L150-L151","name":"Poly.one_apply","line":150,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.one_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.one_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">one_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L147-L148","name":"Poly.zero_apply","line":147,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.zero_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.zero_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">zero_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L144-L145","name":"Poly.coe_mul","line":144,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_mul\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L141-L142","name":"Poly.coe_sub","line":141,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_sub\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L138-L139","name":"Poly.coe_add","line":138,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_add\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">⇑<span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L135-L136","name":"Poly.coe_neg","line":135,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_neg\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">⇑<span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L132-L133","name":"Poly.coe_one","line":132,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_one\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const\">const</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L129-L130","name":"Poly.coe_zero","line":129,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.coe_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.coe_zero\"><span class=\"name\">Poly</span>.<span class=\"name\">coe_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const\">const</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L127-L127","name":"Poly.instMul","line":127,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instMul\"><span class=\"name\">Poly</span>.<span class=\"name\">instMul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L125-L125","name":"Poly.instSub","line":125,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instSub\"><span class=\"name\">Poly</span>.<span class=\"name\">instSub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L123-L123","name":"Poly.instAdd","line":123,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instAdd\"><span class=\"name\">Poly</span>.<span class=\"name\">instAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L121-L121","name":"Poly.instNeg","line":121,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instNeg\"><span class=\"name\">Poly</span>.<span class=\"name\">instNeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L119-L119","name":"Poly.instOne","line":119,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instOne\"><span class=\"name\">Poly</span>.<span class=\"name\">instOne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L117-L117","name":"Poly.instZero","line":117,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instZero\"><span class=\"name\">Poly</span>.<span class=\"name\">instZero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L114-L115","name":"Poly.const_apply","line":114,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.const_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">const_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const\">const</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L111-L112","name":"Poly.const","line":111,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.const","doc":"The constant function with value `n : ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.const\"><span class=\"name\">Poly</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L108-L109","name":"Poly.proj_apply","line":108,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.proj_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.proj_apply\"><span class=\"name\">Poly</span>.<span class=\"name\">proj_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly.proj\">proj</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L105-L106","name":"Poly.proj","line":105,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.proj","doc":"The `i`th projection function, `x_i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.proj\"><span class=\"name\">Poly</span>.<span class=\"name\">proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L102-L102","name":"Poly.ext_iff","line":102,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.ext_iff\"><span class=\"name\">Poly</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L101-L103","name":"Poly.ext","line":101,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.ext","doc":"Extensionality for `Poly α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.ext\"><span class=\"name\">Poly</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> → <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L98-L99","name":"Poly.isPoly","line":98,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.isPoly","doc":"The underlying function of a `Poly` is a polynomial "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.isPoly\"><span class=\"name\">Poly</span>.<span class=\"name\">isPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L95-L96","name":"Poly.instFunLike","line":95,"kind":"instance","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly.instFunLike\"><span class=\"name\">Poly</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/Dioph.html#Poly\">Poly</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L88-L89","name":"Poly","line":88,"kind":"def","docLink":"./Mathlib/NumberTheory/Dioph.html#Poly","doc":"The type of multivariate integer polynomials "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#Poly\"><span class=\"name\">Poly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L85-L86","name":"IsPoly.add","line":85,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.add\"><span class=\"name\">IsPoly</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">g</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L82-L83","name":"IsPoly.neg","line":82,"kind":"theorem","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.neg\"><span class=\"name\">IsPoly</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L80-L80","name":"IsPoly.mul","line":80,"kind":"ctor","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.mul\"><span class=\"name\">IsPoly</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">g</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L79-L79","name":"IsPoly.sub","line":79,"kind":"ctor","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.sub\"><span class=\"name\">IsPoly</span>.<span class=\"name\">sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">g</span></span> → <span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L78-L78","name":"IsPoly.const","line":78,"kind":"ctor","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.const\"><span class=\"name\">IsPoly</span>.<span class=\"name\">const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L77-L77","name":"IsPoly.proj","line":77,"kind":"ctor","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly.proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly.proj\"><span class=\"name\">IsPoly</span>.<span class=\"name\">proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\">IsPoly</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/Dioph.lean#L72-L80","name":"IsPoly","line":72,"kind":"inductive","docLink":"./Mathlib/NumberTheory/Dioph.html#IsPoly","doc":"A predicate asserting that a function is a multivariate integer polynomial.\n(We are being a bit lazy here by allowing many representations for multiplication,\nrather than only allowing monomials and addition, but the definition is equivalent\nand this is easier to use.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/Dioph.html#IsPoly\"><span class=\"name\">IsPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"}]}