{"name":"Mathlib.Data.PFunctor.Univariate.M","instances":[{"typeNames":["PFunctor.Approx.CofixA"],"name":"PFunctor.Approx.instInhabitedCofixAOfA","className":"Inhabited"},{"typeNames":["PFunctor.Approx.Path"],"name":"PFunctor.Approx.Path.inhabited","className":"Inhabited"},{"typeNames":["PFunctor.Approx.CofixA"],"name":"PFunctor.Approx.CofixA.instSubsingleton","className":"Subsingleton"},{"typeNames":["PFunctor.M"],"name":"PFunctor.M.inhabited","className":"Inhabited"},{"typeNames":["PFunctor.MIntl"],"name":"PFunctor.MIntl.inhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Data.PFunctor.Univariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L650-L659","name":"PFunctor.M.corec'","line":650,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec'","doc":"corecursor where it is possible to return a fully formed value at any point\nof the computation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">X</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L645-L648","name":"PFunctor.M.corec₁","line":645,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec₁","doc":"corecursor where the state of the computation can be sent downstream\nin the form of a recursive call "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec₁\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">X</span>)</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">X</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L632-L643","name":"PFunctor.M.corec_unique","line":632,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_unique\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">M.corec</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L622-L630","name":"PFunctor.M.bisim_equiv","line":622,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim_equiv\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>),\n        <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L608-L619","name":"PFunctor.M.bisim'","line":608,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>),\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">u</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">x'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L592-L606","name":"PFunctor.M.bisim","line":592,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>),\n        <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L589-L590","name":"PFunctor.M.dest_corec","line":589,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">M.corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">M.corec</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L583-L585","name":"PFunctor.M.corecOn","line":583,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corecOn","doc":"corecursor for `M F` with swapped arguments "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corecOn\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corecOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₀</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L568-L577","name":"PFunctor.M.eq_of_bisim","line":568,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.eq_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.eq_of_bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">eq_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bisim</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> → <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L541-L566","name":"PFunctor.M.nth_of_bisim","line":541,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.nth_of_bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.nth_of_bisim\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">nth_of_bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bisim</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s₁</span> <span class=\"fn\">s₂</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span> →\n    <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>),\n        <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">s₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L539-L539","name":"PFunctor.M.IsBisimulation.tail","line":539,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.tail","doc":"The tails are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.tail\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span>)</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L537-L537","name":"PFunctor.M.IsBisimulation.head","line":537,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.head","doc":"The head of the trees are equal "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">IsBisimulation</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">f'</span>⟩</span>)</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L535-L535","name":"PFunctor.M.IsBisimulation.mk","line":535,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">head</span> : <span class=\"fn\">∀ {<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>} {<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">f'</span>⟩</span>)</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tail</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>} {<span class=\"fn\">f </span><span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span>)</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\">IsBisimulation</a> <span class=\"fn\">R</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L533-L539","name":"PFunctor.M.IsBisimulation","line":533,"kind":"structure","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation","doc":"Bisimulation is the standard proof technique for equality between\ninfinite tree-like structures "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsBisimulation\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsBisimulation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L510-L525","name":"PFunctor.M.ext","line":510,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L471-L504","name":"PFunctor.M.ext_aux","line":471,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext_aux\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">z</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">z</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrec</span> : <span class=\"fn\">∀ (<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">ps</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L461-L469","name":"PFunctor.M.corec_def","line":461,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec_def\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x₀</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">M.corec</a> <span class=\"fn\">f</span> <span class=\"fn\">x₀</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\">M.corec</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x₀</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L457-L459","name":"PFunctor.M.iselect_cons","line":457,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> (<span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">i</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ps</span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L453-L455","name":"PFunctor.M.iselect_nil","line":453,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_nil\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L448-L451","name":"PFunctor.M.isubtree_cons","line":448,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isubtree_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">isubtree</a> (<span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">i</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ps</span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\">isubtree</a> <span class=\"fn\">ps</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L442-L446","name":"PFunctor.M.ichildren_mk","line":442,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ichildren_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">Idx</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren\">ichildren</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Obj.iget\">iget</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L439-L440","name":"PFunctor.M.children_mk","line":439,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">children_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">x</span>⟩</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">x</span>⟩</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children\">children</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L432-L437","name":"PFunctor.M.head_mk","line":432,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L413-L430","name":"PFunctor.M.iselect_eq_default","line":413,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_eq_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect_eq_default\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect_eq_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\">iselect</a> <span class=\"fn\">ps</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L408-L411","name":"PFunctor.M.iselect","line":408,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect","doc":"similar to `isubtree` but returns the data at the end of the path instead\nof the whole subtree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.iselect\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">iselect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L395-L406","name":"PFunctor.M.isubtree","line":395,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree","doc":"follow a path through a value of `M F` and return the subtree\nfound at the end of the path if it is a valid path for that value and\nreturn a default tree "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isubtree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isubtree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L388-L393","name":"PFunctor.M.isPath_cons'","line":388,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isPath_cons'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> (<span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">i</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L381-L386","name":"PFunctor.M.isPath_cons","line":381,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.isPath_cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">isPath_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> (<span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">i</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L378-L379","name":"PFunctor.M.IsPath.cons","line":378,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.cons\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> (<span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">i</span>⟩</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L377-L377","name":"PFunctor.M.IsPath.nil","line":377,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath.nil\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\">IsPath</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L375-L379","name":"PFunctor.M.IsPath","line":375,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath","doc":"`IsPath p x` tells us if `p` is a valid path through `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.IsPath\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">IsPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Approx.Path</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L369-L373","name":"PFunctor.M.casesOn_mk'","line":369,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn_mk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">x</span>⟩</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'\">casesOn'</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L364-L367","name":"PFunctor.M.casesOn_mk","line":364,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn\">casesOn</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L355-L362","name":"PFunctor.M.cases_mk","line":355,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">cases_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases\">M.cases</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L327-L353","name":"PFunctor.M.agree_iff_agree'","line":327,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree_iff_agree'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree_iff_agree'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">agree_iff_agree'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Approx.Agree</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L320-L325","name":"PFunctor.M.agree'_refl","line":320,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree'_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.agree'_refl\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">agree'_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L316-L318","name":"PFunctor.M.approx_mk","line":316,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.approx_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.approx_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">approx_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">Approx.CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">fun (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L311-L314","name":"PFunctor.M.casesOn'","line":311,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'","doc":"destructor for M-types, similar to `casesOn` but also\ngives access directly to the root and subtrees on an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L307-L309","name":"PFunctor.M.casesOn","line":307,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn","doc":"destructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.casesOn\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">casesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L300-L305","name":"PFunctor.M.cases","line":300,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases","doc":"destructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.cases\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Sort</a> w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>) → <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L298-L298","name":"PFunctor.M.mk_inj","line":298,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_inj\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L272-L296","name":"PFunctor.M.mk_dest","line":272,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk_dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L269-L270","name":"PFunctor.M.dest_mk","line":269,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L266-L267","name":"PFunctor.M.Agree'.step","line":266,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.step","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.step\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x' </span><span class=\"fn\">y'</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">x</span>⟩</span></span> → <span class=\"fn\"><span class=\"fn\">y'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\">M.mk</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">y</span>⟩</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">y</span> <span class=\"fn\">i</span>)</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> <span class=\"fn\">x'</span> <span class=\"fn\">y'</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L265-L265","name":"PFunctor.M.Agree'.trivial","line":265,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.trivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'.trivial\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span>.<span class=\"name\">trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\">Agree'</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L262-L267","name":"PFunctor.M.Agree'","line":262,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'","doc":"`Agree' n` relates two trees of type `M F` that\nare the same up to depth `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Agree'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Agree'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L257-L260","name":"PFunctor.M.mk","line":257,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk","doc":"constructor for M-types "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L248-L253","name":"PFunctor.M.Approx.P_mk","line":248,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.P_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.P_mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Approx</span>.<span class=\"name\">P_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">Approx.AllAgree</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk\">Approx.sMk</a> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L243-L246","name":"PFunctor.M.Approx.sMk","line":243,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk","doc":"generates the approximations needed for `M.mk` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.Approx.sMk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">Approx</span>.<span class=\"name\">sMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L237-L239","name":"PFunctor.M.dest","line":237,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest","doc":"unfold an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L234-L235","name":"PFunctor.M.truncate_approx","line":234,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.truncate_approx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.truncate_approx\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">truncate_approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\">Approx.truncate</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L231-L232","name":"PFunctor.M.head'_eq_head","line":231,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head'_eq_head","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head'_eq_head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head'_eq_head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L228-L229","name":"PFunctor.M.head_eq_head'","line":228,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_eq_head'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_eq_head'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_eq_head'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L225-L226","name":"PFunctor.M.head_succ","line":225,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head_succ\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">Approx.head'</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L219-L223","name":"PFunctor.M.ichildren","line":219,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren","doc":"select a subtree using an `i : F.Idx` or return an arbitrary tree if\n`i` designates no subtree of `x` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ichildren\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ichildren</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.Idx\">Idx</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L206-L217","name":"PFunctor.M.children","line":206,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children","doc":"return all the subtrees of the root of a tree `x : M F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.children\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\">head</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L201-L204","name":"PFunctor.M.head","line":201,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head","doc":"given a tree generated by `F`, `head` gives us the first piece of data\nit contains "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.head\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">head</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L196-L199","name":"PFunctor.M.corec","line":196,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec","doc":"Corecursor for the M-type defined by `F`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L186-L190","name":"PFunctor.M.ext'","line":186,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.ext'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">ext'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L181-L182","name":"PFunctor.MIntl.inhabited","line":181,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">MIntl</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L177-L179","name":"PFunctor.M.inhabited","line":177,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">inhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L173-L175","name":"PFunctor.M.default_consistent","line":173,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.default_consistent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.default_consistent\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span>.<span class=\"name\">default_consistent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Approx.Agree</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L169-L171","name":"PFunctor.M","line":169,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M","doc":"For polynomial functor `F`, `M F` is its final coalgebra "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\"><span class=\"name\">PFunctor</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L167-L167","name":"PFunctor.MIntl.consistent","line":167,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.consistent","doc":"Each approximation agrees with the next "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.consistent\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">consistent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">MIntl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">Approx.AllAgree</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\">approx</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L165-L165","name":"PFunctor.MIntl.approx","line":165,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx","doc":"An `n`-th level approximation, for each depth `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.approx\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">approx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">MIntl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L163-L163","name":"PFunctor.MIntl.mk","line":163,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl.mk\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">approx</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">Approx.CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">consistent</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">Approx.AllAgree</a> <span class=\"fn\">approx</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\">MIntl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L160-L167","name":"PFunctor.MIntl","line":160,"kind":"structure","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl","doc":"Internal definition for `M`. It is needed to avoid name clashes\nbetween `M.mk` and `M.casesOn` and the declarations generated for\nthe structure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.MIntl\"><span class=\"name\">PFunctor</span>.<span class=\"name\">MIntl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L132-L154","name":"PFunctor.Approx.head_succ'","line":132,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head_succ'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">head_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Hconsistent</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\">AllAgree</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L129-L130","name":"PFunctor.Approx.CofixA.instSubsingleton","line":129,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.instSubsingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.instSubsingleton\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">instSubsingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L124-L125","name":"PFunctor.Approx.Path.inhabited","line":124,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path.inhabited\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Path</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\">Path</a> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L120-L122","name":"PFunctor.Approx.Path","line":120,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path","doc":"`Path F` provides indices to access internal nodes in `Corec F` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Path\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Path</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L112-L118","name":"PFunctor.Approx.P_corec","line":112,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.P_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.P_corec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">P_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\">sCorec</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\">sCorec</a> <span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L106-L110","name":"PFunctor.Approx.sCorec","line":106,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec","doc":"`sCorec f i n` creates an approximation of height `n`\nof the final coalgebra of `f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.sCorec\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">sCorec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">F</span></span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L87-L101","name":"PFunctor.Approx.truncate_eq_of_agree","line":87,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate_eq_of_agree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate_eq_of_agree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">truncate_eq_of_agree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\">truncate</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L82-L85","name":"PFunctor.Approx.truncate","line":82,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate","doc":"`truncate a` turns `a` into a more limited approximation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.truncate\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">truncate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L77-L80","name":"PFunctor.Approx.agree_children","line":77,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_children","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_children\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">agree_children</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> (<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">x</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">y</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">children'</a> <span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">children'</a> <span class=\"fn\">y</span> <span class=\"fn\">j</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L75-L75","name":"PFunctor.Approx.agree_trival","line":75,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trival","doc":"**Alias** of `PFunctor.Approx.agree_trivial`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trival\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">agree_trival</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L72-L73","name":"PFunctor.Approx.agree_trivial","line":72,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.agree_trivial\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">agree_trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L66-L70","name":"PFunctor.Approx.AllAgree","line":66,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree","doc":"Given an infinite series of approximations `approx`,\n`AllAgree approx` states that they are all consistent with each other.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.AllAgree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">AllAgree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L63-L64","name":"PFunctor.Approx.Agree.intro","line":63,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.intro\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">x'</span> <span class=\"fn\">i</span>)</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">CofixA.intro</a> <span class=\"fn\">a</span> <span class=\"fn\">x'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L62-L62","name":"PFunctor.Approx.Agree.continu","line":62,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.continu","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree.continu\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span>.<span class=\"name\">continu</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\">Agree</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L59-L64","name":"PFunctor.Approx.Agree","line":59,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree","doc":"Relation between two approximations of the cofix of a pfunctor\nthat state they both contain the same data until one of them is truncated "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.Agree\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">Agree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L56-L57","name":"PFunctor.Approx.approx_eta","line":56,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.approx_eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.approx_eta\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">approx_eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\">CofixA.intro</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\">children'</a> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L52-L54","name":"PFunctor.Approx.children'","line":52,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'","doc":"for a non-trivial approximation, return all the subtrees of the root "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.children'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">children'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\">head'</a> <span class=\"fn\">x</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L46-L50","name":"PFunctor.Approx.head'","line":46,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'","doc":"The label of the root of the tree for a non-trivial\napproximation of the cofix of a pfunctor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.head'\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">head'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> → <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L41-L42","name":"PFunctor.Approx.cofixA_eq_zero","line":41,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.cofixA_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.cofixA_eq_zero\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">cofixA_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L38-L39","name":"PFunctor.Approx.instInhabitedCofixAOfA","line":38,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.instInhabitedCofixAOfA","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.instInhabitedCofixAOfA\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">instInhabitedCofixAOfA</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L33-L36","name":"PFunctor.Approx.CofixA.default","line":33,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.default","doc":"default inhabitant of `CofixA` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.default\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L31-L31","name":"PFunctor.Approx.CofixA.intro","line":31,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.intro\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L30-L30","name":"PFunctor.Approx.CofixA.continue","line":30,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.continue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA.continue\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span>.<span class=\"name\">continue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\">CofixA</a> <span class=\"fn\">F</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Univariate/M.lean#L28-L31","name":"PFunctor.Approx.CofixA","line":28,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA","doc":"`CofixA F n` is an `n` level approximation of an M-type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.Approx.CofixA\"><span class=\"name\">PFunctor</span>.<span class=\"name\">Approx</span>.<span class=\"name\">CofixA</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./foundational_types.html\">Type</a> u</span></div></div>"}]}