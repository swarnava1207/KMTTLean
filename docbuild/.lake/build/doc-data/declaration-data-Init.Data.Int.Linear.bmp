{"name":"Init.Data.Int.Linear","instances":[{"typeNames":["Int.Linear.Expr"],"name":"Int.Linear.instInhabitedExpr","className":"Inhabited"},{"typeNames":["Int.Linear.Expr"],"name":"Int.Linear.instBEqExpr","className":"BEq"},{"typeNames":["Int.Linear.Poly"],"name":"Int.Linear.instBEqPoly","className":"BEq"},{"typeNames":["Int.Linear.Poly"],"name":"Int.Linear.instLawfulBEqPoly","className":"LawfulBEq"}],"imports":["Init.ByCases","Init.Data.Prod","Init.Data.Int.Lemmas","Init.Data.Int.LemmasAux","Init.Data.Int.DivMod.Bootstrap","Init.Data.Int.Cooper","Init.Data.Int.Gcd","Init.Data.RArray","Init.Data.AC"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1837-L1838","name":"Int.not_gt_eq","line":1837,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.not_gt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_gt_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_gt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1832-L1835","name":"Int.not_lt_eq","line":1832,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.not_lt_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_lt_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_lt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1829-L1830","name":"Int.not_ge_eq","line":1829,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.not_ge_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_ge_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_ge_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1824-L1827","name":"Int.not_le_eq","line":1824,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.not_le_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_le_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_le_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1812-L1820","name":"Int.Linear.not_le_of_le","line":1812,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert\">not_le_of_le_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1809-L1810","name":"Int.Linear.not_le_of_le_cert","line":1809,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_of_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1802-L1807","name":"Int.Linear.le_of_le","line":1802,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert\">le_of_le_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">q</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1799-L1800","name":"Int.Linear.le_of_le_cert","line":1799,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1793-L1797","name":"Int.Linear.of_not_dvd","line":1793,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_not_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_not_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_not_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">b</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1787-L1791","name":"Int.Linear.not_eq_norm_expr","line":1787,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_eq_norm_expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_eq_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_eq_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1783-L1785","name":"Int.Linear.eq_norm_expr","line":1783,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1779-L1781","name":"Int.Linear.dvd_norm_expr","line":1779,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1770-L1777","name":"Int.Linear.not_le_norm_expr","line":1770,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert\">not_le_norm_expr_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1767-L1768","name":"Int.Linear.not_le_norm_expr_cert","line":1767,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_norm_expr_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1763-L1765","name":"Int.Linear.le_norm_expr","line":1763,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_norm_expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1743-L1761","name":"Int.Linear.dvd_neg_le_tight","line":1743,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_neg_le_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert\">dvd_neg_le_tight_cert</a> <span class=\"fn\">d</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1739-L1741","name":"Int.Linear.Poly.mul_minus_one_getConst_eq","line":1739,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_minus_one_getConst_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_minus_one_getConst_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_minus_one_getConst_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1731-L1737","name":"Int.Linear.dvd_neg_le_tight_cert","line":1731,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_neg_le_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1717-L1729","name":"Int.Linear.dvd_le_tight","line":1717,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_le_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert\">dvd_le_tight_cert</a> <span class=\"fn\">d</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1711-L1715","name":"Int.Linear.dvd_le_tight_cert","line":1711,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_le_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1661-L1682","name":"Int.Linear.natCast_sub","line":1661,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.natCast_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.natCast_sub\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">natCast_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1658-L1659","name":"Int.Linear.natCast_nonneg","line":1658,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.natCast_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.natCast_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">natCast_nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1632-L1656","name":"Int.Linear.emod_le","line":1632,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert\">emod_le_cert</a> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1629-L1630","name":"Int.Linear.emod_le_cert","line":1629,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1623-L1627","name":"Int.Linear.emod_nonneg","line":1623,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1618-L1621","name":"Int.Linear.ediv_emod","line":1618,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.ediv_emod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.ediv_emod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">ediv_emod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1602-L1616","name":"Int.Linear.cooper_unsat","line":1602,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert\">cooper_unsat_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1590-L1600","name":"Int.Linear.cooper_unsat_cert","line":1590,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_unsat_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1587-L1588","name":"Int.Linear.Poly.casesOnNum","line":1587,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnNum\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">casesOnNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1584-L1585","name":"Int.Linear.Poly.casesOnAdd","line":1584,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnAdd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">casesOnAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1504-L1507","name":"Int.Linear.cooper_right_split_dvd","line":1504,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert\">cooper_right_split_dvd_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p'</span> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1501-L1502","name":"Int.Linear.cooper_right_split_dvd_cert","line":1501,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_dvd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1496-L1499","name":"Int.Linear.cooper_right_split_ineq","line":1496,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert\">cooper_right_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1489-L1494","name":"Int.Linear.cooper_right_split_ineq_cert","line":1489,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1471-L1487","name":"Int.Linear.cooper_right","line":1471,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert\">cooper_right_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1462-L1469","name":"Int.Linear.cooper_right_split","line":1462,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1457-L1460","name":"Int.Linear.cooper_right_cert","line":1457,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1436-L1439","name":"Int.Linear.cooper_dvd_right_split_dvd2","line":1436,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert\">cooper_dvd_right_split_dvd2_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span> <span class=\"fn\">d'</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">d'</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1428-L1434","name":"Int.Linear.cooper_dvd_right_split_dvd2_cert","line":1428,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd2_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1423-L1426","name":"Int.Linear.cooper_dvd_right_split_dvd1","line":1423,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert\">cooper_dvd_right_split_dvd1_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p'</span> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1420-L1421","name":"Int.Linear.cooper_dvd_right_split_dvd1_cert","line":1420,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1415-L1418","name":"Int.Linear.cooper_dvd_right_split_ineq","line":1415,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert\">cooper_dvd_right_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1408-L1413","name":"Int.Linear.cooper_dvd_right_split_ineq_cert","line":1408,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1389-L1406","name":"Int.Linear.cooper_dvd_right","line":1389,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert\">cooper_dvd_right_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1376-L1387","name":"Int.Linear.cooper_dvd_right_split","line":1376,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1368-L1374","name":"Int.Linear.cooper_dvd_right_cert","line":1368,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1338-L1341","name":"Int.Linear.cooper_left_split_dvd","line":1338,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert\">cooper_left_split_dvd_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p'</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1335-L1336","name":"Int.Linear.cooper_left_split_dvd_cert","line":1335,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_dvd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1330-L1333","name":"Int.Linear.cooper_left_split_ineq","line":1330,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert\">cooper_left_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1323-L1328","name":"Int.Linear.cooper_left_split_ineq_cert","line":1323,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1305-L1321","name":"Int.Linear.cooper_left","line":1305,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert\">cooper_left_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1296-L1303","name":"Int.Linear.cooper_left_split","line":1296,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1290-L1294","name":"Int.Linear.cooper_left_cert","line":1290,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1269-L1272","name":"Int.Linear.cooper_dvd_left_split_dvd2","line":1269,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert\">cooper_dvd_left_split_dvd2_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span> <span class=\"fn\">d'</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">d'</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1261-L1267","name":"Int.Linear.cooper_dvd_left_split_dvd2_cert","line":1261,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd2_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1256-L1259","name":"Int.Linear.cooper_dvd_left_split_dvd1","line":1256,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert\">cooper_dvd_left_split_dvd1_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p'</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1253-L1254","name":"Int.Linear.cooper_dvd_left_split_dvd1_cert","line":1253,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1248-L1251","name":"Int.Linear.cooper_dvd_left_split_ineq","line":1248,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert\">cooper_dvd_left_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1241-L1246","name":"Int.Linear.cooper_dvd_left_split_ineq_cert","line":1241,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1223-L1239","name":"Int.Linear.cooper_dvd_left","line":1223,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert\">cooper_dvd_left_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span>)</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1202-L1213","name":"Int.Linear.cooper_dvd_left_split","line":1202,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1197-L1200","name":"Int.Linear.Poly.tail","line":1197,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.tail\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1189-L1195","name":"Int.Linear.cooper_dvd_left_cert","line":1189,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1135-L1138","name":"Int.Linear.orOver_cases","line":1135,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_cases\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type\">OrOver_cases_type</a> <span class=\"fn\">n</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1130-L1133","name":"Int.Linear.OrOver_cases_type","line":1130,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">OrOver_cases_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1123-L1128","name":"Int.Linear.orOver_resolve","line":1123,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_resolve","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_resolve\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1121-L1121","name":"Int.Linear.orOver_one","line":1121,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_one\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1116-L1119","name":"Int.Linear.OrOver","line":1116,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.OrOver","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">OrOver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1111-L1114","name":"Int.Linear.diseq_split_resolve","line":1111,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_resolve","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_resolve\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split_resolve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1102-L1109","name":"Int.Linear.diseq_split","line":1102,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1098-L1100","name":"Int.Linear.diseq_split_cert","line":1098,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1089-L1096","name":"Int.Linear.le_of_le_diseq","line":1089,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert\">le_of_le_diseq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1084-L1087","name":"Int.Linear.le_of_le_diseq_cert","line":1084,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_diseq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1077-L1082","name":"Int.Linear.eq_of_le_ge","line":1077,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_le_ge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert\">eq_of_le_ge_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1074-L1075","name":"Int.Linear.eq_of_le_ge_cert","line":1074,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_le_ge_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1067-L1072","name":"Int.Linear.diseq_of_core","line":1067,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_of_core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_of_core\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_of_core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\">eq_of_core_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1060-L1065","name":"Int.Linear.eq_diseq_subst","line":1060,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_diseq_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_diseq_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_diseq_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert\">diseq_eq_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1055-L1058","name":"Int.Linear.diseq_eq_subst_cert","line":1055,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_eq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1052-L1053","name":"Int.Linear.diseq_unsat","line":1052,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq\">isUnsatDiseq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1049-L1050","name":"Int.Linear.diseq_neg","line":1049,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p'</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1045-L1047","name":"Int.Linear.diseq_coeff","line":1045,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\">eq_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1039-L1043","name":"Int.Linear.diseq_norm","line":1039,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1034-L1037","name":"Int.Linear.Poly.isUnsatDiseq","line":1034,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1028-L1032","name":"Int.Linear.eq_of_core","line":1028,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\">eq_of_core_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1025-L1026","name":"Int.Linear.eq_of_core_cert","line":1025,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_core_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1014-L1023","name":"Int.Linear.eq_le_subst_nonpos","line":1014,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonpos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert\">eq_le_subst_nonpos_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L1009-L1012","name":"Int.Linear.eq_le_subst_nonpos_cert","line":1009,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonpos_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L999-L1007","name":"Int.Linear.eq_le_subst_nonneg","line":999,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert\">eq_le_subst_nonneg_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L994-L997","name":"Int.Linear.eq_le_subst_nonneg_cert","line":994,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonneg_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L987-L992","name":"Int.Linear.eq_eq_subst","line":987,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert\">eq_eq_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L982-L985","name":"Int.Linear.eq_eq_subst_cert","line":982,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L961-L980","name":"Int.Linear.eq_dvd_subst","line":961,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_dvd_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₃</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert\">eq_dvd_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d₃</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d₃</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L953-L959","name":"Int.Linear.eq_dvd_subst_cert","line":953,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_dvd_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₃</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L931-L940","name":"Int.Linear.dvd_of_eq","line":931,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_of_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert\">dvd_of_eq_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L927-L929","name":"Int.Linear.dvd_of_eq_cert","line":927,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_of_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L905-L908","name":"Int.Linear.Poly.coeff","line":905,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L899-L903","name":"Int.Linear.eq_unsat_coeff","line":899,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert\">eq_unsat_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L896-L897","name":"Int.Linear.eq_unsat_coeff_cert","line":896,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L893-L894","name":"Int.Linear.eq_unsat","line":893,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq\">isUnsatEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L889-L891","name":"Int.Linear.eq_coeff","line":889,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\">eq_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L886-L887","name":"Int.Linear.eq_coeff_cert","line":886,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L880-L884","name":"Int.Linear.eq_norm","line":880,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L877-L878","name":"Int.Linear.le_unsat","line":877,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\">isUnsatLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L863-L875","name":"Int.Linear.le_combine_coeff","line":863,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert\">le_combine_coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L857-L861","name":"Int.Linear.le_combine_coeff_cert","line":857,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L847-L855","name":"Int.Linear.le_combine","line":847,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert\">le_combine_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L842-L845","name":"Int.Linear.le_combine_cert","line":842,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L837-L840","name":"Int.Linear.Poly.leadCoeff","line":837,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.leadCoeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.leadCoeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">leadCoeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L830-L835","name":"Int.Linear.le_neg","line":830,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert\">le_neg_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L827-L828","name":"Int.Linear.le_neg_cert","line":827,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_neg_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L822-L825","name":"Int.Linear.le_coeff","line":822,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert\">le_coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L819-L820","name":"Int.Linear.le_coeff_cert","line":819,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L813-L817","name":"Int.Linear.le_norm","line":813,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L807-L811","name":"Int.Linear.dvd_norm","line":807,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L796-L805","name":"Int.Linear.dvd_solve_elim","line":796,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert\">dvd_solve_elim_cert</a> <span class=\"fn\">d₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L788-L794","name":"Int.Linear.dvd_solve_elim_cert","line":788,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_elim_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L776-L786","name":"Int.Linear.dvd_solve_combine","line":776,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert\">dvd_solve_combine_cert</a> <span class=\"fn\">d₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d</span> <span class=\"fn\">p</span> <span class=\"fn\">g</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L767-L774","name":"Int.Linear.dvd_solve_combine_cert","line":767,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L710-L716","name":"Int.Linear.dvd_elim","line":710,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert\">dvd_elim_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L705-L708","name":"Int.Linear.dvd_elim_cert","line":705,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_elim_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L685-L691","name":"Int.Linear.dvd_coeff","line":685,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert\">dvd_coeff_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L677-L683","name":"Int.Linear.norm_dvd_gcd","line":677,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert\">norm_dvd_gcd_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">e₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e₁</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L674-L675","name":"Int.Linear.norm_dvd_gcd_cert","line":674,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd_gcd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L671-L672","name":"Int.Linear.dvd_coeff_cert","line":671,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L667-L669","name":"Int.Linear.dvd_eq_false","line":667,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\">Poly.isUnsatDvd</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L664-L665","name":"Int.Linear.norm_dvd","line":664,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L647-L650","name":"Int.Linear.dvd_unsat","line":647,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_unsat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\">Poly.isUnsatDvd</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L634-L635","name":"Int.Linear.Poly.isUnsatDvd","line":634,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatDvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L628-L632","name":"Int.Linear.Poly.gcd_dvd_const","line":628,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcd_dvd_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcd_dvd_const\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcd_dvd_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs\">gcdCoeffs</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L624-L626","name":"Int.Linear.Poly.gcdCoeffs","line":624,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcdCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L602-L608","name":"Int.Linear.eq_eq_false_of_divCoeff","line":602,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false_of_divCoeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false_of_divCoeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_false_of_divCoeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert\">unsatEqDivCoeffCert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L598-L600","name":"Int.Linear.unsatEqDivCoeffCert","line":598,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">unsatEqDivCoeffCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L560-L571","name":"Int.Linear.le_eq_true","line":560,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_eq_true\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe\">isValidLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L544-L558","name":"Int.Linear.le_eq_false","line":544,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\">isUnsatLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L538-L541","name":"Int.Linear.Poly.isValidLe","line":538,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isValidLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L533-L536","name":"Int.Linear.Poly.isUnsatLe","line":533,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L524-L531","name":"Int.Linear.eq_eq_true","line":524,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_true\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq\">isValidEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L515-L522","name":"Int.Linear.eq_eq_false","line":515,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq\">isUnsatEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L510-L513","name":"Int.Linear.Poly.isValidEq","line":510,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isValidEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L505-L508","name":"Int.Linear.Poly.isUnsatEq","line":505,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L499-L503","name":"Int.Linear.norm_le_coeff_tight","line":499,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert\">norm_le_coeff_tight_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L495-L497","name":"Int.Linear.norm_le_coeff_tight_cert","line":495,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L454-L458","name":"Int.Linear.norm_le_coeff","line":454,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\">norm_eq_coeff_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L435-L439","name":"Int.Linear.norm_eq_coeff","line":435,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\">norm_eq_coeff_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L432-L433","name":"Int.Linear.norm_eq_coeff_cert","line":432,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L429-L430","name":"Int.Linear.norm_eq_coeff'","line":429,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L417-L422","name":"Int.Linear.norm_eq_var_const","line":417,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert\">norm_eq_var_const_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">x</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L414-L415","name":"Int.Linear.norm_eq_var_const_cert","line":414,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_const_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L407-L412","name":"Int.Linear.norm_eq_var","line":407,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert\">norm_eq_var_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">y</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L404-L405","name":"Int.Linear.norm_eq_var_cert","line":404,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L397-L402","name":"Int.Linear.norm_le","line":397,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L392-L395","name":"Int.Linear.norm_eq","line":392,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L389-L390","name":"Int.Linear.norm_eq_cert","line":389,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L384-L387","name":"Int.Linear.Expr.eq_of_norm_eq","line":384,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.eq_of_norm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.eq_of_norm_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_norm_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">p</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L371-L380","name":"Int.Linear.instLawfulBEqPoly","line":371,"kind":"instance","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instLawfulBEqPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instLawfulBEqPoly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instLawfulBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L366-L367","name":"Int.Linear.Expr.denote_norm","line":366,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L338-L364","name":"Int.Linear.Expr.denote_toPoly'_go","line":338,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_toPoly'_go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_toPoly'_go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPoly'_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go\">toPoly'.go</a> <span class=\"fn\">k</span> <span class=\"fn\">e</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L327-L334","name":"Int.Linear.Poly.denote_div_eq_of_divCoeffs","line":327,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divCoeffs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_div_eq_of_divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs\">divCoeffs</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\">div</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L315-L323","name":"Int.Linear.Poly.denote_div_eq_of_divAll","line":315,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divAll","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divAll\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_div_eq_of_divAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll\">divAll</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\">div</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L309-L309","name":"Int.Linear.neg_fold","line":309,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.neg_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.neg_fold\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">neg_fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/Basic.html#Int.neg\">neg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L308-L308","name":"Int.Linear.sub_fold","line":308,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.sub_fold","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.sub_fold\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">sub_fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/Basic.html#Int.sub\">sub</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L303-L304","name":"Int.Linear.Poly.denote_combine","line":303,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L298-L301","name":"Int.Linear.Poly.denote_combine'","line":298,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'\">combine'</a> <span class=\"fn\">fuel</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L293-L294","name":"Int.Linear.Poly.denote_append","line":293,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_append\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.append\">append</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L288-L289","name":"Int.Linear.Poly.denote_norm","line":288,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L280-L284","name":"Int.Linear.Poly.denote_insert","line":280,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_insert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L275-L276","name":"Int.Linear.Poly.denote_addConst","line":275,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_addConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_addConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L264-L270","name":"Int.Linear.Poly.denote_mul","line":264,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L258-L262","name":"Int.Linear.Poly.mul","line":258,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L250-L256","name":"Int.Linear.Poly.mul'","line":250,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul'","doc":"`p.mul k` multiplies all coefficients and constant of the polynomial `p` by `k`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L243-L248","name":"Int.Linear.Poly.divCoeffs","line":243,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs","doc":"Returns `true` if `k` divides all coefficients of the given linear polynomial.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L235-L241","name":"Int.Linear.Poly.divAll","line":235,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll","doc":"Returns `true` if `k` divides all coefficients and the constant of the given\nlinear polynomial.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">divAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L224-L233","name":"Int.Linear.Poly.div","line":224,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.div","doc":"`p.div k` divides all coefficients of the polynomial `p` by `k`, but\nrounds up the constant using `cdiv`.\nNotes:\n- We only use this function with `k`s that divides all coefficients.\n- We use `cdiv` for the constant to implement the inequality tightening rule.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L219-L222","name":"Int.Linear.Poly.getConst","line":219,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst","doc":"Returns the constant of the given linear polynomial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">getConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L201-L217","name":"Int.Linear.cdiv_eq_div_of_divides","line":201,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv_eq_div_of_divides","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv_eq_div_of_divides\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv_eq_div_of_divides</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\">cdiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L192-L196","name":"Int.Linear.cmod_eq_zero_iff_emod_eq_zero","line":192,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_eq_zero_iff_emod_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_eq_zero_iff_emod_eq_zero\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_eq_zero_iff_emod_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L188-L190","name":"Int.Linear.cmod_nonpos","line":188,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_nonpos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_nonpos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L185-L186","name":"Int.Linear.cmod_gt_of_pos","line":185,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_gt_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_gt_of_pos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_gt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L177-L183","name":"Int.Linear.cdiv_add_cmod","line":177,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv_add_cmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv_add_cmod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv_add_cmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\">cdiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L163-L175","name":"Int.Linear.cmod","line":163,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod","doc":"Returns the ceiling-compatible remainder of the division `a / b`.\nThis function ensures that the remainder is consistent with `cdiv`, meaning:\n```\na = b * cdiv a b + cmod a b\n```\nSee theorem `cdiv_add_cmod`. We also have\n```\n-b < cmod a b ≤ 0\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L154-L161","name":"Int.Linear.cdiv","line":154,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv","doc":"Returns the ceiling of the division `a / b`. That is, the result is equivalent to `⌈a / b⌉`.\nExamples:\n- `cdiv 7 3` returns `3`\n- `cdiv (-7) 3` returns `-2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L150-L152","name":"Int.Linear.Expr.norm","line":150,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm","doc":"Converts the given expression into a polynomial, and then normalizes it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L141-L148","name":"Int.Linear.Expr.toPoly'.go","line":141,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L137-L148","name":"Int.Linear.Expr.toPoly'","line":137,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'","doc":"Converts the given expression into a polynomial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L134-L135","name":"Int.Linear.Poly.combine","line":134,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L115-L132","name":"Int.Linear.Poly.combine'","line":115,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L110-L113","name":"Int.Linear.Poly.append","line":110,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.append\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L104-L108","name":"Int.Linear.Poly.norm","line":104,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm","doc":"Normalizes the given polynomial by fusing monomial and constants. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L90-L102","name":"Int.Linear.Poly.insert","line":90,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L85-L88","name":"Int.Linear.Poly.addConst","line":85,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L82-L83","name":"Int.Linear.Poly.denote'_add","line":82,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L79-L80","name":"Int.Linear.Poly.denote'_eq_denote","line":79,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_eq_denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_eq_denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_eq_denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L73-L77","name":"Int.Linear.Poly.denote'_go_eq_denote","line":73,"kind":"theorem","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_go_eq_denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_go_eq_denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_go_eq_denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go\">denote'.go</a> <span class=\"fn\">ctx</span> <span class=\"fn\">r</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L66-L71","name":"Int.Linear.Poly.denote'.go","line":66,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L56-L71","name":"Int.Linear.Poly.denote'","line":56,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'","doc":"Similar to `Poly.denote`, but produces a denotation better for `simp +arith`.\nRemark: we used to convert `Poly` back into `Expr` to achieve that.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L51-L54","name":"Int.Linear.Poly.denote","line":51,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L49-L49","name":"Int.Linear.instBEqPoly","line":49,"kind":"instance","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L48-L48","name":"Int.Linear.Poly.add","line":48,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L47-L47","name":"Int.Linear.Poly.num","line":47,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.num\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L46-L49","name":"Int.Linear.Poly","line":46,"kind":"inductive","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L37-L44","name":"Int.Linear.Expr.denote","line":37,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L35-L35","name":"Int.Linear.instBEqExpr","line":35,"kind":"instance","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L35-L35","name":"Int.Linear.instInhabitedExpr","line":35,"kind":"instance","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L34-L34","name":"Int.Linear.Expr.mulR","line":34,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulR\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mulR</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L33-L33","name":"Int.Linear.Expr.mulL","line":33,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulL\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mulL</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L32-L32","name":"Int.Linear.Expr.neg","line":32,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L31-L31","name":"Int.Linear.Expr.sub","line":31,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L30-L30","name":"Int.Linear.Expr.add","line":30,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L29-L29","name":"Int.Linear.Expr.var","line":29,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L28-L28","name":"Int.Linear.Expr.num","line":28,"kind":"ctor","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.num","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.num\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L27-L35","name":"Int.Linear.Expr","line":27,"kind":"inductive","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L24-L25","name":"Int.Linear.Var.denote","line":24,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Var.denote","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L22-L22","name":"Int.Linear.Context","line":22,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Int/Linear.lean#L21-L21","name":"Int.Linear.Var","line":21,"kind":"def","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Var","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}