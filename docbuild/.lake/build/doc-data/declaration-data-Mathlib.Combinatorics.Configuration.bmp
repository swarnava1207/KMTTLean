{"name":"Mathlib.Combinatorics.Configuration","instances":[{"typeNames":["Configuration.Dual"],"name":"Configuration.instInhabitedDual","className":"Inhabited"},{"typeNames":["Configuration.Dual"],"name":"Configuration.instFiniteDual","className":"Finite"},{"typeNames":["Configuration.Dual"],"name":"Configuration.instFintypeDual","className":"Fintype"},{"typeNames":["Configuration.Dual","Configuration.Dual"],"name":"Configuration.instMembershipDual","className":"Membership"},{"typeNames":["Configuration.Dual","Configuration.Dual"],"name":"Configuration.Dual.Nondegenerate","className":"Configuration.Nondegenerate"},{"typeNames":["Configuration.Dual","Configuration.Dual"],"name":"Configuration.Dual.hasLines","className":"Configuration.HasLines"},{"typeNames":["Configuration.Dual","Configuration.Dual"],"name":"Configuration.Dual.hasPoints","className":"Configuration.HasPoints"},{"typeNames":["Configuration.Dual","Configuration.Dual"],"name":"Configuration.ProjectivePlane.instDual","className":"Configuration.ProjectivePlane"},{"typeNames":["Projectivization","Projectivization"],"name":"Configuration.ofField.instMembershipProjectivizationForallFinOfNatNat","className":"Membership"},{"typeNames":["Projectivization","Projectivization"],"name":"Configuration.ofField.instNondegenerateProjectivizationForallFinOfNatNat","className":"Configuration.Nondegenerate"},{"typeNames":["Projectivization","Projectivization"],"name":"Configuration.ofField.instProjectivePlaneProjectivizationForallFinOfNatNatOfDecidableEq","className":"Configuration.ProjectivePlane"}],"imports":["Init","Mathlib.Combinatorics.Hall.Basic","Mathlib.Data.Matrix.Rank","Mathlib.LinearAlgebra.Projectivization.Constructions"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L507-L518","name":"Configuration.ofField.instProjectivePlaneProjectivizationForallFinOfNatNatOfDecidableEq","line":507,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instProjectivePlaneProjectivizationForallFinOfNatNatOfDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instProjectivePlaneProjectivizationForallFinOfNatNatOfDecidableEq\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">instProjectivePlaneProjectivizationForallFinOfNatNatOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L502-L505","name":"Configuration.ofField.instNondegenerateProjectivizationForallFinOfNatNat","line":502,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instNondegenerateProjectivizationForallFinOfNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instNondegenerateProjectivizationForallFinOfNatNat\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">instNondegenerateProjectivizationForallFinOfNatNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L492-L500","name":"Configuration.ofField.eq_or_eq_of_orthogonal","line":492,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.eq_or_eq_of_orthogonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.eq_or_eq_of_orthogonal\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">eq_or_eq_of_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hac</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L478-L490","name":"Configuration.ofField.crossProduct_eq_zero_of_dotProduct_eq_zero","line":478,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.crossProduct_eq_zero_of_dotProduct_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.crossProduct_eq_zero_of_dotProduct_eq_zero\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">crossProduct_eq_zero_of_dotProduct_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hac</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Matrix/Mul.html#dotProduct\">⬝ᵥ</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Matrix/Mul.html#dotProduct\">⬝ᵥ</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">had</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Data/Matrix/Mul.html#dotProduct\">⬝ᵥ</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbd</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Matrix/Mul.html#dotProduct\">⬝ᵥ</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/CrossProduct.html#crossProduct\">crossProduct</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L474-L475","name":"Configuration.ofField.mem_iff","line":474,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.mem_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.mem_iff\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">mem_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/LinearAlgebra/Projectivization/Constructions.html#Projectivization.orthogonal\">orthogonal</a></span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L471-L472","name":"Configuration.ofField.instMembershipProjectivizationForallFinOfNatNat","line":471,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instMembershipProjectivizationForallFinOfNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ofField.instMembershipProjectivizationForallFinOfNatNat\"><span class=\"name\">Configuration</span>.<span class=\"name\">ofField</span>.<span class=\"name\">instMembershipProjectivizationForallFinOfNatNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Projectivization/Basic.html#Projectivization\">Projectivization</a> <span class=\"fn\">K</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">3</span></span> → <span class=\"fn\">K</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L458-L459","name":"Configuration.ProjectivePlane.card_lines","line":458,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_lines","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_lines\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">card_lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L430-L456","name":"Configuration.ProjectivePlane.card_points","line":430,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_points","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_points\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">card_points</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L425-L426","name":"Configuration.ProjectivePlane.two_lt_pointCount","line":425,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.two_lt_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.two_lt_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">two_lt_pointCount</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L420-L421","name":"Configuration.ProjectivePlane.two_lt_lineCount","line":420,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.two_lt_lineCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.two_lt_lineCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">two_lt_lineCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L407-L416","name":"Configuration.ProjectivePlane.one_lt_order","line":407,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.one_lt_order","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.one_lt_order\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">one_lt_order</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L402-L403","name":"Configuration.ProjectivePlane.pointCount_eq","line":402,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.pointCount_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.pointCount_eq\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">pointCount_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L392-L398","name":"Configuration.ProjectivePlane.lineCount_eq","line":392,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">lineCount_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L387-L388","name":"Configuration.ProjectivePlane.Dual.order","line":387,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.Dual.order","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.Dual.order\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">Dual</span>.<span class=\"name\">order</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">ProjectivePlane.order</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\">ProjectivePlane.order</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L377-L383","name":"Configuration.ProjectivePlane.lineCount_eq_pointCount","line":377,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">lineCount_eq_pointCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L371-L373","name":"Configuration.ProjectivePlane.pointCount_eq_pointCount","line":371,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.pointCount_eq_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.pointCount_eq_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">pointCount_eq_pointCount</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L350-L367","name":"Configuration.ProjectivePlane.lineCount_eq_lineCount","line":350,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq_lineCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.lineCount_eq_lineCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">lineCount_eq_lineCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L345-L346","name":"Configuration.ProjectivePlane.card_points_eq_card_lines","line":345,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_points_eq_card_lines","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.card_points_eq_card_lines\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">card_points_eq_card_lines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L340-L343","name":"Configuration.ProjectivePlane.order","line":340,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order","doc":"The order of a projective plane is one less than the number of lines through an arbitrary point.\nEquivalently, it is one less than the number of points on an arbitrary line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.order\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">order</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L334-L338","name":"Configuration.ProjectivePlane.instDual","line":334,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.instDual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.instDual\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">instDual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L326-L326","name":"Configuration.ProjectivePlane.exists_config","line":326,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.exists_config","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.exists_config\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">exists_config</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p₁</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">p₃</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">l₁</span> : <span class=\"fn\">L</span>) (<span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>) (<span class=\"fn\">l₃</span> : <span class=\"fn\">L</span>),\n  <span class=\"fn\"><span class=\"fn\">p₁</span> ∉ <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₁</span> ∉ <span class=\"fn\">l₃</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₂</span> ∉ <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₃</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₃</span> ∉ <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₃</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₃</span> ∉ <span class=\"fn\">l₃</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L325-L325","name":"Configuration.ProjectivePlane.mkLine","line":325,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine","doc":"Line through two points "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">mkLine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span> → <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L325-L325","name":"Configuration.ProjectivePlane.mkLine_ax","line":325,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine_ax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine_ax\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">mkLine_ax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine\">mkLine</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mkLine\">mkLine</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L325-L325","name":"Configuration.ProjectivePlane.mk","line":325,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.mk\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toHasPoints</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLine</span> : <span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>} → <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span> → <span class=\"fn\">L</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLine_ax</span> : <span class=\"fn\">∀ {<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>} (<span class=\"fn\">h</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span>), <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">mkLine</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">mkLine</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exists_config</span> :\n  <span class=\"fn\">∃ (<span class=\"fn\">p₁</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">p₃</span> : <span class=\"fn\">P</span>) (<span class=\"fn\">l₁</span> : <span class=\"fn\">L</span>) (<span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>) (<span class=\"fn\">l₃</span> : <span class=\"fn\">L</span>),\n    <span class=\"fn\"><span class=\"fn\">p₁</span> ∉ <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₁</span> ∉ <span class=\"fn\">l₃</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₂</span> ∉ <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₃</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₃</span> ∉ <span class=\"fn\">l₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₃</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p₃</span> ∉ <span class=\"fn\">l₃</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L325-L328","name":"Configuration.ProjectivePlane.toHasLines","line":325,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.toHasLines","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.toHasLines\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">toHasLines</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L325-L328","name":"Configuration.ProjectivePlane.toHasPoints","line":325,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.toHasPoints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane.toHasPoints\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span>.<span class=\"name\">toHasPoints</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\">ProjectivePlane</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L322-L328","name":"Configuration.ProjectivePlane","line":322,"kind":"class","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane","doc":"A projective plane is a nondegenerate configuration in which every pair of lines has\nan intersection point, every pair of points has a line through them,\nand which has three points in general position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.ProjectivePlane\"><span class=\"name\">Configuration</span>.<span class=\"name\">ProjectivePlane</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">Configuration.HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">Configuration.HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L311-L318","name":"Configuration.HasPoints.hasLines","line":311,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.hasLines","doc":"If a nondegenerate configuration has a unique point on any two lines, and if `|P| = |L|`,\nthen there is a unique line through any two points. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.hasLines\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">hasLines</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L277-L309","name":"Configuration.HasLines.hasPoints","line":277,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.hasPoints","doc":"If a nondegenerate configuration has a unique line through any two points, and if `|P| = |L|`,\nthen there is a unique point on any two lines. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.hasPoints\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">hasPoints</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L272-L275","name":"Configuration.HasPoints.lineCount_eq_pointCount","line":272,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.lineCount_eq_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.lineCount_eq_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">lineCount_eq_pointCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hPL</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpl</span> : <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L246-L270","name":"Configuration.HasLines.lineCount_eq_pointCount","line":246,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.lineCount_eq_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.lineCount_eq_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">lineCount_eq_pointCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hPL</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpl</span> : <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L237-L244","name":"Configuration.HasLines.exists_bijective_of_card_eq","line":237,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.exists_bijective_of_card_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.exists_bijective_of_card_eq\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">exists_bijective_of_card_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">L</span> → <span class=\"fn\">P</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L230-L233","name":"Configuration.HasPoints.card_le","line":230,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.card_le","doc":"If a nondegenerate configuration has a unique point on any two lines, then `|L| ≤ |P|`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.card_le\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">card_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L207-L228","name":"Configuration.HasLines.card_le","line":207,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.card_le","doc":"If a nondegenerate configuration has a unique line through any two points, then `|P| ≤ |L|`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.card_le\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">card_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L201-L203","name":"Configuration.HasPoints.lineCount_le_pointCount","line":201,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.lineCount_le_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.lineCount_le_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">lineCount_le_pointCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L186-L199","name":"Configuration.HasLines.pointCount_le_lineCount","line":186,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.pointCount_le_lineCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.pointCount_le_lineCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">pointCount_le_lineCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">L</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L173-L182","name":"Configuration.sum_lineCount_eq_sum_pointCount","line":173,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.sum_lineCount_eq_sum_pointCount","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.sum_lineCount_eq_sum_pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">sum_lineCount_eq_sum_pointCount</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">p</span> : <span class=\"fn\">P</span>, <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\">lineCount</a> <span class=\"fn\">L</span> <span class=\"fn\">p</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">l</span> : <span class=\"fn\">L</span>, <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\">pointCount</a> <span class=\"fn\">P</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L167-L169","name":"Configuration.pointCount","line":167,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount","doc":"Number of lines through a given point. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.pointCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">pointCount</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L161-L163","name":"Configuration.lineCount","line":161,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount","doc":"Number of points on a given line. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.lineCount\"><span class=\"name\">Configuration</span>.<span class=\"name\">lineCount</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L113-L156","name":"Configuration.Nondegenerate.exists_injective_of_card_le","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_injective_of_card_le","doc":"If a nondegenerate configuration has at least as many points as lines, then there exists\nan injective function `f` from lines to points, such that `f l` does not lie on `l`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_injective_of_card_le\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span>.<span class=\"name\">exists_injective_of_card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">L</span> → <span class=\"fn\">P</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">l</span></span> ∉ <span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L107-L109","name":"Configuration.HasLines.existsUnique_line","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.existsUnique_line","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.existsUnique_line\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">existsUnique_line</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">l</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">L</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L102-L105","name":"Configuration.HasPoints.existsUnique_point","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.existsUnique_point","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.existsUnique_point\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">existsUnique_point</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">p</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">P</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L97-L100","name":"Configuration.Dual.hasPoints","line":97,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.hasPoints","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.hasPoints\"><span class=\"name\">Configuration</span>.<span class=\"name\">Dual</span>.<span class=\"name\">hasPoints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L92-L95","name":"Configuration.Dual.hasLines","line":92,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.hasLines","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.hasLines\"><span class=\"name\">Configuration</span>.<span class=\"name\">Dual</span>.<span class=\"name\">hasLines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L87-L90","name":"Configuration.Dual.Nondegenerate","line":87,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.Nondegenerate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual.Nondegenerate\"><span class=\"name\">Configuration</span>.<span class=\"name\">Dual</span>.<span class=\"name\">Nondegenerate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Configuration.Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Configuration.Nondegenerate</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L79-L79","name":"Configuration.HasLines.mkLine_ax","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine_ax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine_ax\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">mkLine_ax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine\">mkLine</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine\">mkLine</a> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L78-L78","name":"Configuration.HasLines.mkLine","line":78,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine","doc":"Line through two points "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mkLine\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">mkLine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span> → <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L76-L76","name":"Configuration.HasLines.mk","line":76,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.mk\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toNondegenerate</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLine</span> : <span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>} → <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span> → <span class=\"fn\">L</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLine_ax</span> : <span class=\"fn\">∀ {<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>} (<span class=\"fn\">h</span> : <span class=\"fn\">p₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">p₂</span>), <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">mkLine</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">mkLine</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L76-L79","name":"Configuration.HasLines.toNondegenerate","line":76,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.toNondegenerate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines.toNondegenerate\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span>.<span class=\"name\">toNondegenerate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\">HasLines</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L75-L79","name":"Configuration.HasLines","line":75,"kind":"class","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines","doc":"A nondegenerate configuration in which every pair of points has a line through them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasLines\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasLines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Configuration.Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L73-L73","name":"Configuration.HasPoints.mkPoint_ax","line":73,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint_ax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint_ax\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">mkPoint_ax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint\">mkPoint</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint\">mkPoint</a> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L72-L72","name":"Configuration.HasPoints.mkPoint","line":72,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint","doc":"Intersection of two lines "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mkPoint\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">mkPoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L70-L70","name":"Configuration.HasPoints.mk","line":70,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.mk\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toNondegenerate</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkPoint</span> : <span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>} → <span class=\"fn\"><span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkPoint_ax</span> : <span class=\"fn\">∀ {<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>} (<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">l₂</span>), <span class=\"fn\"><span class=\"fn\">mkPoint</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">mkPoint</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L70-L73","name":"Configuration.HasPoints.toNondegenerate","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.toNondegenerate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints.toNondegenerate\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span>.<span class=\"name\">toNondegenerate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\">HasPoints</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L69-L73","name":"Configuration.HasPoints","line":69,"kind":"class","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints","doc":"A nondegenerate configuration in which every pair of lines has an intersection point. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.HasPoints\"><span class=\"name\">Configuration</span>.<span class=\"name\">HasPoints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Configuration.Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L67-L67","name":"Configuration.Nondegenerate.eq_or_eq","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.eq_or_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.eq_or_eq\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span>.<span class=\"name\">eq_or_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> → <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> → <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L66-L66","name":"Configuration.Nondegenerate.exists_line","line":66,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_line","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_line\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span>.<span class=\"name\">exists_line</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\">P</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L65-L65","name":"Configuration.Nondegenerate.exists_point","line":65,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_point","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.exists_point\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span>.<span class=\"name\">exists_point</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L64-L64","name":"Configuration.Nondegenerate.mk","line":64,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate.mk\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exists_point</span> : <span class=\"fn\">∀ (<span class=\"fn\">l</span> : <span class=\"fn\">L</span>), <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\">P</span>), <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exists_line</span> : <span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\">P</span>), <span class=\"fn\">∃ (<span class=\"fn\">l</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\">p</span> ∉ <span class=\"fn\">l</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq_or_eq</span> : <span class=\"fn\">∀ {<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <span class=\"fn\">P</span>} {<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\">L</span>}, <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> → <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₁</span> → <span class=\"fn\"><span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> → <span class=\"fn\"><span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">l₂</span> → <span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l₂</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\">Nondegenerate</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L58-L67","name":"Configuration.Nondegenerate","line":58,"kind":"class","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate","doc":"A configuration is nondegenerate if:\n1) there does not exist a line that passes through all of the points,\n2) there does not exist a point that is on all of the lines,\n3) there is at most one line through any two points,\n4) any two lines have at most one intersection point.\nConditions 3 and 4 are equivalent. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Nondegenerate\"><span class=\"name\">Configuration</span>.<span class=\"name\">Nondegenerate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L55-L56","name":"Configuration.instMembershipDual","line":55,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.instMembershipDual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.instMembershipDual\"><span class=\"name\">Configuration</span>.<span class=\"name\">instMembershipDual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">P</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L51-L52","name":"Configuration.instFintypeDual","line":51,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.instFintypeDual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.instFintypeDual\"><span class=\"name\">Configuration</span>.<span class=\"name\">instFintypeDual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L48-L49","name":"Configuration.instFiniteDual","line":48,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.instFiniteDual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.instFiniteDual\"><span class=\"name\">Configuration</span>.<span class=\"name\">instFiniteDual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L45-L46","name":"Configuration.instInhabitedDual","line":45,"kind":"instance","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.instInhabitedDual","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.instInhabitedDual\"><span class=\"name\">Configuration</span>.<span class=\"name\">instInhabitedDual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\">Dual</a> <span class=\"fn\">P</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Configuration.lean#L41-L43","name":"Configuration.Dual","line":41,"kind":"def","docLink":"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual","doc":"A type synonym. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Configuration.html#Configuration.Dual\"><span class=\"name\">Configuration</span>.<span class=\"name\">Dual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}