{"name":"Mathlib.Tactic.Coe","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.ElabRules"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Coe.lean#L57-L63","name":"Lean.Elab.Term.CoeImpl.«term(↥)»","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↥)»","doc":"Partially applied type coercion.  Equivalent to the η-reduction of `(↥ ·)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↥)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(↥)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Coe.lean#L49-L55","name":"Lean.Elab.Term.CoeImpl.«term(⇑)»","line":49,"kind":"def","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(⇑)»","doc":"Partially applied function coercion.  Equivalent to the η-reduction of `(⇑ ·)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(⇑)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(⇑)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Coe.lean#L40-L47","name":"Lean.Elab.Term.CoeImpl.«term(↑)»","line":40,"kind":"def","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↑)»","doc":"Partially applied coercion.  Equivalent to the η-reduction of `(↑ ·)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.«term(↑)»\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">«term(↑)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Coe.lean#L25-L38","name":"Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe","line":25,"kind":"def","docLink":"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe","doc":"Elaborator for the `(↑)`, `(⇑)`, and `(↥)` notations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Coe.html#Lean.Elab.Term.CoeImpl.elabPartiallyAppliedCoe\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">CoeImpl</span>.<span class=\"name\">elabPartiallyAppliedCoe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sym</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkCoe</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}