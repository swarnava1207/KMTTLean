{"name":"Mathlib.Data.QPF.Univariate.Basic","instances":[{"typeNames":["QPF.Cofix"],"name":"QPF.instInhabitedCofixOfAP","className":"Inhabited"}],"imports":["Init","Mathlib.Data.PFunctor.Univariate.M"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L635-L636","name":"QPF.liftpPreservation_iff_uniform","line":635,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftpPreservation_iff_uniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftpPreservation_iff_uniform\"><span class=\"name\">QPF</span>.<span class=\"name\">liftpPreservation_iff_uniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation\">LiftpPreservation</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\">IsUniform</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L622-L633","name":"QPF.suppPreservation_iff_liftpPreservation","line":622,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_liftpPreservation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_liftpPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">suppPreservation_iff_liftpPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation\">SuppPreservation</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation\">LiftpPreservation</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L615-L620","name":"QPF.suppPreservation_iff_uniform","line":615,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_uniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.suppPreservation_iff_uniform\"><span class=\"name\">QPF</span>.<span class=\"name\">suppPreservation_iff_uniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation\">SuppPreservation</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\">IsUniform</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L610-L613","name":"QPF.supp_map","line":610,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_map\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\">IsUniform</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L596-L608","name":"QPF.liftp_iff_of_isUniform","line":596,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff_of_isUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\">IsUniform</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L588-L594","name":"QPF.supp_eq_of_isUniform","line":588,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq_of_isUniform","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq_of_isUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_eq_of_isUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\">IsUniform</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L584-L586","name":"QPF.SuppPreservation","line":584,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation","doc":"does `abs` preserve `supp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.SuppPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">SuppPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L580-L582","name":"QPF.LiftpPreservation","line":580,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation","doc":"does `abs` preserve `Liftp`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.LiftpPreservation\"><span class=\"name\">QPF</span>.<span class=\"name\">LiftpPreservation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L574-L578","name":"QPF.IsUniform","line":574,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform","doc":"A qpf is said to be uniform if every polynomial functor\nrepresenting a single value all have the same range. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsUniform\"><span class=\"name\">QPF</span>.<span class=\"name\">IsUniform</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L549-L572","name":"QPF.has_good_supp_iff","line":549,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.has_good_supp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.has_good_supp_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">has_good_supp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span></span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">f'</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> → <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">f'</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L544-L547","name":"QPF.supp_eq","line":544,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.supp_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">supp_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">u</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L531-L542","name":"QPF.mem_supp","line":531,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mem_supp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mem_supp\"><span class=\"name\">QPF</span>.<span class=\"name\">mem_supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.supp\">Functor.supp</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L506-L516","name":"QPF.quotientQPF","line":506,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.quotientQPF","doc":"Given a qpf `F` and a well-behaved surjection `FG_abs` from `F α` to\nfunctor `G α`, `G` is a qpf. We can consider `G` a quotient on `F` where\nelements `x y : F α` are in the same equivalence class if\n`FG_abs x = FG_abs y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.quotientQPF\"><span class=\"name\">QPF</span>.<span class=\"name\">quotientQPF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">FG_abs</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">FG_repr</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">FG_abs_repr</span> : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">(<span class=\"fn\">FG_repr</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">FG_abs_map</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">FG_abs</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">FG_abs</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">G</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L450-L490","name":"QPF.comp","line":450,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp","doc":"composition of qpfs gives another qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp\"><span class=\"name\">QPF</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F₂</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F₂</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F₁</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F₁</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor.html#Functor.Comp\">Functor.Comp</a> <span class=\"fn\">F₂</span> <span class=\"fn\">F₁</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L428-L438","name":"QPF.Cofix.bisim'","line":428,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim'\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>),\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> →\n      <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span></span>),\n        <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">u</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>           <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">v</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f'</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">x'</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f'</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x'</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">v</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L418-L426","name":"QPF.Cofix.bisim","line":418,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftr\">Functor.Liftr</a> <span class=\"fn\">r</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L399-L416","name":"QPF.Cofix.bisim_rel","line":399,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.bisim_rel\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">bisim_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Quot.mk\">Quot.mk</a> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L363-L369","name":"QPF.Cofix.dest_corec","line":363,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest_corec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest_corec\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest_corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\">corec</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\">corec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L349-L361","name":"QPF.Cofix.dest","line":349,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest","doc":"destructor for type defined by `Cofix` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L345-L347","name":"QPF.Cofix.corec","line":345,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec","doc":"corecursor for type defined by `Cofix` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix.corec\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span>.<span class=\"name\">corec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L342-L343","name":"QPF.instInhabitedCofixOfAP","line":342,"kind":"instance","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.instInhabitedCofixOfAP","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.instInhabitedCofixOfAP\"><span class=\"name\">QPF</span>.<span class=\"name\">instInhabitedCofixOfAP</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\">Cofix</a> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L338-L340","name":"QPF.Cofix","line":338,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix","doc":"coinductive type defined as the final coalgebra of a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Cofix\"><span class=\"name\">QPF</span>.<span class=\"name\">Cofix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L335-L336","name":"QPF.Mcongr","line":335,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Mcongr","doc":"The maximal congruence on `q.P.M`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Mcongr\"><span class=\"name\">QPF</span>.<span class=\"name\">Mcongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L330-L333","name":"QPF.IsPrecongr","line":330,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsPrecongr","doc":"A pre-congruence on `q.P.M` *viewed as an F-coalgebra*. Not necessarily symmetric. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.IsPrecongr\"><span class=\"name\">QPF</span>.<span class=\"name\">IsPrecongr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L325-L327","name":"QPF.corecF_eq","line":325,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">corecF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\">corecF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\">corecF</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\">repr</a> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L321-L323","name":"QPF.corecF","line":321,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF","doc":"does recursion on `q.P.M` using `g : α → F α` rather than `g : α → P α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.corecF\"><span class=\"name\">QPF</span>.<span class=\"name\">corecF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/M.html#PFunctor.M\">M</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L300-L308","name":"QPF.Fix.ind","line":300,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L292-L298","name":"QPF.Fix.dest_mk","line":292,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest_mk\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">dest_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\">dest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L284-L290","name":"QPF.Fix.mk_dest","line":284,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk_dest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk_dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">mk_dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\">dest</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L277-L282","name":"QPF.Fix.rec_unique","line":277,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_unique","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_unique\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec_unique</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>), <span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">rec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">h</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L266-L275","name":"QPF.Fix.ind_rec","line":266,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_rec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_rec\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind_rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g₁ </span><span class=\"fn\">g₂</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>), <span class=\"fn\"><span class=\"fn\">g₁</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g₂</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> → <span class=\"fn\"><span class=\"fn\">g₁</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g₂</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L255-L264","name":"QPF.Fix.ind_aux","line":255,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.ind_aux\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">ind_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></span>⟩</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Quotient.mk\">⟦</a><span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span><a href=\"./Init/Core.html#Quotient.mk\">⟧</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L240-L253","name":"QPF.Fix.rec_eq","line":240,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">rec</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\">mk</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> (<span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\">rec</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L236-L238","name":"QPF.Fix.dest","line":236,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest","doc":"destructor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.dest\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">dest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L232-L234","name":"QPF.Fix.mk","line":232,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk","doc":"constructor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.mk\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L228-L230","name":"QPF.fixToW","line":228,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.fixToW","doc":"access the underlying W-type of a fixpoint data type "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.fixToW\"><span class=\"name\">QPF</span>.<span class=\"name\">fixToW</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L224-L226","name":"QPF.Fix.rec","line":224,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec","doc":"recursor of a type defined by a qpf "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix.rec\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span>.<span class=\"name\">rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\">Fix</a> <span class=\"fn\">F</span></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L220-L222","name":"QPF.Fix","line":220,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix","doc":"inductive type defined as initial algebra of a Quotient of Polynomial Functor "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Fix\"><span class=\"name\">QPF</span>.<span class=\"name\">Fix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L214-L216","name":"QPF.Wsetoid","line":214,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wsetoid","doc":"Define the fixed point as the quotient of trees under the equivalence relation `Wequiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wsetoid\"><span class=\"name\">QPF</span>.<span class=\"name\">Wsetoid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Setoid\">Setoid</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L204-L212","name":"QPF.Wrepr_equiv","line":204,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr_equiv\"><span class=\"name\">QPF</span>.<span class=\"name\">Wrepr_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr\">Wrepr</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L200-L202","name":"QPF.Wrepr","line":200,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr","doc":"maps every element of the W type to a canonical representative "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wrepr\"><span class=\"name\">QPF</span>.<span class=\"name\">Wrepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L193-L198","name":"QPF.Wequiv.symm","line":193,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.symm\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L189-L191","name":"QPF.Wequiv.refl","line":189,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.refl\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L183-L187","name":"QPF.Wequiv.abs'","line":183,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs'\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">abs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">dest</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">dest</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L174-L181","name":"QPF.recF_eq_of_Wequiv","line":174,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq_of_Wequiv","doc":"`recF` is insensitive to the representation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq_of_Wequiv\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq_of_Wequiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">u</span> <span class=\"fn\">y</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L172-L172","name":"QPF.Wequiv.trans","line":172,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.trans\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L170-L171","name":"QPF.Wequiv.abs","line":170,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.abs\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a'</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a'</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">QPF.abs</a> <span class=\"fn\">⟨<span class=\"fn\">a'</span>, <span class=\"fn\">f'</span>⟩</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a'</span> <span class=\"fn\">f'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L169-L169","name":"QPF.Wequiv.ind","line":169,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv.ind\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span>.<span class=\"name\">ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\">Wequiv</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L167-L172","name":"QPF.Wequiv","line":167,"kind":"inductive","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv","doc":"two trees are equivalent if their F-abstractions are "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.Wequiv\"><span class=\"name\">QPF</span>.<span class=\"name\">Wequiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L163-L165","name":"QPF.recF_eq'","line":163,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq'\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L158-L161","name":"QPF.recF_eq","line":158,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF_eq\"><span class=\"name\">QPF</span>.<span class=\"name\">recF_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\">recF</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.dest\">dest</a></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L154-L156","name":"QPF.recF","line":154,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF","doc":"does recursion on `q.P.W` using `g : F α → α` rather than `g : P α → α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.recF\"><span class=\"name\">QPF</span>.<span class=\"name\">recF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L126-L145","name":"QPF.liftr_iff","line":126,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftr_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftr_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">liftr_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftr\">Functor.Liftr</a> <span class=\"fn\">r</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>) (<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>),\n    <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f₀</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f₁</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">f₀</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">f₁</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L110-L124","name":"QPF.liftp_iff'","line":110,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff'\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">u</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span></span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Init/Core.html#Sigma.fst\">fst</a></span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">u</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L95-L108","name":"QPF.liftp_iff","line":95,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.liftp_iff\"><span class=\"name\">QPF</span>.<span class=\"name\">liftp_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Liftp\">Functor.Liftp</a> <span class=\"fn\">p</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">α</span></span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\">f</span>⟩</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L81-L86","name":"QPF.lawfulFunctor","line":81,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.lawfulFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.lawfulFunctor\"><span class=\"name\">QPF</span>.<span class=\"name\">lawfulFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u), <a href=\"./Init/Prelude.html#Functor.mapConst\">Functor.mapConst</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Function.const\">Function.const</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulFunctor\">LawfulFunctor</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L74-L79","name":"QPF.comp_map","line":74,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.comp_map\"><span class=\"name\">QPF</span>.<span class=\"name\">comp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L68-L72","name":"QPF.id_map","line":68,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.id_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.id_map\"><span class=\"name\">QPF</span>.<span class=\"name\">id_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#id\">id</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L54-L54","name":"QPF.abs_map","line":54,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_map\"><span class=\"name\">QPF</span>.<span class=\"name\">abs_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L53-L53","name":"QPF.abs_repr","line":53,"kind":"theorem","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs_repr\"><span class=\"name\">QPF</span>.<span class=\"name\">abs_repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\">abs</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\">repr</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L52-L52","name":"QPF.repr","line":52,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.repr\"><span class=\"name\">QPF</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L51-L51","name":"QPF.abs","line":51,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.abs\"><span class=\"name\">QPF</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\">P</a> <span class=\"fn\">F</span>)</span></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L50-L50","name":"QPF.P","line":50,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.P\"><span class=\"name\">QPF</span>.<span class=\"name\">P</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L49-L49","name":"QPF.mk","line":49,"kind":"ctor","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.mk\"><span class=\"name\">QPF</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toFunctor</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor\">PFunctor.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abs</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">repr</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abs_repr</span> : <span class=\"fn\">∀ {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\">repr</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abs_map</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">abs</span> <span class=\"fn\">p</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L49-L54","name":"QPF.toFunctor","line":49,"kind":"def","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.toFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF.toFunctor\"><span class=\"name\">QPF</span>.<span class=\"name\">toFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\">QPF</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/QPF/Univariate/Basic.lean#L43-L54","name":"QPF","line":43,"kind":"class","docLink":"./Mathlib/Data/QPF/Univariate/Basic.html#QPF","doc":"Quotients of polynomial functors.\n\nRoughly speaking, saying that `F` is a quotient of a polynomial functor means that for each `α`,\nelements of `F α` are represented by pairs `⟨a, f⟩`, where `a` is the shape of the object and\n`f` indexes the relevant elements of `α`, in a suitably natural manner.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/QPF/Univariate/Basic.html#QPF\"><span class=\"name\">QPF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">F</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}