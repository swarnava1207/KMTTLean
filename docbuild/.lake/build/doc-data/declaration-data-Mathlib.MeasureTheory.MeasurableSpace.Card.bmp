{"name":"Mathlib.MeasureTheory.MeasurableSpace.Card","instances":[],"imports":["Init","Mathlib.MeasureTheory.MeasurableSpace.Defs","Mathlib.SetTheory.Cardinal.Regular","Mathlib.SetTheory.Cardinal.Continuum","Mathlib.SetTheory.Cardinal.Ordinal"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L211-L215","name":"MeasurableSpace.cardinal_measurableSet_le_continuum","line":211,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_measurableSet_le_continuum","doc":"If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,\nthen the sigma algebra has the same cardinality bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_measurableSet_le_continuum\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">cardinal_measurableSet_le_continuum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a> → <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L203-L209","name":"MeasurableSpace.cardinal_generateMeasurable_le_continuum","line":203,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurable_le_continuum","doc":"If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,\nthen the sigma algebra has the same cardinality bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurable_le_continuum\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">cardinal_generateMeasurable_le_continuum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace.GenerateMeasurable\">GenerateMeasurable</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Continuum.html#Cardinal.continuum\">Cardinal.continuum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L197-L201","name":"MeasurableSpace.cardinal_measurableSet_le","line":197,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_measurableSet_le","doc":"If a sigma-algebra is generated by a set of sets `s`, then the sigma\nalgebra has cardinality at most `max #s 2 ^ ℵ₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_measurableSet_le\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">cardinal_measurableSet_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSet\">MeasurableSet</a> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L190-L195","name":"MeasurableSpace.cardinal_generateMeasurable_le","line":190,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurable_le","doc":"If a sigma-algebra is generated by a set of sets `s`, then the sigma-algebra has cardinality at\nmost `max #s 2 ^ ℵ₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurable_le\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">cardinal_generateMeasurable_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace.GenerateMeasurable\">GenerateMeasurable</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L155-L188","name":"MeasurableSpace.cardinal_generateMeasurableRec_le","line":155,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurableRec_le","doc":"At each step of the inductive construction, the cardinality bound `≤ #s ^ ℵ₀` holds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.cardinal_generateMeasurableRec_le\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">cardinal_generateMeasurableRec_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{v}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span>)</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L148-L153","name":"MeasurableSpace.generateMeasurableRec_of_omega1_le","line":148,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_of_omega1_le","doc":"`generateMeasurableRec` is constant for ordinals `≥ ω₁`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_of_omega1_le\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec_of_omega1_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{v}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Aleph.html#Ordinal.omega\">Ordinal.omega</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Aleph.html#Ordinal.omega\">Ordinal.omega</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L131-L146","name":"MeasurableSpace.generateMeasurable_eq_rec","line":131,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurable_eq_rec","doc":"`generateMeasurableRec s ω₁` generates precisely the smallest sigma-algebra containing `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurable_eq_rec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurable_eq_rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace.GenerateMeasurable\">GenerateMeasurable</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Aleph.html#Ordinal.omega\">Ordinal.omega</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L125-L129","name":"MeasurableSpace.generateMeasurableRec_subset","line":125,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_subset\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace.GenerateMeasurable\">GenerateMeasurable</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L104-L123","name":"MeasurableSpace.generateMeasurableRec_omega1","line":104,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_omega1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_omega1\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec_omega1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Aleph.html#Ordinal.omega\">Ordinal.omega</a> <span class=\"fn\">1</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{v}</a>), <span class=\"fn\">⋃ (_ : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Aleph.html#Ordinal.omega\">Ordinal.omega</a> <span class=\"fn\">1</span></span>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L79-L102","name":"MeasurableSpace.generateMeasurableRec_induction","line":79,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_induction","doc":"An inductive principle for the elements of `generateMeasurableRec`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_induction\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec_induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">∀ <span class=\"fn\">t</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">t</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h0</span> : <span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span></span> → <span class=\"fn\"><span class=\"fn\">(∃ <span class=\"fn\">j</span> &lt; <span class=\"fn\">i</span>, <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">j</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">u</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">∀ (<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ <span class=\"fn\">j</span> &lt; <span class=\"fn\">i</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">j</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(⋃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">t</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L72-L77","name":"MeasurableSpace.generateMeasurableRec_mono","line":72,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec_mono\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">(<a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L66-L70","name":"MeasurableSpace.iUnion_mem_generateMeasurableRec","line":66,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.iUnion_mem_generateMeasurableRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.iUnion_mem_generateMeasurableRec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">iUnion_mem_generateMeasurableRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∃ <span class=\"fn\">j</span> &lt; <span class=\"fn\">i</span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">j</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⋃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L61-L64","name":"MeasurableSpace.compl_mem_generateMeasurableRec","line":61,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.compl_mem_generateMeasurableRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.compl_mem_generateMeasurableRec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">compl_mem_generateMeasurableRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ht</span> : <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">j</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">t</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L56-L59","name":"MeasurableSpace.empty_mem_generateMeasurableRec","line":56,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.empty_mem_generateMeasurableRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.empty_mem_generateMeasurableRec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">empty_mem_generateMeasurableRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L50-L54","name":"MeasurableSpace.self_subset_generateMeasurableRec","line":50,"kind":"theorem","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.self_subset_generateMeasurableRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.self_subset_generateMeasurableRec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">self_subset_generateMeasurableRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\">generateMeasurableRec</a> <span class=\"fn\">s</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/MeasureTheory/MeasurableSpace/Card.lean#L37-L48","name":"MeasurableSpace.generateMeasurableRec","line":37,"kind":"def","docLink":"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec","doc":"Transfinite induction construction of the sigma-algebra generated by a set of sets `s`. At each\nstep, we add all elements of `s`, the empty set, the complements of already constructed sets, and\ncountable unions of already constructed sets.\n\nWe index this construction by an arbitrary ordinal for simplicity, but by `ω₁` we will have\ngenerated all the sets in the sigma-algebra.\n\nThis construction is very similar to that of the Borel hierarchy. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/MeasureTheory/MeasurableSpace/Card.html#MeasurableSpace.generateMeasurableRec\"><span class=\"name\">MeasurableSpace</span>.<span class=\"name\">generateMeasurableRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span></div></div>"}]}