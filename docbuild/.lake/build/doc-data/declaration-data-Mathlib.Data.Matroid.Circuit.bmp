{"name":"Mathlib.Data.Matroid.Circuit","instances":[],"imports":["Init","Mathlib.Data.Matroid.Closure"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L701-L736","name":"Matroid.IsBase.mem_fundCocircuit_iff_mem_fundCircuit","line":701,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.mem_fundCocircuit_iff_mem_fundCircuit","doc":"Fundamental circuits and cocircuits of a base `B` play dual roles;\n`e` belongs to the fundamental cocircuit for `B` and `f` if and only if\n`f` belongs to the fundamental circuit for `e` and `B`.\nThis statement isn't so reasonable unless `f ∈ B` and `e ∉ B`,\nbut holds due to junk values even without these assumptions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.mem_fundCocircuit_iff_mem_fundCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsBase</span>.<span class=\"name\">mem_fundCocircuit_iff_mem_fundCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e </span><span class=\"fn\">f</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBase\">IsBase</a></span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">f</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">B</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L690-L699","name":"Matroid.Indep.exists_isCocircuit_inter_eq_mem","line":690,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.exists_isCocircuit_inter_eq_mem","doc":"For every element `e` of an independent set `I`,\nthere is a cocircuit whose intersection with `I` is `{e}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.exists_isCocircuit_inter_eq_mem\"><span class=\"name\">Matroid</span>.<span class=\"name\">Indep</span>.<span class=\"name\">exists_isCocircuit_inter_eq_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heI</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">K</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L683-L688","name":"Matroid.fundCocircuit_eq_of_not_mem","line":683,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_eq_of_not_mem","doc":"The fundamental cocircuit of `X` and `e` has the junk value `{e}` if `e ∉ X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_eq_of_not_mem\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit_eq_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heX</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L678-L681","name":"Matroid.fundCocircuit_eq_of_not_mem_ground","line":678,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_eq_of_not_mem_ground","doc":"The fundamental cocircuit of `X` and `e` has the junk value `{e}` if `e ∉ M.E` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_eq_of_not_mem_ground\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit_eq_of_not_mem_ground</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L672-L676","name":"Matroid.fundCocircuit_inter_eq","line":672,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_inter_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_inter_eq\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit_inter_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">B</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L668-L670","name":"Matroid.fundCocircuit_subset_insert_compl","line":668,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_subset_insert_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_subset_insert_compl\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit_subset_insert_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">B</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> (<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">B</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L665-L666","name":"Matroid.mem_fundCocircuit","line":665,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_fundCocircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_fundCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">mem_fundCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">B</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L659-L663","name":"Matroid.fundCocircuit_isCocircuit","line":659,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_isCocircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit_isCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit_isCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBase\">IsBase</a></span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\">fundCocircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">B</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L653-L657","name":"Matroid.fundCocircuit","line":653,"kind":"def","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit","doc":"The fundamental cocircuit for `B` and `e`:\nthat is, the unique cocircuit `K` of `M` for which `K ∩ B = {e}`.\nShould be used when `B` is a base and `e ∈ B`.\nHas the junk value `{e}` if `e ∉ B` or `e ∉ M.E`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L650-L651","name":"Matroid.rankPos_iff_exists_isCocircuit","line":650,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.rankPos_iff_exists_isCocircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.rankPos_iff_exists_isCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">rankPos_iff_exists_isCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.RankPos\">RankPos</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L647-L648","name":"Matroid.exists_isCircuit","line":647,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">exists_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.RankPos\">RankPos</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L644-L645","name":"Matroid.IsCircuit.dual_rankPos","line":644,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.dual_rankPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.dual_rankPos\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">dual_rankPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.RankPos\">RankPos</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L639-L642","name":"Matroid.dual_rankPos_iff_exists_isCircuit","line":639,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.dual_rankPos_iff_exists_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.dual_rankPos_iff_exists_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">dual_rankPos_iff_exists_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.RankPos\">RankPos</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L634-L637","name":"Matroid.IsCircuit.isCocircuit_disjoint_or_nontrivial_inter","line":634,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit_disjoint_or_nontrivial_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit_disjoint_or_nontrivial_inter\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isCocircuit_disjoint_or_nontrivial_inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">(<span class=\"fn\">C</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Nontrivial\">Nontrivial</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L628-L632","name":"Matroid.IsCircuit.isCocircuit_inter_nontrivial","line":628,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit_inter_nontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit_inter_nontrivial\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isCocircuit_inter_nontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hCK</span> : <span class=\"fn\">(<span class=\"fn\">C</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">C</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Nontrivial\">Nontrivial</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L610-L626","name":"Matroid.IsCircuit.inter_isCocircuit_ne_singleton","line":610,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.inter_isCocircuit_ne_singleton","doc":"A cocircuit and a circuit cannot meet in exactly one element. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.inter_isCocircuit_ne_singleton\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">inter_isCocircuit_ne_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">K</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L602-L608","name":"Matroid.isCocircuit_iff_minimal_compl_nonspanning'","line":602,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal_compl_nonspanning'","doc":"A version of `cocircuit_iff_minimal_compl_nonspanning` with a support assumption\nin the minimality "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal_compl_nonspanning'\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCocircuit_iff_minimal_compl_nonspanning'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\">(fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.Spanning\">Spanning</a></span> (<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">X</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L584-L600","name":"Matroid.IsBase.compl_closure_diff_singleton_isCocircuit","line":584,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.compl_closure_diff_singleton_isCocircuit","doc":"For an element `e` of a base `B`, the complement of the closure of `B \\ {e}` is a cocircuit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.compl_closure_diff_singleton_isCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsBase</span>.<span class=\"name\">compl_closure_diff_singleton_isCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBase\">IsBase</a></span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> (<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">B</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L576-L582","name":"Matroid.isCocircuit_iff_minimal_compl_nonspanning","line":576,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal_compl_nonspanning","doc":"A cocircuit is a minimal set whose complement is nonspanning. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal_compl_nonspanning\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCocircuit_iff_minimal_compl_nonspanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\">(fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.Spanning\">Spanning</a></span> (<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">X</span>)</span>)</span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L565-L574","name":"Matroid.isCocircuit_iff_minimal","line":565,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal","doc":"A cocircuit is a minimal set that intersects every base. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_iff_minimal\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCocircuit_iff_minimal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\">(fun (<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBase\">IsBase</a></span> <span class=\"fn\">B</span></span> → <span class=\"fn\">(<span class=\"fn\">X</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">B</span>).<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></span></span>)</span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L561-L563","name":"Matroid.coindep_iff_forall_subset_not_isCocircuit","line":561,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.coindep_iff_forall_subset_not_isCocircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.coindep_iff_forall_subset_not_isCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">coindep_iff_forall_subset_not_isCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.Coindep\">Coindep</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ <span class=\"fn\">K</span> ⊆ <span class=\"fn\">X</span>, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L558-L559","name":"Matroid.dual_isCocircuit_iff","line":558,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.dual_isCocircuit_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.dual_isCocircuit_iff\"><span class=\"name\">Matroid</span>.<span class=\"name\">dual_isCocircuit_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L554-L556","name":"Matroid.IsCocircuit.subset_ground","line":554,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit.subset_ground","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit.subset_ground\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCocircuit</span>.<span class=\"name\">subset_ground</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L551-L552","name":"Matroid.IsCircuit.isCocircuit","line":551,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L548-L549","name":"Matroid.IsCocircuit.isCircuit","line":548,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit.isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit.isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCocircuit</span>.<span class=\"name\">isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L546-L546","name":"Matroid.isCocircuit_def","line":546,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCocircuit_def\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCocircuit_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\">IsCocircuit</a></span> <span class=\"fn\">K</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span><a href=\"./Mathlib/Data/Matroid/Dual.html#Matroid.dual\">✶</a>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L542-L544","name":"Matroid.IsCocircuit","line":542,"kind":"def","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit","doc":"A cocircuit is a circuit of the dual matroid,\nor equivalently the complement of a hyperplane. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCocircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCocircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L522-L533","name":"Matroid.exists_subset_finite_closure_of_subset_closure","line":522,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_subset_finite_closure_of_subset_closure","doc":"In a finitary matroid, each finite set `X` spanned by a set `Y` is in fact\nspanned by a finite independent subset of `Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_subset_finite_closure_of_subset_closure\"><span class=\"name\">Matroid</span>.<span class=\"name\">exists_subset_finite_closure_of_subset_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Finitary\">Finitary</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hXY</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">I</span> ⊆ <span class=\"fn\">Y</span>, <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L510-L520","name":"Matroid.exists_mem_finite_closure_of_mem_closure","line":510,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_mem_finite_closure_of_mem_closure","doc":"In a finitary matroid, every element spanned by a set `X` is in fact\nspanned by a finite independent subset of `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_mem_finite_closure_of_mem_closure\"><span class=\"name\">Matroid</span>.<span class=\"name\">exists_mem_finite_closure_of_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Finitary\">Finitary</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">I</span> ⊆ <span class=\"fn\">X</span>, <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L503-L508","name":"Matroid.finitary_iff_forall_isCircuit_finite","line":503,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.finitary_iff_forall_isCircuit_finite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.finitary_iff_forall_isCircuit_finite\"><span class=\"name\">Matroid</span>.<span class=\"name\">finitary_iff_forall_isCircuit_finite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Finitary\">Finitary</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> → <span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L497-L501","name":"Matroid.IsCircuit.finite","line":497,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.finite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.finite\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">finite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Finitary\">Finitary</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L476-L490","name":"Matroid.IsCircuit.elimination","line":476,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.elimination","doc":"The circuit elimination axiom : for any pair of distinct isCircuits `C₁, C₂` and any `e`,\nsome circuit is contained in `(C₁ ∪ C₂) \\ {e}`.\n\nThis is one of the axioms when defining a finitary matroid via circuits;\nas an axiom, it is usually stated with the extra assumption that `e ∈ C₁ ∩ C₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.elimination\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">elimination</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C₁ </span><span class=\"fn\">C₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">C₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">C₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ (<span class=\"fn\">C₁</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">C₂</span>) <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L467-L474","name":"Matroid.IsCircuit.strong_elimination","line":467,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_elimination","doc":"The strong isCircuit elimination axiom. For any pair of distinct circuits `C₁, C₂` and all\n`e ∈ C₁ ∩ C₂` and `f ∈ C₁ \\ C₂`, there is a circuit `C` with `f ∈ C ⊆ (C₁ ∪ C₂) \\ {e}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_elimination\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">strong_elimination</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e </span><span class=\"fn\">f</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C₁ </span><span class=\"fn\">C₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heC₁</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heC₂</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfC₁</span> : <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfC₂</span> : <span class=\"fn\"><span class=\"fn\">f</span> ∉ <span class=\"fn\">C₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ (<span class=\"fn\">C₁</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">C₂</span>) <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L447-L465","name":"Matroid.IsCircuit.strong_multi_elimination_set","line":447,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination_set","doc":"A version of `Circuit.strong_multi_elimination` where the collection of circuits is\na `Set (Set α)` and the distinguished elements are a `Set α`, rather than both being indexed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination_set\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">strong_multi_elimination_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₀</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hCS</span> : <span class=\"fn\">∀ <span class=\"fn\">C</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hXC₀</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C₀</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">X</span>, <span class=\"fn\">∃ <span class=\"fn\">C</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\">C</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzC₀</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₀</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">∀ <span class=\"fn\">C</span> ∈ <span class=\"fn\">S</span>, <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\">C</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C'</span> ⊆ (<span class=\"fn\">C₀</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">S</span>) <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">X</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L413-L445","name":"Matroid.IsCircuit.strong_multi_elimination","line":413,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination","doc":"A generalization of the strong circuit elimination axiom `Matroid.IsCircuit.strong_elimination`\nto an infinite collection of isCircuits.\n\nIt states that, given a circuit `C₀`, a arbitrary collection `C : ι → Set α` of circuits,\nan element `x i` of `C₀ ∩ C i` for each `i`, and an element `z ∈ C₀` outside all the `C i`,\nthe union of `C₀` and the `C i` contains a circuit containing `z` but none of the `x i`.\n\nThis is one of the axioms when defining infinite matroids via circuits.\n\nTODO : A similar statement will hold even when all mentions of `z` are removed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">strong_multi_elimination</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC₀</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C₀</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<span class=\"fn\">C</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mem_C₀</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₀</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_mem</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_unique</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">i </span><span class=\"fn\">i'</span> : <span class=\"fn\">ι</span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">i'</span></span> → <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzC₀</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C₀</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzC</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C'</span> ⊆ (<span class=\"fn\">C₀</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">i</span></span></span>) <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L389-L411","name":"Matroid.IsCircuit.strong_multi_elimination_insert","line":389,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination_insert","doc":"A version of `Matroid.IsCircuit.strong_multi_elimination` that is phrased using insertion. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.strong_multi_elimination_insert\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">strong_multi_elimination_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxI</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> ∉ <span class=\"fn\"><span class=\"fn\">I</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">(<span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">I</span> <span class=\"fn\">i</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hJx</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> (<span class=\"fn\">J</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">x</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzJ</span> : <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzI</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">z</span> ∉ <span class=\"fn\"><span class=\"fn\">I</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C'</span> ⊆ <span class=\"fn\">J</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">I</span> <span class=\"fn\">i</span></span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L379-L381","name":"Matroid.ext_iff_isCircuit","line":379,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_iff_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_iff_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">ext_iff_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M₁ </span><span class=\"fn\">M₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">M₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L368-L377","name":"Matroid.ext_isCircuit_not_indep","line":368,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_isCircuit_not_indep","doc":"A stronger version of `Matroid.ext_isCircuit`:\ntwo matroids on the same ground set are equal if no circuit of one is independent in the other. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_isCircuit_not_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">ext_isCircuit_not_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M₁ </span><span class=\"fn\">M₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hE</span> : <span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ (<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">C</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">M₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L359-L366","name":"Matroid.ext_isCircuit","line":359,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.ext_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">ext_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M₁ </span><span class=\"fn\">M₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hE</span> : <span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ ⦃<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> → (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₁</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M₂</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">M₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">M₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L352-L355","name":"Matroid.mem_closure_iff_exists_isCircuit","line":352,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_closure_iff_exists_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_closure_iff_exists_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">mem_closure_iff_exists_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L345-L350","name":"Matroid.exists_isCircuit_of_mem_closure","line":345,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_isCircuit_of_mem_closure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.exists_isCircuit_of_mem_closure\"><span class=\"name\">Matroid</span>.<span class=\"name\">exists_isCircuit_of_mem_closure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heX</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L341-L343","name":"Matroid.IsCircuit.mem_closure_diff_singleton_of_mem","line":341,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.mem_closure_diff_singleton_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.mem_closure_diff_singleton_of_mem\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">mem_closure_diff_singleton_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heC</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L336-L339","name":"Matroid.IsCircuit.subset_closure_diff_singleton","line":336,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.subset_closure_diff_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.subset_closure_diff_singleton\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">subset_closure_diff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L330-L334","name":"Matroid.IsCircuit.closure_diff_singleton_eq","line":330,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.closure_diff_singleton_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.closure_diff_singleton_eq\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">closure_diff_singleton_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L324-L326","name":"Matroid.indep_iff_forall_subset_not_isCircuit","line":324,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.indep_iff_forall_subset_not_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.indep_iff_forall_subset_not_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">indep_iff_forall_subset_not_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\">I</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> := by aesop_mat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">C</span> ⊆ <span class=\"fn\">I</span>, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L317-L322","name":"Matroid.indep_iff_forall_subset_not_isCircuit'","line":317,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.indep_iff_forall_subset_not_isCircuit'","doc":"A version of `Matroid.indep_iff_forall_subset_not_isCircuit` that has the supportedness\nhypothesis as part of the equivalence, rather than a hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.indep_iff_forall_subset_not_isCircuit'\"><span class=\"name\">Matroid</span>.<span class=\"name\">indep_iff_forall_subset_not_isCircuit'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ <span class=\"fn\">C</span> ⊆ <span class=\"fn\">I</span>, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">I</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L311-L315","name":"Matroid.dep_iff_superset_isCircuit'","line":311,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.dep_iff_superset_isCircuit'","doc":"A version of `Matroid.dep_iff_superset_isCircuit` that has the supportedness hypothesis\nas part of the equivalence, rather than a hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.dep_iff_superset_isCircuit'\"><span class=\"name\">Matroid</span>.<span class=\"name\">dep_iff_superset_isCircuit'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∃ <span class=\"fn\">C</span> ⊆ <span class=\"fn\">X</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L307-L309","name":"Matroid.dep_iff_superset_isCircuit","line":307,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.dep_iff_superset_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.dep_iff_superset_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">dep_iff_superset_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> := by aesop_mat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ <span class=\"fn\">X</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L300-L305","name":"Matroid.Dep.exists_isCircuit_subset","line":300,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Dep.exists_isCircuit_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Dep.exists_isCircuit_subset\"><span class=\"name\">Matroid</span>.<span class=\"name\">Dep</span>.<span class=\"name\">exists_isCircuit_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">C</span> ⊆ <span class=\"fn\">X</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L290-L296","name":"Matroid.fundCircuit_restrict_univ","line":290,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_restrict_univ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_restrict_univ\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_restrict_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Restrict.html#Matroid.restrict\">restrict</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a>)</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L275-L288","name":"Matroid.fundCircuit_restrict","line":275,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_restrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_restrict\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_restrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hIR</span> : <span class=\"fn\">I</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heR</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\">R</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Restrict.html#Matroid.restrict\">restrict</a></span> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L259-L273","name":"Matroid.IsCircuit.eq_fundCircuit_of_subset","line":259,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_fundCircuit_of_subset","doc":"For `I` independent, `M.fundCircuit e I` is the only circuit contained in `insert e I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_fundCircuit_of_subset\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">eq_fundCircuit_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hCs</span> : <span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L255-L257","name":"Matroid.IsBase.fundCircuit_isCircuit","line":255,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.fundCircuit_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsBase.fundCircuit_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsBase</span>.<span class=\"name\">fundCircuit_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hB</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBase\">IsBase</a></span> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxE</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxB</span> : <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">x</span> <span class=\"fn\">B</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L245-L253","name":"Matroid.Indep.mem_fundCircuit_iff","line":245,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.mem_fundCircuit_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.mem_fundCircuit_iff\"><span class=\"name\">Matroid</span>.<span class=\"name\">Indep</span>.<span class=\"name\">mem_fundCircuit_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e </span><span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hecl</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heI</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> (<span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">x</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L234-L243","name":"Matroid.Indep.fundCircuit_isCircuit","line":234,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.fundCircuit_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.fundCircuit_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">Indep</span>.<span class=\"name\">fundCircuit_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hecl</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heI</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L228-L232","name":"Matroid.fundCircuit_eq_of_not_mem_ground","line":228,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_of_not_mem_ground","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_of_not_mem_ground\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_eq_of_not_mem_ground</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heX</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L222-L226","name":"Matroid.fundCircuit_eq_of_mem","line":222,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_of_mem","doc":"The fundamental isCircuit of `e` and `X` has the junk value `{e}` if `e ∈ X` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_of_mem\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_eq_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heX</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">X</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L217-L220","name":"Matroid.fundCircuit_diff_eq_inter","line":217,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_diff_eq_inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_diff_eq_inter\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_diff_eq_inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heI</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">I</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L214-L215","name":"Matroid.mem_fundCircuit","line":214,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_fundCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.mem_fundCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">mem_fundCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L210-L212","name":"Matroid.fundCircuit_subset_ground","line":210,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_subset_ground","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_subset_ground\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_subset_ground</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\">I</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> := by aesop_mat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L206-L208","name":"Matroid.fundCircuit_subset_insert","line":206,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_subset_insert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_subset_insert\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_subset_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L199-L204","name":"Matroid.fundCircuit_eq_sInter","line":199,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_sInter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit_eq_sInter\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit_eq_sInter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\">fundCircuit</a></span> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> (<a href=\"./Mathlib/Order/SetNotation.html#Set.sInter\">⋂₀</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">J</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">J</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">J</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L191-L197","name":"Matroid.fundCircuit","line":191,"kind":"def","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit","doc":"For an independent set `I` and some `e ∈ M.closure I \\ I`,\n`M.fundCircuit e I` is the unique isCircuit contained in `insert e I`.\nFor the fact that this is a isCircuit, see `Matroid.Indep.fundCircuit_isCircuit`,\nand the fact that it is unique, see `Matroid.IsCircuit.eq_fundCircuit_of_subset`.\nHas the junk value `{e}` if `e ∈ I` or `e ∉ M.E`, and `insert e I` if `e ∈ M.E \\ M.closure I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.fundCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">fundCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L183-L187","name":"Matroid.restrict_isCircuit_iff","line":183,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.restrict_isCircuit_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.restrict_isCircuit_iff\"><span class=\"name\">Matroid</span>.<span class=\"name\">restrict_isCircuit_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hR</span> : <span class=\"fn\">R</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span> := by aesop_mat)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Restrict.html#Matroid.restrict\">restrict</a></span> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">R</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L178-L181","name":"Matroid.IsCircuit.isCircuit_restrict_of_subset","line":178,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCircuit_restrict_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isCircuit_restrict_of_subset\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isCircuit_restrict_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">R</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hCR</span> : <span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Restrict.html#Matroid.restrict\">restrict</a></span> <span class=\"fn\">R</span>)</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L168-L174","name":"Matroid.IsCircuit.isBasis_iff_insert_eq","line":168,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isBasis_iff_insert_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isBasis_iff_insert_eq\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isBasis_iff_insert_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBasis\">IsBasis</a></span> <span class=\"fn\">I</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">e</span> ∈ <span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">I</span>, <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L158-L166","name":"Matroid.IsCircuit.isBasis_iff_eq_diff_singleton","line":158,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isBasis_iff_eq_diff_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.isBasis_iff_eq_diff_singleton\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">isBasis_iff_eq_diff_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBasis\">IsBasis</a></span> <span class=\"fn\">I</span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">e</span> ∈ <span class=\"fn\">C</span>, <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L151-L156","name":"Matroid.IsCircuit.diff_singleton_isBasis","line":151,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.diff_singleton_isBasis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.diff_singleton_isBasis\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">diff_singleton_isBasis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.IsBasis\">IsBasis</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>) <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L145-L149","name":"Matroid.Indep.insert_isCircuit_of_forall_of_nontrivial","line":145,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.insert_isCircuit_of_forall_of_nontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.insert_isCircuit_of_forall_of_nontrivial\"><span class=\"name\">Matroid</span>.<span class=\"name\">Indep</span>.<span class=\"name\">insert_isCircuit_of_forall_of_nontrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hInt</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Data/Set/Subsingleton.html#Set.Nontrivial\">Nontrivial</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">f</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">I</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">f</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L136-L143","name":"Matroid.Indep.insert_isCircuit_of_forall","line":136,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.insert_isCircuit_of_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Indep.insert_isCircuit_of_forall\"><span class=\"name\">Matroid</span>.<span class=\"name\">Indep</span>.<span class=\"name\">insert_isCircuit_of_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heI</span> : <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">f</span> ∈ <span class=\"fn\">I</span>, <span class=\"fn\"><span class=\"fn\">e</span> ∉ <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Closure.html#Matroid.closure\">closure</a></span> (<span class=\"fn\">I</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">f</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">(<a href=\"./Init/Core.html#Insert.insert\">insert</a> <span class=\"fn\">e</span> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L126-L132","name":"Matroid.isCircuit_iff_dep_forall_diff_singleton_indep","line":126,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_dep_forall_diff_singleton_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_dep_forall_diff_singleton_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_iff_dep_forall_diff_singleton_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">e</span> ∈ <span class=\"fn\">C</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L122-L124","name":"Matroid.IsCircuit.eq_of_superset_isCircuit","line":122,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_superset_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_superset_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">eq_of_superset_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">C'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">C'</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L118-L120","name":"Matroid.IsCircuit.eq_of_subset_isCircuit","line":118,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_subset_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_subset_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">eq_of_subset_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">C'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L115-L116","name":"Matroid.IsCircuit.not_ssubset","line":115,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.not_ssubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.not_ssubset\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">not_ssubset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">C'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">C'</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L112-L113","name":"Matroid.IsCircuit.eq_of_dep_subset","line":112,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_dep_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_dep_subset\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">eq_of_dep_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hXC</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L108-L110","name":"Matroid.IsCircuit.eq_of_not_indep_subset","line":108,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_not_indep_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.eq_of_not_indep_subset\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">eq_of_not_indep_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hXC</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L105-L106","name":"Matroid.isCircuit_antichain","line":105,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_antichain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_antichain\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_antichain</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Antichain.html#IsAntichain\">IsAntichain</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#setOf\">setOf</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L100-L103","name":"Matroid.isCircuit_iff_forall_ssubset","line":100,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_forall_ssubset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_forall_ssubset\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_iff_forall_ssubset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\">I</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\">C</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">I</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L97-L98","name":"Matroid.IsCircuit.diff_singleton_indep","line":97,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.diff_singleton_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.diff_singleton_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">diff_singleton_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> (<span class=\"fn\">C</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">e</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L93-L95","name":"Matroid.isCircuit_iff_minimal_not_indep","line":93,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_minimal_not_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff_minimal_not_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_iff_minimal_not_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hCE</span> : <span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L89-L91","name":"Matroid.IsCircuit.minimal_not_indep","line":89,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.minimal_not_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.minimal_not_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">minimal_not_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L85-L87","name":"Matroid.IsCircuit.ssubset_indep","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.ssubset_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.ssubset_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">ssubset_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hXC</span> : <span class=\"fn\">X</span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L82-L83","name":"Matroid.isCircuit_iff","line":82,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_iff\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ ⦃<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>⦄, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">D</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">C</span> → <span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L79-L80","name":"Matroid.empty_not_isCircuit","line":79,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.empty_not_isCircuit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.empty_not_isCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">empty_not_isCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L76-L77","name":"Matroid.IsCircuit.nonempty","line":76,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.nonempty\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L72-L74","name":"Matroid.IsCircuit.subset_ground","line":72,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.subset_ground","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.subset_ground\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">subset_ground</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.E\">E</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L69-L70","name":"Matroid.IsCircuit.minimal","line":69,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.minimal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.minimal\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">minimal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L66-L67","name":"Matroid.IsCircuit.not_indep","line":66,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.not_indep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.not_indep\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">not_indep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Indep\">Indep</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L63-L64","name":"Matroid.IsCircuit.dep","line":63,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.dep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit.dep\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span>.<span class=\"name\">dep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L61-L61","name":"Matroid.isCircuit_def","line":61,"kind":"theorem","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.isCircuit_def\"><span class=\"name\">Matroid</span>.<span class=\"name\">isCircuit_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\">IsCircuit</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Minimal\">Minimal</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid.Dep\">Dep</a></span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L59-L59","name":"Matroid.Circuit","line":59,"kind":"def","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.Circuit","doc":"**Alias** of `Matroid.IsCircuit`.\n\n---\n\nA `Circuit` of `M` is a minimal dependent set in `M` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.Circuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">Circuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Matroid/Circuit.lean#L56-L57","name":"Matroid.IsCircuit","line":56,"kind":"def","docLink":"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit","doc":"A `Circuit` of `M` is a minimal dependent set in `M` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Matroid/Circuit.html#Matroid.IsCircuit\"><span class=\"name\">Matroid</span>.<span class=\"name\">IsCircuit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matroid/Basic.html#Matroid\">Matroid</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}