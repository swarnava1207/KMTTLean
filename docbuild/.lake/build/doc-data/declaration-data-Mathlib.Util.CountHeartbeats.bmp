{"name":"Mathlib.Util.CountHeartbeats","instances":[],"imports":["Init","Mathlib.Init","Lean.Util.Heartbeats","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L268-L275","name":"Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»","line":268,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»","doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.«command#count_heartbeatsApproximately»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeatsApproximately»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L244-L263","name":"Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter","line":244,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter","doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.CountHeartbeats.countHeartbeatsLinter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">countHeartbeatsLinter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L232-L240","name":"Mathlib.Linter.linter.countHeartbeatsApprox","line":232,"kind":"opaque","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeatsApprox","doc":"An option used by the `countHeartbeats` linter: if set to `true`, then the countHeartbeats linter\nrounds down to the nearest 1000 the heartbeat count.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeatsApprox\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">countHeartbeatsApprox</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L216-L230","name":"Mathlib.Linter.linter.countHeartbeats","line":216,"kind":"opaque","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeats","doc":"The \"countHeartbeats\" linter counts the heartbeats of every declaration.\n\nThe effect of the linter is similar to `#count_heartbeats in xxx`, except that it applies\nto all declarations.\n\nNote that the linter only counts heartbeats in \"top-level\" declarations:\nit looks inside `set_option ... in`, but not, for instance, inside `mutual` blocks.\n\nThere is a convenience notation `#count_heartbeats` that simply sets the linter option to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.Linter.linter.countHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">countHeartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L181-L200","name":"Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»","line":181,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»","doc":"`#count_heartbeats! in cmd` runs a command `10` times, reporting the range in heartbeats, and the\nstandard deviation. The command `#count_heartbeats! n in cmd` runs it `n` times instead.\n\nExample usage:\n```\n#count_heartbeats! in\ndef f := 37\n```\ndisplays the info message `Min: 7 Max: 8 StdDev: 14%`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeats!_In__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeats!_In__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L171-L179","name":"Mathlib.CountHeartbeats.elabForHeartbeats","line":171,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats","doc":"Run a command, optionally restoring the original state, and report just the number of heartbeats.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.elabForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">elabForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`command</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revert</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L140-L169","name":"Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__","line":140,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__","doc":"Guard the minimal number of heartbeats used in the enclosed command.\n\nThis is most useful in the context of debugging and minimizing an example of a slow declaration.\nBy guarding the number of heartbeats used in the slow declaration,\nan error message will be generated if a minimization step makes the slow behaviour go away.\n\nThe default number of minimal heartbeats is the value of `maxHeartbeats` (typically 200000).\nAlternatively, you can specify a number of heartbeats to guard against,\nusing the syntax `guard_min_heartbeats n in cmd`.\n\nThe optional `approximately` keyword rounds down the heartbeats to the nearest thousand.\nThis helps make the tests more stable to small changes in heartbeats.\nTo use this functionality, use `guard_min_heartbeats approximately (n)? in cmd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandGuard_min_heartbeatsApproximately_In__\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandGuard_min_heartbeatsApproximately_In__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L136-L138","name":"Mathlib.CountHeartbeats.commandCount_heartbeats","line":136,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeats","doc":"`count_heartbeats` is deprecated in favour of `#count_heartbeats` since \"2025-01-12\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.commandCount_heartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">commandCount_heartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L132-L134","name":"Mathlib.CountHeartbeats.tacticCount_heartbeats","line":132,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats","doc":"`count_heartbeats` is deprecated in favour of `#count_heartbeats` since \"2025-01-12\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.tacticCount_heartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">tacticCount_heartbeats</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L87-L130","name":"Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»","line":87,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»","doc":"`#count_heartbeats in cmd` counts the heartbeats used in the enclosed command `cmd`.\nUse `#count_heartbeats` to count the heartbeats in *all* the following declarations.\n\nThis is most useful for setting sufficient but reasonable limits via `set_option maxHeartbeats`\nfor long running declarations.\n\nIf you do so, please resist the temptation to set the limit as low as possible.\nAs the `simp` set and other features of the library evolve,\nother contributors will find that their (likely unrelated) changes\nhave pushed the declaration over the limit.\n`count_heartbearts in` will automatically suggest a `set_option maxHeartbeats` via \"Try this:\"\nusing the least number of the form `2^k * 200000` that suffices.\n\nNote that that internal heartbeat counter accessible via `IO.getNumHeartbeats`\nhas granularity 1000 times finer that the limits set by `set_option maxHeartbeats`.\nAs this is intended as a user command, we divide by 1000.\n\nThe optional `approximately` keyword rounds down the heartbeats to the nearest thousand.\nThis helps make the tests more stable to small changes in heartbeats.\nTo use this functionality, use `#count_heartbeats approximately in cmd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«command#count_heartbeatsApproximatelyIn__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«command#count_heartbeatsApproximatelyIn__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L81-L85","name":"Mathlib.CountHeartbeats.roundDownIf","line":81,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.roundDownIf","doc":"Round down the number `n` to the nearest thousand, if `approx` is `true`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.roundDownIf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">roundDownIf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">approx</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L67-L79","name":"Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»","line":67,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»","doc":"`#count_heartbeats! in tac` runs a tactic 10 times, counting the heartbeats used, and logs the range\nand standard deviation. The tactic `#count_heartbeats! n in tac` runs it `n` times instead.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats!_In__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«tactic#count_heartbeats!_In__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L63-L65","name":"Mathlib.CountHeartbeats.«tactic#count_heartbeats_»","line":63,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats_»","doc":"Count the heartbeats used by a tactic, e.g.: `#count_heartbeats simp`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.«tactic#count_heartbeats_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">«tactic#count_heartbeats_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L54-L61","name":"Mathlib.CountHeartbeats.logVariation","line":54,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation","doc":"Given a `List Nat`, log an info message with the minimum, maximum, and standard deviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.logVariation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">logVariation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">Lean.MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">Lean.AddMessageContext</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">Lean.MonadOptions</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L40-L52","name":"Mathlib.CountHeartbeats.variation","line":40,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation","doc":"Given a `List Nat`, return the minimum, maximum, and standard deviation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.variation\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">variation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">counts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/CountHeartbeats.lean#L29-L38","name":"Mathlib.CountHeartbeats.runTacForHeartbeats","line":29,"kind":"def","docLink":"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats","doc":"Run a tactic, optionally restoring the original state, and report just the number of heartbeats.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/CountHeartbeats.html#Mathlib.CountHeartbeats.runTacForHeartbeats\"><span class=\"name\">Mathlib</span>.<span class=\"name\">CountHeartbeats</span>.<span class=\"name\">runTacForHeartbeats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.tacticSeq</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revert</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}