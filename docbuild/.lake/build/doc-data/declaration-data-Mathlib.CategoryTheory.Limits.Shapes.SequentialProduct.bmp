{"name":"Mathlib.CategoryTheory.Limits.Shapes.SequentialProduct","instances":[],"imports":["Init","Mathlib.Algebra.Order.Monoid.Canonical.Defs","Mathlib.CategoryTheory.Functor.OfSequence","Mathlib.CategoryTheory.Limits.Shapes.BinaryBiproducts","Mathlib.CategoryTheory.Limits.Shapes.Countable","Mathlib.CategoryTheory.Limits.Shapes.PiProd","Mathlib.CategoryTheory.Limits.Shapes.RegularMono","Mathlib.Order.Interval.Finset.Nat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L214-L227","name":"CategoryTheory.Limits.SequentialProduct.functorMap_epi","line":214,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_epi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_epi\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorMap_epi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/ZeroMorphisms.html#CategoryTheory.Limits.HasZeroMorphisms\">HasZeroMorphisms</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Biproducts.html#CategoryTheory.Limits.HasFiniteBiproducts\">HasFiniteBiproducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Countable.html#CategoryTheory.Limits.HasCountableProducts\">HasCountableProducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">Epi</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">Epi</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\">functorMap</a> <span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L153-L206","name":"CategoryTheory.Limits.SequentialProduct.isLimit","line":153,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.isLimit","doc":"The cone over the tower\n```\n⋯ → ∏_{n < m} M n × ∏_{n ≥ m} N n → ⋯ → ∏ N\n```\nwith cone point `∏ M` is indeed a limit cone.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.isLimit\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">isLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L146-L146","name":"CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg_assoc","line":146,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone_π_app_comp_Pi_π_neg_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h✝</span> : <span class=\"fn\">(if x : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">m</span>)</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">m_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">m_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m_1</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m_1</span></span></span>)</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">h✝</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">M</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">h✝</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L146-L151","name":"CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg","line":146,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_neg\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone_π_app_comp_Pi_π_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">m</span>)</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">m_1</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">m_1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">m</span>)</span></span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m_1</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m_1</span></span></span>)</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">M</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L138-L138","name":"CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos_assoc","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone_π_app_comp_Pi_π_pos_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h✝</span> : <span class=\"fn\">(if x : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">m</span>)</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">h✝</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">M</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">h✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L138-L144","name":"CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos","line":138,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app_comp_Pi_π_pos\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone_π_app_comp_Pi_π_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">m</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">M</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L134-L136","name":"CategoryTheory.Limits.SequentialProduct.cone_π_app","line":134,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone_π_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone_π_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\">cone</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.map\">Pi.map</a> <span class=\"fn\">fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if h : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> then <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span></span> else <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L110-L132","name":"CategoryTheory.Limits.SequentialProduct.cone","line":110,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone","doc":"The cone over the tower\n```\n⋯ → ∏_{n < m} M n × ∏_{n ≥ m} N n → ⋯ → ∏ N\n```\nwith cone point `∏ M`. This is a limit cone, see `CategoryTheory.Limits.SequentialProduct.isLimit`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.cone\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">cone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">Cone</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/OfSequence.html#CategoryTheory.Functor.ofOpSequence\">Functor.ofOpSequence</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\">functorMap</a> <span class=\"fn\">f</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L87-L108","name":"CategoryTheory.Limits.SequentialProduct.functorMap_commSq","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorMap_commSq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/OfSequence.html#CategoryTheory.Functor.ofOpSequence\">Functor.ofOpSequence</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\">functorMap</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">m</span>)</span>\n      <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">m</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">m</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L70-L85","name":"CategoryTheory.Limits.SequentialProduct.functorMap_commSq_aux","line":70,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq_aux\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorMap_commSq_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/OfSequence.html#CategoryTheory.Functor.ofOpSequence\">Functor.ofOpSequence</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\">functorMap</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">k</span>)</span>\n      <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L63-L68","name":"CategoryTheory.Limits.SequentialProduct.functorMap_commSq_succ","line":63,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap_commSq_succ\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorMap_commSq_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/OfSequence.html#CategoryTheory.Functor.ofOpSequence\">Functor.ofOpSequence</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\">functorMap</a> <span class=\"fn\">f</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Preorder.html#CategoryTheory.homOfLE\">homOfLE</a> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">n</span>)</span></span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m</span></span></span>)</span> <span class=\"fn\">n</span>)</span>\n      <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Pi.π\">Pi.π</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">n</span>)</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/EqToHom.html#CategoryTheory.eqToHom\">eqToHom</a> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L55-L61","name":"CategoryTheory.Limits.SequentialProduct.functorMap","line":55,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap","doc":"The transition maps in the sequential limit of products "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj\">functorObj</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj\">functorObj</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L50-L53","name":"CategoryTheory.Limits.SequentialProduct.functorObjProj_neg","line":50,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObjProj_neg","doc":"The projection map from `functorObj M N n` to `N m`, when `m ≥ n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObjProj_neg\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorObjProj_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj\">functorObj</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L45-L48","name":"CategoryTheory.Limits.SequentialProduct.functorObjProj_pos","line":45,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObjProj_pos","doc":"The projection map from `functorObj M N n` to `M m`, when `m < n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObjProj_pos\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorObjProj_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj\">functorObj</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L41-L43","name":"CategoryTheory.Limits.SequentialProduct.functorObj","line":41,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj","doc":"The product of the `m` first objects of `M` and the rest of the rest of `N` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{u_2, u_1}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.HasProductsOfShape\">HasProductsOfShape</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L35-L36","name":"CategoryTheory.Limits.SequentialProduct.functorObj_eq_neg","line":35,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj_eq_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj_eq_neg\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorObj_eq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.lean#L32-L33","name":"CategoryTheory.Limits.SequentialProduct.functorObj_eq_pos","line":32,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj_eq_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Shapes/SequentialProduct.html#CategoryTheory.Limits.SequentialProduct.functorObj_eq_pos\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Limits</span>.<span class=\"name\">SequentialProduct</span>.<span class=\"name\">functorObj_eq_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">N</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">if x : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> then <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">i</span></span> else <span class=\"fn\"><span class=\"fn\">N</span> <span class=\"fn\">i</span></span></span>)</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">m</span></span></div></div>"}]}