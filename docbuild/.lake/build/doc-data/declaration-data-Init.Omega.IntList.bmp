{"name":"Init.Omega.IntList","instances":[{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instAdd","className":"Add"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instMul","className":"Mul"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instNeg","className":"Neg"},{"typeNames":["Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instSub","className":"Sub"},{"typeNames":["Int","Lean.Omega.IntList","Lean.Omega.IntList"],"name":"Lean.Omega.IntList.instHMulInt","className":"HMul"}],"imports":["Init.Data.List.Zip","Init.Data.Int.DivMod.Bootstrap","Init.Data.Nat.Gcd"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L389-L407","name":"Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","line":389,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\">bmod_dot_sub_dot_bmod</a> <span class=\"fn\">m</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L382-L387","name":"Lean.Omega.IntList.bmod_dot_sub_dot_bmod","line":382,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod","doc":"The difference between the balanced mod of a dot product,\nand the dot product with balanced mod applied to each entry of the left factor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_dot_sub_dot_bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_dot_sub_dot_bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L379-L380","name":"Lean.Omega.IntList.bmod_length","line":379,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod_length\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L376-L377","name":"Lean.Omega.IntList.bmod","line":376,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod","doc":"Apply \"balanced mod\" to each entry in an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L363-L374","name":"Lean.Omega.IntList.dot_sdiv_left","line":363,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_sdiv_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_sdiv_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a></span> <span class=\"fn\">d</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L361-L361","name":"Lean.Omega.IntList.nil_dot","line":361,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L351-L359","name":"Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","line":351,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_eq_zero_of_left_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_eq_zero_of_left_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L348-L349","name":"Lean.Omega.IntList.gcd_dvd_dot_left","line":348,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd_dot_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd_dot_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L336-L346","name":"Lean.Omega.IntList.dot_mod_gcd_left","line":336,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_mod_gcd_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_mod_gcd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L333-L334","name":"Lean.Omega.IntList.gcd_eq_zero","line":333,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L317-L329","name":"Lean.Omega.IntList.gcd_eq_iff","line":317,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_eq_iff\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">(∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span>)</span> → <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L302-L315","name":"Lean.Omega.IntList.dvd_gcd","line":302,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dvd_gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}, <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">↑<span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L292-L300","name":"Lean.Omega.IntList.gcd_dvd","line":292,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_dvd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a></span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L288-L290","name":"Lean.Omega.IntList.gcd_cons_div_right'","line":288,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right'\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L284-L286","name":"Lean.Omega.IntList.gcd_cons_div_right","line":284,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L280-L282","name":"Lean.Omega.IntList.gcd_cons_div_left","line":280,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons_div_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons_div_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>))</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L278-L278","name":"Lean.Omega.IntList.gcd_cons","line":278,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>.<a href=\"./Init/Data/Nat/Gcd.html#Nat.gcd\">gcd</a></span> <span class=\"fn\">(<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <span class=\"fn\">xs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L277-L277","name":"Lean.Omega.IntList.gcd_nil","line":277,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\">gcd</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L274-L275","name":"Lean.Omega.IntList.gcd","line":274,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd","doc":"The gcd of the absolute values of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.gcd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L272-L272","name":"Lean.Omega.IntList.sdiv_cons","line":272,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <span class=\"fn\">xs</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L271-L271","name":"Lean.Omega.IntList.sdiv_nil","line":271,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\">sdiv</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L268-L269","name":"Lean.Omega.IntList.sdiv","line":268,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv","doc":"Division of an `IntList` by a integer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sdiv\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L255-L266","name":"Lean.Omega.IntList.dot_of_left_zero","line":255,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_of_left_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_of_left_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L252-L253","name":"Lean.Omega.IntList.dot_smul_left","line":252,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_smul_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L249-L250","name":"Lean.Omega.IntList.dot_neg_left","line":249,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L246-L247","name":"Lean.Omega.IntList.dot_distrib_left","line":246,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">zs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L226-L244","name":"Lean.Omega.IntList.dot_set_left","line":226,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_set_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_set_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a></span> <span class=\"fn\">i</span> <span class=\"fn\">z</span>)</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L221-L221","name":"Lean.Omega.IntList.dot_cons₂","line":221,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L220-L220","name":"Lean.Omega.IntList.dot_nil_right","line":220,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L219-L219","name":"Lean.Omega.IntList.dot_nil_left","line":219,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\">dot</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L213-L214","name":"Lean.Omega.IntList.dot","line":213,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.dot","doc":"The dot product of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.dot\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">dot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L207-L211","name":"Lean.Omega.IntList.sum_smul","line":207,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L201-L205","name":"Lean.Omega.IntList.sum_neg","line":201,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L193-L199","name":"Lean.Omega.IntList.sum_add","line":193,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L190-L190","name":"Lean.Omega.IntList.sum_cons","line":190,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L189-L189","name":"Lean.Omega.IntList.sum_nil","line":189,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\">sum</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L186-L187","name":"Lean.Omega.IntList.sum","line":186,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sum","doc":"The sum of the entries of an `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sum\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L178-L184","name":"Lean.Omega.IntList.mul_smul_left","line":178,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_smul_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_smul_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L170-L176","name":"Lean.Omega.IntList.sub_eq_add_neg","line":170,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_eq_add_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_eq_add_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L161-L167","name":"Lean.Omega.IntList.mul_neg_left","line":161,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_neg_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_neg_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L144-L159","name":"Lean.Omega.IntList.mul_distrib_left","line":144,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_distrib_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_distrib_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys </span><span class=\"fn\">zs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">zs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L133-L141","name":"Lean.Omega.IntList.combo_eq_smul_add_smul","line":133,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo_eq_smul_add_smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo_eq_smul_add_smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\">combo</a> <span class=\"fn\">a</span> <span class=\"fn\">xs</span> <span class=\"fn\">b</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L129-L131","name":"Lean.Omega.IntList.combo","line":129,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.combo","doc":"A linear combination of two `IntList`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L127-L127","name":"Lean.Omega.IntList.smul_cons","line":127,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L126-L126","name":"Lean.Omega.IntList.smul_nil","line":126,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L122-L124","name":"Lean.Omega.IntList.smul_get","line":122,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L120-L120","name":"Lean.Omega.IntList.smul_def","line":120,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L117-L118","name":"Lean.Omega.IntList.instHMulInt","line":117,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instHMulInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instHMulInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMul\">HMul</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L113-L115","name":"Lean.Omega.IntList.smul","line":113,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.smul","doc":"Implementation of scalar multiplication by an integer on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.smul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">smul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L109-L111","name":"Lean.Omega.IntList.sub_def","line":109,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L107-L107","name":"Lean.Omega.IntList.instSub","line":107,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L103-L105","name":"Lean.Omega.IntList.sub","line":103,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.sub","doc":"Implementation of subtraction on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.sub\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L101-L101","name":"Lean.Omega.IntList.neg_cons","line":101,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L100-L100","name":"Lean.Omega.IntList.neg_nil","line":100,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L96-L98","name":"Lean.Omega.IntList.neg_get","line":96,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L94-L94","name":"Lean.Omega.IntList.neg_def","line":94,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L92-L92","name":"Lean.Omega.IntList.instNeg","line":92,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instNeg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L89-L90","name":"Lean.Omega.IntList.neg","line":89,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.neg","doc":"Implementation of negation on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L87-L87","name":"Lean.Omega.IntList.mul_cons₂","line":87,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_cons₂\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_cons₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L86-L86","name":"Lean.Omega.IntList.mul_nil_right","line":86,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L85-L85","name":"Lean.Omega.IntList.mul_nil_left","line":85,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_nil_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L81-L83","name":"Lean.Omega.IntList.mul_get","line":81,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L78-L79","name":"Lean.Omega.IntList.mul_def","line":78,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L76-L76","name":"Lean.Omega.IntList.instMul","line":76,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instMul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L73-L74","name":"Lean.Omega.IntList.mul","line":73,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.mul","doc":"Implementation of `*` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L70-L71","name":"Lean.Omega.IntList.cons_add_cons","line":70,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.cons_add_cons\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">cons_add_cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#List.cons\">::</a> (<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L69-L69","name":"Lean.Omega.IntList.nil_add","line":69,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.nil_add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">nil_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L68-L68","name":"Lean.Omega.IntList.add_nil","line":68,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L64-L66","name":"Lean.Omega.IntList.add_get","line":64,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span>).<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L60-L62","name":"Lean.Omega.IntList.add_def","line":60,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add_def\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.zipWithAll\">List.zipWithAll</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#Option.getD\">getD</a></span> <span class=\"fn\">0</span></span>)</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L58-L58","name":"Lean.Omega.IntList.instAdd","line":58,"kind":"instance","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.instAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L54-L56","name":"Lean.Omega.IntList.add","line":54,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.add","doc":"Implementation of `+` on `IntList`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L51-L52","name":"Lean.Omega.IntList.leading","line":51,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.leading","doc":"Returns the leading coefficient, i.e. the first non-zero entry. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.leading\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">leading</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L49-L49","name":"Lean.Omega.IntList.set_cons_succ","line":49,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L48-L48","name":"Lean.Omega.IntList.set_cons_zero","line":48,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L47-L47","name":"Lean.Omega.IntList.set_nil_succ","line":47,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L46-L46","name":"Lean.Omega.IntList.set_nil_zero","line":46,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set_nil_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set_nil_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\">set</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">0</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">y</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L38-L44","name":"Lean.Omega.IntList.set","line":38,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.set","doc":"Like `List.set`, but right-pad with zeroes as necessary first. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.set\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L34-L36","name":"Lean.Omega.IntList.get_of_length_le","line":34,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_of_length_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_of_length_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List.length\">List.length</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L30-L32","name":"Lean.Omega.IntList.get_map","line":30,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_map\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a></span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L28-L28","name":"Lean.Omega.IntList.get_cons_succ","line":28,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_succ\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <span class=\"fn\">xs</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L27-L27","name":"Lean.Omega.IntList.get_cons_zero","line":27,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_cons_zero\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_cons_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L26-L26","name":"Lean.Omega.IntList.get_nil","line":26,"kind":"theorem","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get_nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\">get</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L23-L24","name":"Lean.Omega.IntList.get","line":23,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList.get","doc":"Get the `i`-th element (interpreted as `0` if the list is not long enough). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList.get\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\">IntList</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Omega/IntList.lean#L13-L19","name":"Lean.Omega.IntList","line":13,"kind":"def","docLink":"./Init/Omega/IntList.html#Lean.Omega.IntList","doc":"A type synonym for `List Int`, used by `omega` for dense representation of coefficients.\n\nWe define algebraic operations,\ninterpreting `List Int` as a finitely supported function `Nat → Int`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Omega/IntList.html#Lean.Omega.IntList\"><span class=\"name\">Lean</span>.<span class=\"name\">Omega</span>.<span class=\"name\">IntList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}