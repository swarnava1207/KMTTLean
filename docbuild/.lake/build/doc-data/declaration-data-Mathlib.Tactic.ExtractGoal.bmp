{"name":"Mathlib.Tactic.ExtractGoal","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.ElabTerm","Lean.Meta.Tactic.Cleanup","Lean.PrettyPrinter","Batteries.Lean.Meta.Inaccessible"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ExtractGoal.lean#L110-L131","name":"Mathlib.Tactic.ExtractGoal.extractGoal","line":110,"kind":"def","docLink":"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.extractGoal","doc":"- `extract_goal` formats the current goal as a stand-alone theorem or definition after\n  cleaning up the local context of irrelevant variables.\n  A variable is *relevant* if (1) it occurs in the target type, (2) there is a relevant variable\n  that depends on it, or (3) the type of the variable is a proposition that depends on a\n  relevant variable.\n\n  If the target is `False`, then for convenience `extract_goal` includes all variables.\n- `extract_goal *` formats the current goal without cleaning up the local context.\n- `extract_goal a b c ...` formats the current goal after removing everything that the given\n  variables `a`, `b`, `c`, ... do not depend on.\n- `extract_goal ... using name` uses the name `name` for the theorem or definition rather than\n  the autogenerated name.\n\nThe tactic tries to produce an output that can be copy-pasted and just work,\nbut its success depends on whether the expressions are amenable\nto being unambiguously pretty printed.\n\nThe tactic responds to pretty printing options.\nFor example, `set_option pp.all true in extract_goal` gives the `pp.all` form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.extractGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ExtractGoal</span>.<span class=\"name\">extractGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ExtractGoal.lean#L107-L108","name":"Mathlib.Tactic.ExtractGoal.config","line":107,"kind":"def","docLink":"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.config","doc":"Configuration for `extract_goal` for which variables from the context to include. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ExtractGoal</span>.<span class=\"name\">config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/ExtractGoal.lean#L104-L105","name":"Mathlib.Tactic.ExtractGoal.star","line":104,"kind":"def","docLink":"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.star","doc":"Have `extract_goal` extract the full local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/ExtractGoal.html#Mathlib.Tactic.ExtractGoal.star\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ExtractGoal</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}