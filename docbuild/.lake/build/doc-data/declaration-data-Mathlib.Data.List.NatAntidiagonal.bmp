{"name":"Mathlib.Data.List.NatAntidiagonal","instances":[],"imports":["Init","Mathlib.Data.List.Nodup"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L84-L89","name":"List.Nat.map_swap_antidiagonal","line":84,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.map_swap_antidiagonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.map_swap_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">map_swap_antidiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Data/Prod.html#Prod.swap\">Prod.swap</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L75-L82","name":"List.Nat.antidiagonal_succ_succ'","line":75,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ_succ'\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L67-L73","name":"List.Nat.antidiagonal_succ'","line":67,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ'\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#id\">id</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L59-L65","name":"List.Nat.antidiagonal_succ","line":59,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_succ\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#Nat.succ\">Nat.succ</a> <a href=\"./Init/Prelude.html#id\">id</a>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L55-L57","name":"List.Nat.nodup_antidiagonal","line":55,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.nodup_antidiagonal","doc":"The antidiagonal of `n` does not contain duplicate entries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.nodup_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">nodup_antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Nodup\">Nodup</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L50-L53","name":"List.Nat.antidiagonal_zero","line":50,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_zero","doc":"The antidiagonal of `0` is the list `[(0, 0)]` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal_zero\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">0</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L45-L48","name":"List.Nat.length_antidiagonal","line":45,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.length_antidiagonal","doc":"The length of the antidiagonal of `n` is `n + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.length_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">length_antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L32-L43","name":"List.Nat.mem_antidiagonal","line":32,"kind":"theorem","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.mem_antidiagonal","doc":"A pair (i, j) is contained in the antidiagonal of `n` if and only if `i + j = n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.mem_antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">mem_antidiagonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\">antidiagonal</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/NatAntidiagonal.lean#L28-L30","name":"List.Nat.antidiagonal","line":28,"kind":"def","docLink":"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal","doc":"The antidiagonal of a natural number `n` is the list of pairs `(i, j)` such that `i + j = n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/NatAntidiagonal.html#List.Nat.antidiagonal\"><span class=\"name\">List</span>.<span class=\"name\">Nat</span>.<span class=\"name\">antidiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"}]}