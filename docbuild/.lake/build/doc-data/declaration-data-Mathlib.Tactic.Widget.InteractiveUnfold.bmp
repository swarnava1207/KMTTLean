{"name":"Mathlib.Tactic.Widget.InteractiveUnfold","instances":[],"imports":["Init","Batteries.Lean.Position","Mathlib.Tactic.Widget.SelectPanelUtils","Mathlib.Lean.GoalsLocation","Mathlib.Lean.Meta.KAbstractPositions","Lean.Util.FoldConsts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L231-L244","name":"Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand","line":231,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand","doc":"Elaborate a `#unfold?` command. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.elabUnfoldCommand\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">elabUnfoldCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L226-L228","name":"Mathlib.Tactic.InteractiveUnfold.unfoldCommand","line":226,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldCommand","doc":"`#unfold? e` gives all unfolds of `e`.\nIn tactic mode, use `unfold?` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldCommand\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfoldCommand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L210-L224","name":"Mathlib.Tactic.InteractiveUnfold.tacticUnfold?","line":210,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticUnfold?","doc":"Replace the selected expression with a definitional unfolding.\n- After each unfolding, we apply `whnfCore` to simplify the expression.\n- Explicit natural number expressions are evaluated.\n- Unfolds of class projections of instances marked with `@[default_instance]` are not shown.\n  This is relevant for notational type classes like `+`: we don't want to suggest `Add.add a b`\n  as an unfolding of `a + b`. Similarly for `OfNat n : Nat` which unfolds into `n : Nat`.\n\nTo use `unfold?`, shift-click an expression in the tactic state.\nThis gives a list of rewrite suggestions for the selected expression.\nClick on a suggestion to replace `unfold?` by a tactic that performs this rewrite.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticUnfold?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">tacticUnfold?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L204-L207","name":"Mathlib.Tactic.InteractiveUnfold.UnfoldComponent","line":204,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.UnfoldComponent","doc":"The component called by the `unfold?` tactic "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.UnfoldComponent\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">UnfoldComponent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./ProofWidgets/Component/Basic.html#ProofWidgets.Component\">ProofWidgets.Component</a> <a href=\"./Mathlib/Tactic/Widget/SelectPanelUtils.html#SelectInsertParams\">SelectInsertParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L150-L172","name":"Mathlib.Tactic.InteractiveUnfold.renderUnfolds","line":150,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.renderUnfolds","doc":"Render the unfolds of `e` as given by `filteredUnfolds`, with buttons at each suggestion\nfor pasting the rewrite tactic. Return `none` when there are no unfolds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.renderUnfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">renderUnfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">range</span> : <a href=\"./Lean/Data/Lsp/Basic.html#Lean.Lsp.Range\">Lean.Lsp.Range</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">doc</span> : <a href=\"./Lean/Server/FileWorker/Utils.html#Lean.Server.FileWorker.EditableDocument\">Lean.Server.FileWorker.EditableDocument</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./ProofWidgets/Data/Html.html#ProofWidgets.Html\">ProofWidgets.Html</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L145-L148","name":"Mathlib.Tactic.InteractiveUnfold.tacticString","line":145,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticString","doc":"Return the tactic string that does the unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.tacticString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">tacticString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">unfold</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L127-L141","name":"Mathlib.Tactic.pasteString","line":127,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.pasteString","doc":"Return a string of the expression suitable for pasting into the editor.\n\nWe ignore any options set by the user.\n\nWe set `pp.universes` to false because new universe level metavariables are not understood\nby the elaborator.\n\nWe set `pp.unicode.fun` to true as per Mathlib convention.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.pasteString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">pasteString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L116-L125","name":"Mathlib.Tactic.mkRewrite","line":116,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.mkRewrite","doc":"Return the rewrite tactic string `rw (config := ..) [← ..] at ..` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.mkRewrite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkRewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occ</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rewrite</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L110-L112","name":"Mathlib.Tactic.InteractiveUnfold.filteredUnfolds","line":110,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.filteredUnfolds","doc":"Return the consecutive unfoldings of `e` that are user friendly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.filteredUnfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">filteredUnfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L106-L108","name":"Mathlib.Tactic.InteractiveUnfold.isUserFriendly","line":106,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.isUserFriendly","doc":"Determine whether `e` contains no internal names. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.isUserFriendly\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">isUserFriendly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L84-L104","name":"Mathlib.Tactic.InteractiveUnfold.unfolds.go","line":84,"kind":"opaque","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds.go","doc":"Append the unfoldings of `e` to `acc`. Assume `e` is in `whnfCore` form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds.go\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfolds</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L78-L104","name":"Mathlib.Tactic.InteractiveUnfold.unfolds","line":78,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds","doc":"Return the consecutive unfoldings of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfolds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfolds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Widget/InteractiveUnfold.lean#L58-L76","name":"Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?","line":58,"kind":"def","docLink":"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?","doc":"Unfold a class projection if the instance is tagged with `@[default_instance]`.\nThis is used in the `unfold?` tactic in order to not show these unfolds to the user.\nSimilar to `Lean.Meta.unfoldProjInst?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Widget/InteractiveUnfold.html#Mathlib.Tactic.InteractiveUnfold.unfoldProjDefaultInst?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">InteractiveUnfold</span>.<span class=\"name\">unfoldProjDefaultInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"}]}