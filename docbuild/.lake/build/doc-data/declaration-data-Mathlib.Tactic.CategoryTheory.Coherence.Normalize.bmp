{"name":"Mathlib.Tactic.CategoryTheory.Coherence.Normalize","instances":[{"typeNames":["Mathlib.Tactic.BicategoryLike.WhiskerRight"],"name":"Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerRight","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.BicategoryLike.HorizontalComp"],"name":"Mathlib.Tactic.BicategoryLike.instInhabitedHorizontalComp","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.BicategoryLike.WhiskerLeft"],"name":"Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerLeft","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.BicategoryLike.NormalExpr"],"name":"Mathlib.Tactic.BicategoryLike.instInhabitedNormalExpr","className":"Inhabited"},{"typeNames":["Mathlib.Tactic.BicategoryLike.Eval.Result"],"name":"Mathlib.Tactic.BicategoryLike.Eval.instInhabitedResult","className":"Inhabited"}],"imports":["Init","Lean.Meta.AppBuilder","Mathlib.Tactic.CategoryTheory.Coherence.Datatypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L518-L583","name":"Mathlib.Tactic.BicategoryLike.eval","line":518,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.eval","doc":"Evaluate the expression of a 2-morphism into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.eval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂\">MonadMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L512-L515","name":"Mathlib.Tactic.BicategoryLike.traceProof","line":512,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.traceProof","doc":"Trace the proof of the normalization. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.traceProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">traceProof</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L478-L500","name":"Mathlib.Tactic.BicategoryLike.evalHorizontalComp","line":478,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalComp","doc":"Evaluate the expression `η ⊗ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L462-L476","name":"Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux'","line":462,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux'","doc":"Evaluate the expression `η ⊗ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalHorizontalCompAux'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L448-L460","name":"Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux","line":448,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux","doc":"Evaluate the expression `η ⊗ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalHorizontalCompAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalHorizontalCompAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L410-L446","name":"Mathlib.Tactic.BicategoryLike.evalWhiskerRight","line":410,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerRight","doc":"Evaluate the expression `η ▷ f` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L398-L408","name":"Mathlib.Tactic.BicategoryLike.evalWhiskerRightAux","line":398,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerRightAux","doc":"Evaluate the expression `η ▷ f` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerRightAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalWhiskerRightAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L370-L392","name":"Mathlib.Tactic.BicategoryLike.evalWhiskerLeft","line":370,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerLeft","doc":"Evaluate the expression `f ◁ η` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L359-L364","name":"Mathlib.Tactic.BicategoryLike.evalComp","line":359,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalComp","doc":"Evaluate the expression `η ≫ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L354-L357","name":"Mathlib.Tactic.BicategoryLike.evalCompNil","line":354,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalCompNil","doc":"Evaluate the expression `α ≫ η` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.evalCompNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">evalCompNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Eval.Result</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L346-L346","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalMonoidalComp","line":346,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalMonoidalComp","doc":"Evaluate the expression `η ⊗≫ θ := η ≫ α ≫ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalMonoidalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalMonoidalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ' </span><span class=\"fn\">αθ </span><span class=\"fn\">ηαθ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η </span><span class=\"fn\">e_θ </span><span class=\"fn\">e_αθ </span><span class=\"fn\">e_ηαθ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L344-L344","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalOf","line":344,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalOf","doc":"Evaluate the atomic 2-morphism `η` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom\">Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L342-L342","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalHorizontalComp","line":342,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalHorizontalComp","doc":"Evaluate the expression `η ◫ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ' </span><span class=\"fn\">ι</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η </span><span class=\"fn\">e_θ </span><span class=\"fn\">e_ι</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L340-L340","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerRight","line":340,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerRight","doc":"Evaluate the expression `η ▷ f` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η </span><span class=\"fn\">e_θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L338-L338","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerLeft","line":338,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerLeft","doc":"Evaluate the expression `f ◁ η` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η </span><span class=\"fn\">e_θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L336-L336","name":"Mathlib.Tactic.BicategoryLike.MkEval.mkEvalComp","line":336,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalComp","doc":"Evaluate the expression `η ≫ θ` into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mkEvalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mkEvalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η' </span><span class=\"fn\">θ' </span><span class=\"fn\">ηθ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η </span><span class=\"fn\">e_θ </span><span class=\"fn\">e_ηθ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L333-L333","name":"Mathlib.Tactic.BicategoryLike.MkEval.mk","line":333,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMkEvalComp</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMkEvalWhiskerLeft</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMkEvalWhiskerRight</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMkEvalHorizontalComp</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalComp</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerLeft</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRight</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalOf</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom\">Atom</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalMonoidalComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L333-L347","name":"Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalHorizontalComp","line":333,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalHorizontalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">toMkEvalHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L333-L347","name":"Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerLeft","line":333,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">toMkEvalWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L333-L347","name":"Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalComp","line":333,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">toMkEvalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L333-L347","name":"Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerRight","line":333,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval.toMkEvalWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span>.<span class=\"name\">toMkEvalWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L332-L347","name":"Mathlib.Tactic.BicategoryLike.MkEval","line":332,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval","doc":"Evaluate the expression of a 2-morphism into a normalized form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">Mathlib.Tactic.BicategoryLike.MkEvalComp</a> <span class=\"fn\">m</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L329-L329","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsCons","line":329,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsCons","doc":"Evaluate `(α ≫ η ≫ ηs) ◫ (β ≫ θ ≫ θs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompConsCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">θs </span><span class=\"fn\">ηθ </span><span class=\"fn\">ηθs </span><span class=\"fn\">ηθ₁ </span><span class=\"fn\">ηθ₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηθ </span><span class=\"fn\">e_ηθs </span><span class=\"fn\">e_ηθ₁ </span><span class=\"fn\">e_ηθ₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L326-L326","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsNil","line":326,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsNil","doc":"Evaluate `(α ≫ η ≫ ηs) ◫ β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompConsNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompConsNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">η₁ </span><span class=\"fn\">ηs₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_ηs₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L323-L323","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilCons","line":323,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilCons","doc":"Evaluate `α ◫ (β ≫ η ≫ ηs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompNilCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">η₁ </span><span class=\"fn\">ηs₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_ηs₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L321-L321","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilNil","line":321,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilNil","doc":"Evaluate `α ◫ β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompNilNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompNilNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L318-L318","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'OfWhisker","line":318,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'OfWhisker","doc":"Evaluate `η ◫ (f ◁ θ)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'OfWhisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompAux'OfWhisker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η₁ </span><span class=\"fn\">ηθ </span><span class=\"fn\">ηθ₁ </span><span class=\"fn\">ηθ₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηθ </span><span class=\"fn\">e_η₁ </span><span class=\"fn\">e_ηθ₁ </span><span class=\"fn\">e_ηθ₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L315-L315","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'Whisker","line":315,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'Whisker","doc":"Evaluate `(f ◁ η) ◫ θ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAux'Whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompAux'Whisker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηθ </span><span class=\"fn\">ηθ₁ </span><span class=\"fn\">ηθ₂ </span><span class=\"fn\">ηθ₃</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηθ </span><span class=\"fn\">e_ηθ₁ </span><span class=\"fn\">e_ηθ₂ </span><span class=\"fn\">e_ηθ₃</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L312-L312","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxCons","line":312,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxCons","doc":"Evaluate `(η ◫ ηs) ◫ θ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompAuxCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηθ </span><span class=\"fn\">η₁ </span><span class=\"fn\">ηθ₁ </span><span class=\"fn\">ηθ₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηθ </span><span class=\"fn\">e_η₁ </span><span class=\"fn\">e_ηθ₁ </span><span class=\"fn\">e_ηθ₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L310-L310","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxOf","line":310,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxOf","doc":"Evaluate `η ◫ θ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mkEvalHorizontalCompAuxOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mkEvalHorizontalCompAuxOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L308-L308","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mk","line":308,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompAuxOf</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompAuxCons</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompAux'Whisker</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompAux'OfWhisker</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompNilNil</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompNilCons </span><span class=\"fn\">mkEvalHorizontalCompConsNil</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalHorizontalCompConsCons</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n          <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\">MkEvalHorizontalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L307-L330","name":"Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp","line":307,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp","doc":"Evaluate the expression `η ◫ θ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalHorizontalComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L305-L305","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightId","line":305,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightId","doc":"Evaluate `η ▷ 𝟙 _` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L302-L302","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightComp","line":302,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightComp","doc":"Evaluate `η ▷ (g ⊗ h)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃ </span><span class=\"fn\">η₄</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃ </span><span class=\"fn\">e_η₄</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L299-L299","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsWhisker","line":299,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsWhisker","doc":"Evaluate `(α ≫ (f ◁ η) ≫ ηs) ▷ g` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsWhisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightConsWhisker</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">ηs₁ </span><span class=\"fn\">ηs₂ </span><span class=\"fn\">η₃ </span><span class=\"fn\">η₄ </span><span class=\"fn\">η₅</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_ηs₁ </span><span class=\"fn\">e_ηs₂ </span><span class=\"fn\">e_η₃ </span><span class=\"fn\">e_η₄ </span><span class=\"fn\">e_η₅</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L295-L295","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsOfOf","line":295,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsOfOf","doc":"Evaluate ` (α ≫ η ≫ ηs) ▷ j` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightConsOfOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightConsOfOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">ηs₁ </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηs₁ </span><span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L293-L293","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightNil","line":293,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightNil","doc":"Evaluate `α ▷ f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L290-L290","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxCons","line":290,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxCons","doc":"Evaluate `(η ◫ ηs) ▷ f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightAuxCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs' </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηs' </span><span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L288-L288","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxOf","line":288,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxOf","doc":"Evaluate `η ▷ f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mkEvalWhiskerRightAuxOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mkEvalWhiskerRightAuxOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L286-L286","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mk","line":286,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightAuxOf</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightAuxCons</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightNil</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightConsOfOf</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n          <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightConsWhisker</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> →\n    <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> →\n        <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> →\n          <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n            <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n              <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                  <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                      <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n                          <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> →\n                            <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerRightId</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\">MkEvalWhiskerRight</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L285-L305","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight","line":285,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight","doc":"Evaluate the expression `η ▷ f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L283-L283","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftId","line":283,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftId","doc":"Evaluate `𝟙 _ ◁ η` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span>.<span class=\"name\">mkEvalWhiskerLeftId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L280-L280","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftComp","line":280,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftComp","doc":"Evaluate `(f ≫ g) ◁ η` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span>.<span class=\"name\">mkEvalWhiskerLeftComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η₁ </span><span class=\"fn\">η₂ </span><span class=\"fn\">η₃ </span><span class=\"fn\">η₄</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η₁ </span><span class=\"fn\">e_η₂ </span><span class=\"fn\">e_η₃ </span><span class=\"fn\">e_η₄</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L277-L277","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftOfCons","line":277,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftOfCons","doc":"Evaluate `f ◁ (α ≫ η ≫ ηs)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftOfCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span>.<span class=\"name\">mkEvalWhiskerLeftOfCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">θ</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_θ</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L275-L275","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftNil","line":275,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftNil","doc":"Evaluatte `f ◁ α` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mkEvalWhiskerLeftNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span>.<span class=\"name\">mkEvalWhiskerLeftNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L273-L273","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mk","line":273,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerLeftNil</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerLeftOfCons</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerLeftComp</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n    <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a> →\n      <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> →\n        <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalWhiskerLeftId</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\">MkEvalWhiskerLeft</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L272-L283","name":"Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft","line":272,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft","doc":"Evaluatte the expression `f ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalWhiskerLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L270-L270","name":"Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompCons","line":270,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompCons","doc":"Evaluate `(α ≫ η ≫ ηs) ≫ θ` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalComp</span>.<span class=\"name\">mkEvalCompCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">θ </span><span class=\"fn\">ι</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L268-L268","name":"Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilCons","line":268,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilCons","doc":"Evaluate `α ≫ (β ≫ η ≫ ηs)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilCons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalComp</span>.<span class=\"name\">mkEvalCompNilCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L266-L266","name":"Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilNil","line":266,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilNil","doc":"Evaluate `α ≫ β` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mkEvalCompNilNil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalComp</span>.<span class=\"name\">mkEvalCompNilNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L264-L264","name":"Mathlib.Tactic.BicategoryLike.MkEvalComp.mk","line":264,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalComp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalCompNilNil</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalCompNilCons</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkEvalCompCons</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\">MkEvalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L263-L270","name":"Mathlib.Tactic.BicategoryLike.MkEvalComp","line":263,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp","doc":"Evaluate the expression `α ≫ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEvalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MkEvalComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L259-L259","name":"Mathlib.Tactic.BicategoryLike.Eval.instInhabitedResult","line":259,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.instInhabitedResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.instInhabitedResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Eval</span>.<span class=\"name\">instInhabitedResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Result</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L258-L258","name":"Mathlib.Tactic.BicategoryLike.Eval.Result.proof","line":258,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.proof","doc":"The proof that the normalized expression is equal to the original expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.proof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Eval</span>.<span class=\"name\">Result</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L256-L256","name":"Mathlib.Tactic.BicategoryLike.Eval.Result.expr","line":256,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.expr","doc":"The normalized expression of the 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.expr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Eval</span>.<span class=\"name\">Result</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L254-L254","name":"Mathlib.Tactic.BicategoryLike.Eval.Result.mk","line":254,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Eval</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\">Result</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L253-L259","name":"Mathlib.Tactic.BicategoryLike.Eval.Result","line":253,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result","doc":"The result of evaluating an expression into normal form. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Eval.Result\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Eval</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L244-L247","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.toList","line":244,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.toList","doc":"Convert a `NormalExpr` expression into a list of `WhiskerLeft` expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.toList\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L238-L240","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.ofAtomM","line":238,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.ofAtomM","doc":"Construct a `NormalExpr` expression from a Lean expression for an atomic 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.ofAtomM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">ofAtomM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom\">Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L233-L236","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.ofM","line":233,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.ofM","doc":"Construct a `NormalExpr` expression from a `WhiskerLeft` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.ofM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">ofM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L229-L231","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorInvM","line":229,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorInvM","doc":"The inverse of the right unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorInvM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">rightUnitorInvM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L225-L227","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorM","line":225,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorM","doc":"The right unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.rightUnitorM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">rightUnitorM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L221-L223","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorInvM","line":221,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorInvM","doc":"The inverse of the left unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorInvM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">leftUnitorInvM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L217-L219","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorM","line":217,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorM","doc":"The left unitor as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.leftUnitorM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">leftUnitorM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L212-L215","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.associatorInvM","line":212,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.associatorInvM","doc":"The inverse of the associator as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.associatorInvM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">associatorInvM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L208-L210","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.associatorM","line":208,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.associatorM","doc":"The associator as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.associatorM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">associatorM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L204-L206","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.idM","line":204,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.idM","doc":"The identity 2-morphism as a term of `normalExpr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.idM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">idM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L195-L198","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.tgtM","line":195,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.tgtM","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.tgtM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">tgtM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L190-L193","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.srcM","line":190,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.srcM","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.srcM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">srcM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L185-L188","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft.tgtM","line":185,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.tgtM","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.tgtM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span>.<span class=\"name\">tgtM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L180-L183","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft.srcM","line":180,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.srcM","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.srcM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span>.<span class=\"name\">srcM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L175-L178","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp.tgtM","line":175,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.tgtM","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.tgtM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span>.<span class=\"name\">tgtM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L170-L173","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp.srcM","line":170,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.srcM","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.srcM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span>.<span class=\"name\">srcM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L165-L168","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight.tgtM","line":165,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.tgtM","doc":"The codomain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.tgtM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span>.<span class=\"name\">tgtM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L160-L163","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight.srcM","line":160,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.srcM","doc":"The domain of a 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.srcM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span>.<span class=\"name\">srcM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">Mor₁</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L154-L154","name":"Mathlib.Tactic.BicategoryLike.MonadNormalExpr.consM","line":154,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.consM","doc":"The expression for the normalized 2-morphism `α ≫ η ≫ ηs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.consM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalExpr</span>.<span class=\"name\">consM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">headStructural</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L152-L152","name":"Mathlib.Tactic.BicategoryLike.MonadNormalExpr.nilM","line":152,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.nilM","doc":"The expression for the structural 2-morphism `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.nilM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalExpr</span>.<span class=\"name\">nilM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L150-L150","name":"Mathlib.Tactic.BicategoryLike.MonadNormalExpr.mk","line":150,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalExpr</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMonadWhiskerLeft</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">MonadWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nilM</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">consM</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L150-L154","name":"Mathlib.Tactic.BicategoryLike.MonadNormalExpr.toMonadWhiskerLeft","line":150,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.toMonadWhiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr.toMonadWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalExpr</span>.<span class=\"name\">toMonadWhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">MonadWhiskerLeft</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L149-L154","name":"Mathlib.Tactic.BicategoryLike.MonadNormalExpr","line":149,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr","doc":"A monad equipped with the ability to construct `NormalExpr` terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadNormalExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft</a> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L147-L147","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.whiskerLeftM","line":147,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.whiskerLeftM","doc":"The expression for the left whiskering `f ▷ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.whiskerLeftM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerLeft</span>.<span class=\"name\">whiskerLeftM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">MonadWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L145-L145","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.mk","line":145,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerLeft</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMonadHorizontalComp</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">MonadHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whiskerLeftM</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">MonadWhiskerLeft</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L145-L147","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.toMonadHorizontalComp","line":145,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.toMonadHorizontalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft.toMonadHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerLeft</span>.<span class=\"name\">toMonadHorizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\">MonadWhiskerLeft</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">MonadHorizontalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L144-L147","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft","line":144,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft","doc":"A monad equipped with the ability to construct `WhiskerLeft` terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">Mathlib.Tactic.BicategoryLike.MonadHorizontalComp</a> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L142-L142","name":"Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.hConsM","line":142,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.hConsM","doc":"The expression for the horizontal composition `η ◫ ηs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.hConsM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadHorizontalComp</span>.<span class=\"name\">hConsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">MonadHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L140-L140","name":"Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.mk","line":140,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadHorizontalComp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toMonadWhiskerRight</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\">MonadWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hConsM</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">MonadHorizontalComp</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L140-L142","name":"Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.toMonadWhiskerRight","line":140,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.toMonadWhiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp.toMonadWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadHorizontalComp</span>.<span class=\"name\">toMonadWhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\">MonadHorizontalComp</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\">MonadWhiskerRight</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L139-L142","name":"Mathlib.Tactic.BicategoryLike.MonadHorizontalComp","line":139,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp","doc":"A monad equipped with the ability to construct `HorizontalComp` terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadHorizontalComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\">Mathlib.Tactic.BicategoryLike.MonadWhiskerRight</a> <span class=\"fn\">m</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L137-L137","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.whiskerRightM","line":137,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.whiskerRightM","doc":"The expression for the right whiskering `η ▷ f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.whiskerRightM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerRight</span>.<span class=\"name\">whiskerRightM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\">MonadWhiskerRight</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L135-L135","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.mk","line":135,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerRight</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whiskerRightM</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\">MonadWhiskerRight</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L134-L137","name":"Mathlib.Tactic.BicategoryLike.MonadWhiskerRight","line":134,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight","doc":"A monad equipped with the ability to construct `WhiskerRight` terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">MonadWhiskerRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L129-L132","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.e","line":129,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.e","doc":"The underlying `Mor₂` term of a `NormalExpr` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L127-L127","name":"Mathlib.Tactic.BicategoryLike.instInhabitedNormalExpr","line":127,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedNormalExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedNormalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">instInhabitedNormalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L125-L126","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.cons","line":125,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.cons","doc":"Construct the normalized expression of a 2-morphism `α ≫ η ≫ ηs` recursively. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L123-L124","name":"Mathlib.Tactic.BicategoryLike.NormalExpr.nil","line":123,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.nil","doc":"Construct the expression for a structural 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr.nil\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\">Structural</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\">NormalExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L121-L127","name":"Mathlib.Tactic.BicategoryLike.NormalExpr","line":121,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr","doc":"Normalized expressions for 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.NormalExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">NormalExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L117-L119","name":"Mathlib.Tactic.BicategoryLike.Structural","line":117,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural","doc":"Expressions for structural isomorphisms. We do not impose the condition `isStructural` since\nit is not needed to write the tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Structural\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Structural</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L105-L115","name":"Mathlib.Tactic.BicategoryLike.Mor₂Iso.isStructural","line":105,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso.isStructural","doc":"Whether a given 2-isomorphism is structural or not. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso.isStructural\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">Mor₂Iso</span>.<span class=\"name\">isStructural</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">Mor₂Iso</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L100-L103","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft.e","line":100,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.e","doc":"The underlying `Mor₂` term of a `WhiskerLeft` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L98-L98","name":"Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerLeft","line":98,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">instInhabitedWhiskerLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L96-L97","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft.whisker","line":96,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.whisker","doc":"Construct the expression for `f ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span>.<span class=\"name\">whisker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L94-L95","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft.of","line":94,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.of","doc":"Construct the expression for a right-whiskered 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\">WhiskerLeft</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L92-L98","name":"Mathlib.Tactic.BicategoryLike.WhiskerLeft","line":92,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft","doc":"Expressions of the form `f₁ ◁ ... ◁ fₙ ◁ η`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L87-L90","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp.e","line":87,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.e","doc":"The underlying `Mor₂` term of a `HorizontalComp` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L85-L85","name":"Mathlib.Tactic.BicategoryLike.instInhabitedHorizontalComp","line":85,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedHorizontalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedHorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">instInhabitedHorizontalComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L83-L84","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp.cons","line":83,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span>.<span class=\"name\">cons</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L82-L82","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp.of","line":82,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.of","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\">HorizontalComp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L80-L85","name":"Mathlib.Tactic.BicategoryLike.HorizontalComp","line":80,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp","doc":"Expressions of the form `η₁ ⊗ ... ⊗ ηₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.HorizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">HorizontalComp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L75-L78","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight.e","line":75,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.e","doc":"The underlying `Mor₂` term of a `WhiskerRight` term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.e\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span>.<span class=\"name\">e</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a> → <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L73-L73","name":"Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerRight","line":73,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.instInhabitedWhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">instInhabitedWhiskerRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L71-L72","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight.whisker","line":71,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.whisker","doc":"Construct the expression for `η ▷ f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.whisker\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span>.<span class=\"name\">whisker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">Mor₂</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom₁\">Atom₁</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L69-L70","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight.of","line":69,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.of","doc":"Construct the expression for an atomic 2-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight.of\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Atom\">Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\">WhiskerRight</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Normalize.lean#L67-L73","name":"Mathlib.Tactic.BicategoryLike.WhiskerRight","line":67,"kind":"inductive","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight","doc":"Expressions of the form `η ▷ f₁ ▷ ... ▷ fₙ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.WhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">WhiskerRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}