{"name":"Mathlib.Tactic.Relation.Symm","instances":[],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.Symm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Relation/Symm.lean#L19-L34","name":"Lean.Expr.relSidesIfSymm?","line":19,"kind":"def","docLink":"./Mathlib/Tactic/Relation/Symm.html#Lean.Expr.relSidesIfSymm?","doc":"If `e` is the form `@R .. x y`, where `R` is a symmetric\nrelation, return `some (R, x, y)`.\nAs a special case, if `e` is `@HEq α a β b`, return ``some (`HEq, a, b)``. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Relation/Symm.html#Lean.Expr.relSidesIfSymm?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">relSidesIfSymm?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>))</span></span></div></div>"}]}