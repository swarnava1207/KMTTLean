{"name":"Mathlib.Data.Analysis.Filter","instances":[{"typeNames":["CFilter"],"name":"instInhabitedCFilter","className":"Inhabited"},{"typeNames":["CFilter"],"name":"CFilter.instCoeFunForall","className":"CoeFun"},{"typeNames":["Filter.Realizer"],"name":"Filter.Realizer.instInhabitedPrincipal","className":"Inhabited"}],"imports":["Init","Mathlib.Order.Filter.Cofinite"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L304-L309","name":"Filter.Realizer.ne_bot_iff","line":304,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ne_bot_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ne_bot_iff\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ne_bot_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L300-L302","name":"Filter.Realizer.tendsto_iff","line":300,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.tendsto_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.tendsto_iff\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">tendsto_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L₁</span> : <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L₂</span> : <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Tendsto</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₁</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L₂</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">b</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L292-L298","name":"Filter.Realizer.le_iff","line":292,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.le_iff\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">b</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L288-L290","name":"Filter.Realizer.prod","line":288,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.prod","doc":"Construct a realizer for the product of filters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.prod\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L279-L286","name":"Filter.Realizer.iSup","line":279,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.iSup","doc":"Construct a realizer for indexed supremum "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.iSup\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L254-L277","name":"Filter.Realizer.bind","line":254,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bind","doc":"Construct a realizer for filter bind "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bind\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.bind\">bind</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L241-L252","name":"Filter.Realizer.cofinite","line":241,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.cofinite","doc":"Construct a realizer for the cofinite filter "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.cofinite\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">cofinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Cofinite.html#Filter.cofinite\">cofinite</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L223-L239","name":"Filter.Realizer.inf","line":223,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.inf","doc":"Construct a realizer for the inf of two filters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.inf\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L213-L221","name":"Filter.Realizer.sup","line":213,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.sup","doc":"Construct a realizer for the sup of two filters "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.sup\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">g</span>).<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L200-L211","name":"Filter.Realizer.comap","line":200,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.comap","doc":"Construct a realizer for `comap m f` given a realizer for `f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.comap\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.comap\">comap</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L196-L198","name":"Filter.Realizer.map_F","line":196,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map_F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">map_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map\">Realizer.map</a> <span class=\"fn\">m</span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map\">Realizer.map</a> <span class=\"fn\">m</span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L192-L194","name":"Filter.Realizer.map_σ","line":192,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map_σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map_σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">map_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map\">Realizer.map</a> <span class=\"fn\">m</span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L180-L190","name":"Filter.Realizer.map","line":180,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map","doc":"Construct a realizer for `map m f` given a realizer for `f` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.map\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.map\">map</a> <span class=\"fn\">m</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L176-L178","name":"Filter.Realizer.bot_F","line":176,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot_F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">bot_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot\">Realizer.bot</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L172-L174","name":"Filter.Realizer.bot_σ","line":172,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot_σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot_σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">bot_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot\">Realizer.bot</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L168-L170","name":"Filter.Realizer.bot","line":168,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot","doc":"`Unit` is a realizer for the bottom filter "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.bot\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L164-L166","name":"Filter.Realizer.top_F","line":164,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top_F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">top_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top\">Realizer.top</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L160-L162","name":"Filter.Realizer.top_σ","line":160,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top_σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top_σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">top_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top\">Realizer.top</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L156-L158","name":"Filter.Realizer.top","line":156,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top","doc":"`Unit` is a realizer for the top filter "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.top\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L153-L154","name":"Filter.Realizer.instInhabitedPrincipal","line":153,"kind":"instance","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.instInhabitedPrincipal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.instInhabitedPrincipal\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">instInhabitedPrincipal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">principal</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L149-L151","name":"Filter.Realizer.principal_F","line":149,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal_F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">principal_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal\">Realizer.principal</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L145-L147","name":"Filter.Realizer.principal_σ","line":145,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal_σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal_σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">principal_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal\">Realizer.principal</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L135-L143","name":"Filter.Realizer.principal","line":135,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal","doc":"`Unit` is a realizer for the principal filter "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.principal\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">principal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">principal</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L131-L133","name":"Filter.Realizer.ofEquiv_F","line":131,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv_F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ofEquiv_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv\">ofEquiv</a></span> <span class=\"fn\">E</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">s</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L127-L129","name":"Filter.Realizer.ofEquiv_σ","line":127,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv_σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv_σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ofEquiv_σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv\">ofEquiv</a></span> <span class=\"fn\">E</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">τ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L120-L125","name":"Filter.Realizer.ofEquiv","line":120,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv","doc":"Transfer a filter realizer to another realizer on a different base type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEquiv\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ofEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L110-L118","name":"Filter.Realizer.ofFilter","line":110,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofFilter","doc":"A filter realizes itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofFilter\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ofFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L105-L108","name":"Filter.Realizer.ofEq","line":105,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEq","doc":"Transfer a realizer along an equality of filter. This has better definitional equalities than\nthe `Eq.rec` proof. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.ofEq\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">ofEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L102-L103","name":"Filter.Realizer.mem_sets","line":102,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.mem_sets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.mem_sets\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">mem_sets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">f</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L96-L98","name":"CFilter.toRealizer","line":96,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.toRealizer","doc":"A `CFilter` realizes the filter it generates. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toRealizer\"><span class=\"name\">CFilter</span>.<span class=\"name\">toRealizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter\">toFilter</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L94-L94","name":"Filter.Realizer.eq","line":94,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.eq\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\">F</a></span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter\">toFilter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L93-L93","name":"Filter.Realizer.F","line":93,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.F\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\">σ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L92-L92","name":"Filter.Realizer.σ","line":92,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.σ\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">σ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_5</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L91-L91","name":"Filter.Realizer.mk","line":91,"kind":"ctor","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer.mk\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter\">toFilter</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\">Realizer</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L90-L94","name":"Filter.Realizer","line":90,"kind":"structure","docLink":"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer","doc":"A realizer for filter `f` is a cfilter which generates `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#Filter.Realizer\"><span class=\"name\">Filter</span>.<span class=\"name\">Realizer</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 (u_5 + 1))</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L83-L85","name":"CFilter.mem_toFilter_sets","line":83,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.mem_toFilter_sets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.mem_toFilter_sets\"><span class=\"name\">CFilter</span>.<span class=\"name\">mem_toFilter_sets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter\">toFilter</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L74-L81","name":"CFilter.toFilter","line":74,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter","doc":"The filter represented by a `CFilter` is the collection of supersets of\nelements of the filter base. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.toFilter\"><span class=\"name\">CFilter</span>.<span class=\"name\">toFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L68-L70","name":"CFilter.ofEquiv_val","line":68,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.ofEquiv_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.ofEquiv_val\"><span class=\"name\">CFilter</span>.<span class=\"name\">ofEquiv_val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.ofEquiv\">ofEquiv</a> <span class=\"fn\">E</span> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">E</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L59-L66","name":"CFilter.ofEquiv","line":59,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.ofEquiv","doc":"Map a `CFilter` to an equivalent representation type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.ofEquiv\"><span class=\"name\">CFilter</span>.<span class=\"name\">ofEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">τ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L56-L57","name":"CFilter.coe_mk","line":56,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.coe_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.coe_mk\"><span class=\"name\">CFilter</span>.<span class=\"name\">coe_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pt</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inf</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">inf</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">inf</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">f</span> := <span class=\"fn\">f</span>, <span class=\"fn\">pt</span> := <span class=\"fn\">pt</span>, <span class=\"fn\">inf</span> := <span class=\"fn\">inf</span>, <span class=\"fn\">inf_le_left</span> := <span class=\"fn\">h₁</span>, <span class=\"fn\">inf_le_right</span> := <span class=\"fn\">h₂</span> }</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L53-L54","name":"CFilter.instCoeFunForall","line":53,"kind":"instance","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.instCoeFunForall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.instCoeFunForall\"><span class=\"name\">CFilter</span>.<span class=\"name\">instCoeFunForall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L36-L41","name":"instInhabitedCFilter","line":36,"kind":"instance","docLink":"./Mathlib/Data/Analysis/Filter.html#instInhabitedCFilter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#instInhabitedCFilter\"><span class=\"name\">instInhabitedCFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L32-L32","name":"CFilter.inf_le_right","line":32,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.inf_le_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.inf_le_right\"><span class=\"name\">CFilter</span>.<span class=\"name\">inf_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.inf\">inf</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L31-L31","name":"CFilter.inf_le_left","line":31,"kind":"theorem","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.inf_le_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.inf_le_left\"><span class=\"name\">CFilter</span>.<span class=\"name\">inf_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.inf\">inf</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\">f</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L30-L30","name":"CFilter.inf","line":30,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.inf\"><span class=\"name\">CFilter</span>.<span class=\"name\">inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L29-L29","name":"CFilter.pt","line":29,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.pt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.pt\"><span class=\"name\">CFilter</span>.<span class=\"name\">pt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L28-L28","name":"CFilter.f","line":28,"kind":"def","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.f","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.f\"><span class=\"name\">CFilter</span>.<span class=\"name\">f</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L27-L27","name":"CFilter.mk","line":27,"kind":"ctor","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter.mk\"><span class=\"name\">CFilter</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pt</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inf</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inf_le_left</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">inf</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inf_le_right</span> : <span class=\"fn\">∀ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">σ</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">inf</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\">CFilter</a> <span class=\"fn\">α</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Analysis/Filter.lean#L24-L32","name":"CFilter","line":24,"kind":"structure","docLink":"./Mathlib/Data/Analysis/Filter.html#CFilter","doc":"A `CFilter α σ` is a realization of a filter (base) on `α`,\nrepresented by a type `σ` together with operations for the top element and\nthe binary `inf` operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Analysis/Filter.html#CFilter\"><span class=\"name\">CFilter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}