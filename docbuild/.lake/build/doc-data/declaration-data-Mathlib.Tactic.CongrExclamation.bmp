{"name":"Mathlib.Tactic.CongrExclamation","instances":[],"imports":["Init","Lean.Elab.Tactic.Config","Lean.Elab.Tactic.RCases","Lean.Meta.Tactic.Assumption","Lean.Meta.Tactic.Rfl","Mathlib.Lean.Meta.CongrTheorems","Mathlib.Logic.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L664-L732","name":"Congr!.congr!","line":664,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.congr!","doc":"Equates pieces of the left-hand side of a goal to corresponding pieces of the right-hand side by\nrecursively applying congruence lemmas. For example, with `⊢ f as = g bs` we could get\ntwo goals `⊢ f = g` and `⊢ as = bs`.\n\nSyntax:\n```\ncongr!\ncongr! n\ncongr! with x y z\ncongr! n with x y z\n```\nHere, `n` is a natural number and `x`, `y`, `z` are `rintro` patterns (like `h`, `rfl`, `⟨x, y⟩`,\n`_`, `-`, `(h | h)`, etc.).\n\nThe `congr!` tactic is similar to `congr` but is more insistent in trying to equate left-hand sides\nto right-hand sides of goals. Here is a list of things it can try:\n\n- If `R` in `⊢ R x y` is a reflexive relation, it will convert the goal to `⊢ x = y` if possible.\n  The list of reflexive relations is maintained using the `@[refl]` attribute.\n  As a special case, `⊢ p ↔ q` is converted to `⊢ p = q` during congruence processing and then\n  returned to `⊢ p ↔ q` form at the end.\n\n- If there is a user congruence lemma associated to the goal (for instance, a `@[congr]`-tagged\n  lemma applying to `⊢ List.map f xs = List.map g ys`), then it will use that.\n\n- It uses a congruence lemma generator at least as capable as the one used by `congr` and `simp`.\n  If there is a subexpression that can be rewritten by `simp`, then `congr!` should be able\n  to generate an equality for it.\n\n- It can do congruences of pi types using lemmas like `implies_congr` and `pi_congr`.\n\n- Before applying congruences, it will run the `intros` tactic automatically.\n  The introduced variables can be given names using a `with` clause.\n  This helps when congruence lemmas provide additional assumptions in hypotheses.\n\n- When there is an equality between functions, so long as at least one is obviously a lambda, we\n  apply `funext` or `Function.hfunext`, which allows for congruence of lambda bodies.\n\n- It can try to close goals using a few strategies, including checking\n  definitional equality, trying to apply `Subsingleton.elim` or `proof_irrel_heq`, and using the\n  `assumption` tactic.\n\nThe optional parameter is the depth of the recursive applications.\nThis is useful when `congr!` is too aggressive in breaking down the goal.\nFor example, given `⊢ f (g (x + y)) = f (g (y + x))`,\n`congr!` produces the goals `⊢ x = y` and `⊢ y = x`,\nwhile `congr! 2` produces the intended `⊢ x + y = y + x`.\n\nThe `congr!` tactic also takes a configuration option, for example\n```lean\ncongr! (config := {transparency := .default}) 2\n```\nThis overrides the default, which is to apply congruence lemmas at reducible transparency.\n\nThe `congr!` tactic is aggressive with equating two sides of everything. There is a predefined\nconfiguration that uses a different strategy:\nTry\n```lean\ncongr! (config := .unfoldSameFun)\n```\nThis only allows congruences between functions applications of definitionally equal functions,\nand it applies congruence lemmas at default transparency (rather than just reducible).\nThis is somewhat like `congr`.\n\nSee `Congr!.Config` for all options.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.congr!\"><span class=\"name\">Congr!</span>.<span class=\"name\">congr!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L662-L662","name":"Congr!.elabConfig","line":662,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.elabConfig","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.elabConfig\"><span class=\"name\">Congr!</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L645-L658","name":"Lean.MVarId.congrN!.go","line":645,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!.go\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrN!</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\">CongrMetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L639-L644","name":"Lean.MVarId.congrN!.post","line":639,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!.post","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!.post\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrN!</span>.<span class=\"name\">post</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\">CongrMetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L623-L658","name":"Lean.MVarId.congrN!","line":623,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!","doc":"A more insistent version of `Lean.MVarId.congrN`.\nSee the documentation on the `congr!` syntax.\n\nThe `depth?` argument controls the depth of the recursion. If `none`, then it uses a reasonably\nlarge bound that is linear in the expression depth. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrN!\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrN!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L608-L621","name":"Lean.MVarId.postCongr!","line":608,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.postCongr!","doc":"A pass to clean up after `Lean.MVarId.preCongr!` and `Lean.MVarId.congrCore!`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.postCongr!\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">postCongr!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L586-L606","name":"Lean.MVarId.congrCore!","line":586,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrCore!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrCore!\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrCore!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L566-L584","name":"Lean.MVarId.preCongr!","line":566,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.preCongr!","doc":"Convert a goal into an `Eq` goal if possible (since we have a better shot at those).\nAlso, if `tryClose := true`, then try to close the goal using an assumption, `Subsingleton.Elim`,\nor definitional equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.preCongr!\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">preCongr!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryClose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L553-L564","name":"Lean.MVarId.introsClean.isTrivialType","line":553,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.isTrivialType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.isTrivialType\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introsClean</span>.<span class=\"name\">isTrivialType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L530-L552","name":"Lean.MVarId.introsClean.loop","line":530,"kind":"opaque","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introsClean</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\">CongrMetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L526-L529","name":"Lean.MVarId.introsClean.eqImpOfIffImp","line":526,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.eqImpOfIffImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.eqImpOfIffImp\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introsClean</span>.<span class=\"name\">eqImpOfIffImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L522-L525","name":"Lean.MVarId.introsClean.heqImpOfEqImp","line":522,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.heqImpOfEqImp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean.heqImpOfEqImp\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introsClean</span>.<span class=\"name\">heqImpOfEqImp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L507-L564","name":"Lean.MVarId.introsClean","line":507,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean","doc":"Does `Lean.MVarId.intros` but then cleans up the introduced hypotheses, removing anything\nthat is trivial. If there are any patterns in the current `CongrMetaM` state then instead\nof `Lean.MVarId.intros` it does `Lean.Elab..Tactic.RCases.rintro`.\n\nCleaning up includes:\n- deleting hypotheses of the form `HEq x x`, `x = x`, and `x ↔ x`.\n- deleting Prop hypotheses that are already in the local context.\n- converting `HEq x y` to `x = y` if possible.\n- converting `x = y` to `x ↔ y` if possible.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.introsClean\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">introsClean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\">CongrMetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L489-L495","name":"CongrMetaM.nextPattern","line":489,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM.nextPattern","doc":"Pop the next pattern from the current state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM.nextPattern\"><span class=\"name\">CongrMetaM</span>.<span class=\"name\">nextPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\">CongrMetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L487-L487","name":"CongrMetaM","line":487,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrMetaM\"><span class=\"name\">CongrMetaM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L485-L485","name":"CongrState.patterns","line":485,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrState.patterns","doc":"Patterns to use when doing intro. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState.patterns\"><span class=\"name\">CongrState</span>.<span class=\"name\">patterns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState\">CongrState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L483-L483","name":"CongrState.goals","line":483,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrState.goals","doc":"Accumulated goals that `congr!` could not handle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState.goals\"><span class=\"name\">CongrState</span>.<span class=\"name\">goals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState\">CongrState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L481-L481","name":"CongrState.mk","line":481,"kind":"ctor","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState.mk\"><span class=\"name\">CongrState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patterns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState\">CongrState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L481-L485","name":"CongrState","line":481,"kind":"structure","docLink":"./Mathlib/Tactic/CongrExclamation.html#CongrState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#CongrState\"><span class=\"name\">CongrState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L476-L479","name":"Lean.MVarId.congrPasses!.when","line":476,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPasses!.when","doc":"Conditionally runs a congruence strategy depending on the predicate `b` applied to the config.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPasses!.when\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrPasses!</span>.<span class=\"name\">when</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L458-L479","name":"Lean.MVarId.congrPasses!","line":458,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPasses!","doc":"A list of all the congruence strategies used by `Lean.MVarId.congrCore!`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPasses!\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrPasses!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></span>)</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L451-L456","name":"Lean.MVarId.beqInst?","line":451,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.beqInst?","doc":"Tries to apply `lawful_beq_subsingleton` to prove that two `BEq` instances are equal\nby synthesizing `LawfulBEq` instances for both.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.beqInst?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">beqInst?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L428-L449","name":"Lean.MVarId.subsingletonHelim?","line":428,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.subsingletonHelim?","doc":"Try to apply `Subsingleton.helim` if the goal is a `HEq`. Tries synthesizing a `Subsingleton`\ninstance for both the LHS and the RHS.\n\nIf successful, this reduces proving `@HEq α x β y` to proving `α = β`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.subsingletonHelim?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">subsingletonHelim?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L420-L426","name":"Lean.MVarId.congrImplies?'","line":420,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrImplies?'","doc":"A version of `Lean.MVarId.congrImplies?` that uses `implies_congr'`\ninstead of `implies_congr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrImplies?'\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrImplies?'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L399-L410","name":"Lean.MVarId.obviousHfunext?","line":399,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.obviousHfunext?","doc":"Try to apply `Function.hfunext`, returning the new goals if it succeeds.\nLike `Lean.MVarId.obviousFunext?`, we only do so if at least one side of the `HEq` is a lambda.\nThis prevents unfolding of things like `Set`.\n\nNeed to have `Mathlib.Logic.Function.Basic` imported for this to succeed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.obviousHfunext?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">obviousHfunext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L386-L397","name":"Lean.MVarId.obviousFunext?","line":386,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.obviousFunext?","doc":"Try to apply `funext`, but only if it is an equality of two functions where at least one is\na lambda expression.\n\nOne thing this check prevents is accidentally applying `funext` to a set equality, but also when\ndoing congruence we don't want to apply `funext` unnecessarily.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.obviousFunext?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">obviousFunext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L380-L384","name":"Lean.MVarId.congrPi?","line":380,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPi?","doc":"Try to apply `pi_congr`. This is similar to `Lean.MVar.congrImplies?`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrPi?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrPi?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L363-L378","name":"Lean.MVarId.userCongr?.forSide","line":363,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.userCongr?.forSide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.userCongr?.forSide\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">userCongr?</span>.<span class=\"name\">forSide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L344-L378","name":"Lean.MVarId.userCongr?","line":344,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.userCongr?","doc":"Try applying user-provided congruence lemmas. If any are applicable,\nreturns a list of new goals.\n\nTries a congruence lemma associated to the LHS and then, if that failed, the RHS.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.userCongr?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">userCongr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L338-L342","name":"Lean.MVarId.congrSimp?.mkCongrSimpNArgs","line":338,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?.mkCongrSimpNArgs","doc":"Like `mkCongrSimp?` but takes in a specific arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?.mkCongrSimpNArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrSimp?</span>.<span class=\"name\">mkCongrSimpNArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nArgs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/CongrTheorems.html#Lean.Meta.CongrTheorem\">Meta.CongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L324-L336","name":"Lean.MVarId.congrSimp?.forSide","line":324,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?.forSide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?.forSide\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrSimp?</span>.<span class=\"name\">forSide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L303-L342","name":"Lean.MVarId.congrSimp?","line":303,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?","doc":"Like `Lean.MVarId.congr?` but instead of using only the congruence lemma associated to the LHS,\nit tries the RHS too, in the order specified by `config.preferLHS`.\n\nIt uses `Lean.Meta.mkCongrSimp?` to generate a congruence lemma, like in the `congr` tactic.\n\nApplies the congruence generated congruence lemmas according to `config`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.congrSimp?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">congrSimp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L271-L301","name":"Lean.MVarId.smartHCongr?.forSide","line":271,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?.forSide","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?.forSide\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">smartHCongr?</span>.<span class=\"name\">forSide</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">side</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L225-L270","name":"Lean.MVarId.smartHCongr?.loop","line":225,"kind":"opaque","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?.loop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?.loop\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">smartHCongr?</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhsArgs </span><span class=\"fn\">rhsArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L187-L301","name":"Lean.MVarId.smartHCongr?","line":187,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?","doc":"This is like `Lean.MVarId.hcongr?` but (1) looks at both sides when generating the congruence lemma\nand (2) inserts additional hypotheses from equalities from previous arguments.\n\nIt uses `Lean.Meta.mkRichHCongr` to generate the congruence lemmas.\n\nIf the goal is an `Eq`, it uses `eq_of_heq` first.\n\nAs a backup strategy, it uses the LHS/RHS method like in `Lean.MVarId.congrSimp?`\n(where `Congr!.Config.preferLHS` determines which side to try first). This uses a particular side\nof the target, generates the congruence lemma, then tries applying it. This can make progress\nwith higher transparency settings. To help the unifier, in this mode it assumes both sides have the\nexact same function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Lean.MVarId.smartHCongr?\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">smartHCongr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Congr!.Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L153-L185","name":"Congr!.plausiblyEqualTypes","line":153,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.plausiblyEqualTypes","doc":"Returns whether or not it's reasonable to consider an equality between types `ty1` and `ty2`.\nThe heuristic is the following:\n\n- If `ty1` and `ty2` are in `Prop`, then yes.\n- If in whnf both `ty1` and `ty2` have the same head and if (recursively) it's reasonable to\n  consider an equality between corresponding type arguments, then yes.\n- Otherwise, no.\n\nThis helps keep congr from going too far and generating hypotheses like `ℝ = ℤ`.\n\nTo keep things from going out of control, there is a `maxDepth`. Additionally, if we do the check\nwith `maxDepth = 0` then the heuristic answers \"no\". "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.plausiblyEqualTypes\"><span class=\"name\">Congr!</span>.<span class=\"name\">plausiblyEqualTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty1 </span><span class=\"fn\">ty2</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDepth</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> := <span class=\"fn\">5</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L128-L130","name":"Congr!.Config.maxArgsFor","line":128,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.maxArgsFor","doc":"According to the configuration, how many of the arguments in `numArgs` should be considered. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.maxArgsFor\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxArgsFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L124-L126","name":"Congr!.Config.numArgsOk","line":124,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.numArgsOk","doc":"Whether the given number of arguments is allowed to be considered. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.numArgsOk\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">numArgsOk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L115-L122","name":"Congr!.Config.unfoldSameFun","line":115,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.unfoldSameFun","doc":"A configuration option that makes `congr!` do the sorts of aggressive unfoldings that `congr`\ndoes while also similarly preventing `congr!` from considering partial applications or congruences\nbetween different functions being applied. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.unfoldSameFun\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">unfoldSameFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L113-L113","name":"Congr!.Config.beqEq","line":113,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.beqEq","doc":"Whether to use a special congruence lemma for `BEq` instances.\nThis synthesizes `LawfulBEq` instances to discharge equalities of `BEq` instances. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.beqEq\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">beqEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L110-L110","name":"Congr!.Config.useCongrSimp","line":110,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.useCongrSimp","doc":"Whether to use the congruence generator that is used by `simp` and `congr`. This generator\nis more strict, and it does not respect all configuration settings. It does respect\n`preferLHS`, `partialApp` and `maxArgs` and transparency settings. It acts as if `sameFun := true`\nand it ignores `typeEqs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.useCongrSimp\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">useCongrSimp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L105-L105","name":"Congr!.Config.etaExpand","line":105,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.etaExpand","doc":"As a last pass, perform eta expansion of both sides of an equality. For example,\nthis transforms a bare `HAdd.hAdd` into `fun x y => x + y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.etaExpand\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">etaExpand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L102-L102","name":"Congr!.Config.typeEqs","line":102,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.typeEqs","doc":"For type arguments that are implicit or have forward dependencies, whether or not `congr!`\nshould generate equalities even if the types do not look plausibly equal.\n\nWe have a heuristic in the main congruence generator that types\n`α` and `β` are *plausibly equal* according to the following algorithm:\n\n- If the types are both propositions, they are plausibly equal (`Iff`s are plausible).\n- If the types are from different universes, they are not plausibly equal.\n- Suppose in whnf we have `α = f a₁ ... aₘ` and `β = g b₁ ... bₘ`. If `f` is not definitionally\n  equal to `g` or `m ≠ n`, then `α` and `β` are not plausibly equal.\n- If there is some `i` such that `aᵢ` and `bᵢ` are not plausibly equal, then `α` and `β` are\n  not plausibly equal.\n- Otherwise, `α` and `β` are plausibly equal.\n\nThe purpose of this is to prevent considering equalities like `ℕ = ℤ` while allowing equalities\nsuch as `Fin n = Fin m` or `Subtype p = Subtype q` (so long as these are subtypes of the\nsame type).\n\nThe way this is implemented is that when the congruence generator is comparing arguments when\nlooking at an equality of function applications, it marks a function parameter as \"fixed\" if the\nprovided arguments are types that are not plausibly equal. The effect of this is that congruence\nsucceeds only if those arguments are defeq at `transparency` transparency. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.typeEqs\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">typeEqs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L79-L79","name":"Congr!.Config.maxArgs","line":79,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.maxArgs","doc":"The maximum number of arguments to consider when doing congruence of function applications.\nFor example, with `f a b c = g w x y z`, setting `maxArgs := some 2` means it will only consider\neither `f a b = g w x y` and `c = z` or `f a = g w x`, `b = y`, and `c = z`. Setting\n`maxArgs := none` (the default) means no limit.\n\nWhen the functions are dependent, `maxArgs` can prevent congruence from working at all.\nIn `Fintype.card α = Fintype.card β`, one needs to have `maxArgs` at `2` or higher since\nthere is a `Fintype` instance argument that depends on the first.\n\nWhen there aren't such dependency issues, setting `maxArgs := some 1` causes `congr!` to\ndo congruence on a single argument at a time. This can be used in conjunction with the\niteration limit to control exactly how many arguments are to be processed by congruence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.maxArgs\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">maxArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L66-L66","name":"Congr!.Config.sameFun","line":66,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.sameFun","doc":"Whether to require that both sides of an equality be applications of defeq functions.\nThat is, if true, `f a = g x` is only considered if `f` and `g` are defeq (making it be similar\nto the `congr` tactic). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.sameFun\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">sameFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L62-L62","name":"Congr!.Config.partialApp","line":62,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.partialApp","doc":"Allow both sides to be partial applications.\nWhen false, given an equality `f a b = g x y z` this means we never consider\nproving `f a = g x y`.\n\nIn this case, we might still consider `f = g x` if a pass generates a congruence lemma using the\nleft-hand side. Use `sameFun := true` to ensure both sides are applications\nof the same function (making it be similar to the `congr` tactic). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.partialApp\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">partialApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L54-L54","name":"Congr!.Config.preferLHS","line":54,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.preferLHS","doc":"For passes that synthesize a congruence lemma using one side of the equality,\nwe run the pass both for the left-hand side and the right-hand side. If `preferLHS` is `true`\nthen we start with the left-hand side.\n\nThis can be used to control which side's definitions are expanded when applying the\ncongruence lemma (if `preferLHS = true` then the RHS can be expanded). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.preferLHS\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">preferLHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L47-L47","name":"Congr!.Config.preTransparency","line":47,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.preTransparency","doc":"The transparency level to use when trying to close goals before applying congruence lemmas.\nThis includes trying to prove the goal by `rfl` and using the `assumption` tactic.\nBy default this is `.reducible`, which prevents unfolding of most definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.preTransparency\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">preTransparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L43-L43","name":"Congr!.Config.transparency","line":43,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.transparency","doc":"The transparency level to use when applying a congruence theorem.\nBy default this is `.reducible`, which prevents unfolding of most definitions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.transparency\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">transparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L40-L40","name":"Congr!.Config.closePost","line":40,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.closePost","doc":"If `closePost := true`, then try to close goals that remain after no more congruence\nlemmas can be applied, using the same tactics as `closePre`. These tactics are applied\nwith current tactic transparency level. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.closePost\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">closePost</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L36-L36","name":"Congr!.Config.closePre","line":36,"kind":"def","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.closePre","doc":"If `closePre := true`, then try to close goals before applying congruence lemmas\nusing tactics such as `rfl` and `assumption.  These tactics are applied with the\ntransparency level specified by `preTransparency`, which is `.reducible` by default. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.closePre\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">closePre</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L32-L32","name":"Congr!.Config.mk","line":32,"kind":"ctor","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config.mk\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closePre </span><span class=\"fn\">closePost</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency </span><span class=\"fn\">preTransparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preferLHS </span><span class=\"fn\">partialApp </span><span class=\"fn\">sameFun</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeEqs </span><span class=\"fn\">etaExpand </span><span class=\"fn\">useCongrSimp </span><span class=\"fn\">beqEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CongrExclamation.lean#L31-L113","name":"Congr!.Config","line":31,"kind":"structure","docLink":"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config","doc":"The configuration for the `congr!` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CongrExclamation.html#Congr!.Config\"><span class=\"name\">Congr!</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}