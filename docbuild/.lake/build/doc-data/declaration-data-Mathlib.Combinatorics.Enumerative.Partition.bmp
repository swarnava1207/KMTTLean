{"name":"Mathlib.Combinatorics.Enumerative.Partition","instances":[{"typeNames":["Eq"],"name":"Nat.instDecidableEqPartition","className":"Decidable"},{"typeNames":["Eq"],"name":"Nat.Partition.decidableEqPartition","className":"Decidable"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.instInhabited","className":"Inhabited"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.UniquePartitionZero","className":"Unique"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.UniquePartitionOne","className":"Unique"},{"typeNames":["Nat.Partition"],"name":"Nat.Partition.instFintype","className":"Fintype"}],"imports":["Init","Mathlib.Combinatorics.Enumerative.Composition","Mathlib.Tactic.ApplyFun"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L177-L179","name":"Nat.Partition.oddDistincts","line":177,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts","doc":"The finset of those partitions in which every part is odd and used at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.oddDistincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">oddDistincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L173-L175","name":"Nat.Partition.distincts","line":173,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts","doc":"The finset of those partitions in which each part is used at most once. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.distincts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">distincts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L169-L171","name":"Nat.Partition.odds","line":169,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds","doc":"The finset of those partitions in which every part is odd. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.odds\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">odds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L163-L167","name":"Nat.Partition.instFintype","line":163,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype","doc":"Show there are finitely many partitions by considering the surjection from compositions to\npartitions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instFintype\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instFintype</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L159-L161","name":"Nat.Partition.count_ofSums_zero","line":159,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L150-L157","name":"Nat.Partition.count_ofSums_of_ne_zero","line":150,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero","doc":"The number of times a positive integer `i` appears in the partition `ofSums n l hl` is the same\nas the number of times it appears in the multiset `l`.\n(For `i = 0`, `Partition.non_zero` combined with `Multiset.count_eq_zero_of_not_mem` gives that\nthis is `0` instead.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.count_ofSums_of_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">count_ofSums_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Count.html#Multiset.count\">Multiset.count</a> <span class=\"fn\">i</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L147-L148","name":"Nat.Partition.ofSym_one","line":147,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_one\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">indiscrete</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L144-L145","name":"Nat.Partition.UniquePartitionOne","line":144,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionOne\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">1</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L138-L142","name":"Nat.Partition.partition_one_parts","line":138,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_one_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_one_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">1</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L135-L136","name":"Nat.Partition.UniquePartitionZero","line":135,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.UniquePartitionZero\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">UniquePartitionZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L132-L133","name":"Nat.Partition.partition_zero_parts","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.partition_zero_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">partition_zero_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L129-L130","name":"Nat.Partition.indiscrete_parts","line":129,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete_parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\">indiscrete</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">n</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L127-L127","name":"Nat.Partition.instInhabited","line":127,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.instInhabited\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L124-L125","name":"Nat.Partition.indiscrete","line":124,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete","doc":"The partition of exactly one part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.indiscrete\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">indiscrete</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L115-L122","name":"Nat.Partition.ofSymShapeEquiv","line":115,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv","doc":"An equivalence between `σ` and `τ` induces an equivalence between the subtypes of `Sym σ n` and\n`Sym τ n` corresponding to a given partition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSymShapeEquiv\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSymShapeEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Subtype\">}</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">τ</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L107-L113","name":"Nat.Partition.ofSym_map","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym_map\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">τ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">σ</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">τ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Basic.html#Sym.map\">Sym.map</a> <span class=\"fn\">(⇑<span class=\"fn\">e</span>)</span> <span class=\"fn\">s</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\">ofSym</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L96-L103","name":"Nat.Partition.ofSym","line":96,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym","doc":"An element `s` of `Sym σ n` induces a partition given by its multiplicities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSym\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSym</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Basic.html#Sym\">Sym</a> <span class=\"fn\">σ</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L93-L93","name":"Nat.Partition.ofMultiset_parts","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\">ofMultiset</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Filter.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L92-L94","name":"Nat.Partition.ofMultiset","line":92,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset","doc":"A `Multiset ℕ` induces a partition on its sum. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofMultiset\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofMultiset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L84-L84","name":"Nat.Partition.ofSums_parts","line":84,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\">ofSums</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span> <span class=\"fn\">hl</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Filter.html#Multiset.filter\">Multiset.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L81-L90","name":"Nat.Partition.ofSums","line":81,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums","doc":"Given a multiset which sums to `n`, construct a partition of `n` with the same multiset, but\nwithout the zeros.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofSums\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofSums</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L74-L77","name":"Nat.Partition.ofComposition_surj","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_surj\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_surj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">ofComposition</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L68-L68","name":"Nat.Partition.ofComposition_parts","line":68,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition_parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition_parts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\">ofComposition</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition.blocks\">blocks</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L67-L72","name":"Nat.Partition.ofComposition","line":67,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition","doc":"A composition induces a partition (just convert the list to a multiset). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ofComposition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ofComposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Composition.html#Composition\">Composition</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L63-L65","name":"Nat.Partition.decidableEqPartition","line":63,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.decidableEqPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.decidableEqPartition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">decidableEqPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L59-L59","name":"Nat.instDecidableEqPartition","line":59,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.instDecidableEqPartition\"><span class=\"name\">Nat</span>.<span class=\"name\">instDecidableEqPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\"><span class=\"fn\">n✝</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L58-L58","name":"Nat.Partition.parts_sum","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum","doc":"proof that the `parts` sum to `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L56-L56","name":"Nat.Partition.parts_pos","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos","doc":"proof that the `parts` are positive "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L54-L54","name":"Nat.Partition.parts","line":54,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts","doc":"positive integers summing to `n` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">parts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L52-L52","name":"Nat.Partition.mk","line":52,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.mk\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/Defs.html#Multiset\">Multiset</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts_pos</span> : <span class=\"fn\">∀ {<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">parts</span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts_sum</span> : <span class=\"fn\"><span class=\"fn\">parts</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/Multiset/Defs.html#Multiset.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L51-L51","name":"Nat.Partition.ext","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parts</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L51-L51","name":"Nat.Partition.ext_iff","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.ext_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\">Partition</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition.parts\">parts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/Partition.lean#L50-L59","name":"Nat.Partition","line":50,"kind":"structure","docLink":"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition","doc":"A partition of `n` is a multiset of positive integers summing to `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/Partition.html#Nat.Partition\"><span class=\"name\">Nat</span>.<span class=\"name\">Partition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}