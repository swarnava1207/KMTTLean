{"name":"Mathlib.Control.Traversable.Instances","instances":[{"typeNames":["Option"],"name":"instLawfulTraversableOption","className":"LawfulTraversable"},{"typeNames":["List"],"name":"List.instLawfulTraversable","className":"LawfulTraversable"},{"typeNames":["Sum"],"name":"Sum.instLawfulTraversable","className":"LawfulTraversable"}],"imports":["Init","Mathlib.Control.Applicative","Mathlib.Control.Traversable.Basic","Mathlib.Data.List.Forall2","Mathlib.Data.Set.Functor"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L171-L176","name":"Sum.instLawfulTraversable","line":171,"kind":"instance","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.instLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.instLawfulTraversable\"><span class=\"name\">Sum</span>.<span class=\"name\">instLawfulTraversable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum\">Sum</a> <span class=\"fn\">σ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L163-L167","name":"Sum.naturality","line":163,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.naturality\"><span class=\"name\">Sum</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L157-L159","name":"Sum.map_traverse","line":157,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.map_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.map_traverse\"><span class=\"name\">Sum</span>.<span class=\"name\">map_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L153-L155","name":"Sum.traverse_eq_map_id","line":153,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.traverse_eq_map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.traverse_eq_map_id\"><span class=\"name\">Sum</span>.<span class=\"name\">traverse_eq_map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L148-L151","name":"Sum.comp_traverse","line":148,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.comp_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.comp_traverse\"><span class=\"name\">Sum</span>.<span class=\"name\">comp_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> (<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L143-L144","name":"Sum.id_traverse","line":143,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.id_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.id_traverse\"><span class=\"name\">Sum</span>.<span class=\"name\">id_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L139-L141","name":"Sum.traverse_map","line":139,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Sum.traverse_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Sum.traverse_map\"><span class=\"name\">Sum</span>.<span class=\"name\">traverse_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> <span class=\"fn\">f</span> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Sum.traverse\">Sum.traverse</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L118-L123","name":"List.mem_traverse","line":118,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.mem_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.mem_traverse\"><span class=\"name\">List</span>.<span class=\"name\">mem_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">β'</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Forall₂\">Forall₂</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">β'</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α'</span>) =&gt; <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L112-L116","name":"List.traverse_append","line":112,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.traverse_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.traverse_append\"><span class=\"name\">List</span>.<span class=\"name\">traverse_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as </span><span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> (<span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β'</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x2</span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span></span> &lt;*&gt; <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">bs</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L105-L108","name":"List.traverse_cons","line":105,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.traverse_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.traverse_cons\"><span class=\"name\">List</span>.<span class=\"name\">traverse_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(fun (<span class=\"fn\">x1</span> : <span class=\"fn\">β'</span>) (<span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β'</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">x2</span>)</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span> &lt;*&gt; <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L101-L103","name":"List.traverse_nil","line":101,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.traverse_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.traverse_nil\"><span class=\"name\">List</span>.<span class=\"name\">traverse_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable.traverse\">traverse</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L88-L93","name":"List.instLawfulTraversable","line":88,"kind":"instance","docLink":"./Mathlib/Control/Traversable/Instances.html#List.instLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.instLawfulTraversable\"><span class=\"name\">List</span>.<span class=\"name\">instLawfulTraversable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <a href=\"./Init/Prelude.html#List\">List</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L82-L86","name":"List.naturality","line":82,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.naturality\"><span class=\"name\">List</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L76-L78","name":"List.traverse_eq_map_id","line":76,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.traverse_eq_map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.traverse_eq_map_id\"><span class=\"name\">List</span>.<span class=\"name\">traverse_eq_map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L71-L74","name":"List.comp_traverse","line":71,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.comp_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.comp_traverse\"><span class=\"name\">List</span>.<span class=\"name\">comp_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> (<span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L68-L69","name":"List.id_traverse","line":68,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#List.id_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#List.id_traverse\"><span class=\"name\">List</span>.<span class=\"name\">id_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.traverse\">List.traverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L50-L55","name":"instLawfulTraversableOption","line":50,"kind":"instance","docLink":"./Mathlib/Control/Traversable/Instances.html#instLawfulTraversableOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#instLawfulTraversableOption\"><span class=\"name\">instLawfulTraversableOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <a href=\"./Init/Prelude.html#Option\">Option</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L42-L46","name":"Option.naturality","line":42,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Option.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Option.naturality\"><span class=\"name\">Option</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L37-L38","name":"Option.traverse_eq_map_id","line":37,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Option.traverse_eq_map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Option.traverse_eq_map_id\"><span class=\"name\">Option</span>.<span class=\"name\">traverse_eq_map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L32-L35","name":"Option.comp_traverse","line":32,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Option.comp_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Option.comp_traverse\"><span class=\"name\">Option</span>.<span class=\"name\">comp_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Traversable/Instances.lean#L29-L30","name":"Option.id_traverse","line":29,"kind":"theorem","docLink":"./Mathlib/Control/Traversable/Instances.html#Option.id_traverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Traversable/Instances.html#Option.id_traverse\"><span class=\"name\">Option</span>.<span class=\"name\">id_traverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Option/Defs.html#Option.traverse\">Option.traverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"}]}