{"name":"Mathlib.CategoryTheory.Monad.Kleisli","instances":[{"typeNames":["CategoryTheory.Kleisli"],"name":"CategoryTheory.Kleisli.instInhabited","className":"Inhabited"},{"typeNames":["CategoryTheory.Kleisli"],"name":"CategoryTheory.Kleisli.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.Cokleisli"],"name":"CategoryTheory.Cokleisli.instInhabited","className":"Inhabited"},{"typeNames":["CategoryTheory.Cokleisli"],"name":"CategoryTheory.Cokleisli.category","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.CategoryTheory.Adjunction.Basic","Mathlib.CategoryTheory.Monad.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L156-L158","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf","line":156,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf","doc":"The composition of the adjunction gives the original functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisliCompFromCokleisliIsoSelf\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisliCompFromCokleisliIsoSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">toCokleisli</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">fromCokleisli</a> <span class=\"fn\">U</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad.toFunctor\">toFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L146-L154","name":"CategoryTheory.Cokleisli.Adjunction.adj","line":146,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.adj","doc":"The co-Kleisli adjunction which gives rise to the monad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">fromCokleisli</a> <span class=\"fn\">U</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">toCokleisli</a> <span class=\"fn\">U</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L133-L133","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map","line":133,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">fromCokleisli</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad.δ\">δ</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L133-L133","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj","line":133,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\">fromCokleisli</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L132-L144","name":"CategoryTheory.Cokleisli.Adjunction.fromCokleisli","line":132,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli","doc":"The left adjoint of the adjunction which induces the comonad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.fromCokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromCokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L123-L123","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli_map","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">x✝</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">toCokleisli</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad.ε\">ε</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L123-L123","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj","line":123,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\">toCokleisli</a> <span class=\"fn\">U</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L122-L130","name":"CategoryTheory.Cokleisli.Adjunction.toCokleisli","line":122,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli","doc":"The right adjoint of the adjunction which induces the comonad `(U, ε_ U, δ_ U)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.Adjunction.toCokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toCokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L114-L118","name":"CategoryTheory.Cokleisli.category","line":114,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.category","doc":"The co-Kleisli category on a comonad `U`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L111-L112","name":"CategoryTheory.Cokleisli.instInhabited","line":111,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli.instInhabited\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\">Cokleisli</a> <span class=\"fn\">U</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L100-L105","name":"CategoryTheory.Cokleisli","line":100,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli","doc":"The objects for the co-Kleisli category of the comonad `U : Comonad C`, which are the same\nthing as objects of the base category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Cokleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cokleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_U</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Comonad\">Comonad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L92-L94","name":"CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf","line":92,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf","doc":"The composition of the adjunction gives the original functor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisliCompFromKleisliIsoSelf\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisliCompFromKleisliIsoSelf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">toKleisli</a> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">fromKleisli</a> <span class=\"fn\">T</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad.toFunctor\">toFunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L80-L90","name":"CategoryTheory.Kleisli.Adjunction.adj","line":80,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.adj","doc":"The Kleisli adjunction which gives rise to the monad `(T, η_ T, μ_ T)`.\ncf Lemma 5.2.11 of [Riehl][riehl2017]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">toKleisli</a> <span class=\"fn\">T</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">fromKleisli</a> <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L68-L68","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli_map","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x✝ </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">x✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">fromKleisli</a> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad.μ\">μ</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">Y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L68-L68","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli_obj","line":68,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\">fromKleisli</a> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L67-L78","name":"CategoryTheory.Kleisli.Adjunction.fromKleisli","line":67,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli","doc":"The right adjoint of the adjunction which induces the monad `(T, η_ T, μ_ T)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.fromKleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">fromKleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L58-L58","name":"CategoryTheory.Kleisli.Adjunction.toKleisli_map","line":58,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">toKleisli</a> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad.η\">η</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">Y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L58-L58","name":"CategoryTheory.Kleisli.Adjunction.toKleisli_obj","line":58,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\">toKleisli</a> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L57-L65","name":"CategoryTheory.Kleisli.Adjunction.toKleisli","line":57,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli","doc":"The left adjoint of the adjunction which induces the monad `(T, η_ T, μ_ T)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.Adjunction.toKleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">Adjunction</span>.<span class=\"name\">toKleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L42-L53","name":"CategoryTheory.Kleisli.category","line":42,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.category","doc":"The Kleisli category on a monad `T`.\ncf Definition 5.2.9 in [Riehl][riehl2017]. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L39-L40","name":"CategoryTheory.Kleisli.instInhabited","line":39,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli.instInhabited\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\">Kleisli</a> <span class=\"fn\">T</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Monad/Kleisli.lean#L28-L33","name":"CategoryTheory.Kleisli","line":28,"kind":"def","docLink":"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli","doc":"The objects for the Kleisli category of the monad `T : Monad C`, which are the same\nthing as objects of the base category `C`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Monad/Kleisli.html#CategoryTheory.Kleisli\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Kleisli</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_T</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monad/Basic.html#CategoryTheory.Monad\">Monad</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}