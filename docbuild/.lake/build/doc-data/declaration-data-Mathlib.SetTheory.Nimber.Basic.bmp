{"name":"Mathlib.SetTheory.Nimber.Basic","instances":[{"typeNames":["Nimber"],"name":"instNimberZero","className":"Zero"},{"typeNames":["Nimber"],"name":"instNimberInhabited","className":"Inhabited"},{"typeNames":["Nimber"],"name":"instNimberOne","className":"One"},{"typeNames":["Nimber"],"name":"instNimberNontrivial","className":"Nontrivial"},{"typeNames":["Nimber"],"name":"instNimberWellFoundedRelation","className":"WellFoundedRelation"},{"typeNames":["Nimber"],"name":"Nimber.instLinearOrder","className":"LinearOrder"},{"typeNames":["Nimber"],"name":"Nimber.instSuccOrder","className":"SuccOrder"},{"typeNames":["Nimber"],"name":"Nimber.instOrderBot","className":"OrderBot"},{"typeNames":["Nimber"],"name":"Nimber.instNoMaxOrder","className":"NoMaxOrder"},{"typeNames":["Nimber"],"name":"Nimber.instZeroLEOneClass","className":"ZeroLEOneClass"},{"typeNames":["OfNat.ofNat"],"name":"Nimber.instNeZeroOne","className":"NeZero"},{"typeNames":["Nimber"],"name":"Nimber.instWellFoundedLT","className":"IsWellFounded"},{"typeNames":["Nimber"],"name":"Nimber.instConditionallyCompleteLinearOrderBot","className":"ConditionallyCompleteLinearOrderBot"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Iio","className":"Small"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Iic","className":"Small"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Ico","className":"Small"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Icc","className":"Small"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Ioo","className":"Small"},{"typeNames":["Set.Elem"],"name":"Nimber.small_Ioc","className":"Small"},{"typeNames":["Nimber"],"name":"Nimber.uncountable","className":"Uncountable"},{"typeNames":["Nimber"],"name":"Nimber.instAdd","className":"Add"},{"typeNames":["Nimber"],"name":"Nimber.instIsLeftCancelAdd","className":"IsLeftCancelAdd"},{"typeNames":["Nimber"],"name":"Nimber.instIsRightCancelAdd","className":"IsRightCancelAdd"},{"typeNames":["Nimber"],"name":"Nimber.instNeg","className":"Neg"},{"typeNames":["Nimber"],"name":"Nimber.instAddCommGroupWithOne","className":"AddCommGroupWithOne"}],"imports":["Init","Mathlib.Data.Nat.Bitwise","Mathlib.SetTheory.Ordinal.Family"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L375-L394","name":"Nimber.add_nat","line":375,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_nat","doc":"Nimber addition of naturals corresponds to the bitwise XOR operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_nat\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_nat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L371-L373","name":"Nimber.lt_add_cases","line":371,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_add_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_add_cases\"><span class=\"name\">Nimber</span>.<span class=\"name\">lt_add_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L358-L369","name":"Nimber.add_trichotomy","line":358,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_trichotomy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_trichotomy\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_trichotomy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L354-L356","name":"Nimber.add_cancel_left","line":354,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_cancel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_cancel_left\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_cancel_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L350-L352","name":"Nimber.add_cancel_right","line":350,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_cancel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_cancel_right\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_cancel_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L341-L348","name":"Nimber.instAddCommGroupWithOne","line":341,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instAddCommGroupWithOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instAddCommGroupWithOne\"><span class=\"name\">Nimber</span>.<span class=\"name\">instAddCommGroupWithOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Int/Cast/Defs.html#AddCommGroupWithOne\">AddCommGroupWithOne</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L337-L339","name":"Nimber.neg_eq","line":337,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.neg_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.neg_eq\"><span class=\"name\">Nimber</span>.<span class=\"name\">neg_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L334-L335","name":"Nimber.instNeg","line":334,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNeg\"><span class=\"name\">Nimber</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L331-L332","name":"Nimber.zero_add","line":331,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.zero_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.zero_add\"><span class=\"name\">Nimber</span>.<span class=\"name\">zero_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L316-L329","name":"Nimber.add_zero","line":316,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L302-L314","name":"Nimber.add_assoc","line":302,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_assoc\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L298-L300","name":"Nimber.add_self","line":298,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_self\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L295-L296","name":"Nimber.add_ne_zero_iff","line":295,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_ne_zero_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_ne_zero_iff\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_ne_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L276-L293","name":"Nimber.add_eq_zero","line":276,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_eq_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L269-L274","name":"Nimber.add_comm","line":269,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_comm\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L261-L267","name":"Nimber.instIsRightCancelAdd","line":261,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instIsRightCancelAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instIsRightCancelAdd\"><span class=\"name\">Nimber</span>.<span class=\"name\">instIsRightCancelAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L253-L259","name":"Nimber.instIsLeftCancelAdd","line":253,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instIsLeftCancelAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instIsLeftCancelAdd\"><span class=\"name\">Nimber</span>.<span class=\"name\">instIsLeftCancelAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L241-L245","name":"Nimber.add_le_of_forall_ne","line":241,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_le_of_forall_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_le_of_forall_ne\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_le_of_forall_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L236-L239","name":"Nimber.exists_of_lt_add","line":236,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.exists_of_lt_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.exists_of_lt_add\"><span class=\"name\">Nimber</span>.<span class=\"name\">exists_of_lt_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L223-L228","name":"Nimber.add_def","line":223,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add_def\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">(∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L220-L221","name":"Nimber.instAdd","line":220,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instAdd\"><span class=\"name\">Nimber</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L212-L218","name":"Nimber.add","line":212,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add","doc":"Nimber addition is recursively defined so that `a + b` is the smallest nimber not equal to\n`a' + b` or `a + b'` for `a' < a` and `b' < b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.add\"><span class=\"name\">Nimber</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L200-L202","name":"Ordinal.toNimber_min","line":200,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_min\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L196-L198","name":"Ordinal.toNimber_max","line":196,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_max\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L192-L194","name":"Ordinal.toNimber_eq_one","line":192,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_eq_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L188-L190","name":"Ordinal.toNimber_eq_zero","line":188,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_eq_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L184-L186","name":"Ordinal.toNimber_one","line":184,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_one\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L180-L182","name":"Ordinal.toNimber_zero","line":180,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_zero\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L176-L178","name":"Ordinal.toNimber_toOrdinal","line":176,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_toOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_toOrdinal\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_toOrdinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">Nimber.toOrdinal</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L172-L174","name":"Ordinal.toNimber_symm_eq","line":172,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_symm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber_symm_eq\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber_symm_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">toNimber</a>.<a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">Nimber.toOrdinal</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L165-L166","name":"Nimber.uncountable","line":165,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.uncountable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.uncountable\"><span class=\"name\">Nimber</span>.<span class=\"name\">uncountable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Uncountable\">Uncountable</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L162-L163","name":"not_small_nimber","line":162,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#not_small_nimber","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#not_small_nimber\"><span class=\"name\">not_small_nimber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, max (u + 1) (v + 1)}</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L157-L158","name":"Nimber.not_bddAbove_compl_of_small","line":157,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.not_bddAbove_compl_of_small","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.not_bddAbove_compl_of_small\"><span class=\"name\">Nimber</span>.<span class=\"name\">not_bddAbove_compl_of_small</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Mathlib/Order/Bounds/Defs.html#BddAbove\">BddAbove</a> <span class=\"fn\">s</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L155-L155","name":"Nimber.small_Ioc","line":155,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ioc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ioc\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Ioc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioc\">Set.Ioc</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L154-L154","name":"Nimber.small_Ioo","line":154,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ioo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ioo\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Ioo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L153-L153","name":"Nimber.small_Icc","line":153,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Icc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Icc\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Icc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L152-L152","name":"Nimber.small_Ico","line":152,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ico","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Ico\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Ico</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ico\">Set.Ico</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L151-L151","name":"Nimber.small_Iic","line":151,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Iic","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Iic\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Iic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iic\">Set.Iic</a> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L150-L150","name":"Nimber.small_Iio","line":150,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Iio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.small_Iio\"><span class=\"name\">Nimber</span>.<span class=\"name\">small_Iio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Iio\">Set.Iio</a> <span class=\"fn\">a</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L147-L148","name":"Nimber.eq_nat_of_le_nat","line":147,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.eq_nat_of_le_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.eq_nat_of_le_nat\"><span class=\"name\">Nimber</span>.<span class=\"name\">eq_nat_of_le_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">↑<span class=\"fn\">c</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L144-L145","name":"Nimber.one_le_iff_ne_zero","line":144,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.one_le_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.one_le_iff_ne_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">one_le_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L141-L142","name":"Nimber.lt_one_iff_zero","line":141,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_one_iff_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_one_iff_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">lt_one_iff_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L138-L139","name":"Nimber.pos_iff_ne_zero","line":138,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.pos_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.pos_iff_ne_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">pos_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L135-L136","name":"Nimber.not_lt_zero","line":135,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.not_lt_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.not_lt_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">not_lt_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L132-L133","name":"Nimber.le_zero","line":132,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.le_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.le_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">le_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L128-L130","name":"Nimber.induction","line":128,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.induction","doc":"`Ordinal.induction` but for `Nimber`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.induction\"><span class=\"name\">Nimber</span>.<span class=\"name\">induction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">j</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>), <span class=\"fn\"><span class=\"fn\">(∀ <span class=\"fn\">k</span> &lt; <span class=\"fn\">j</span>, <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">k</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">j</span></span></span>)</span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L123-L126","name":"Nimber.rec","line":123,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.rec","doc":"A recursor for `Nimber`. Use as `induction x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.rec\"><span class=\"name\">Nimber</span>.<span class=\"name\">rec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_2}</a>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">a</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L120-L121","name":"Nimber.succ_def","line":120,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.succ_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.succ_def\"><span class=\"name\">Nimber</span>.<span class=\"name\">succ_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> (<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L116-L118","name":"Nimber.toOrdinal_min","line":116,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_min\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_min</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L112-L114","name":"Nimber.toOrdinal_max","line":112,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_max","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_max\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_max</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L108-L110","name":"Nimber.toOrdinal_eq_one","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_eq_one\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L104-L106","name":"Nimber.toOrdinal_eq_zero","line":104,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_eq_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L100-L102","name":"Nimber.toOrdinal_one","line":100,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_one\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L96-L98","name":"Nimber.toOrdinal_zero","line":96,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L92-L94","name":"Nimber.bot_eq_zero","line":92,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.bot_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.bot_eq_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">bot_eq_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L89-L90","name":"Nimber.instConditionallyCompleteLinearOrderBot","line":89,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instConditionallyCompleteLinearOrderBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instConditionallyCompleteLinearOrderBot\"><span class=\"name\">Nimber</span>.<span class=\"name\">instConditionallyCompleteLinearOrderBot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/ConditionallyCompleteLattice/Defs.html#ConditionallyCompleteLinearOrderBot\">ConditionallyCompleteLinearOrderBot</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L86-L87","name":"Nimber.instWellFoundedLT","line":86,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instWellFoundedLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instWellFoundedLT\"><span class=\"name\">Nimber</span>.<span class=\"name\">instWellFoundedLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L83-L84","name":"Nimber.lt_wf","line":83,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_wf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.lt_wf\"><span class=\"name\">Nimber</span>.<span class=\"name\">lt_wf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFounded\">WellFounded</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L79-L81","name":"Nimber.toOrdinal_toNimber","line":79,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_toNimber","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_toNimber\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_toNimber</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L75-L77","name":"Nimber.toOrdinal_symm_eq","line":75,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_symm_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal_symm_eq\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal_symm_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\">toOrdinal</a>.<a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\">Ordinal.toNimber</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L68-L69","name":"Nimber.«term∗_»","line":68,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.«term∗_»","doc":"The identity function between `Ordinal` and `Nimber`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.«term∗_»\"><span class=\"name\">Nimber</span>.<span class=\"name\">«term∗_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L63-L66","name":"Nimber.toOrdinal","line":63,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal","doc":"The identity function between `Nimber` and `Ordinal`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.toOrdinal\"><span class=\"name\">Nimber</span>.<span class=\"name\">toOrdinal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L58-L61","name":"Ordinal.toNimber","line":58,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber","doc":"The identity function between `Ordinal` and `Nimber`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Ordinal.toNimber\"><span class=\"name\">Ordinal</span>.<span class=\"name\">toNimber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u_1}</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L56-L56","name":"Nimber.instNeZeroOne","line":56,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNeZeroOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNeZeroOne\"><span class=\"name\">Nimber</span>.<span class=\"name\">instNeZeroOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L55-L55","name":"Nimber.instZeroLEOneClass","line":55,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instZeroLEOneClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instZeroLEOneClass\"><span class=\"name\">Nimber</span>.<span class=\"name\">instZeroLEOneClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/ZeroLEOne.html#ZeroLEOneClass\">ZeroLEOneClass</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L54-L54","name":"Nimber.instNoMaxOrder","line":54,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNoMaxOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instNoMaxOrder\"><span class=\"name\">Nimber</span>.<span class=\"name\">instNoMaxOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Max.html#NoMaxOrder\">NoMaxOrder</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L53-L53","name":"Nimber.instOrderBot","line":53,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instOrderBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instOrderBot\"><span class=\"name\">Nimber</span>.<span class=\"name\">instOrderBot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L52-L52","name":"Nimber.instSuccOrder","line":52,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instSuccOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instSuccOrder\"><span class=\"name\">Nimber</span>.<span class=\"name\">instSuccOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SuccPred/Basic.html#SuccOrder\">SuccOrder</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L51-L51","name":"Nimber.instLinearOrder","line":51,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instLinearOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber.instLinearOrder\"><span class=\"name\">Nimber</span>.<span class=\"name\">instLinearOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L49-L49","name":"instNimberWellFoundedRelation","line":49,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#instNimberWellFoundedRelation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#instNimberWellFoundedRelation\"><span class=\"name\">instNimberWellFoundedRelation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/WF.html#WellFoundedRelation\">WellFoundedRelation</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L49-L49","name":"instNimberNontrivial","line":49,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#instNimberNontrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#instNimberNontrivial\"><span class=\"name\">instNimberNontrivial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L49-L49","name":"instNimberOne","line":49,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#instNimberOne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#instNimberOne\"><span class=\"name\">instNimberOne</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L49-L49","name":"instNimberInhabited","line":49,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#instNimberInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#instNimberInhabited\"><span class=\"name\">instNimberInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L49-L49","name":"instNimberZero","line":49,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#instNimberZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#instNimberZero\"><span class=\"name\">instNimberZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Basic.lean#L47-L49","name":"Nimber","line":47,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Basic.html#Nimber","doc":"A type synonym for ordinals with nimber addition and multiplication. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\"><span class=\"name\">Nimber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}