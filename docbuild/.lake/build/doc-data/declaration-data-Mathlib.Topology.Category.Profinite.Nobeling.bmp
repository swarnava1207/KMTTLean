{"name":"Mathlib.Topology.Category.Profinite.Nobeling","instances":[{"typeNames":["Profinite.NobelingProof.Products"],"name":"Profinite.NobelingProof.Products.instLinearOrder","className":"LinearOrder"},{"typeNames":["Profinite.NobelingProof.Products"],"name":"Profinite.NobelingProof.Products.instWellFoundedLT","className":"IsWellFounded"},{"typeNames":["Set.Elem"],"name":"Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","className":"Fintype"},{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","className":"Subsingleton"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","className":"IsEmpty"},{"typeNames":["LocallyConstant"],"name":"Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","className":"Nontrivial"},{"typeNames":["Subtype"],"name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","className":"Unique"},{"typeNames":["Int","LocallyConstant"],"name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","className":"NoZeroSMulDivisors"},{"typeNames":["Int","LocallyConstant"],"name":"LocallyConstant.freeOfProfinite","className":"Module.Free"}],"imports":["Init","Mathlib.Algebra.Category.ModuleCat.Free","Mathlib.Topology.Category.Profinite.CofilteredLimit","Mathlib.Topology.Category.Profinite.Product","Mathlib.Topology.LocallyConstant.Algebra","Mathlib.Topology.Separation.Profinite","Mathlib.Data.Bool.Basic","Mathlib.Data.Finset.Sort"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1835-L1839","name":"LocallyConstant.freeOfProfinite","line":1835,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#LocallyConstant.freeOfProfinite","doc":"Nöbeling's theorem: the `ℤ`-module `LocallyConstant S ℤ` is free for every `S : Profinite` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#LocallyConstant.freeOfProfinite\"><span class=\"name\">LocallyConstant</span>.<span class=\"name\">freeOfProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1828-L1829","name":"Profinite.Nobeling.embedding","line":1828,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.embedding","doc":"**Alias** of `Profinite.Nobeling.isClosedEmbedding`.\n\n---\n\nThe map `Nobeling.ι` is a closed embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.embedding\"><span class=\"name\">Profinite</span>.<span class=\"name\">Nobeling</span>.<span class=\"name\">embedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsClosedEmbedding\">Topology.IsClosedEmbedding</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι\">ι</a> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1802-L1826","name":"Profinite.Nobeling.isClosedEmbedding","line":1802,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.isClosedEmbedding","doc":"The map `Nobeling.ι` is a closed embedding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.isClosedEmbedding\"><span class=\"name\">Profinite</span>.<span class=\"name\">Nobeling</span>.<span class=\"name\">isClosedEmbedding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsClosedEmbedding\">Topology.IsClosedEmbedding</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι\">ι</a> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1797-L1799","name":"Profinite.Nobeling.ι","line":1797,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι","doc":"The embedding `S → (I → Bool)` where `I` is the set of clopens of `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.Nobeling.ι\"><span class=\"name\">Profinite</span>.<span class=\"name\">Nobeling</span>.<span class=\"name\">ι</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClopen\">IsClopen</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1784-L1790","name":"Profinite.NobelingProof.Nobeling_aux","line":1784,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Nobeling_aux","doc":"Given a profinite set `S` and a closed embedding `S → (I → Bool)`, the `ℤ`-module\n`LocallyConstant C ℤ` is free.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Nobeling_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Nobeling_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hι</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Induced.html#Topology.IsClosedEmbedding\">Topology.IsClosedEmbedding</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/FreeModule/Basic.html#Module.Free\">Module.Free</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1773-L1777","name":"Profinite.NobelingProof.GoodProducts.Basis","line":1773,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Basis","doc":"`GoodProducts C` as a `ℤ`-basis for `LocallyConstant C ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Basis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">Basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Basis/Defs.html#Basis\">_root_.Basis</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1768-L1771","name":"Profinite.NobelingProof.GoodProducts.linearIndependent","line":1768,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1755-L1766","name":"Profinite.NobelingProof.GoodProducts.linearIndependentAux","line":1755,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentAux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">P</a> <span class=\"fn\">I</span> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1746-L1753","name":"Profinite.NobelingProof.GoodProducts.Plimit","line":1746,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Plimit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.Plimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">Plimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ <span class=\"fn\">o'</span> &lt; <span class=\"fn\">o</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">P</a> <span class=\"fn\">I</span> <span class=\"fn\">o'</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">P</a> <span class=\"fn\">I</span> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1736-L1744","name":"Profinite.NobelingProof.GoodProducts.P0","line":1736,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.P0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.P0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">P0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\">P</a> <span class=\"fn\">I</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1700-L1711","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval","line":1700,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_comp_of_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_comp_of_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span>)</span></span> →\n  <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> (ι := <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>) <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>\n    (<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1690-L1697","name":"Profinite.NobelingProof.GoodProducts.maxToGood_injective","line":1690,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxToGood_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxToGood_injective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">maxToGood_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood\">MaxToGood</a> <span class=\"fn\">C</span> <span class=\"fn\">hC</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span> <span class=\"fn\">h₁</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1683-L1688","name":"Profinite.NobelingProof.GoodProducts.MaxToGood","line":1683,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood","doc":"Given `l : MaxProducts C ho`, its `Tail` is a `GoodProducts (C' C ho)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxToGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">MaxToGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1610-L1681","name":"Profinite.NobelingProof.GoodProducts.maxTail_isGood","line":1610,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxTail_isGood","doc":"Removing the leading `o` from a term of `MaxProducts C` yields a list which `isGood` with respect to\n`C'`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.maxTail_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">maxTail_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1597-L1607","name":"Profinite.NobelingProof.GoodProducts.good_lt_maxProducts","line":1597,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.good_lt_maxProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.good_lt_maxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">good_lt_maxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Lex\">List.Lex</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">q</span></span></span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1580-L1594","name":"Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt","line":1580,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.chain'_cons_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">chain'_cons_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> <span class=\"fn\">x_1</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x_1</span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1573-L1577","name":"Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply","line":1573,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval_unapply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_eval_unapply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1567-L1571","name":"Profinite.NobelingProof.GoodProducts.max_eq_eval","line":1567,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1536-L1563","name":"Profinite.NobelingProof.Products.max_eq_eval","line":1536,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlh</span> : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1531-L1534","name":"Profinite.NobelingProof.Products.evalCons","line":1531,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalCons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalCons\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalCons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hla</span> : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x2</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">⟨<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>, <span class=\"fn\">hla</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">C</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">⟨<span class=\"fn\">l</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1525-L1529","name":"Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail","line":1525,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.max_eq_o_cons_tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">max_eq_o_cons_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">l</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1511-L1522","name":"Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts","line":1511,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.head!_eq_o_of_maxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">head!_eq_o_of_maxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1504-L1508","name":"Profinite.NobelingProof.Products.max_eq_o_cons_tail'","line":1504,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_o_cons_tail'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlh</span> : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlc</span> : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x2</span>)</span> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span>, <span class=\"fn\">hlc</span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1499-L1502","name":"Profinite.NobelingProof.Products.max_eq_o_cons_tail","line":1499,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.max_eq_o_cons_tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">max_eq_o_cons_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlh</span> : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\">Tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1495-L1497","name":"Profinite.NobelingProof.Products.Tail","line":1495,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail","doc":"`List.tail` as a `Products`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.Tail\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">Tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1491-L1493","name":"Profinite.NobelingProof.mem_C'_eq_false","line":1491,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.mem_C'_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.mem_C'_eq_false\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">mem_C'_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> → <span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1488-L1489","name":"Profinite.NobelingProof.swapTrue_eq_true","line":1488,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_eq_true\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">swapTrue_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">SwapTrue</a> <span class=\"fn\">o</span> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1479-L1484","name":"Profinite.NobelingProof.GoodProducts.square_commutes","line":1479,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.square_commutes","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.square_commutes\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">square_commutes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1472-L1476","name":"Profinite.NobelingProof.GoodProducts.span_sum","line":1472,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_sum\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a>\n    <span class=\"fn\">(<a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span>\n      <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1465-L1469","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum","line":1465,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_sum\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_sum</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\">SumEval</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1436-L1462","name":"Profinite.NobelingProof.GoodProducts.SumEval","line":1436,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval","doc":"Let\n\n`N := LocallyConstant (π C (ord I · < o)) ℤ`\n\n`M := LocallyConstant C ℤ`\n\n`P := LocallyConstant (C' C ho) ℤ`\n\n`ι := GoodProducts (π C (ord I · < o))`\n\n`ι' := GoodProducts (C' C ho')`\n\n`v : ι → N := GoodProducts.eval (π C (ord I · < o))`\n\nThen `SumEval C ho` is the map `u` in the diagram below. It is linearly independent if and only if\n`GoodProducts.eval C` is, see `linearIndependent_iff_sum`. The top row is the exact sequence given\nby `succ_exact` and `succ_mono`. The left square commutes by `GoodProducts.square_commutes`.\n```\n0 --→ N --→ M --→  P\n      ↑     ↑      ↑\n     v|    u|      |\n      ι → ι ⊕ ι' ← ι'\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.SumEval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">SumEval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1431-L1434","name":"Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim","line":1431,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv_comp_eval_eq_elim\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_equiv_comp_eval_eq_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv\">sum_equiv</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span>)</span>\n    <span class=\"fn\">fun (<span class=\"fn\">l</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1423-L1429","name":"Profinite.NobelingProof.GoodProducts.sum_equiv","line":1423,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv","doc":"The equivalence from the sum of `GoodProducts (π C (ord I · < o))` and\n`(MaxProducts C ho)` to `GoodProducts C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_equiv\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1417-L1421","name":"Profinite.NobelingProof.GoodProducts.sum_to_range","line":1417,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_to_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\">sum_to</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1410-L1415","name":"Profinite.NobelingProof.GoodProducts.injective_sum_to","line":1410,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective_sum_to","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective_sum_to\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">injective_sum_to</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\">sum_to</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1405-L1408","name":"Profinite.NobelingProof.GoodProducts.sum_to","line":1405,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to","doc":"The inclusion map from the sum of `GoodProducts (π C (ord I · < o))` and\n`(MaxProducts C ho)` to `Products I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.sum_to\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">sum_to</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1381-L1403","name":"Profinite.NobelingProof.GoodProducts.union_succ","line":1381,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union_succ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">union_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\">MaxProducts</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1374-L1378","name":"Profinite.NobelingProof.GoodProducts.MaxProducts","line":1374,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts","doc":"The `GoodProducts` in `C` that contain `o` (they necessarily start with `o`, see\n`GoodProducts.head!_eq_o_of_maxProducts`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.MaxProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">MaxProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1361-L1366","name":"Profinite.NobelingProof.succ_exact","line":1361,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_exact\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">succ_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">X₁</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>,\n    <span class=\"fn\">X₂</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>, <span class=\"fn\">X₃</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.of\">ModuleCat.of</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>,\n    <span class=\"fn\">f</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span>, <span class=\"fn\">g</span> := <span class=\"fn\"><a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span></span>, <span class=\"fn\">zero</span> := <span class=\"fn\">⋯</span> }</span>.<a href=\"./Mathlib/Algebra/Homology/ShortComplex/Exact.html#CategoryTheory.ShortComplex.Exact\">Exact</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1356-L1358","name":"Profinite.NobelingProof.succ_mono","line":1356,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.succ_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">succ_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Mono\">CategoryTheory.Mono</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/ModuleCat/Basic.html#ModuleCat.ofHom\">ModuleCat.ofHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1320-L1353","name":"Profinite.NobelingProof.CC_exact","line":1320,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_exact","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_exact\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC_exact</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1304-L1316","name":"Profinite.NobelingProof.C1_projOrd","line":1304,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1_projOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1_projOrd\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C1_projOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">SwapTrue</a> <span class=\"fn\">o</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1289-L1301","name":"Profinite.NobelingProof.C0_projOrd","line":1289,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0_projOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0_projOrd\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C0_projOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1275-L1286","name":"Profinite.NobelingProof.CC_comp_zero","line":1275,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_comp_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC_comp_zero\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC_comp_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\">Linear_CC'</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1270-L1273","name":"Profinite.NobelingProof.Linear_CC'","line":1270,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'","doc":"The difference between `Linear_CC'₁` and `Linear_CC'₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1265-L1268","name":"Profinite.NobelingProof.Linear_CC'₁","line":1265,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₁","doc":"The `ℤ`-linear map induced by precomposing with `CC'₁` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1260-L1263","name":"Profinite.NobelingProof.Linear_CC'₀","line":1260,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₀","doc":"The `ℤ`-linear map induced by precomposing with `CC'₀` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Linear_CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Linear_CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1257-L1258","name":"Profinite.NobelingProof.continuous_CC'₁","line":1257,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁\">CC'₁</a> <span class=\"fn\">C</span> <span class=\"fn\">hsC</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1255-L1255","name":"Profinite.NobelingProof.continuous_CC'₀","line":1255,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₀","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀\">CC'₀</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1250-L1253","name":"Profinite.NobelingProof.CC'₁","line":1250,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁","doc":"The second way to map `C'` into `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₁\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC'₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1247-L1248","name":"Profinite.NobelingProof.CC'₀","line":1247,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀","doc":"The first way to map `C'` into `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.CC'₀\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">CC'₀</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1232-L1245","name":"Profinite.NobelingProof.swapTrue_mem_C1","line":1232,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_mem_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.swapTrue_mem_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">swapTrue_mem_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/SuccPred/Basic.html#Order.succ\">Order.succ</a> <span class=\"fn\">o</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">SwapTrue</a> <span class=\"fn\">o</span> <span class=\"fn\">↑<span class=\"fn\">f</span></span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1221-L1227","name":"Profinite.NobelingProof.continuous_swapTrue","line":1221,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_swapTrue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_swapTrue\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_swapTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\">SwapTrue</a> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1216-L1219","name":"Profinite.NobelingProof.SwapTrue","line":1216,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue","doc":"Swapping the `o`-th coordinate to `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.SwapTrue\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">SwapTrue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1212-L1212","name":"Profinite.NobelingProof.contained_C'","line":1212,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1209-L1210","name":"Profinite.NobelingProof.isClosed_C'","line":1209,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\">C'</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1202-L1206","name":"Profinite.NobelingProof.C'","line":1202,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'","doc":"The intersection of `C0` and the projection of `C1`. We will apply the inductive hypothesis to\nthis set.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1197-L1200","name":"Profinite.NobelingProof.union_C0C1_eq","line":1197,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.union_C0C1_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.union_C0C1_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">union_C0C1_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1194-L1195","name":"Profinite.NobelingProof.contained_C1","line":1194,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1189-L1192","name":"Profinite.NobelingProof.isClosed_C1","line":1189,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\">C1</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1183-L1186","name":"Profinite.NobelingProof.isClosed_C0","line":1183,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C0","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_C0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_C0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\">C0</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1179-L1180","name":"Profinite.NobelingProof.C1","line":1179,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1","doc":"The subset of `C` consisting of those elements whose `o`-th entry is `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C1\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1176-L1177","name":"Profinite.NobelingProof.C0","line":1176,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0","doc":"The subset of `C` consisting of those elements whose `o`-th entry is `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.C0\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">C0</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1098-L1102","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","line":1098,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_union_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_union_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1094-L1096","name":"Profinite.NobelingProof.GoodProducts.range_equiv_factorization","line":1094,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv\">range_equiv</a> <span class=\"fn\">C</span> <span class=\"fn\">ho</span> <span class=\"fn\">hsC</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1087-L1092","name":"Profinite.NobelingProof.GoodProducts.range_equiv","line":1087,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv","doc":"The image of the `GoodProducts` in `C` is equivalent to the union of `smaller C o'` over all\nordinals `o' < o`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1073-L1085","name":"Profinite.NobelingProof.GoodProducts.union","line":1073,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.union\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">o'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">↑<span class=\"fn\">e</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1055-L1068","name":"Profinite.NobelingProof.Products.limitOrdinal","line":1055,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.limitOrdinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.limitOrdinal\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">limitOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Mathlib/SetTheory/Ordinal/Arithmetic.html#Ordinal.IsLimit\">IsLimit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">o'</span> &lt; <span class=\"fn\">o</span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o'</span></span>)</span> <span class=\"fn\">l</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1037-L1048","name":"Profinite.NobelingProof.GoodProducts.smaller_mono","line":1037,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₁</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1029-L1035","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","line":1029,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1025-L1027","name":"Profinite.NobelingProof.GoodProducts.smaller_factorization","line":1025,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_factorization","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller_factorization\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller_factorization</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\">range_equiv_smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1017-L1023","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller","line":1017,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller","doc":"The equivalence from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L1007-L1015","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","line":1007,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\">range_equiv_smaller_toFun</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L999-L1005","name":"Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","line":999,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun","doc":"The map from the image of the `GoodProducts` in `LocallyConstant (π C (ord I · < o)) ℤ` to\n`smaller C o`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range_equiv_smaller_toFun\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range_equiv_smaller_toFun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\">smaller</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L991-L997","name":"Profinite.NobelingProof.GoodProducts.smaller","line":991,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller","doc":"The image of the `GoodProducts` for `π C (ord I · < o)` in `LocallyConstant C ℤ`. The name `smaller`\nrefers to the setting in which we will use this, when we are mapping in `GoodProducts` from a\nsmaller set, i.e. when `o` is a smaller ordinal than the one `C` is \"contained\" in.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.smaller\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">smaller</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L944-L953","name":"Profinite.NobelingProof.Products.isGood_mono","line":944,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_mono","doc":"If `l` is good w.r.t. `π C (ord I · < o₁)` and `o₁ ≤ o₂`, then it is good w.r.t.\n`π C (ord I · < o₂)`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_mono\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L940-L942","name":"Profinite.NobelingProof.Products.head_lt_ord_of_isGood","line":940,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head_lt_ord_of_isGood","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head_lt_ord_of_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">head_lt_ord_of_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">↑<span class=\"fn\">l</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L931-L938","name":"Profinite.NobelingProof.Products.eval_πs_image'","line":931,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs_image'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L922-L929","name":"Profinite.NobelingProof.Products.eval_πs_image","line":922,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs_image\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs_image</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L915-L920","name":"Profinite.NobelingProof.Products.eval_πs'","line":915,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span>)</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L911-L913","name":"Profinite.NobelingProof.Products.eval_πs","line":911,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L907-L909","name":"Profinite.NobelingProof.Products.lt_ord_of_lt","line":907,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_ord_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_ord_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_ord_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L901-L903","name":"Profinite.NobelingProof.injective_πs'","line":901,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">injective_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L897-L899","name":"Profinite.NobelingProof.coe_πs'","line":897,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">coe_πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L890-L890","name":"Profinite.NobelingProof.πs'_apply_apply","line":890,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'_apply_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs'_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\">πs'</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">⋯</span> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L888-L895","name":"Profinite.NobelingProof.πs'","line":888,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'","doc":"The `ℤ`-linear map induced by precomposition of the projection\n`π C (ord I · < o₂) → π C (ord I · < o₁)` for `o₁ ≤ o₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs'\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">o₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₁</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o₂</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L884-L886","name":"Profinite.NobelingProof.injective_πs","line":884,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.injective_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">injective_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L880-L882","name":"Profinite.NobelingProof.coe_πs","line":880,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.coe_πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">coe_πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L875-L875","name":"Profinite.NobelingProof.πs_apply_apply","line":875,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs_apply_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\">πs</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span>)</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span>)</span> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L874-L878","name":"Profinite.NobelingProof.πs","line":874,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs","doc":"The `ℤ`-linear map induced by precomposition of the projection `C → π C (ord I · < o)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πs\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L870-L872","name":"Profinite.NobelingProof.contained_proj","line":870,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span> <span class=\"fn\">o</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L867-L868","name":"Profinite.NobelingProof.isClosed_proj","line":867,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.isClosed_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">isClosed_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L861-L865","name":"Profinite.NobelingProof.contained_eq_proj","line":861,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_eq_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained_eq_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained_eq_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">C</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L835-L838","name":"Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","line":835,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentSingleton\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentSingleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L825-L833","name":"Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","line":825,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNoZeroSMulDivisorsIntLocallyConstant\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNoZeroSMulDivisorsIntLocallyConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/NoZeroSMulDivisors/Defs.html#NoZeroSMulDivisors\">NoZeroSMulDivisors</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L808-L823","name":"Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","line":808,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse","doc":"There is a unique `GoodProducts` for the singleton `{fun _ ↦ false}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instUniqueSubtypeProductsIsGoodSingletonForallBoolSetFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L797-L806","name":"Profinite.NobelingProof.Products.span_nil_eq_top","line":797,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.span_nil_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.span_nil_eq_top\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">span_nil_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil\">nil</a><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L792-L795","name":"Profinite.NobelingProof.Products.isGood_nil","line":792,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood_nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <a href=\"./Init/Prelude.html#Bool.false\">false</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil\">nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L789-L790","name":"Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","line":789,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instNontrivialLocallyConstantIntOfNonempty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instNontrivialLocallyConstantIntOfNonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">α</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L784-L787","name":"Profinite.NobelingProof.Products.lt_nil_empty","line":784,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_nil_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_nil_empty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_nil_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil\">nil</a><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L781-L782","name":"Profinite.NobelingProof.Products.nil","line":781,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil","doc":"The empty list as a `Products` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.nil\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L778-L779","name":"Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","line":778,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependentEmpty\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependentEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L773-L776","name":"Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","line":773,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instIsEmptySubtypeProductsIsGoodEmptyCollectionSetForallBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/IsEmpty.html#IsEmpty\">IsEmpty</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L770-L771","name":"Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","line":770,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instSubsingletonLocallyConstantElemForallBoolEmptyCollectionSetInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L750-L758","name":"Profinite.NobelingProof.Products.prop_of_isGood_of_contained","line":750,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood_of_contained","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood_of_contained\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">prop_of_isGood_of_contained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\">contained</a> <span class=\"fn\">C</span> <span class=\"fn\">o</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">o</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L741-L748","name":"Profinite.NobelingProof.P","line":741,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P","doc":"The predicate on ordinals which we prove by induction, see `GoodProducts.P0`,\n`GoodProducts.Plimit` and `GoodProducts.linearIndependentAux` in the section `Induction` below\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.P\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">P</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L737-L738","name":"Profinite.NobelingProof.contained","line":737,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained","doc":"A predicate saying that `C` is \"small\" enough to satisfy the inductive hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.contained\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">contained</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L729-L735","name":"Profinite.NobelingProof.ord_term","line":729,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord_term</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L724-L727","name":"Profinite.NobelingProof.ord_term_aux","line":724,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord_term_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord_term_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L720-L722","name":"Profinite.NobelingProof.term_ord_aux","line":720,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term_ord_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term_ord_aux\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">term_ord_aux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\">ord</a> <span class=\"fn\">I</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\">term</a> <span class=\"fn\">I</span> <span class=\"fn\">ho</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L713-L716","name":"Profinite.NobelingProof.term","line":713,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term","doc":"An ordinal regarded as a term of `I`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.term\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ho</span> : <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal.type\">Ordinal.type</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">I</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L710-L711","name":"Profinite.NobelingProof.ord","line":710,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord","doc":"A term of `I` regarded as an ordinal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ord\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Ordinal/Basic.html#Ordinal\">Ordinal.{u}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L672-L681","name":"Profinite.NobelingProof.GoodProducts.span","line":672,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span","doc":"The good products span all of `LocallyConstant C ℤ` if `C` is closed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L662-L670","name":"Profinite.NobelingProof.fin_comap_jointlySurjective","line":662,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.fin_comap_jointlySurjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.fin_comap_jointlySurjective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">fin_comap_jointlySurjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsClosed\">IsClosed</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">{ <span class=\"fn\">toFun</span> := <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span></span>, <span class=\"fn\">continuous_toFun</span> := <span class=\"fn\">⋯</span> }</span> <span class=\"fn\">g</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L607-L658","name":"Profinite.NobelingProof.GoodProducts.spanFin","line":607,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.spanFin","doc":"If `s` is a finite subset of `I`, then the good products span. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.spanFin\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">spanFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L589-L605","name":"Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","line":589,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.finsupp_sum_mem_span_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">finsupp_sum_mem_span_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Batteries/Data/List/Basic.html#List.Chain'\">List.Chain'</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">x2</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp.support\">support</a></span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Algebra/BigOperators/Finsupp/Basic.html#Finsupp.sum\">sum</a></span> <span class=\"fn\">fun (<span class=\"fn\">a_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>) (<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a_1</span></span></span>)</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a>   <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> (<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">m</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">as</span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L580-L587","name":"Profinite.NobelingProof.factors_prod_eq_basis","line":580,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis","doc":"If `s` is finite, the product of the elements of the list `factors C s x`\nis the delta function at `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\">spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L565-L578","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_ne","line":565,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_ne\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L557-L563","name":"Profinite.NobelingProof.one_sub_e_mem_of_false","line":557,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.one_sub_e_mem_of_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.one_sub_e_mem_of_false\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">one_sub_e_mem_of_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">y</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L550-L555","name":"Profinite.NobelingProof.e_mem_of_eq_true","line":550,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e_mem_of_eq_true","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e_mem_of_eq_true\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">e_mem_of_eq_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\">e</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L538-L548","name":"Profinite.NobelingProof.factors_prod_eq_basis_of_eq","line":538,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors_prod_eq_basis_of_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors_prod_eq_basis_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\">factors</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L533-L536","name":"Profinite.NobelingProof.list_prod_apply","line":533,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.list_prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.list_prod_apply\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">list_prod_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Algebra.html#LocallyConstant.evalMonoidHom\">LocallyConstant.evalMonoidHom</a> <span class=\"fn\">x</span>)</span>)</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.prod\">prod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L525-L531","name":"Profinite.NobelingProof.factors","line":525,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors","doc":"A certain explicit list of locally constant maps. The theorem `factors_prod_eq_basis` shows that the\nproduct of the elements in this list is the delta function `spanFinBasis C s x`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.factors\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">factors</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L514-L523","name":"Profinite.NobelingProof.spanFinBasis.span","line":514,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis.span","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis.span\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span>.<span class=\"name\">span</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\">spanFinBasis</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L505-L511","name":"Profinite.NobelingProof.spanFinBasis","line":505,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis","doc":"The Kronecker delta as a locally constant map from `π C (· ∈ s)` to `ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFinBasis\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFinBasis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L492-L501","name":"Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","line":492,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset","doc":"`π C (· ∈ s)` is finite for a finite set `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.instFintypeElemForallBoolπMemFinset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">instFintypeElemForallBoolπMemFinset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L485-L490","name":"Profinite.NobelingProof.eval_eq_πJ","line":485,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.eval_eq_πJ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.eval_eq_πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">eval_eq_πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ\">πJ</a> <span class=\"fn\">C</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L480-L483","name":"Profinite.NobelingProof.πJ","line":480,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ","doc":"The `ℤ`-linear map induced by precomposition of the projection `C → π C (· ∈ s)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.πJ\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">πJ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L434-L454","name":"Profinite.NobelingProof.GoodProducts.span_iff_products","line":434,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_iff_products","doc":"The good products span `LocallyConstant C ℤ` if and only all the products do. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.span_iff_products\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">span_iff_products</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Span/Defs.html#Submodule.span\">Submodule.span</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">Products.eval</a> <span class=\"fn\">C</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L420-L430","name":"Profinite.NobelingProof.Products.prop_of_isGood","line":420,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.prop_of_isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">prop_of_isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">isGood</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span> <span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L411-L418","name":"Profinite.NobelingProof.Products.evalFacProps","line":411,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProps\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalFacProps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hJK</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hJK</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span>)</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L400-L409","name":"Profinite.NobelingProof.Products.evalFacProp","line":400,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.evalFacProp\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">evalFacProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">a</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L384-L398","name":"Profinite.NobelingProof.Products.eval_eq","line":384,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval_eq\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\">eval</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">∀ <span class=\"fn\">i</span> ∈ <span class=\"fn\">↑<span class=\"fn\">l</span></span>, <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">x</span></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L375-L378","name":"Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range","line":375,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.linearIndependent_iff_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">linearIndependent_iff_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/LinearIndependent/Defs.html#LinearIndependent\">LinearIndependent</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <span class=\"fn\">fun (<span class=\"fn\">p</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L373-L373","name":"Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval","line":373,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_toFun_eq_eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">equiv_toFun_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range\">equiv_range</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.toFun\">toFun</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Operations.html#Set.rangeFactorization\">Set.rangeFactorization</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L368-L371","name":"Profinite.NobelingProof.GoodProducts.equiv_range","line":368,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range","doc":"The type of good products is equivalent to its image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.equiv_range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">equiv_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\">GoodProducts</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\">range</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L365-L366","name":"Profinite.NobelingProof.GoodProducts.range","line":365,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range","doc":"The image of the good products in the module `LocallyConstant C ℤ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.range\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L355-L363","name":"Profinite.NobelingProof.GoodProducts.injective","line":355,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.injective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\">eval</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L351-L353","name":"Profinite.NobelingProof.GoodProducts.eval","line":351,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval","doc":"Evaluation of good products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts.eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\">Products.isGood</a> <span class=\"fn\">C</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L346-L347","name":"Profinite.NobelingProof.GoodProducts","line":346,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts","doc":"The set of good products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.GoodProducts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">GoodProducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L340-L342","name":"Profinite.NobelingProof.Products.head!_le_of_lt","line":340,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head!_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.head!_le_of_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">head!_le_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q </span><span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <span class=\"fn\">↑<span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">q</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L336-L338","name":"Profinite.NobelingProof.Products.rel_head!_of_mem","line":336,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.rel_head!_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.rel_head!_of_mem\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">rel_head!_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">I</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">l</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L329-L334","name":"Profinite.NobelingProof.Products.isGood","line":329,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood","doc":"The predicate on products which we prove picks out a basis of `LocallyConstant C ℤ`. We call such a\nproduct \"good\".\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.isGood\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">isGood</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L326-L327","name":"Profinite.NobelingProof.Products.eval","line":326,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval","doc":"The evaluation `e C i₁ ··· e C iᵣ : C → ℤ` of a formal product `[i₁, i₂, ..., iᵣ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.eval\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L318-L324","name":"Profinite.NobelingProof.Products.instWellFoundedLT","line":318,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instWellFoundedLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instWellFoundedLT\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">instWellFoundedLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L314-L316","name":"Profinite.NobelingProof.Products.lt_iff_lex_lt","line":314,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_iff_lex_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.lt_iff_lex_lt\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">lt_iff_lex_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l </span><span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Lex\">List.Lex</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">I</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">↑<span class=\"fn\">l</span></span> <span class=\"fn\">↑<span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L311-L312","name":"Profinite.NobelingProof.Products.instLinearOrder","line":311,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instLinearOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products.instLinearOrder\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span>.<span class=\"name\">instLinearOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\">Products</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L299-L307","name":"Profinite.NobelingProof.Products","line":299,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products","doc":"`Products I` is the type of lists of decreasing elements of `I`, so a typical element is\n`[i₁, i₂, ...]` with `i₁ > i₂ > ...`. We order `Products I` lexicographically, so `[] < [i₁, ...]`,\nand `[i₁, i₂, ...] < [j₁, j₂, ...]` if either `i₁ < j₁`, or `i₁ = j₁` and `[i₂, ...] < [j₂, ...]`.\n\nTerms `m = [i₁, i₂, ..., iᵣ]` of this type will be used to represent products of the form\n`e C i₁ ··· e C iᵣ : LocallyConstant C ℤ` . The function associated to `m` is `m.eval`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Products\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Products</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">I</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L286-L295","name":"Profinite.NobelingProof.e","line":286,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e","doc":"`e C i` is the locally constant map from `C : Set (I → Bool)` to `ℤ` sending `f` to 1 if\n`f.val i = true`, and 0 otherwise.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.e\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">e</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">↑<span class=\"fn\">C</span></span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L232-L249","name":"Profinite.NobelingProof.spanCone_isLimit","line":232,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone_isLimit","doc":"`spanCone` is a limit cone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone_isLimit\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanCone_isLimit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/IsLimit.html#CategoryTheory.Limits.IsLimit\">CategoryTheory.Limits.IsLimit</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone\">spanCone</a> <span class=\"fn\">hC</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L218-L230","name":"Profinite.NobelingProof.spanCone","line":218,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone","doc":"The limit cone on `spanFunctor` with point `C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanCone\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanCone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor\">spanFunctor</a> <span class=\"fn\">hC</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L203-L216","name":"Profinite.NobelingProof.spanFunctor","line":203,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor","doc":"For a given compact subset `C` of `I → Bool`, `spanFunctor` is the functor from the poset of finsets\nof `I` to `Profinite`, sending a finite subset set `J` to the image of `C` under the projection\n`Proj J`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.spanFunctor\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">spanFunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span></span>) → <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hC</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#IsCompact\">IsCompact</a> <span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">I</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L186-L199","name":"Profinite.NobelingProof.iso_map_bijective","line":186,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map_bijective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map_bijective\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">iso_map_bijective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Bijective\">Function.Bijective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map\">iso_map</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L176-L184","name":"Profinite.NobelingProof.iso_map","line":176,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map","doc":"The objectwise map in the isomorphism `spanFunctor ≅ Profinite.indexFunctor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.iso_map\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">iso_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">C(</a><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">,</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Product.html#Profinite.IndexFunctor.obj\">IndexFunctor.obj</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L168-L172","name":"Profinite.NobelingProof.projRestricts_comp_projRestrict","line":168,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_comp_projRestrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_comp_projRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_comp_projRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L162-L166","name":"Profinite.NobelingProof.projRestricts_eq_comp","line":162,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_comp\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_eq_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K </span><span class=\"fn\">L</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">L</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hJK</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hKL</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">L</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hJK</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">hKL</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L158-L160","name":"Profinite.NobelingProof.projRestricts_eq_id","line":158,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.projRestricts_eq_id\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">projRestricts_eq_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L154-L155","name":"Profinite.NobelingProof.surjective_projRestricts","line":154,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.surjective_projRestricts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.surjective_projRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">surjective_projRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L150-L152","name":"Profinite.NobelingProof.continuous_projRestricts","line":150,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestricts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_projRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L146-L146","name":"Profinite.NobelingProof.ProjRestricts_coe","line":146,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts_coe\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestricts_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\">ProjRestricts</a> <span class=\"fn\">C</span> <span class=\"fn\">h</span> <span class=\"fn\">a✝</span>)</span></span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">(↑<span class=\"fn\">a✝</span>)</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L145-L148","name":"Profinite.NobelingProof.ProjRestricts","line":145,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts","doc":"A variant of `ProjRestrict` with domain of the form `π C K` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestricts\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestricts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span>)</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L131-L141","name":"Profinite.NobelingProof.proj_eq_of_subset","line":131,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_of_subset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_eq_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">K</span>)</span> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L127-L129","name":"Profinite.NobelingProof.proj_comp_of_subset","line":127,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_comp_of_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_comp_of_subset\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_comp_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">K</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span> → <span class=\"fn\"><span class=\"fn\">K</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">K</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L121-L125","name":"Profinite.NobelingProof.proj_prop_eq_self","line":121,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_prop_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_prop_eq_self\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_prop_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">C</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L115-L119","name":"Profinite.NobelingProof.proj_eq_self","line":115,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.proj_eq_self\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">proj_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">I</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> → <span class=\"fn\"><span class=\"fn\">J</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L111-L113","name":"Profinite.NobelingProof.continuous_projRestrict","line":111,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestrict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_projRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_projRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L107-L107","name":"Profinite.NobelingProof.ProjRestrict_coe","line":107,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict_coe\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestrict_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">↑<span class=\"fn\">C</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝¹</span> : <span class=\"fn\">I</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\">ProjRestrict</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span> <span class=\"fn\">a✝</span>)</span></span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span> <span class=\"fn\">(↑<span class=\"fn\">a✝</span>)</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L106-L109","name":"Profinite.NobelingProof.ProjRestrict","line":106,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict","doc":"The restriction of `Proj π J` to a subset, mapping to its image. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.ProjRestrict\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">ProjRestrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">C</span></span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\">π</a> <span class=\"fn\">C</span> <span class=\"fn\">J</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L103-L104","name":"Profinite.NobelingProof.π","line":103,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π","doc":"The image of `Proj π J` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.π\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">π</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L93-L101","name":"Profinite.NobelingProof.continuous_proj","line":93,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_proj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.continuous_proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">continuous_proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\">Proj</a> <span class=\"fn\">J</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/Nobeling.lean#L87-L91","name":"Profinite.NobelingProof.Proj","line":87,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj","doc":"The projection mapping everything that satisfies `J i` to itself, and everything else to `false`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/Nobeling.html#Profinite.NobelingProof.Proj\"><span class=\"name\">Profinite</span>.<span class=\"name\">NobelingProof</span>.<span class=\"name\">Proj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">I</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<span class=\"fn\">J</span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span> → <span class=\"fn\"><span class=\"fn\">I</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"}]}