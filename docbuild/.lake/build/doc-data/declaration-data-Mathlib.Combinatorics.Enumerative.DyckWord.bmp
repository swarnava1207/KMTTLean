{"name":"Mathlib.Combinatorics.Enumerative.DyckWord","instances":[{"typeNames":["DyckStep"],"name":"instInhabitedDyckStep","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqDyckStep","className":"Decidable"},{"typeNames":["Eq"],"name":"instDecidableEqDyckWord","className":"Decidable"},{"typeNames":["DyckWord","List"],"name":"instCoeDyckWordListDyckStep","className":"Coe"},{"typeNames":["DyckWord"],"name":"instAddDyckWord","className":"Add"},{"typeNames":["DyckWord"],"name":"instZeroDyckWord","className":"Zero"},{"typeNames":["DyckWord"],"name":"instAddCancelMonoidDyckWord","className":"AddCancelMonoid"},{"typeNames":["AddUnits"],"name":"DyckWord.instUniqueAddUnits","className":"Unique"},{"typeNames":["DyckWord"],"name":"DyckWord.instPreorder","className":"Preorder"},{"typeNames":["DyckWord"],"name":"DyckWord.instPartialOrder","className":"PartialOrder"},{"typeNames":["Subtype"],"name":"DyckWord.instFintypeSubtypeEqNatSemilength","className":"Fintype"}],"imports":["Init","Mathlib.Combinatorics.Enumerative.Catalan","Mathlib.Tactic.Positivity"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L577-L588","name":"Mathlib.Meta.Positivity.evalDyckWordFirstReturn","line":577,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#Mathlib.Meta.Positivity.evalDyckWordFirstReturn","doc":"Extension for the `positivity` tactic: `p.firstReturn` is positive if `p` is nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#Mathlib.Meta.Positivity.evalDyckWordFirstReturn\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalDyckWordFirstReturn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L563-L567","name":"DyckWord.card_dyckWord_semilength_eq_catalan","line":563,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.card_dyckWord_semilength_eq_catalan","doc":"There are `catalan n` Dyck words of semilength `n` (or length `2 * n`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.card_dyckWord_semilength_eq_catalan\"><span class=\"name\">DyckWord</span>.<span class=\"name\">card_dyckWord_semilength_eq_catalan</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Catalan.html#catalan\">catalan</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L560-L561","name":"DyckWord.instFintypeSubtypeEqNatSemilength","line":560,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instFintypeSubtypeEqNatSemilength","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instFintypeSubtypeEqNatSemilength\"><span class=\"name\">DyckWord</span>.<span class=\"name\">instFintypeSubtypeEqNatSemilength</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L549-L558","name":"DyckWord.equivTreesOfNumNodesEq","line":549,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.equivTreesOfNumNodesEq","doc":"Equivalence between Dyck words of semilength `n` and rooted binary trees with\n`n` internal nodes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.equivTreesOfNumNodesEq\"><span class=\"name\">DyckWord</span>.<span class=\"name\">equivTreesOfNumNodesEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Subtype\">}</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Tree/Basic.html#Tree\">Tree</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/Catalan.html#Tree.treesOfNumNodesEq\">Tree.treesOfNumNodesEq</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L536-L547","name":"DyckWord.semilength_eq_numNodes_equivTree","line":536,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_eq_numNodes_equivTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_eq_numNodes_equivTree\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_eq_numNodes_equivTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.equivTree\">equivTree</a> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Data/Tree/Basic.html#Tree.numNodes\">numNodes</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L529-L534","name":"DyckWord.equivTree","line":529,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.equivTree","doc":"Equivalence between Dyck words and rooted binary trees. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.equivTree\"><span class=\"name\">DyckWord</span>.<span class=\"name\">equivTree</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Tree/Basic.html#Tree\">Tree</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L476-L482","name":"DyckWord.strictMono_semilength","line":476,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.strictMono_semilength","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.strictMono_semilength\"><span class=\"name\">DyckWord</span>.<span class=\"name\">strictMono_semilength</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#StrictMono\">StrictMono</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L464-L474","name":"DyckWord.monotone_semilength","line":464,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.monotone_semilength","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.monotone_semilength\"><span class=\"name\">DyckWord</span>.<span class=\"name\">monotone_semilength</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L460-L462","name":"DyckWord.pos_iff_ne_zero","line":460,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.pos_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.pos_iff_ne_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">pos_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L452-L458","name":"DyckWord.instPartialOrder","line":452,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instPartialOrder","doc":"Partial order on Dyck words: `p ≤ q` if a (possibly empty) sequence of\n`insidePart` and `outsidePart` operations can turn `q` into `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instPartialOrder\"><span class=\"name\">DyckWord</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L439-L450","name":"DyckWord.le_of_suffix","line":439,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.le_of_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.le_of_suffix\"><span class=\"name\">DyckWord</span>.<span class=\"name\">le_of_suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsSuffix\">&lt;:+</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L421-L437","name":"DyckWord.infix_of_le","line":421,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.infix_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.infix_of_le\"><span class=\"name\">DyckWord</span>.<span class=\"name\">infix_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Data/List/Basic.html#List.IsInfix\">&lt;:+:</a> <span class=\"fn\">↑<span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L419-L419","name":"DyckWord.zero_le","line":419,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.zero_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.zero_le\"><span class=\"name\">DyckWord</span>.<span class=\"name\">zero_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L411-L417","name":"DyckWord.le_add_self","line":411,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.le_add_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.le_add_self\"><span class=\"name\">DyckWord</span>.<span class=\"name\">le_add_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L406-L409","name":"DyckWord.instPreorder","line":406,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instPreorder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instPreorder\"><span class=\"name\">DyckWord</span>.<span class=\"name\">instPreorder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L398-L400","name":"DyckWord.semilength_outsidePart_lt","line":398,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_outsidePart_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_outsidePart_lt\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_outsidePart_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L393-L395","name":"DyckWord.semilength_insidePart_lt","line":393,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_insidePart_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_insidePart_lt\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_insidePart_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L387-L390","name":"DyckWord.semilength_insidePart_add_semilength_outsidePart_add_one","line":387,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_insidePart_add_semilength_outsidePart_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_insidePart_add_semilength_outsidePart_add_one\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_insidePart_add_semilength_outsidePart_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L381-L384","name":"DyckWord.nest_insidePart_add_outsidePart","line":381,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_insidePart_add_outsidePart","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_insidePart_add_outsidePart\"><span class=\"name\">DyckWord</span>.<span class=\"name\">nest_insidePart_add_outsidePart</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L374-L378","name":"DyckWord.outsidePart_nest","line":374,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">outsidePart_nest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L368-L372","name":"DyckWord.insidePart_nest","line":368,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">insidePart_nest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L362-L366","name":"DyckWord.outsidePart_add","line":362,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_add\"><span class=\"name\">DyckWord</span>.<span class=\"name\">outsidePart_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>).<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L354-L359","name":"DyckWord.insidePart_add","line":354,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_add\"><span class=\"name\">DyckWord</span>.<span class=\"name\">insidePart_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>).<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L351-L351","name":"DyckWord.outsidePart_zero","line":351,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">outsidePart_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\">outsidePart</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L350-L350","name":"DyckWord.insidePart_zero","line":350,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">insidePart_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\">insidePart</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L345-L348","name":"DyckWord.outsidePart","line":345,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart","doc":"The right part of the Dyck word decomposition,\noutside the `U, D` pair that `firstReturn` refers to. `outsidePart 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.outsidePart\"><span class=\"name\">DyckWord</span>.<span class=\"name\">outsidePart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L331-L342","name":"DyckWord.insidePart","line":331,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart","doc":"The left part of the Dyck word decomposition,\ninside the `U, D` pair that `firstReturn` refers to. `insidePart 0 = 0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.insidePart\"><span class=\"name\">DyckWord</span>.<span class=\"name\">insidePart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L313-L328","name":"DyckWord.firstReturn_nest","line":313,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn_nest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L296-L311","name":"DyckWord.firstReturn_add","line":296,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_add\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>).<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L290-L294","name":"DyckWord.count_D_lt_count_U_of_lt_firstReturn","line":290,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_D_lt_count_U_of_lt_firstReturn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_D_lt_count_U_of_lt_firstReturn\"><span class=\"name\">DyckWord</span>.<span class=\"name\">count_D_lt_count_U_of_lt_firstReturn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L284-L288","name":"DyckWord.count_take_firstReturn_add_one","line":284,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_take_firstReturn_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_take_firstReturn_add_one\"><span class=\"name\">DyckWord</span>.<span class=\"name\">count_take_firstReturn_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> (<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> (<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L274-L281","name":"DyckWord.firstReturn_lt_length","line":274,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_lt_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_lt_length\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn_lt_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L257-L271","name":"DyckWord.firstReturn_pos","line":257,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_pos\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L254-L254","name":"DyckWord.firstReturn_zero","line":254,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\">firstReturn</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L249-L252","name":"DyckWord.firstReturn","line":249,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn","doc":"`p.firstReturn` is 0 if `p = 0` and the index of the `D` matching the initial `U` otherwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.firstReturn\"><span class=\"name\">DyckWord</span>.<span class=\"name\">firstReturn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L238-L242","name":"DyckWord.two_mul_semilength_eq_length","line":238,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.two_mul_semilength_eq_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.two_mul_semilength_eq_length\"><span class=\"name\">DyckWord</span>.<span class=\"name\">two_mul_semilength_eq_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L235-L236","name":"DyckWord.semilength_eq_count_D","line":235,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_eq_count_D","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_eq_count_D\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_eq_count_D</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L233-L233","name":"DyckWord.semilength_nest","line":233,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_nest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L232-L232","name":"DyckWord.semilength_add","line":232,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_add\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>).<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L231-L231","name":"DyckWord.semilength_zero","line":231,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\">semilength</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L227-L229","name":"DyckWord.semilength","line":227,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength","doc":"The semilength of a Dyck word is half of the number of `DyckStep`s in it, or equivalently\nits number of `U`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.semilength\"><span class=\"name\">DyckWord</span>.<span class=\"name\">semilength</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L221-L222","name":"DyckWord.denest_nest","line":221,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest_nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest_nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">denest_nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest\">denest</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L217-L218","name":"DyckWord.nest_denest","line":217,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_denest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_denest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">nest_denest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested\">IsNested</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest\">denest</a></span> <span class=\"fn\">hn</span>)</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L189-L214","name":"DyckWord.denest","line":189,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest","doc":"Denest `p`, i.e. `(x)` becomes `x`, given that `p.IsNested`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.denest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">denest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested\">IsNested</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L180-L186","name":"DyckWord.IsNested.nest","line":180,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested.nest","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested.nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">IsNested</span>.<span class=\"name\">nest</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested\">IsNested</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L175-L178","name":"DyckWord.IsNested","line":175,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested","doc":"A property stating that `p` is nonempty and strictly positive in its interior,\ni.e. is of the form `(x)` with `x` a Dyck word. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.IsNested\"><span class=\"name\">DyckWord</span>.<span class=\"name\">IsNested</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L172-L172","name":"DyckWord.nest_ne_zero","line":172,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest_ne_zero\"><span class=\"name\">DyckWord</span>.<span class=\"name\">nest_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\">nest</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L158-L170","name":"DyckWord.nest","line":158,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest","doc":"Nest `p` in one pair of brackets, i.e. `x` becomes `(x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.nest\"><span class=\"name\">DyckWord</span>.<span class=\"name\">nest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L143-L155","name":"DyckWord.drop","line":143,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.drop","doc":"Suffix of a Dyck word as a Dyck word, given that the count of `U`s and `D`s in the prefix\nare equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.drop\"><span class=\"name\">DyckWord</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L136-L140","name":"DyckWord.take","line":136,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.take","doc":"Prefix of a Dyck word as a Dyck word, given that the count of `U`s and `D`s in it are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.take\"><span class=\"name\">DyckWord</span>.<span class=\"name\">take</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">p</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L123-L133","name":"DyckWord.cons_tail_dropLast_concat","line":123,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.cons_tail_dropLast_concat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.cons_tail_dropLast_concat\"><span class=\"name\">DyckWord</span>.<span class=\"name\">cons_tail_dropLast_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.dropLast\">dropLast</a></span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L115-L120","name":"DyckWord.getLast_eq_D","line":115,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.getLast_eq_D","doc":"The last element of a nonempty Dyck word is `D`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.getLast_eq_D\"><span class=\"name\">DyckWord</span>.<span class=\"name\">getLast_eq_D</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L107-L113","name":"DyckWord.head_eq_U","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.head_eq_U","doc":"The first element of a nonempty Dyck word is `U`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.head_eq_U\"><span class=\"name\">DyckWord</span>.<span class=\"name\">head_eq_U</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">p</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.head\">head</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L96-L103","name":"DyckWord.instUniqueAddUnits","line":96,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instUniqueAddUnits","doc":"The only Dyck word that is an additive unit is the empty word. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.instUniqueAddUnits\"><span class=\"name\">DyckWord</span>.<span class=\"name\">instUniqueAddUnits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Units/Defs.html#AddUnits\">AddUnits</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L94-L94","name":"DyckWord.toList_ne_nil","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList_ne_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList_ne_nil\"><span class=\"name\">DyckWord</span>.<span class=\"name\">toList_ne_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L93-L93","name":"DyckWord.toList_eq_nil","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList_eq_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList_eq_nil\"><span class=\"name\">DyckWord</span>.<span class=\"name\">toList_eq_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L79-L87","name":"instAddCancelMonoidDyckWord","line":79,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instAddCancelMonoidDyckWord","doc":"Dyck words form an additive cancellative monoid under concatenation,\nwith the empty word as 0. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instAddCancelMonoidDyckWord\"><span class=\"name\">instAddCancelMonoidDyckWord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCancelMonoid\">AddCancelMonoid</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L77-L77","name":"instZeroDyckWord","line":77,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instZeroDyckWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instZeroDyckWord\"><span class=\"name\">instZeroDyckWord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L71-L75","name":"instAddDyckWord","line":71,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instAddDyckWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instAddDyckWord\"><span class=\"name\">instAddDyckWord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L69-L69","name":"instCoeDyckWordListDyckStep","line":69,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instCoeDyckWordListDyckStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instCoeDyckWordListDyckStep\"><span class=\"name\">instCoeDyckWordListDyckStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L66-L66","name":"instDecidableEqDyckWord","line":66,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instDecidableEqDyckWord","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instDecidableEqDyckWord\"><span class=\"name\">instDecidableEqDyckWord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L65-L65","name":"DyckWord.count_D_le_count_U","line":65,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_D_le_count_U","doc":"Each prefix has as least as many `U`s as `D`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_D_le_count_U\"><span class=\"name\">DyckWord</span>.<span class=\"name\">count_D_le_count_U</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">self</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">↑<span class=\"fn\">self</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L63-L63","name":"DyckWord.count_U_eq_count_D","line":63,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_U_eq_count_D","doc":"There are as many `U`s as `D`s "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.count_U_eq_count_D\"><span class=\"name\">DyckWord</span>.<span class=\"name\">count_U_eq_count_D</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">↑<span class=\"fn\">self</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">↑<span class=\"fn\">self</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L61-L61","name":"DyckWord.toList","line":61,"kind":"def","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList","doc":"The underlying list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.toList\"><span class=\"name\">DyckWord</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L59-L59","name":"DyckWord.mk","line":59,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.mk\"><span class=\"name\">DyckWord</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toList</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count_U_eq_count_D</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">toList</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">toList</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">count_D_le_count_U</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">DyckStep.D</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">toList</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">DyckStep.U</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">List.take</a> <span class=\"fn\">i</span> <span class=\"fn\">toList</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L58-L58","name":"DyckWord.ext_iff","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.ext_iff\"><span class=\"name\">DyckWord</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L58-L58","name":"DyckWord.ext","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord.ext\"><span class=\"name\">DyckWord</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\">DyckWord</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toList</span> : <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L56-L66","name":"DyckWord","line":56,"kind":"structure","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord","doc":"A Dyck word is a list of `DyckStep`s with as many `U`s as `D`s and with every prefix having\nat least as many `U`s as `D`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckWord\"><span class=\"name\">DyckWord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L51-L52","name":"DyckStep.dichotomy","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.dichotomy","doc":"Named in analogy to `Bool.dichotomy`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.dichotomy\"><span class=\"name\">DyckStep</span>.<span class=\"name\">dichotomy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\">U</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\">D</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L49-L49","name":"instDecidableEqDyckStep","line":49,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instDecidableEqDyckStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instDecidableEqDyckStep\"><span class=\"name\">instDecidableEqDyckStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L49-L49","name":"instInhabitedDyckStep","line":49,"kind":"instance","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instInhabitedDyckStep","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#instInhabitedDyckStep\"><span class=\"name\">instInhabitedDyckStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L48-L48","name":"DyckStep.D","line":48,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.D\"><span class=\"name\">DyckStep</span>.<span class=\"name\">D</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L47-L47","name":"DyckStep.U","line":47,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep.U\"><span class=\"name\">DyckStep</span>.<span class=\"name\">U</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\">DyckStep</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Enumerative/DyckWord.lean#L45-L49","name":"DyckStep","line":45,"kind":"inductive","docLink":"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep","doc":"A `DyckStep` is either `U` or `D`, corresponding to `(` and `)` respectively. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Enumerative/DyckWord.html#DyckStep\"><span class=\"name\">DyckStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}