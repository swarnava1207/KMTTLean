{"name":"Lean.PrettyPrinter.Delaborator.Builtins","instances":[{"typeNames":["Lean.PrettyPrinter.Delaborator.ParamKind"],"name":"Lean.PrettyPrinter.Delaborator.instInhabitedParamKind","className":"Inhabited"},{"typeNames":["Lean.PrettyPrinter.Delaborator.AppImplicitArg"],"name":"Lean.PrettyPrinter.Delaborator.instInhabitedAppImplicitArg","className":"Inhabited"}],"imports":["Lean.PrettyPrinter.Delaborator.Attributes","Lean.PrettyPrinter.Delaborator.Basic","Lean.PrettyPrinter.Delaborator.SubExpr","Lean.PrettyPrinter.Delaborator.TopDownAnalyze","Lean.Meta.CoeAttr","Lean.Meta.Structure"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1486-L1502","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature.processSpine","line":1486,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.processSpine","doc":"Go through rest of type, alpha renaming and setting options along the spine.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.processSpine\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span>.<span class=\"name\">processSpine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subExpr</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1472-L1482","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature.shouldGroupWithNext","line":1472,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.shouldGroupWithNext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.shouldGroupWithNext\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span>.<span class=\"name\">shouldGroupWithNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bindingNames</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">e'</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1433-L1468","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParamsAux","line":1433,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParamsAux","doc":"Inner loop for `delabParams`, collecting binders.\nInvariants:\n- The current expression is a forall.\n- It has a name that's not inaccessible.\n- It has a name that hasn't been used yet.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParamsAux\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span>.<span class=\"name\">delabParamsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bindingNames</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idStx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">groups</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1410-L1425","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParams","line":1410,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabParams\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span>.<span class=\"name\">delabParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bindingNames</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idStx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">groups</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1403-L1403","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabTy","line":1403,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabTy","doc":"For types in the signature, we want to be sure pi binder types are pretty printed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature.delabTy\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span>.<span class=\"name\">delabTy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1386-L1502","name":"Lean.PrettyPrinter.Delaborator.delabConstWithSignature","line":1386,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature","doc":"Pretty-prints a constant `c` as `c.{<levels>} <params> : <type>`.\n\nIf `universes` is `false`, then the universe level parameters are omitted.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConstWithSignature\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConstWithSignature</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">universes</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1376-L1378","name":"Lean.PrettyPrinter.Delaborator.declSigWithId","line":1376,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.declSigWithId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.declSigWithId\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">declSigWithId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1346-L1373","name":"Lean.PrettyPrinter.Delaborator.delabSorry","line":1346,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSorry","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSorry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1343-L1344","name":"Lean.PrettyPrinter.Delaborator.delabNameMkNum","line":1343,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNameMkNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNameMkNum\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabNameMkNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1335-L1341","name":"Lean.PrettyPrinter.Delaborator.delabNameMkStr","line":1335,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNameMkStr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNameMkStr\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabNameMkStr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1332-L1333","name":"Lean.PrettyPrinter.Delaborator.delabSeqRight","line":1332,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeqRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeqRight\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSeqRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1329-L1330","name":"Lean.PrettyPrinter.Delaborator.delabSeqLeft","line":1329,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeqLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeqLeft\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSeqLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1326-L1327","name":"Lean.PrettyPrinter.Delaborator.delabSeq","line":1326,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSeq\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSeq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1323-L1324","name":"Lean.PrettyPrinter.Delaborator.delabHAndThen","line":1323,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHAndThen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHAndThen\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabHAndThen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1320-L1321","name":"Lean.PrettyPrinter.Delaborator.delabHOrElse","line":1320,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHOrElse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHOrElse\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabHOrElse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1311-L1318","name":"Lean.PrettyPrinter.Delaborator.delabLazyBinop","line":1311,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLazyBinop","doc":"Delaborates a function application of the form `f ... x (fun _ : Unit => y)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLazyBinop\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabLazyBinop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> â†’ <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> â†’ <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1304-L1309","name":"Lean.PrettyPrinter.Delaborator.delabDo","line":1304,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDo","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1302-L1302","name":"Lean.PrettyPrinter.Delaborator.delabDoElems.prependAndRec","line":1302,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDoElems.prependAndRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDoElems.prependAndRec\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDoElems</span>.<span class=\"name\">prependAndRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1262-L1302","name":"Lean.PrettyPrinter.Delaborator.delabDoElems","line":1262,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDoElems","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDoElems\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDoElems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1259-L1260","name":"Lean.PrettyPrinter.Delaborator.delabMProdMk","line":1259,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMProdMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMProdMk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabMProdMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1256-L1257","name":"Lean.PrettyPrinter.Delaborator.delabPProdMk","line":1256,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPProdMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPProdMk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabPProdMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1247-L1254","name":"Lean.PrettyPrinter.Delaborator.delabPProdMkCore","line":1247,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPProdMkCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPProdMkCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabPProdMkCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1241-L1242","name":"Lean.PrettyPrinter.Delaborator.delabPSigma","line":1241,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPSigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabPSigma\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabPSigma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1238-L1239","name":"Lean.PrettyPrinter.Delaborator.delabSigma","line":1238,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSigma\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSigma</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1225-L1236","name":"Lean.PrettyPrinter.Delaborator.delabSigmaCore","line":1225,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSigmaCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSigmaCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSigmaCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sigma</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1212-L1222","name":"Lean.PrettyPrinter.Delaborator.delabNamedPattern","line":1212,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNamedPattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNamedPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabNamedPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1204-L1210","name":"Lean.PrettyPrinter.Delaborator.delabCond","line":1204,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabCond","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabCond\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabCond</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1196-L1202","name":"Lean.PrettyPrinter.Delaborator.delabDIte.delabBranch","line":1196,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDIte.delabBranch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDIte.delabBranch\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDIte</span>.<span class=\"name\">delabBranch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1187-L1202","name":"Lean.PrettyPrinter.Delaborator.delabDIte","line":1187,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDIte","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDIte\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1170-L1185","name":"Lean.PrettyPrinter.Delaborator.coeDelaborator.delabHead","line":1170,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.coeDelaborator.delabHead","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.coeDelaborator.delabHead\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">coeDelaborator</span>.<span class=\"name\">delabHead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/CoeAttr.html#Lean.Meta.CoeFnInfo\">Meta.CoeFnInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nargs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insertExplicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1149-L1185","name":"Lean.PrettyPrinter.Delaborator.coeDelaborator","line":1149,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.coeDelaborator","doc":"This delaborator tries to elide functions which are known coercions.\nFor example, `Int.ofNat` is a coercion, so instead of printing `ofNat n` we just print `â†‘n`,\nand when re-parsing this we can (usually) recover the specific coercion being used.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.coeDelaborator\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">coeDelaborator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1134-L1147","name":"Lean.PrettyPrinter.Delaborator.delabProj","line":1134,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabProj","doc":"Delaborate a projection primitive. These do not usually occur in\nuser code, but are pretty-printed when e.g. `#print`ing a projection\nfunction.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabProj\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabProj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1114-L1132","name":"Lean.PrettyPrinter.Delaborator.delabOfScientific","line":1114,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfScientific","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfScientific\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabOfScientific</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1104-L1111","name":"Lean.PrettyPrinter.Delaborator.delabHDiv","line":1104,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHDiv","doc":"Delaborates a rational number literal.\n`@OfNat.ofNat _ n _ / @OfNat.ofNat _ m` ~> `n / m`\nand `-@OfNat.ofNat _ n _ / @OfNat.ofNat _ m` ~> `-n / m`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabHDiv\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabHDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1096-L1102","name":"Lean.PrettyPrinter.Delaborator.delabNeg","line":1096,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNeg","doc":"Delaborates the negative of an `OfNat.ofNat` literal.\n`-@OfNat.ofNat _ n _` ~> `-n`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNeg\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1086-L1094","name":"Lean.PrettyPrinter.Delaborator.delabOfNat","line":1086,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfNat","doc":"Delaborates an `OfNat.ofNat` literal.\n`@OfNat.ofNat _ n _` ~> `n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1067-L1084","name":"Lean.PrettyPrinter.Delaborator.delabDivRatCore","line":1067,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDivRatCore","doc":"Core function that delaborates a rational literal that is the division of an integer literal\nby a natural number literal.\nThe division must be homogeneous for it to count as a rational literal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDivRatCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDivRatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">showType</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1054-L1065","name":"Lean.PrettyPrinter.Delaborator.delabNegIntCore","line":1054,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNegIntCore","doc":"Core function that delaborates a negative integer literal (a `Neg.neg` applied to `OfNat.ofNat`).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabNegIntCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabNegIntCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">showType</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1042-L1052","name":"Lean.PrettyPrinter.Delaborator.delabOfNatCore","line":1042,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfNatCore","doc":"Core function that delaborates a natural number (an `OfNat.ofNat` literal).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabOfNatCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabOfNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">showType</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1031-L1040","name":"Lean.PrettyPrinter.Delaborator.delabLit","line":1031,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLit\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1024-L1029","name":"Lean.PrettyPrinter.Delaborator.delabChar","line":1024,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabChar\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L1011-L1022","name":"Lean.PrettyPrinter.Delaborator.delabLetE","line":1011,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLetE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLetE\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabLetE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L984-L1009","name":"Lean.PrettyPrinter.Delaborator.delabForall","line":984,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabForall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabForall\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabForall</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L901-L955","name":"Lean.PrettyPrinter.Delaborator.delabLam","line":901,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLam","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLam\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabLam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L849-L860","name":"Lean.PrettyPrinter.Delaborator.delabMData","line":849,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMData\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabMData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L832-L847","name":"Lean.PrettyPrinter.Delaborator.delabLetFun","line":832,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLetFun","doc":"Delaborates applications of the form `letFun v (fun x => b)` as `let_fun x := v; b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabLetFun\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabLetFun</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L826-L830","name":"Lean.PrettyPrinter.Delaborator.delabAppMatch.usingNames","line":826,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch.usingNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch.usingNames\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppMatch</span>.<span class=\"name\">usingNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L813-L824","name":"Lean.PrettyPrinter.Delaborator.delabAppMatch.withDummyBinders","line":813,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch.withDummyBinders","doc":"Adds hNames to the local context to reserve their names and runs `m` in that context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch.withDummyBinders\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppMatch</span>.<span class=\"name\">withDummyBinders</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hNames?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span> â†’ <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L722-L830","name":"Lean.PrettyPrinter.Delaborator.delabAppMatch","line":722,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch","doc":"Delaborates applications of \"matchers\" such as\n```\nList.map.match_1 : {Î± : Type _} â†’\n  (motive : List Î± â†’ Sort _) â†’\n    (x : List Î±) â†’ (Unit â†’ motive List.nil) â†’ ((a : Î±) â†’ (as : List Î±) â†’ motive (a :: as)) â†’ motive x\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppMatch\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L678-L678","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.rhss","line":678,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.rhss","doc":"The delaborated right-hand sides for each match alternative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.rhss\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">rhss</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L676-L676","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.varNames","line":676,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.varNames","doc":"For each match alternative, the names to use for the pattern variables.\nEach ends with `hNames?.filterMap id` exactly. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.varNames\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">varNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L673-L673","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.alts","line":673,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.alts","doc":"Lambda subexpressions for each alternate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L671-L671","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.hNames?","line":671,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.hNames?","doc":"The collection of names used for the `h :` discriminant annotations, in order.\nUniquified names are constructed after the first phase. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.hNames?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">hNames?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L668-L668","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.discrs","line":668,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.discrs","doc":"The delaborated discriminants, without `h :` annotations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.discrs\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">discrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L666-L666","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.motiveNamed","line":666,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.motiveNamed","doc":"Whether `pp.analysis.namedArg` was set for the motive argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.motiveNamed\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">motiveNamed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L664-L664","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.motive","line":664,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.motive","doc":"The motive, with the pi type version delaborated and the original expression version.\nOnce `AppMatchState` is complete, this is not `none`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.motive\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">motive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L661-L661","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.matcherTy","line":661,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.matcherTy","doc":"The `matcherTy` instantiated with universe levels and the matcher parameters, with a position at the type of\nthis application prefix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.matcherTy\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">matcherTy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L658-L658","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.info","line":658,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.info","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.info\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">Meta.MatcherInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L657-L657","name":"Lean.PrettyPrinter.Delaborator.AppMatchState.mk","line":657,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Match/MatcherInfo.html#Lean.Meta.Match.MatcherInfo\">Meta.MatcherInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">matcherTy</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motiveNamed</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hNames?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\">AppMatchState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L656-L678","name":"Lean.PrettyPrinter.Delaborator.AppMatchState","line":656,"kind":"structure","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState","doc":"State for `delabAppMatch` and helpers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppMatchState\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppMatchState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L599-L653","name":"Lean.PrettyPrinter.Delaborator.delabStructureInstance","line":599,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabStructureInstance","doc":"Delaborate structure constructor applications using structure instance notation or anonymous constructor notation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabStructureInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabStructureInstance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L549-L557","name":"Lean.PrettyPrinter.Delaborator.delabDelayedAssignedMVar","line":549,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDelayedAssignedMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabDelayedAssignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabDelayedAssignedMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L515-L547","name":"Lean.PrettyPrinter.Delaborator.withOverApp","line":515,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withOverApp","doc":"The `withOverApp` combinator allows delaborators to handle \"over-application\" by using the core\napplication delaborator to handle additional arguments.\n\nFor example, suppose `f : {A : Type} â†’ Foo A â†’ A` and we want to implement a delaborator for\napplications `f x` to pretty print as `F[x]`. Because `A` is a type variable we might encounter\na term of the form `@f (A â†’ B) x y`, which has an additional argument `y`.\nWith this combinator one can use an arity-2 delaborator to pretty print this as `F[x] y`.\n\n* `arity`: the expected number of arguments to `f`.\n  The combinator will fail if fewer than this number of arguments are passed,\n  and if more than this number of arguments are passed the arguments are handled using\n  the standard application delaborator.\n* `x`: delaborates the head application of the expected arity (`f x` in the example).\n  The value of `pp.tagAppFns` for the whole application is propagated to the expression that `x` sees.\n\nIn the event of overapplication, the delaborator `x` is wrapped in\n`Lean.PrettyPrinter.Delaborator.withAnnotateTermInfo` to register `TermInfo` for the resulting term.\nThe effect of this is that the term is hoverable in the Infoview.\n\nIf the application would require inserting `@` around the result of `x`, the delaborator fails\nsince we cannot be sure that this insertion will be well-formed.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withOverApp\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withOverApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L505-L513","name":"Lean.PrettyPrinter.Delaborator.delabApp","line":505,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabApp","doc":"Default delaborator for applications.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabApp\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabApp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L483-L503","name":"Lean.PrettyPrinter.Delaborator.delabAppCore","line":483,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppCore","doc":"Delaborates applications. Removes up to `maxArgs` arguments to form the \"head\" of the application.\n* `delabHead` is a delaborator to use for the head of the expression.\n  It is passed whether the result needs to have `@` inserted.\n* If `unexpand` is true, then allow unexpanders and field notation.\n  This should likely be set to `false` except in the main `delabApp` delaborator.\n\nPropagates `pp.tagAppFns` into the head for `delabHead`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delabHead</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unexpand</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L455-L481","name":"Lean.PrettyPrinter.Delaborator.useAppExplicit","line":455,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.useAppExplicit","doc":"Returns true if an application should use explicit mode when delaborating.\nExplicit mode turns off unexpanders\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.useAppExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">useAppExplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L438-L450","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders.go","line":438,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders.go\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span>.<span class=\"name\">tryAppUnexpanders</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnStx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Unexpander</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">implicitArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argStxs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L434-L453","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders","line":434,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders","doc":"If the expression is a candidate for app unexpanders,\ntry applying an app unexpander using some prefix of the arguments, longest prefix first.\nThis function makes sure that the unexpanded syntax is annotated and given TermInfo so that it is hoverable in the InfoView.\n\nRef logic:\n1. The unexpanders are run with the head constant's syntax as the ref.\n2. If `pp.tagAppFns` is false, then this does nothing, since `delabConst` won't register any terminfo for the constant.\n3. If `pp.tagAppFns` is true, then this causes all tokens in app unexpanders to refer to the head constant.\n   The effect is that in docgen, every token will be linkified (supposing the app unexpander uses syntax quotations).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryAppUnexpanders\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span>.<span class=\"name\">tryAppUnexpanders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fnStx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L418-L422","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryUnexpand","line":418,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryUnexpand","doc":"Runs the given unexpanders, returning the resulting syntax if any are applicable, and otherwise fails.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.tryUnexpand\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span>.<span class=\"name\">tryUnexpand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Unexpander</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L399-L414","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkArg","line":399,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkArg","doc":"Delaborates the current argument.\nThe argument `remainingArgs` is the number of arguments in the application after this one.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkArg\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span>.<span class=\"name\">mkArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L393-L394","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkNamedArg","line":393,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkNamedArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore.mkNamedArg\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span>.<span class=\"name\">mkNamedArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L337-L453","name":"Lean.PrettyPrinter.Delaborator.delabAppImplicitCore","line":337,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore","doc":"Delaborates a function application in the standard mode, where implicit arguments are generally not\nincluded, unless `pp.analysis.namedArg` is set at that argument.\n\nThis delaborator is where `app_unexpander`s and the structure instance unexpander are applied, if `unexpand` is true.\nWhen `unexpand` is true, also considers opportunities for field notation, which takes priority over other unexpanders.\n\nAssumes `numArgs â‰¤ paramKinds.size`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppImplicitCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppImplicitCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unexpand</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delabHead</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L330-L335","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.syntax?","line":330,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.syntax?","doc":"If the argument has associated syntax, returns it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.syntax?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">syntax?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L325-L328","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.canUnexpand","line":325,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.canUnexpand","doc":"Whether unexpanding is allowed with this argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.canUnexpand\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">canUnexpand</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L323-L323","name":"Lean.PrettyPrinter.Delaborator.instInhabitedAppImplicitArg","line":323,"kind":"instance","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.instInhabitedAppImplicitArg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.instInhabitedAppImplicitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instInhabitedAppImplicitArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L321-L322","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.named","line":321,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.named","doc":"It's a named argument. Named arguments inhibit applying unexpanders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.named\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">named</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.namedArgument</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L319-L320","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.optional","line":319,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.optional","doc":"A regular argument that, if it comes as the last argument, may be omitted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.optional\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">optional</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L317-L318","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.regular","line":317,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.regular","doc":"A regular argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.regular\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">regular</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L315-L316","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg.skip","line":315,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.skip","doc":"An argument to skip, like an implicit argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg.skip\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span>.<span class=\"name\">skip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\">AppImplicitArg</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L313-L323","name":"Lean.PrettyPrinter.Delaborator.AppImplicitArg","line":313,"kind":"inductive","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg","doc":"Records how a particular argument to a function is delaborated, in non-explicit mode. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.AppImplicitArg\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">AppImplicitArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L277-L311","name":"Lean.PrettyPrinter.Delaborator.delabAppExplicitCore","line":277,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppExplicitCore","doc":"Delaborates a function application in explicit mode.\n* If `insertExplicit` is true, then ensures the head syntax is wrapped with `@`.\n* If `fieldNotation` is true, then allows the application to be pretty printed using field notation.\n  Field notation will not be used when `insertExplicit` is true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabAppExplicitCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAppExplicitCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fieldNotation</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delabHead</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L257-L275","name":"Lean.PrettyPrinter.Delaborator.needsExplicit","line":257,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.needsExplicit","doc":"In explicit mode, decides whether or not the applied function needs `@`,\nwhere `numArgs` is the number of arguments actually supplied to `f`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.needsExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">needsExplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">paramKinds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L204-L226","name":"Lean.PrettyPrinter.Delaborator.appFieldNotationCandidate?","line":204,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.appFieldNotationCandidate?","doc":"If `e` is an application that is a candidate for using field notation,\nreturns the parameter index and the field name to use.\nChecks that there are enough arguments.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.appFieldNotationCandidate?\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">appFieldNotationCandidate?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L199-L202","name":"Lean.PrettyPrinter.Delaborator.shouldShowMotive","line":199,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.shouldShowMotive","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.shouldShowMotive\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">shouldShowMotive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L162-L197","name":"Lean.PrettyPrinter.Delaborator.getParamKinds","line":162,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.getParamKinds","doc":"Given a function `f` supplied with arguments `args`, returns an array whose n-th element\nis set to the kind of the n-th argument's associated parameter.\nWe do not assume the expression `mkAppN f args` is sensical,\nand this function captures errors (except for panics) and returns the empty array in that case.\n\nThe returned array might be longer than the number of arguments.\nIt gives parameter kinds for the fully-applied function.\nNote: the `defVal` expressions are only guaranteed to be valid for parameters associated to the supplied arguments;\nafter this, they might refer to temporary fvars.\n\nThis function properly handles \"overapplied\" functions.\nFor example, while `id` takes one explicit argument, it can take more than one explicit\nargument when its arguments are specialized to function types, like in `id id 2`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.getParamKinds\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">getParamKinds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L156-L160","name":"Lean.PrettyPrinter.Delaborator.ParamKind.isRegularExplicit","line":156,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.isRegularExplicit","doc":"Returns true if the parameter is an explicit parameter that has neither a default value nor a tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.isRegularExplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">isRegularExplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L154-L154","name":"Lean.PrettyPrinter.Delaborator.instInhabitedParamKind","line":154,"kind":"instance","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.instInhabitedParamKind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.instInhabitedParamKind\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instInhabitedParamKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L153-L153","name":"Lean.PrettyPrinter.Delaborator.ParamKind.isAutoParam","line":153,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.isAutoParam","doc":"Whether the parameter is an autoparam (i.e., whether it uses a tactic for the default value). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.isAutoParam\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">isAutoParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L151-L151","name":"Lean.PrettyPrinter.Delaborator.ParamKind.defVal","line":151,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.defVal","doc":"The default value for the parameter, if the parameter has a default value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.defVal\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">defVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L149-L149","name":"Lean.PrettyPrinter.Delaborator.ParamKind.bInfo","line":149,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.bInfo","doc":"Binder info for the parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.bInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">bInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L147-L147","name":"Lean.PrettyPrinter.Delaborator.ParamKind.name","line":147,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.name","doc":"Binder name for the parameter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.name\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L145-L145","name":"Lean.PrettyPrinter.Delaborator.ParamKind.mk","line":145,"kind":"ctor","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bInfo</span> : <a href=\"./Lean/Expr.html#Lean.BinderInfo\">BinderInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">defVal</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isAutoParam</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\">ParamKind</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L142-L154","name":"Lean.PrettyPrinter.Delaborator.ParamKind","line":142,"kind":"structure","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind","doc":"A structure that records details of a function parameter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.ParamKind\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">ParamKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L139-L140","name":"Lean.PrettyPrinter.Delaborator.withMDatasOptions","line":139,"kind":"opaque","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withMDatasOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withMDatasOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withMDatasOptions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L127-L137","name":"Lean.PrettyPrinter.Delaborator.withMDataOptions","line":127,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withMDataOptions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withMDataOptions\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withMDataOptions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">Î±</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L86-L125","name":"Lean.PrettyPrinter.Delaborator.delabConst","line":86,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConst","doc":"Delaborator for `const` expressions.\nThis is not registered as a delaborator, as `const` is not an expression kind\n(see [delab] description and `Lean.PrettyPrinter.Delaborator.getExprKind`).\nRather, it is called through the `app` delaborator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabConst\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L74-L84","name":"Lean.PrettyPrinter.Delaborator.delabSort","line":74,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabSort\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabSort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L69-L72","name":"Lean.PrettyPrinter.Delaborator.delabMVar","line":69,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L54-L67","name":"Lean.PrettyPrinter.Delaborator.delabMVarAux","line":54,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMVarAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabMVarAux\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabMVarAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L49-L52","name":"Lean.PrettyPrinter.Delaborator.delabBVar","line":49,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabBVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabBVar\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabBVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L38-L46","name":"Lean.PrettyPrinter.Delaborator.delabFVar","line":38,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.delabFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabFVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L32-L36","name":"Lean.PrettyPrinter.Delaborator.maybeAddBlockImplicit","line":32,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.maybeAddBlockImplicit","doc":"Wraps the identifier (or identifier with explicit universe levels) with `@` if `pp.analysis.blockImplicit` is set to true.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.maybeAddBlockImplicit\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">maybeAddBlockImplicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">identLike</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/PrettyPrinter/Delaborator/Builtins.lean#L20-L30","name":"Lean.PrettyPrinter.Delaborator.withTypeAscription","line":20,"kind":"def","docLink":"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withTypeAscription","doc":"If `cond` is true, wraps the syntax produced by `d` in a type ascription.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Builtins.html#Lean.PrettyPrinter.Delaborator.withTypeAscription\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withTypeAscription</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Term</a></span></div></div>"}]}