{"name":"Mathlib.Tactic.Check","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.Basic","Lean.PrettyPrinter","Lean.Elab.SyntheticMVars"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Check.lean#L47-L57","name":"Mathlib.Tactic.«tactic#check__»","line":47,"kind":"def","docLink":"./Mathlib/Tactic/Check.html#Mathlib.Tactic.«tactic#check__»","doc":"The `#check t` tactic elaborates the term `t` and then pretty prints it with its type as `e : ty`.\n\nIf `t` is an identifier, then it pretty prints a type declaration form\nfor the global constant `t` instead.\nUse `#check (t)` to pretty print it as an elaborated expression.\n\nLike the `#check` command, the `#check` tactic allows stuck typeclass instance problems.\nThese become metavariables in the output.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Check.html#Mathlib.Tactic.«tactic#check__»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">«tactic#check__»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Check.lean#L24-L45","name":"Mathlib.Tactic.elabCheckTactic","line":24,"kind":"def","docLink":"./Mathlib/Tactic/Check.html#Mathlib.Tactic.elabCheckTactic","doc":"Tactic version of `Lean.Elab.Command.elabCheck`.\nElaborates `term` without modifying tactic/elab/meta state.\nInfo messages are placed at `tk`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Check.html#Mathlib.Tactic.elabCheckTactic\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabCheckTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tk</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreStuckTC</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}