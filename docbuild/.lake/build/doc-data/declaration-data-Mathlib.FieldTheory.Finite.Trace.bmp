{"name":"Mathlib.FieldTheory.Finite.Trace","instances":[],"imports":["Init","Mathlib.RingTheory.Trace.Basic","Mathlib.FieldTheory.Finite.GaloisField"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/FieldTheory/Finite/Trace.lean#L22-L30","name":"FiniteField.trace_to_zmod_nondegenerate","line":22,"kind":"theorem","docLink":"./Mathlib/FieldTheory/Finite/Trace.html#FiniteField.trace_to_zmod_nondegenerate","doc":"The trace map from a finite field to its prime field is nongedenerate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/FieldTheory/Finite/Trace.html#FiniteField.trace_to_zmod_nondegenerate\"><span class=\"name\">FiniteField</span>.<span class=\"name\">trace_to_zmod_nondegenerate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Algebra/Defs.html#Algebra\">Algebra</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/CharP/Defs.html#ringChar\">ringChar</a> <span class=\"fn\">F</span>)</span>)</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">F</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">b</span> : <span class=\"fn\">F</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Trace/Defs.html#Algebra.trace\">Algebra.trace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/CharP/Defs.html#ringChar\">ringChar</a> <span class=\"fn\">F</span>)</span>)</span> <span class=\"fn\">F</span>)</span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>"}]}