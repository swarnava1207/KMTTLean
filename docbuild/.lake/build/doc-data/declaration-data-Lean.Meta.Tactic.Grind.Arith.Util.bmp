{"name":"Lean.Meta.Tactic.Grind.Arith.Util","instances":[],"imports":["Lean.Expr","Lean.Message"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L45-L50","name":"Lean.Meta.Grind.Arith.isNatNum?","line":45,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatNum?","doc":"Returns `some k` if `e` `@OfNat.ofNat Nat _ (instOfNatNat k)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatNum?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isNatNum?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L35-L43","name":"Lean.Meta.Grind.Arith.isNatAdd","line":35,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatAdd","doc":"Returns `true` if `e` is of the form\n```\n@HAdd.hAdd Nat Nat Nat (instHAdd Nat instAddNat) _ _\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatAdd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isNatAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L25-L33","name":"Lean.Meta.Grind.Arith.isNatAdd?","line":25,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatAdd?","doc":"Returns `some (a, b)` if `e` is of the form\n```\n@HAdd.hAdd Nat Nat Nat (instHAdd Nat instAddNat) a b\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatAdd?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isNatAdd?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L21-L23","name":"Lean.Meta.Grind.Arith.isInstLENat","line":21,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isInstLENat","doc":"Returns `true` if `e` is `instLENat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isInstLENat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isInstLENat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L16-L19","name":"Lean.Meta.Grind.Arith.isInstAddNat","line":16,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isInstAddNat","doc":"Returns `true` if `e` is of the form `@instHAdd Nat instAddNat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isInstAddNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isInstAddNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Grind/Arith/Util.lean#L12-L14","name":"Lean.Meta.Grind.Arith.isNatType","line":12,"kind":"def","docLink":"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatType","doc":"Returns `true` if `e` is of the form `Nat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Util.html#Lean.Meta.Grind.Arith.isNatType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">isNatType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"}]}