{"name":"Mathlib.CategoryTheory.FiberedCategory.Cartesian","instances":[{"typeNames":["CategoryTheory.CategoryStruct.id","CategoryTheory.Functor.IsCartesian.map"],"name":"CategoryTheory.Functor.IsCartesian.map_isHomLift","className":"CategoryTheory.Functor.IsHomLift"},{"typeNames":["CategoryTheory.CategoryStruct.id","CategoryTheory.Iso.hom"],"name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv_isHomLift","className":"CategoryTheory.Functor.IsHomLift"},{"typeNames":["CategoryTheory.CategoryStruct.id","CategoryTheory.Iso.inv"],"name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom_isHomLift","className":"CategoryTheory.Functor.IsHomLift"},{"typeNames":["CategoryTheory.CategoryStruct.comp"],"name":"CategoryTheory.Functor.IsCartesian.of_iso_comp","className":"CategoryTheory.Functor.IsCartesian"},{"typeNames":["CategoryTheory.CategoryStruct.comp"],"name":"CategoryTheory.Functor.IsCartesian.of_comp_iso","className":"CategoryTheory.Functor.IsCartesian"},{"typeNames":[],"name":"CategoryTheory.Functor.IsStronglyCartesian.isCartesian_of_isStronglyCartesian","className":"CategoryTheory.Functor.IsCartesian"},{"typeNames":["CategoryTheory.Functor.IsStronglyCartesian.map"],"name":"CategoryTheory.Functor.IsStronglyCartesian.map_isHomLift","className":"CategoryTheory.Functor.IsHomLift"},{"typeNames":["CategoryTheory.CategoryStruct.comp","CategoryTheory.CategoryStruct.comp"],"name":"CategoryTheory.Functor.IsStronglyCartesian.comp","className":"CategoryTheory.Functor.IsStronglyCartesian"},{"typeNames":["CategoryTheory.Iso.hom"],"name":"CategoryTheory.Functor.IsStronglyCartesian.of_iso","className":"CategoryTheory.Functor.IsStronglyCartesian"},{"typeNames":[],"name":"CategoryTheory.Functor.IsStronglyCartesian.of_isIso","className":"CategoryTheory.Functor.IsStronglyCartesian"},{"typeNames":["CategoryTheory.Iso.hom","CategoryTheory.Iso.hom"],"name":"CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_inv_isHomLift","className":"CategoryTheory.Functor.IsHomLift"},{"typeNames":["CategoryTheory.Iso.inv","CategoryTheory.Iso.inv"],"name":"CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_hom_isHomLift","className":"CategoryTheory.Functor.IsHomLift"}],"imports":["Init","Mathlib.CategoryTheory.FiberedCategory.HomLift"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L382-L387","name":"CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_hom_isHomLift","line":382,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_hom_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_hom_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">domainUniqueUpToIso_hom_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">R' </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a' </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso\">domainIsoOfBaseIso</a> <span class=\"fn\">p</span> <span class=\"fn\">h</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L377-L380","name":"CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_inv_isHomLift","line":377,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_inv_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainUniqueUpToIso_inv_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">domainUniqueUpToIso_inv_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">R' </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a' </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso\">domainIsoOfBaseIso</a> <span class=\"fn\">p</span> <span class=\"fn\">h</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L368-L368","name":"CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_inv","line":368,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">domainIsoOfBaseIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">R' </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a' </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso\">domainIsoOfBaseIso</a> <span class=\"fn\">p</span> <span class=\"fn\">h</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L368-L368","name":"CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_hom","line":368,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">domainIsoOfBaseIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">R' </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a' </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso\">domainIsoOfBaseIso</a> <span class=\"fn\">p</span> <span class=\"fn\">h</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">h</span> <span class=\"fn\">œÜ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L366-L375","name":"CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso","line":366,"kind":"def","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso","doc":"The canonical isomorphism between the domains of two strongly cartesian morphisms lying over\nisomorphic objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.domainIsoOfBaseIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">domainIsoOfBaseIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">R' </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">a' </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L344-L358","name":"CategoryTheory.Functor.IsStronglyCartesian.isIso_of_base_isIso","line":344,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.isIso_of_base_isIso","doc":"A strongly cartesian morphism lying over an isomorphism is an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.isIso_of_base_isIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">isIso_of_base_isIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L341-L342","name":"CategoryTheory.Functor.IsStronglyCartesian.of_isIso","line":341,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_isIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_isIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">of_isIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">IsIso</a> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L334-L339","name":"CategoryTheory.Functor.IsStronglyCartesian.of_iso","line":334,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">œÜ</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">œÜ</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L303-L326","name":"CategoryTheory.Functor.IsStronglyCartesian.of_comp","line":303,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_comp","doc":"Given two commutative squares\n```\na --œÜ--> b --œà--> c\n|        |        |\nv        v        v\nR --f--> S --g--> T\n```\nsuch that `œÜ ‚â´ œà` and `œà` are strongly cartesian, then so is `œÜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.of_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">of_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">S</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">T</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œà</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ</span> <span class=\"fn\">œà</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L283-L301","name":"CategoryTheory.Functor.IsStronglyCartesian.comp","line":283,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.comp","doc":"Given two strongly cartesian morphisms `œÜ`, `œà` as follows\n```\na --œÜ--> b --œà--> c\n|        |        |\nv        v        v\nR --f--> S --g--> T\n```\nThen the composite `œÜ ‚â´ œà` is also strongly cartesian. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">S</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">T</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œà</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ</span> <span class=\"fn\">œà</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L268-L268","name":"CategoryTheory.Functor.IsStronglyCartesian.map_comp_map_assoc","line":268,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_comp_map_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_comp_map_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map_comp_map_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R' </span><span class=\"fn\">R''</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a' </span><span class=\"fn\">a''</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f''</span> : <span class=\"fn\">R''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">R''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\">f''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g'</span> <span class=\"fn\">f'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ''</span> : <span class=\"fn\">a''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f''</span> <span class=\"fn\">œÜ''</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span> <span class=\"fn\">H'</span> <span class=\"fn\">œÜ''</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">H</span> <span class=\"fn\">œÜ'</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">œÜ''</span>)</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L243-L275","name":"CategoryTheory.Functor.IsStronglyCartesian.map_comp_map","line":243,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_comp_map","doc":"When its possible to compare the two, the composition of two `IsStronglyCartesian.map` will also\nbe given by a `IsStronglyCartesian.map`. In other words, given diagrams\n```\na''         a'        a --œÜ--> b\n|           |         |        |\nv           v         v        v\nR'' --g'--> R' --g--> R --f--> S\n```\nand\n```\na' --œÜ'--> b\n|          |\nv          v\nR' --f'--> S\n```\nand\n```\na'' --œÜ''--> b\n|            |\nv            v\nR'' --f''--> S\n```\nsuch that `œÜ` and `œÜ'` are strongly cartesian morphisms, and such that `f' = g ‚â´ f` and\n`f'' = g' ‚â´ f'`. Then composing the induced map from `a'' ‚ü∂ a'` with the induced map from\n`a' ‚ü∂ a` gives the induced map from `a'' ‚ü∂ a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_comp_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map_comp_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R' </span><span class=\"fn\">R''</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a' </span><span class=\"fn\">a''</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f''</span> : <span class=\"fn\">R''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g'</span> : <span class=\"fn\">R''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R'</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\">f''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g'</span> <span class=\"fn\">f'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ''</span> : <span class=\"fn\">a''</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f''</span> <span class=\"fn\">œÜ''</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span> <span class=\"fn\">H'</span> <span class=\"fn\">œÜ''</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">H</span> <span class=\"fn\">œÜ'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">œÜ''</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L237-L241","name":"CategoryTheory.Functor.IsStronglyCartesian.map_self","line":237,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_self\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L224-L235","name":"CategoryTheory.Functor.IsStronglyCartesian.ext","line":224,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.ext","doc":"Given a diagram\n```\na'        a --œÜ--> b\n|         |        |\nv         v        v\nR' --g--> R --f--> S\n```\nsuch that `œÜ` is strongly cartesian, and morphisms `œà œà' : a' ‚ü∂ a` such that\n`g ‚â´ œà = œÜ' = g ‚â´ œà'`. Then we have that `œà = œà'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œà </span><span class=\"fn\">œà'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œà'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà'</span> <span class=\"fn\">œÜ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">œà</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œà'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L210-L220","name":"CategoryTheory.Functor.IsStronglyCartesian.map_uniq","line":210,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_uniq","doc":"Given a diagram\n```\na'        a --œÜ--> b\n|         |        |\nv         v        v\nR' --g--> R --f--> S\n```\nsuch that `œÜ` is strongly cartesian, and morphisms `œÜ' : a' ‚ü∂ b`, `œà : a' ‚ü∂ a` such that\n`œà ‚â´ œÜ = œÜ'`. Then `œà` is the map induced by the universal property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_uniq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map_uniq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œà</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hœà</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">œà</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">hf'</span> <span class=\"fn\">œÜ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L206-L206","name":"CategoryTheory.Functor.IsStronglyCartesian.fac_assoc","line":206,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.fac_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.fac_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">fac_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">hf'</span> <span class=\"fn\">œÜ'</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ'</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L206-L208","name":"CategoryTheory.Functor.IsStronglyCartesian.fac","line":206,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.fac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.fac\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">hf'</span> <span class=\"fn\">œÜ'</span>)</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L203-L204","name":"CategoryTheory.Functor.IsStronglyCartesian.map_isHomLift","line":203,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\">map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">hf'</span> <span class=\"fn\">œÜ'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L191-L201","name":"CategoryTheory.Functor.IsStronglyCartesian.map","line":191,"kind":"def","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map","doc":"Given a diagram\n```\na'        a --œÜ--> b\n|         |        |\nv         v        v\nR' --g--> R --f--> S\n```\nsuch that `œÜ` is strongly cartesian, and a morphism `œÜ' : a' ‚ü∂ b`. Then `map` is the map `a' ‚ü∂ a`\nlying over `g` obtained from the universal property of `œÜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L183-L184","name":"CategoryTheory.Functor.IsStronglyCartesian.isCartesian_of_isStronglyCartesian","line":183,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.isCartesian_of_isStronglyCartesian","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.isCartesian_of_isStronglyCartesian\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">isCartesian_of_isStronglyCartesian</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L173-L181","name":"CategoryTheory.Functor.IsStronglyCartesian.universal_property","line":173,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.universal_property","doc":"The universal property of a strongly cartesian morphism.\n\nThis lemma is more flexible with respect to non-definitional equalities than the field\n`universal_property'` of `IsStronglyCartesian`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.universal_property\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">universal_property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R'</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\">R'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">f'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">œá</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œá</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œá</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L154-L163","name":"CategoryTheory.Functor.IsCartesian.of_comp_iso","line":154,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.of_comp_iso","doc":"Postcomposing a cartesian morphism with an isomorphism lifting the identity is cartesian. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.of_comp_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">of_comp_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">S</span>)</span> <span class=\"fn\"><span class=\"fn\">œÜ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ</span> <span class=\"fn\"><span class=\"fn\">œÜ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L142-L152","name":"CategoryTheory.Functor.IsCartesian.of_iso_comp","line":142,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.of_iso_comp","doc":"Precomposing a cartesian morphism with an isomorphism lifting the identity is cartesian. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.of_iso_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">of_iso_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\"><span class=\"fn\">œÜ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">œÜ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">œÜ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L138-L140","name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom_isHomLift","line":138,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">domainUniqueUpToIso_hom_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso\">domainUniqueUpToIso</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L134-L136","name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv_isHomLift","line":134,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">domainUniqueUpToIso_inv_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso\">domainUniqueUpToIso</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L121-L121","name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_inv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">domainUniqueUpToIso_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso\">domainUniqueUpToIso</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L121-L121","name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom","line":121,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso_hom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">domainUniqueUpToIso_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso\">domainUniqueUpToIso</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L119-L132","name":"CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso","line":119,"kind":"def","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso","doc":"The canonical isomorphism between the domains of two cartesian morphisms\nlying over the same object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.domainUniqueUpToIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">domainUniqueUpToIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L113-L117","name":"CategoryTheory.Functor.IsCartesian.map_self","line":113,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_self\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">map_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L107-L111","name":"CategoryTheory.Functor.IsCartesian.ext","line":107,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.ext","doc":"Given a cartesian morphism `œÜ : a ‚ü∂ b` lying over `f : R ‚ü∂ S` in `ùí≥`, and two morphisms\n`œà œà' : a' ‚ü∂ a` such that `œà ‚â´ œÜ = œà' ‚â´ œÜ`. Then we must have `œà = œà'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œà </span><span class=\"fn\">œà'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">œà'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà'</span> <span class=\"fn\">œÜ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">œà</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œà'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L97-L103","name":"CategoryTheory.Functor.IsCartesian.map_uniq","line":97,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_uniq","doc":"Given a cartesian morphism `œÜ : a ‚ü∂ b` lying over `f : R ‚ü∂ S` in `ùí≥`, and another morphism\n`œÜ' : a' ‚ü∂ b` which also lifts `f`. Then any morphism `œà : a' ‚ü∂ a` lifting `ùüô R` such that\n`g ‚â´ œà = œÜ'` must equal the map induced from the universal property of `œÜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_uniq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">map_uniq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œà</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">œà</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hœà</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œà</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">œà</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L93-L93","name":"CategoryTheory.Functor.IsCartesian.fac_assoc","line":93,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.fac_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.fac_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">fac_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œÜ'</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L93-L95","name":"CategoryTheory.Functor.IsCartesian.fac","line":93,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.fac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.fac\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L90-L91","name":"CategoryTheory.Functor.IsCartesian.map_isHomLift","line":90,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_isHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map_isHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">map_isHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\">IsCartesian.map</a> <span class=\"fn\">p</span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span> <span class=\"fn\">œÜ'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L84-L88","name":"CategoryTheory.Functor.IsCartesian.map","line":84,"kind":"def","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map","doc":"Given a cartesian morphism `œÜ : a ‚ü∂ b` lying over `f : R ‚ü∂ S` in `ùí≥`, and another morphism\n`œÜ' : a' ‚ü∂ b` which also lifts `f`, then `IsCartesian.map f œÜ œÜ'` is the morphism `a' ‚ü∂ a` lifting\n`ùüô R` obtained from the universal property of `œÜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L71-L71","name":"CategoryTheory.Functor.IsStronglyCartesian.universal_property'","line":71,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.universal_property'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.universal_property'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">universal_property'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù¬π</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a'</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">œá</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œá</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œá</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L70-L70","name":"CategoryTheory.Functor.IsStronglyCartesian.mk","line":70,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsHomLift</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">universal_property'</span> :\n  <span class=\"fn\">‚àÄ {<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>} (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a'</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">R</span>) (<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>) [<span class=\"fn\">inst</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">œÜ'</span></span>],\n    <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">œá</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">g</span> <span class=\"fn\">œá</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œá</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L70-L72","name":"CategoryTheory.Functor.IsStronglyCartesian.toIsHomLift","line":70,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.toIsHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian.toIsHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span>.<span class=\"name\">toIsHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù¬π</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\">IsStronglyCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L60-L72","name":"CategoryTheory.Functor.IsStronglyCartesian","line":60,"kind":"class","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian","doc":"A morphism `œÜ : a ‚ü∂ b` in `ùí≥` lying over `f : R ‚ü∂ S` in `ùíÆ` is strongly cartesian if for\nall morphisms `œÜ' : a' ‚ü∂ b` and all diagrams of the form\n```\na'        a --œÜ--> b\n|         |        |\nv         v        v\nR' --g--> R --f--> S\n```\nsuch that `œÜ'` lifts `g ‚â´ f`, there exists a lift `œá` of `g` such that `œÜ' = œá ‚â´ œÜ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsStronglyCartesian\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsStronglyCartesian</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L57-L57","name":"CategoryTheory.Functor.IsCartesian.universal_property","line":57,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.universal_property","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.universal_property\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">universal_property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù¬π</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">œá</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">œá</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œá</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L56-L56","name":"CategoryTheory.Functor.IsCartesian.mk","line":56,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsHomLift</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">universal_property</span> :\n  <span class=\"fn\">‚àÄ {<span class=\"fn\">a'</span> : <span class=\"fn\">ùí≥</span>} (<span class=\"fn\">œÜ'</span> : <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>) [<span class=\"fn\">inst</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ'</span></span>],\n    <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">œá</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">a'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">a</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">œá</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">œá</span> <span class=\"fn\">œÜ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">œÜ'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L56-L58","name":"CategoryTheory.Functor.IsCartesian.toIsHomLift","line":56,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.toIsHomLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian.toIsHomLift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span>.<span class=\"name\">toIsHomLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst‚úù¬π</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\">IsCartesian</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FiberedCategory/Cartesian.lean#L51-L58","name":"CategoryTheory.Functor.IsCartesian","line":51,"kind":"class","docLink":"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian","doc":"A morphism `œÜ : a ‚ü∂ b` in `ùí≥` lying over `f : R ‚ü∂ S` in `ùíÆ` is cartesian if for all\nmorphisms `œÜ' : a' ‚ü∂ b`, also lying over `f`, there exists a unique morphism `œá : a' ‚ü∂ a` lifting\n`ùüô R` such that `œÜ' = œá ‚â´ œÜ`.\n\nSee SGA 1 VI 5.1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FiberedCategory/Cartesian.html#CategoryTheory.Functor.IsCartesian\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Functor</span>.<span class=\"name\">IsCartesian</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùíÆ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùí≥</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">ùíÆ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÇ, u‚ÇÇ}</a> <span class=\"fn\">ùí≥</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">ùí≥</span> <span class=\"fn\">ùíÆ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\">ùíÆ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">ùí≥</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">œÜ</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/CategoryTheory/FiberedCategory/HomLift.html#CategoryTheory.Functor.IsHomLift\">IsHomLift</a></span> <span class=\"fn\">f</span> <span class=\"fn\">œÜ</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}