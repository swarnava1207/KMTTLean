{"name":"Mathlib.Tactic.CategoryTheory.Monoidal.Datatypes","instances":[{"typeNames":["Mathlib.Tactic.Monoidal.Context"],"name":"Mathlib.Tactic.Monoidal.instContextContext","className":"Mathlib.Tactic.BicategoryLike.Context"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMonadMor₁MonoidalM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₁"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMonadMor₂IsoMonoidalM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₂Iso"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMonadMor₂MonoidalM","className":"Mathlib.Tactic.BicategoryLike.MonadMor₂"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMkMor₁MonoidalM","className":"Mathlib.Tactic.BicategoryLike.MkMor₁"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMkMor₂MonoidalM","className":"Mathlib.Tactic.BicategoryLike.MkMor₂"},{"typeNames":["Mathlib.Tactic.Monoidal.MonoidalM"],"name":"Mathlib.Tactic.Monoidal.instMonadCoherehnceHomMonoidalM","className":"Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom"}],"imports":["Init","Mathlib.Tactic.CategoryTheory.Coherence.Datatypes","Mathlib.Tactic.CategoryTheory.MonoidalComp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L502-L503","name":"Mathlib.Tactic.Monoidal.instMonadCoherehnceHomMonoidalM","line":502,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadCoherehnceHomMonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadCoherehnceHomMonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMonadCoherehnceHomMonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">BicategoryLike.MonadCoherehnceHom</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L499-L500","name":"Mathlib.Tactic.Monoidal.instMkMor₂MonoidalM","line":499,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMkMor₂MonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMkMor₂MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMkMor₂MonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">BicategoryLike.MkMor₂</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L475-L497","name":"Mathlib.Tactic.Monoidal.Mor₂OfExpr","line":475,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Mor₂OfExpr","doc":"Construct a `Mor₂` term from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Mor₂OfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₂OfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂\">BicategoryLike.Mor₂</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L445-L472","name":"Mathlib.Tactic.Monoidal.Mor₂IsoOfExpr","line":445,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Mor₂IsoOfExpr","doc":"Construct a `Mor₂Iso` term from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Mor₂IsoOfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Mor₂IsoOfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₂Iso\">BicategoryLike.Mor₂Iso</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L442-L443","name":"Mathlib.Tactic.Monoidal.instMkMor₁MonoidalM","line":442,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMkMor₁MonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMkMor₁MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMkMor₁MonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₁\">BicategoryLike.MkMor₁</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L428-L440","name":"Mathlib.Tactic.Monoidal.mor₁OfExpr","line":428,"kind":"opaque","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.mor₁OfExpr","doc":"Construct a `Mor₁` expression from a Lean expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.mor₁OfExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">mor₁OfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L413-L426","name":"Mathlib.Tactic.Monoidal.comp?","line":413,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.comp?","doc":"Return `(f, g)` if `e` is definitionally equal to `f ⊗ g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.comp?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">comp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Mor₁\">BicategoryLike.Mor₁</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L402-L411","name":"Mathlib.Tactic.Monoidal.id₁?","line":402,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.id₁?","doc":"Check that `e` is definitionally equal to `𝟙_ C`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.id₁?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">id₁?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Obj\">BicategoryLike.Obj</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L245-L400","name":"Mathlib.Tactic.Monoidal.instMonadMor₂MonoidalM","line":245,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₂MonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₂MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMonadMor₂MonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂\">BicategoryLike.MonadMor₂</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L138-L241","name":"Mathlib.Tactic.Monoidal.instMonadMor₂IsoMonoidalM","line":138,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₂IsoMonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₂IsoMonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMonadMor₂IsoMonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">BicategoryLike.MonadMor₂Iso</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L128-L132","name":"Mathlib.Tactic.Monoidal.structuralIsoOfExpr_horizontalComp","line":128,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_horizontalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_horizontalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralIsoOfExpr_horizontalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁ </span><span class=\"fn\">g₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">g₂</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f₁</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">f₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ'</span> : <span class=\"fn\">f₂</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_θ</span> : <span class=\"fn\"><span class=\"fn\">θ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory.tensorIso\">CategoryTheory.MonoidalCategory.tensorIso</a> <span class=\"fn\">η'</span> <span class=\"fn\">θ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.tensorHom\">CategoryTheory.MonoidalCategoryStruct.tensorHom</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L123-L126","name":"Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerRight","line":123,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralIsoOfExpr_whiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory.whiskerRightIso\">CategoryTheory.MonoidalCategory.whiskerRightIso</a> <span class=\"fn\">η'</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerRight\">CategoryTheory.MonoidalCategoryStruct.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L118-L121","name":"Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerLeft","line":118,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_whiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralIsoOfExpr_whiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory.whiskerLeftIso\">CategoryTheory.MonoidalCategory.whiskerLeftIso</a> <span class=\"fn\">f</span> <span class=\"fn\">η'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategoryStruct.whiskerLeft\">CategoryTheory.MonoidalCategoryStruct.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L111-L114","name":"Mathlib.Tactic.Monoidal.StructuralOfExpr_monoidalComp","line":111,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.StructuralOfExpr_monoidalComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.StructuralOfExpr_monoidalComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">StructuralOfExpr_monoidalComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h </span><span class=\"fn\">i</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/MonoidalComp.html#CategoryTheory.MonoidalCoherence\">CategoryTheory.MonoidalCoherence</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ'</span> : <span class=\"fn\">h</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_θ</span> : <span class=\"fn\"><span class=\"fn\">θ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/MonoidalComp.html#CategoryTheory.monoidalIsoComp\">CategoryTheory.monoidalIsoComp</a> <span class=\"fn\">η'</span> <span class=\"fn\">θ'</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/MonoidalComp.html#CategoryTheory.monoidalComp\">CategoryTheory.monoidalComp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L105-L109","name":"Mathlib.Tactic.Monoidal.structuralIsoOfExpr_comp","line":105,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.structuralIsoOfExpr_comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">structuralIsoOfExpr_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η'</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_η</span> : <span class=\"fn\"><span class=\"fn\">η'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ'</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih_θ</span> : <span class=\"fn\"><span class=\"fn\">θ'</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">θ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">η'</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.trans\">≪≫</a> <span class=\"fn\">θ'</span>).<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L88-L98","name":"Mathlib.Tactic.Monoidal.instMonadMor₁MonoidalM","line":88,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₁MonoidalM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instMonadMor₁MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instMonadMor₁MonoidalM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">BicategoryLike.MonadMor₁</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\">MonoidalM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L84-L86","name":"Mathlib.Tactic.Monoidal.synthMonoidalError","line":84,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.synthMonoidalError","doc":"Throw an error if the monoidal category instance is not found. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.synthMonoidalError\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">synthMonoidalError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L81-L82","name":"Mathlib.Tactic.Monoidal.MonoidalM","line":81,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM","doc":"The monad for the normalization of 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.MonoidalM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">MonoidalM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L78-L79","name":"Mathlib.Tactic.Monoidal.instContextContext","line":78,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instContextContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.instContextContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">instContextContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">BicategoryLike.Context</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L62-L76","name":"Mathlib.Tactic.Monoidal.mkContext?","line":62,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.mkContext?","doc":"Populate a `context` object for evaluating `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.mkContext?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">mkContext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L60-L60","name":"Mathlib.Tactic.Monoidal.Context.instMonoidal?","line":60,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.instMonoidal?","doc":"The monoidal category instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.instMonoidal?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">instMonoidal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">unknown_1</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L58-L58","name":"Mathlib.Tactic.Monoidal.Context.instCat","line":58,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.instCat","doc":"The category instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.instCat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">instCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{udummy._uniq.3, udummy._uniq.4}</a> <span class=\"fn\">unknown_1</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L56-L56","name":"Mathlib.Tactic.Monoidal.Context.C","line":56,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.C","doc":"The expression for the underlying category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.C\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">C</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> udummy._uniq.3)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L54-L54","name":"Mathlib.Tactic.Monoidal.Context.level₁","line":54,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.level₁","doc":"The level for objects. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.level₁\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">level₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L52-L52","name":"Mathlib.Tactic.Monoidal.Context.level₂","line":52,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.level₂","doc":"The level for morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.level₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">level₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L50-L50","name":"Mathlib.Tactic.Monoidal.Context.mk","line":50,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level₂ </span><span class=\"fn\">level₁</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> level₁)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instCat</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{level₂, level₁}</a> <span class=\"fn\">«$C»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">instMonoidal?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Monoidal/Category.html#CategoryTheory.MonoidalCategory\">CategoryTheory.MonoidalCategory</a> <span class=\"fn\">«$C»</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L49-L60","name":"Mathlib.Tactic.Monoidal.Context","line":49,"kind":"structure","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context","doc":"The context for evaluating expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.Context\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L41-L45","name":"Mathlib.Tactic.Monoidal.tgtExprOfIso","line":41,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.tgtExprOfIso","doc":"The codomain of an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.tgtExprOfIso\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">tgtExprOfIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L35-L39","name":"Mathlib.Tactic.Monoidal.srcExprOfIso","line":35,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.srcExprOfIso","doc":"The domain of an isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.srcExprOfIso\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">srcExprOfIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L29-L33","name":"Mathlib.Tactic.Monoidal.tgtExpr","line":29,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.tgtExpr","doc":"The codomain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.tgtExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">tgtExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.lean#L23-L27","name":"Mathlib.Tactic.Monoidal.srcExpr","line":23,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.srcExpr","doc":"The domain of a morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Monoidal/Datatypes.html#Mathlib.Tactic.Monoidal.srcExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Monoidal</span>.<span class=\"name\">srcExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}