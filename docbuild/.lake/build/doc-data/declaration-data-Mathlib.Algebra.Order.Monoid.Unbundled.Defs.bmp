{"name":"Mathlib.Algebra.Order.Monoid.Unbundled.Defs","instances":[{"typeNames":[],"name":"Group.covconv","className":"ContravariantClass"},{"typeNames":[],"name":"AddGroup.covconv","className":"ContravariantClass"},{"typeNames":["Function.swap"],"name":"Group.covconv_swap","className":"ContravariantClass"},{"typeNames":["Function.swap"],"name":"AddGroup.covconv_swap","className":"ContravariantClass"},{"typeNames":[],"name":"contravariant_lt_of_covariant_le","className":"ContravariantClass"},{"typeNames":[],"name":"covariant_lt_of_contravariant_le","className":"CovariantClass"},{"typeNames":["Function.swap"],"name":"covariant_swap_mul_of_covariant_mul","className":"CovariantClass"},{"typeNames":["Function.swap"],"name":"covariant_swap_add_of_covariant_add","className":"CovariantClass"},{"typeNames":["Function.swap"],"name":"contravariant_swap_mul_of_contravariant_mul","className":"ContravariantClass"},{"typeNames":["Function.swap"],"name":"contravariant_swap_add_of_contravariant_add","className":"ContravariantClass"},{"typeNames":[],"name":"IsLeftCancelMul.mulLeftStrictMono_of_mulLeftMono","className":"CovariantClass"},{"typeNames":[],"name":"IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono","className":"CovariantClass"},{"typeNames":[],"name":"IsRightCancelMul.mulRightStrictMono_of_mulRightMono","className":"CovariantClass"},{"typeNames":[],"name":"IsRightCancelAdd.addRightStrictMono_of_addRightMono","className":"CovariantClass"},{"typeNames":[],"name":"IsLeftCancelMul.mulLeftReflectLE_of_mulLeftReflectLT","className":"ContravariantClass"},{"typeNames":[],"name":"IsLeftCancelAdd.addLeftReflectLE_of_addLeftReflectLT","className":"ContravariantClass"},{"typeNames":[],"name":"IsRightCancelMul.mulRightReflectLE_of_mulRightReflectLT","className":"ContravariantClass"},{"typeNames":[],"name":"IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT","className":"ContravariantClass"}],"imports":["Init","Mathlib.Algebra.Group.Basic","Mathlib.Order.Basic","Mathlib.Order.Monotone.Defs"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L552-L552","name":"IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT","line":552,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelAdd.addRightReflectLE_of_addRightReflectLT\"><span class=\"name\">IsRightCancelAdd</span>.<span class=\"name\">addRightReflectLE_of_addRightReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT\">AddRightReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE\">AddRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L552-L557","name":"IsRightCancelMul.mulRightReflectLE_of_mulRightReflectLT","line":552,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelMul.mulRightReflectLE_of_mulRightReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelMul.mulRightReflectLE_of_mulRightReflectLT\"><span class=\"name\">IsRightCancelMul</span>.<span class=\"name\">mulRightReflectLE_of_mulRightReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelMul\">IsRightCancelMul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT\">MulRightReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE\">MulRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L545-L545","name":"IsLeftCancelAdd.addLeftReflectLE_of_addLeftReflectLT","line":545,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelAdd.addLeftReflectLE_of_addLeftReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelAdd.addLeftReflectLE_of_addLeftReflectLT\"><span class=\"name\">IsLeftCancelAdd</span>.<span class=\"name\">addLeftReflectLE_of_addLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT\">AddLeftReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE\">AddLeftReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L545-L550","name":"IsLeftCancelMul.mulLeftReflectLE_of_mulLeftReflectLT","line":545,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelMul.mulLeftReflectLE_of_mulLeftReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelMul.mulLeftReflectLE_of_mulLeftReflectLT\"><span class=\"name\">IsLeftCancelMul</span>.<span class=\"name\">mulLeftReflectLE_of_mulLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelMul\">IsLeftCancelMul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT\">MulLeftReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE\">MulLeftReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L539-L539","name":"IsRightCancelAdd.addRightStrictMono_of_addRightMono","line":539,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelAdd.addRightStrictMono_of_addRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelAdd.addRightStrictMono_of_addRightMono\"><span class=\"name\">IsRightCancelAdd</span>.<span class=\"name\">addRightStrictMono_of_addRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelAdd\">IsRightCancelAdd</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L539-L543","name":"IsRightCancelMul.mulRightStrictMono_of_mulRightMono","line":539,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelMul.mulRightStrictMono_of_mulRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsRightCancelMul.mulRightStrictMono_of_mulRightMono\"><span class=\"name\">IsRightCancelMul</span>.<span class=\"name\">mulRightStrictMono_of_mulRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsRightCancelMul\">IsRightCancelMul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\">MulRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L533-L533","name":"IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono","line":533,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelAdd.addLeftStrictMono_of_addLeftMono\"><span class=\"name\">IsLeftCancelAdd</span>.<span class=\"name\">addLeftStrictMono_of_addLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelAdd\">IsLeftCancelAdd</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L533-L537","name":"IsLeftCancelMul.mulLeftStrictMono_of_mulLeftMono","line":533,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelMul.mulLeftStrictMono_of_mulLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#IsLeftCancelMul.mulLeftStrictMono_of_mulLeftMono\"><span class=\"name\">IsLeftCancelMul</span>.<span class=\"name\">mulLeftStrictMono_of_mulLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#IsLeftCancelMul\">IsLeftCancelMul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\">MulLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L521-L525","name":"contravariant_le_of_contravariant_eq_and_lt","line":521,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_le_of_contravariant_eq_and_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_le_of_contravariant_eq_and_lt\"><span class=\"name\">contravariant_le_of_contravariant_eq_and_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L517-L519","name":"covariant_lt_of_covariant_le_of_contravariant_eq","line":517,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_of_covariant_le_of_contravariant_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_of_covariant_le_of_contravariant_eq\"><span class=\"name\">covariant_lt_of_covariant_le_of_contravariant_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L512-L512","name":"addRightReflectLT_of_addLeftReflectLT","line":512,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLT_of_addLeftReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLT_of_addLeftReflectLT\"><span class=\"name\">addRightReflectLT_of_addLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT\">AddLeftReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT\">AddRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L512-L515","name":"mulRightReflectLT_of_mulLeftReflectLT","line":512,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLT_of_mulLeftReflectLT","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLT_of_mulLeftReflectLT\"><span class=\"name\">mulRightReflectLT_of_mulLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT\">MulLeftReflectLT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT\">MulRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L507-L507","name":"addRightReflectLE_of_addLeftReflectLE","line":507,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLE_of_addLeftReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLE_of_addLeftReflectLE\"><span class=\"name\">addRightReflectLE_of_addLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE\">AddLeftReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE\">AddRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L507-L510","name":"mulRightReflectLE_of_mulLeftReflectLE","line":507,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLE_of_mulLeftReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLE_of_mulLeftReflectLE\"><span class=\"name\">mulRightReflectLE_of_mulLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE\">MulLeftReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE\">MulRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L502-L502","name":"contravariant_swap_add_of_contravariant_add","line":502,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_swap_add_of_contravariant_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_swap_add_of_contravariant_add\"><span class=\"name\">contravariant_swap_add_of_contravariant_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L502-L505","name":"contravariant_swap_mul_of_contravariant_mul","line":502,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_swap_mul_of_contravariant_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_swap_mul_of_contravariant_mul\"><span class=\"name\">contravariant_swap_mul_of_contravariant_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L497-L497","name":"addRightStrictMono_of_addLeftStrictMono","line":497,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightStrictMono_of_addLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightStrictMono_of_addLeftStrictMono\"><span class=\"name\">addRightStrictMono_of_addLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L497-L500","name":"mulRightStrictMono_of_mulLeftStrictMono","line":497,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightStrictMono_of_mulLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightStrictMono_of_mulLeftStrictMono\"><span class=\"name\">mulRightStrictMono_of_mulLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L492-L492","name":"addRightMono_of_addLeftMono","line":492,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightMono_of_addLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightMono_of_addLeftMono\"><span class=\"name\">addRightMono_of_addLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L492-L495","name":"mulRightMono_of_mulLeftMono","line":492,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightMono_of_mulLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightMono_of_mulLeftMono\"><span class=\"name\">mulRightMono_of_mulLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\">MulLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\">MulRightMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L487-L487","name":"covariant_swap_add_of_covariant_add","line":487,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_swap_add_of_covariant_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_swap_add_of_covariant_add\"><span class=\"name\">covariant_swap_add_of_covariant_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommSemigroup\">AddCommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L487-L490","name":"covariant_swap_mul_of_covariant_mul","line":487,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_swap_mul_of_covariant_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_swap_mul_of_covariant_mul\"><span class=\"name\">covariant_swap_mul_of_covariant_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#CommSemigroup\">CommSemigroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L482-L482","name":"addRightStrictMono_of_addRightReflectLE","line":482,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightStrictMono_of_addRightReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightStrictMono_of_addRightReflectLE\"><span class=\"name\">addRightStrictMono_of_addRightReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE\">AddRightReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L482-L485","name":"mulRightStrictMono_of_mulRightReflectLE","line":482,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightStrictMono_of_mulRightReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightStrictMono_of_mulRightReflectLE\"><span class=\"name\">mulRightStrictMono_of_mulRightReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE\">MulRightReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L477-L477","name":"addLeftStrictMono_of_addLeftReflectLE","line":477,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftStrictMono_of_addLeftReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftStrictMono_of_addLeftReflectLE\"><span class=\"name\">addLeftStrictMono_of_addLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE\">AddLeftReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L477-L480","name":"mulLeftStrictMono_of_mulLeftReflectLE","line":477,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftStrictMono_of_mulLeftReflectLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftStrictMono_of_mulLeftReflectLE\"><span class=\"name\">mulLeftStrictMono_of_mulLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE\">MulLeftReflectLE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L473-L475","name":"covariant_lt_of_contravariant_le","line":473,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_of_contravariant_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_of_contravariant_le\"><span class=\"name\">covariant_lt_of_contravariant_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mu</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L468-L468","name":"addRightReflectLT_of_addRightMono","line":468,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLT_of_addRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightReflectLT_of_addRightMono\"><span class=\"name\">addRightReflectLT_of_addRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT\">AddRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L468-L471","name":"mulRightReflectLT_of_mulRightMono","line":468,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLT_of_mulRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightReflectLT_of_mulRightMono\"><span class=\"name\">mulRightReflectLT_of_mulRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\">MulRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT\">MulRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L463-L463","name":"addLeftReflectLT_of_addLeftMono","line":463,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftReflectLT_of_addLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftReflectLT_of_addLeftMono\"><span class=\"name\">addLeftReflectLT_of_addLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT\">AddLeftReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L463-L466","name":"mulLeftReflectLT_of_mulLeftMono","line":463,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftReflectLT_of_mulLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftReflectLT_of_mulLeftMono\"><span class=\"name\">mulLeftReflectLT_of_mulLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\">MulLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT\">MulLeftReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L459-L461","name":"contravariant_lt_of_covariant_le","line":459,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_lt_of_covariant_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_lt_of_covariant_le\"><span class=\"name\">contravariant_lt_of_covariant_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mu</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L456-L457","name":"contravariant_flip_iff","line":456,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_flip_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_flip_iff\"><span class=\"name\">contravariant_flip_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mu</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">mu</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">mu</span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L453-L454","name":"covariant_flip_iff","line":453,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_flip_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_flip_iff\"><span class=\"name\">covariant_flip_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mu</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">mu</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">mu</span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L446-L449","name":"covariant_lt_iff_contravariant_le","line":446,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_iff_contravariant_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_lt_iff_contravariant_le\"><span class=\"name\">covariant_lt_iff_contravariant_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L441-L444","name":"covariant_le_iff_contravariant_lt","line":441,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_le_iff_contravariant_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_le_iff_contravariant_lt\"><span class=\"name\">covariant_le_iff_contravariant_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L437-L439","name":"contravariant_lt_of_contravariant_le","line":437,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_lt_of_contravariant_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_lt_of_contravariant_le\"><span class=\"name\">contravariant_lt_of_contravariant_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L430-L435","name":"contravariant_le_iff_contravariant_lt_and_eq","line":430,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_le_iff_contravariant_lt_and_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#contravariant_le_iff_contravariant_lt_and_eq\"><span class=\"name\">contravariant_le_iff_contravariant_lt_and_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L426-L426","name":"addRightMono_of_addRightStrictMono","line":426,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightMono_of_addRightStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addRightMono_of_addRightStrictMono\"><span class=\"name\">addRightMono_of_addRightStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L426-L428","name":"mulRightMono_of_mulRightStrictMono","line":426,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightMono_of_mulRightStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulRightMono_of_mulRightStrictMono\"><span class=\"name\">mulRightMono_of_mulRightStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\">MulRightMono</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L422-L422","name":"addLeftMono_of_addLeftStrictMono","line":422,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftMono_of_addLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#addLeftMono_of_addLeftStrictMono\"><span class=\"name\">addLeftMono_of_addLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L422-L424","name":"mulLeftMono_of_mulLeftStrictMono","line":422,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftMono_of_mulLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#mulLeftMono_of_mulLeftStrictMono\"><span class=\"name\">mulLeftMono_of_mulLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\">MulLeftMono</a> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L419-L420","name":"covariantClass_le_of_lt","line":419,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariantClass_le_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariantClass_le_of_lt\"><span class=\"name\">covariantClass_le_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L412-L417","name":"covariant_le_of_covariant_lt","line":412,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_le_of_covariant_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#covariant_le_of_covariant_lt\"><span class=\"name\">covariant_le_of_covariant_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x2</span></span>)</span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L405-L408","name":"Antitone.covariant_of_const'","line":405,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Antitone.covariant_of_const'","doc":"Dual of `Monotone.covariant_of_const'` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Antitone.covariant_of_const'\"><span class=\"name\">Antitone</span>.<span class=\"name\">covariant_of_const'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Antitone\">Antitone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Antitone\">Antitone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">x</span> <span class=\"fn\">m</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L400-L403","name":"Antitone.covariant_of_const","line":400,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Antitone.covariant_of_const","doc":"Dual of `Monotone.covariant_of_const` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Antitone.covariant_of_const\"><span class=\"name\">Antitone</span>.<span class=\"name\">covariant_of_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Antitone\">Antitone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Antitone\">Antitone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L394-L398","name":"Monotone.covariant_of_const'","line":394,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Monotone.covariant_of_const'","doc":"Same as `Monotone.covariant_of_const`, but with the constant on the other side of\nthe operator.  E.g., `∀ (m : ℕ), Monotone f → Monotone (fun n ↦ f (n + m))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Monotone.covariant_of_const'\"><span class=\"name\">Monotone</span>.<span class=\"name\">covariant_of_const'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">N</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">x</span> <span class=\"fn\">m</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L388-L392","name":"Monotone.covariant_of_const","line":388,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Monotone.covariant_of_const","doc":"A monotone function remains monotone when composed with the partial application\nof a covariant operator. E.g., `∀ (m : ℕ), Monotone f → Monotone (fun n ↦ f (m + n))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Monotone.covariant_of_const\"><span class=\"name\">Monotone</span>.<span class=\"name\">covariant_of_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L384-L386","name":"Covariant.monotone_of_const","line":384,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant.monotone_of_const","doc":"The partial application of a constant to a covariant operator is monotone. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant.monotone_of_const\"><span class=\"name\">Covariant</span>.<span class=\"name\">monotone_of_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x2</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L371-L373","name":"rel_act_of_act_rel_act_of_rel_act","line":371,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_act_of_act_rel_act_of_rel_act","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_act_of_act_rel_act_of_rel_act\"><span class=\"name\">rel_act_of_act_rel_act_of_rel_act</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">N</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rr</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L367-L369","name":"act_rel_of_act_rel_of_rel_act_rel","line":367,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_of_act_rel_of_rel_act_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_of_act_rel_of_rel_act_rel\"><span class=\"name\">act_rel_of_act_rel_of_rel_act_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">N</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rl</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">c</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L359-L360","name":"rel_of_act_rel_act","line":359,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_of_act_rel_act","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_of_act_rel_act\"><span class=\"name\">rel_of_act_rel_act</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L350-L351","name":"act_rel_act_of_rel_of_rel","line":350,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_act_of_rel_of_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_act_of_rel_of_rel\"><span class=\"name\">act_rel_act_of_rel_of_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">mu</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <span class=\"fn\">N</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">N</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">mu</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">mu</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cd</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">d</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">mu</span> <span class=\"fn\">a</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<span class=\"fn\">mu</span> <span class=\"fn\">b</span> <span class=\"fn\">d</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L337-L338","name":"rel_act_of_rel_of_rel_act","line":337,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_act_of_rel_of_rel_act","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_act_of_rel_of_rel_act\"><span class=\"name\">rel_act_of_rel_of_rel_act</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">N</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rr</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L334-L335","name":"act_rel_of_rel_of_act_rel","line":334,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_of_rel_of_act_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_of_rel_of_act_rel\"><span class=\"name\">act_rel_of_rel_of_act_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <span class=\"fn\">N</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rl</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L323-L323","name":"AddGroup.addRightReflectLT_of_addRightStrictMono","line":323,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addRightReflectLT_of_addRightStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addRightReflectLT_of_addRightStrictMono\"><span class=\"name\">AddGroup</span>.<span class=\"name\">addRightReflectLT_of_addRightStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\">AddRightStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT\">AddRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L323-L326","name":"Group.mulRightReflectLT_of_mulRightStrictMono","line":323,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulRightReflectLT_of_mulRightStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulRightReflectLT_of_mulRightStrictMono\"><span class=\"name\">Group</span>.<span class=\"name\">mulRightReflectLT_of_mulRightStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\">MulRightStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT\">MulRightReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L318-L318","name":"AddGroup.addRightReflectLE_of_addRightMono","line":318,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addRightReflectLE_of_addRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addRightReflectLE_of_addRightMono\"><span class=\"name\">AddGroup</span>.<span class=\"name\">addRightReflectLE_of_addRightMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\">AddRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE\">AddRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L318-L321","name":"Group.mulRightReflectLE_of_mulRightMono","line":318,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulRightReflectLE_of_mulRightMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulRightReflectLE_of_mulRightMono\"><span class=\"name\">Group</span>.<span class=\"name\">mulRightReflectLE_of_mulRightMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\">MulRightMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE\">MulRightReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L313-L313","name":"AddGroup.covconv_swap","line":313,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covconv_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covconv_swap\"><span class=\"name\">AddGroup</span>.<span class=\"name\">covconv_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L313-L316","name":"Group.covconv_swap","line":313,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covconv_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covconv_swap\"><span class=\"name\">Group</span>.<span class=\"name\">covconv_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L303-L303","name":"AddGroup.covariant_swap_iff_contravariant_swap","line":303,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covariant_swap_iff_contravariant_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covariant_swap_iff_contravariant_swap\"><span class=\"name\">AddGroup</span>.<span class=\"name\">covariant_swap_iff_contravariant_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L303-L310","name":"Group.covariant_swap_iff_contravariant_swap","line":303,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covariant_swap_iff_contravariant_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covariant_swap_iff_contravariant_swap\"><span class=\"name\">Group</span>.<span class=\"name\">covariant_swap_iff_contravariant_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L298-L298","name":"AddGroup.addLeftReflectLT_of_addLeftStrictMono","line":298,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addLeftReflectLT_of_addLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addLeftReflectLT_of_addLeftStrictMono\"><span class=\"name\">AddGroup</span>.<span class=\"name\">addLeftReflectLT_of_addLeftStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\">AddLeftStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT\">AddLeftReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L298-L301","name":"Group.mulLeftReflectLT_of_mulLeftStrictMono","line":298,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulLeftReflectLT_of_mulLeftStrictMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulLeftReflectLT_of_mulLeftStrictMono\"><span class=\"name\">Group</span>.<span class=\"name\">mulLeftReflectLT_of_mulLeftStrictMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\">MulLeftStrictMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT\">MulLeftReflectLT</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L293-L293","name":"AddGroup.addLeftReflectLE_of_addLeftMono","line":293,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addLeftReflectLE_of_addLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.addLeftReflectLE_of_addLeftMono\"><span class=\"name\">AddGroup</span>.<span class=\"name\">addLeftReflectLE_of_addLeftMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\">AddLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE\">AddLeftReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L293-L296","name":"Group.mulLeftReflectLE_of_mulLeftMono","line":293,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulLeftReflectLE_of_mulLeftMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.mulLeftReflectLE_of_mulLeftMono\"><span class=\"name\">Group</span>.<span class=\"name\">mulLeftReflectLE_of_mulLeftMono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\">MulLeftMono</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE\">MulLeftReflectLE</a> <span class=\"fn\">N</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L288-L288","name":"AddGroup.covconv","line":288,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covconv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covconv\"><span class=\"name\">AddGroup</span>.<span class=\"name\">covconv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L288-L291","name":"Group.covconv","line":288,"kind":"instance","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covconv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covconv\"><span class=\"name\">Group</span>.<span class=\"name\">covconv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L279-L279","name":"AddGroup.covariant_iff_contravariant","line":279,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covariant_iff_contravariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddGroup.covariant_iff_contravariant\"><span class=\"name\">AddGroup</span>.<span class=\"name\">covariant_iff_contravariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddGroup\">AddGroup</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L279-L286","name":"Group.covariant_iff_contravariant","line":279,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covariant_iff_contravariant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Group.covariant_iff_contravariant\"><span class=\"name\">Group</span>.<span class=\"name\">covariant_iff_contravariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#Group\">Group</a> <span class=\"fn\">N</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">N</span> <span class=\"fn\">N</span> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\">N</span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L276-L277","name":"act_rel_act_of_rel","line":276,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_act_of_rel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#act_rel_act_of_rel\"><span class=\"name\">act_rel_act_of_rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ab</span> : <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L267-L268","name":"Contravariant.flip","line":267,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant.flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant.flip\"><span class=\"name\">Contravariant</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">_root_.flip</a> <span class=\"fn\">r</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L264-L265","name":"Covariant.flip","line":264,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant.flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant.flip\"><span class=\"name\">Covariant</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">_root_.flip</a> <span class=\"fn\">r</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L256-L258","name":"rel_iff_cov","line":256,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_iff_cov","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#rel_iff_cov\"><span class=\"name\">rel_iff_cov</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\">M</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">N</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">μ</span> <span class=\"fn\">m</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">r</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L246-L252","name":"AddRightReflectLE","line":246,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE","doc":"Typeclass for reverse monotonicity of addition on the right,\nnamely `a₁ + b ≤ a₂ + b → a₁ ≤ a₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCancelAddCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLE\"><span class=\"name\">AddRightReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L238-L244","name":"AddLeftReflectLE","line":238,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE","doc":"Typeclass for reverse monotonicity of addition on the left,\nnamely `a + b₁ ≤ a + b₂ → b₁ ≤ b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCancelAddCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLE\"><span class=\"name\">AddLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L230-L236","name":"MulRightReflectLE","line":230,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE","doc":"Typeclass for reverse monotonicity of multiplication on the right,\nnamely `a₁ * b ≤ a₂ * b → a₁ ≤ a₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCancelCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLE\"><span class=\"name\">MulRightReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L222-L228","name":"MulLeftReflectLE","line":222,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE","doc":"Typeclass for reverse monotonicity of multiplication on the left,\nnamely `a * b₁ ≤ a * b₂ → b₁ ≤ b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCancelCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLE\"><span class=\"name\">MulLeftReflectLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L212-L218","name":"AddRightReflectLT","line":212,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT","doc":"Typeclass for strict reverse monotonicity of addition on the right,\nnamely `a₁ * b < a₂ * b → a₁ < a₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightReflectLT\"><span class=\"name\">AddRightReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L204-L210","name":"AddLeftReflectLT","line":204,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT","doc":"Typeclass for strict reverse monotonicity of addition on the left,\nnamely `a + b₁ < a + b₂ → b₁ < b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftReflectLT\"><span class=\"name\">AddLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L196-L202","name":"MulRightReflectLT","line":196,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT","doc":"Typeclass for strict reverse monotonicity of multiplication on the right,\nnamely `a₁ * b < a₂ * b → a₁ < a₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightReflectLT\"><span class=\"name\">MulRightReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L188-L194","name":"MulLeftReflectLT","line":188,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT","doc":"Typeclass for strict reverse monotonicity of multiplication on the left,\nnamely `a * b₁ < a * b₂ → b₁ < b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftReflectLT\"><span class=\"name\">MulLeftReflectLT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L178-L184","name":"AddRightStrictMono","line":178,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono","doc":"Typeclass for monotonicity of addition on the right,\nnamely `a₁ < a₂ → a₁ + b < a₂ + b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightStrictMono\"><span class=\"name\">AddRightStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L170-L176","name":"AddLeftStrictMono","line":170,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono","doc":"Typeclass for monotonicity of addition on the left,\nnamely `b₁ < b₂ → a + b₁ < a + b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftStrictMono\"><span class=\"name\">AddLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L162-L168","name":"MulRightStrictMono","line":162,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono","doc":"Typeclass for monotonicity of multiplication on the right,\nnamely `a₁ < a₂ → a₁ * b < a₂ * b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightStrictMono\"><span class=\"name\">MulRightStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L154-L160","name":"MulLeftStrictMono","line":154,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono","doc":"Typeclass for monotonicity of multiplication on the left,\nnamely `b₁ < b₂ → a * b₁ < a * b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommGroup`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftStrictMono\"><span class=\"name\">MulLeftStrictMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L144-L150","name":"AddRightMono","line":144,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono","doc":"Typeclass for monotonicity of addition on the right,\nnamely `a₁ ≤ a₂ → a₁ + b ≤ a₂ + b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddRightMono\"><span class=\"name\">AddRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L136-L142","name":"AddLeftMono","line":136,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono","doc":"Typeclass for monotonicity of addition on the left,\nnamely `b₁ ≤ b₂ → a + b₁ ≤ a + b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedAddCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#AddLeftMono\"><span class=\"name\">AddLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L128-L134","name":"MulRightMono","line":128,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono","doc":"Typeclass for monotonicity of multiplication on the right,\nnamely `a₁ ≤ a₂ → a₁ * b ≤ a₂ * b`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulRightMono\"><span class=\"name\">MulRightMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L120-L126","name":"MulLeftMono","line":120,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono","doc":"Typeclass for monotonicity of multiplication on the left,\nnamely `b₁ ≤ b₂ → a * b₁ ≤ a * b₂`.\n\nYou should usually not use this very granular typeclass directly, but rather a typeclass like\n`OrderedCommMonoid`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#MulLeftMono\"><span class=\"name\">MulLeftMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L118-L118","name":"ContravariantClass.elim","line":118,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass.elim","doc":"For all `m ∈ M` and all elements `n₁, n₂ ∈ N`, if the relation `r` holds for the\npair `(μ m n₁, μ m n₂)` obtained from `(n₁, n₂)` by acting upon it by `m`, then, the relation\n`r` also holds for the pair `(n₁, n₂)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass.elim\"><span class=\"name\">ContravariantClass</span>.<span class=\"name\">elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L114-L114","name":"ContravariantClass.mk","line":114,"kind":"ctor","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass.mk\"><span class=\"name\">ContravariantClass</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elim</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\">Contravariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\">ContravariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L102-L118","name":"ContravariantClass","line":102,"kind":"class","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass","doc":"Given an action `μ` of a Type `M` on a Type `N` and a relation `r` on `N`, informally, the\n`ContravariantClass` says that \"if the result of the action `μ` on a pair satisfies the\nrelation `r`, then the initial pair satisfied the relation `r`.\"\n\nMore precisely, the `ContravariantClass` is a class taking two Types `M N`, together with an\n\"action\" `μ : M → N → N` and a relation `r : N → N → Prop`.  Its unique field `elim` is the\nassertion that for all `m ∈ M` and all elements `n₁, n₂ ∈ N`, if the relation `r` holds for the\npair `(μ m n₁, μ m n₂)` obtained from `(n₁, n₂)` by acting upon it by `m`, then, the relation\n`r` also holds for the pair `(n₁, n₂)`.\n\nIf `m : M` and `h : r (μ m n₁) (μ m n₂)`, then `ContravariantClass.elim m h : r n₁ n₂`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#ContravariantClass\"><span class=\"name\">ContravariantClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L100-L100","name":"CovariantClass.elim","line":100,"kind":"theorem","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass.elim","doc":"For all `m ∈ M` and all elements `n₁, n₂ ∈ N`, if the relation `r` holds for the pair\n`(n₁, n₂)`, then, the relation `r` also holds for the pair `(μ m n₁, μ m n₂)` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass.elim\"><span class=\"name\">CovariantClass</span>.<span class=\"name\">elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L97-L97","name":"CovariantClass.mk","line":97,"kind":"ctor","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass.mk\"><span class=\"name\">CovariantClass</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elim</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\">Covariant</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\">CovariantClass</a> <span class=\"fn\">M</span> <span class=\"fn\">N</span> <span class=\"fn\">μ</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L86-L100","name":"CovariantClass","line":86,"kind":"class","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass","doc":"Given an action `μ` of a Type `M` on a Type `N` and a relation `r` on `N`, informally, the\n`CovariantClass` says that \"the action `μ` preserves the relation `r`.\"\n\nMore precisely, the `CovariantClass` is a class taking two Types `M N`, together with an \"action\"\n`μ : M → N → N` and a relation `r : N → N → Prop`.  Its unique field `elim` is the assertion that\nfor all `m ∈ M` and all elements `n₁, n₂ ∈ N`, if the relation `r` holds for the pair\n`(n₁, n₂)`, then, the relation `r` also holds for the pair `(μ m n₁, μ m n₂)`,\nobtained from `(n₁, n₂)` by acting upon it by `m`.\n\nIf `m : M` and `h : r n₁ n₂`, then `CovariantClass.elim m h : r (μ m n₁) (μ m n₂)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#CovariantClass\"><span class=\"name\">CovariantClass</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L79-L84","name":"Contravariant","line":79,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant","doc":"`Contravariant` is useful to formulate succinctly statements about the interactions between an\naction of a Type on another one and a relation on the acted-upon Type.\n\nSee the `ContravariantClass` doc-string for its meaning. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Contravariant\"><span class=\"name\">Contravariant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Order/Monoid/Unbundled/Defs.lean#L72-L77","name":"Covariant","line":72,"kind":"def","docLink":"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant","doc":"`Covariant` is useful to formulate succinctly statements about the interactions between an\naction of a Type on another one and a relation on the acted-upon Type.\n\nSee the `CovariantClass` doc-string for its meaning. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Order/Monoid/Unbundled/Defs.html#Covariant\"><span class=\"name\">Covariant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">N</span> → <span class=\"fn\">N</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}