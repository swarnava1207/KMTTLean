{"name":"Mathlib.Tactic.Linter.PPRoundtrip","instances":[],"imports":["Init","Lean.Elab.Command","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L116-L140","name":"Mathlib.Linter.PPRoundtrip.ppRoundtrip","line":116,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.PPRoundtrip.ppRoundtrip","doc":"The \"ppRoundtrip\" linter emits a warning when the syntax of a command differs substantially\nfrom the pretty-printed version of itself.\n\nThe linter makes an effort to start the highlighting at the first difference.\nHowever, it may not always be successful.\nIt also prints both the source code and the \"expected code\" in a 5-character radius from\nthe first difference.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.PPRoundtrip.ppRoundtrip\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">PPRoundtrip</span>.<span class=\"name\">ppRoundtrip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Lean.Linter</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L100-L112","name":"Mathlib.Linter.capSyntax","line":100,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.capSyntax","doc":"`capSyntax stx p` applies `capSourceInfo · s` to all `SourceInfo`s in all\n`node`s, `atom`s and `ident`s contained in `stx`.\n\nThis is used to trim away all \"fluff\" that follows a command: comments and whitespace after\na command get removed with `capSyntax stx stx.getTailPos?.get!`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.capSyntax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">capSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L90-L98","name":"Mathlib.Linter.capSourceInfo","line":90,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.capSourceInfo","doc":"`capSourceInfo s p` \"shortens\" all end-position information in the `SourceInfo` `s` to be\nat most `p`, trimming down also the relevant substrings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.capSourceInfo\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">capSourceInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">Lean.SourceInfo</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L85-L88","name":"Mathlib.Linter.zoomString","line":85,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.zoomString","doc":"`zoomString str centre offset` returns the substring of `str` consisting of the `offset`\ncharacters around the `centre`th character. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.zoomString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">zoomString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">centre </span><span class=\"fn\">offset</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Substring\">Substring</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L67-L83","name":"Mathlib.Linter.posToShiftedPos","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.posToShiftedPos","doc":"`posToShiftedPos lths diff` takes as input an array `lths` of natural numbers,\nand one further natural number `diff`.\nIt adds up the elements of `lths` occupying the odd positions, as long as the sum of the\nelements in the even positions does not exceed `diff`.\nIt returns the sum of the accumulated odds and `diff`.\nThis is useful to figure out the difference between the output of `polishSource s` and `s` itself.\nIt plays a role similar to the `fileMap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.posToShiftedPos\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">posToShiftedPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lths</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diff</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L55-L65","name":"Mathlib.Linter.polishSource","line":55,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.polishSource","doc":"`polishSource s` is similar to `polishPP s`, but expects the input to be actual source code.\nFor this reason, `polishSource s` performs more conservative changes:\nit only replace all whitespace starting from a linebreak (`\\n`) with a single whitespace. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.polishSource\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">polishSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L34-L53","name":"Mathlib.Linter.polishPP","line":34,"kind":"def","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.polishPP","doc":"`polishPP s` takes as input a `String` `s`, assuming that it is the output of\npretty-printing a lean command.\nThe main intent is to convert `s` to a reasonable candidate for a desirable source code format.\nThe function first replaces consecutive whitespace sequences into a single space (` `), in an\nattempt to side-step line-break differences.\nAfter that, it applies some pre-emptive changes:\n* doc-module beginnings tend to have some whitespace following them, so we add a space back in;\n* name quotations such as ``` ``Nat``` get pretty-printed as ``` `` Nat```, so we remove a space\n  after double back-ticks, but take care of adding one more for triple (or more) back-ticks;\n* `notation3` is not followed by a pretty-printer space, so we add it here (https://github.com/leanprover-community/mathlib4/pull/15515).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.polishPP\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">polishPP</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/PPRoundtrip.lean#L20-L32","name":"Mathlib.Linter.linter.ppRoundtrip","line":20,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.linter.ppRoundtrip","doc":"The \"ppRoundtrip\" linter emits a warning when the syntax of a command differs substantially\nfrom the pretty-printed version of itself.\n\nThe linter makes an effort to start the highlighting at the first difference.\nHowever, it may not always be successful.\nIt also prints both the source code and the \"expected code\" in a 5-character radius from\nthe first difference.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/PPRoundtrip.html#Mathlib.Linter.linter.ppRoundtrip\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">ppRoundtrip</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"}]}