{"name":"Mathlib.Tactic.Change","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.Tactic.ElabTerm","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Change.lean#L22-L33","name":"change?","line":22,"kind":"def","docLink":"./Mathlib/Tactic/Change.html#change?","doc":"`change? term` unifies `term` with the current goal, then suggests explicit `change` syntax\nthat uses the resulting unified term.\n\nIf `term` is not present, `change?` suggests the current goal itself. This is useful after tactics\nwhich transform the goal while maintaining definitional equality, such as `dsimp`; those preceding\ntactic calls can then be deleted.\n```lean\nexample : (fun x : Nat => x) 0 = 1 := by\n  change? 0 = _  -- `Try this: change 0 = 1`\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Change.html#change?\"><span class=\"name\">change?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}