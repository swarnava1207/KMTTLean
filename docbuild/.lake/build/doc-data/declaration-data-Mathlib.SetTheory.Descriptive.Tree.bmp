{"name":"Mathlib.SetTheory.Descriptive.Tree","instances":[{"typeNames":["Subtype","List"],"name":"Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","className":"SetLike"}],"imports":["Init","Mathlib.Order.CompleteLattice.SetLike"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Descriptive/Tree.lean#L42-L44","name":"Descriptive.tree_eq_bot","line":42,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree_eq_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree_eq_bot\"><span class=\"name\">Descriptive</span>.<span class=\"name\">tree_eq_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> ∉ <span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Descriptive/Tree.lean#L39-L40","name":"Descriptive.mem_of_prefix","line":39,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.mem_of_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.mem_of_prefix\"><span class=\"name\">Descriptive</span>.<span class=\"name\">mem_of_prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">x</span> <a href=\"./Init/Data/List/Basic.html#List.IsPrefix\">&lt;+:</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Descriptive/Tree.lean#L34-L37","name":"Descriptive.mem_of_append","line":34,"kind":"theorem","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.mem_of_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.mem_of_append\"><span class=\"name\">Descriptive</span>.<span class=\"name\">mem_of_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Descriptive/Tree.lean#L30-L30","name":"Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","line":30,"kind":"instance","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.instSetLikeSubtypeSetListMemCompleteSublatticeTree\"><span class=\"name\">Descriptive</span>.<span class=\"name\">instSetLikeSubtypeSetListMemCompleteSublatticeTree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <span class=\"fn\">(↥<span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\">tree</a> <span class=\"fn\">A</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Descriptive/Tree.lean#L21-L28","name":"Descriptive.tree","line":21,"kind":"def","docLink":"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree","doc":"A tree is a set of finite sequences, implemented as `List A`, that is stable under\ntaking prefixes. For the definition we use the equivalent property `x ++ [a] ∈ T → x ∈ T`,\nwhich is more convenient to check. We define `tree A` as a complete sublattice of\n`Set (List A)`, which coerces to the type of trees on `A`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Descriptive/Tree.html#Descriptive.tree\"><span class=\"name\">Descriptive</span>.<span class=\"name\">tree</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">A</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteSublattice.html#CompleteSublattice\">CompleteSublattice</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">A</span>)</span>)</span></span></div></div>"}]}