{"name":"Mathlib.Tactic.PNatToNat","instances":[],"imports":["Init","Mathlib.Data.PNat.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L64-L67","name":"Mathlib.Tactic.PNatToNat.tacticPnat_to_nat","line":64,"kind":"def","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.tacticPnat_to_nat","doc":"`pnat_to_nat` shifts all `PNat`s in the context to `Nat`, rewriting propositions about them.\nA typical use case is `pnat_to_nat; omega`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.tacticPnat_to_nat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">tacticPnat_to_nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L55-L60","name":"Mathlib.Tactic.PNatToNat.sub_coe","line":55,"kind":"theorem","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.sub_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.sub_coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">sub_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L50-L51","name":"Mathlib.Tactic.PNatToNat.coe_lt_coe","line":50,"kind":"theorem","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_lt_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_lt_coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">coe_lt_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L47-L48","name":"Mathlib.Tactic.PNatToNat.coe_le_coe","line":47,"kind":"theorem","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_le_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_le_coe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">coe_le_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L44-L45","name":"Mathlib.Tactic.PNatToNat.coe_inj","line":44,"kind":"theorem","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.coe_inj\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">coe_inj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/PNat/Notation.html#PNat\">ℕ+</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/PNatToNat.lean#L26-L42","name":"Mathlib.Tactic.PNatToNat.tacticPnat_positivity","line":26,"kind":"def","docLink":"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.tacticPnat_positivity","doc":"For each `x : PNat` in the context, add the hypothesis `0 < (↑x : ℕ)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/PNatToNat.html#Mathlib.Tactic.PNatToNat.tacticPnat_positivity\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">PNatToNat</span>.<span class=\"name\">tacticPnat_positivity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}