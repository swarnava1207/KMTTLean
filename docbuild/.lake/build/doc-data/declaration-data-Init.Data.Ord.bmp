{"name":"Init.Data.Ord","instances":[{"typeNames":["Ordering"],"name":"instInhabitedOrdering","className":"Inhabited"},{"typeNames":["Eq"],"name":"instDecidableEqOrdering","className":"Decidable"},{"typeNames":["Nat"],"name":"instOrdNat","className":"Ord"},{"typeNames":["Int"],"name":"instOrdInt","className":"Ord"},{"typeNames":["Bool"],"name":"instOrdBool","className":"Ord"},{"typeNames":["String"],"name":"instOrdString","className":"Ord"},{"typeNames":["Fin"],"name":"instOrdFin","className":"Ord"},{"typeNames":["UInt8"],"name":"instOrdUInt8","className":"Ord"},{"typeNames":["UInt16"],"name":"instOrdUInt16","className":"Ord"},{"typeNames":["UInt32"],"name":"instOrdUInt32","className":"Ord"},{"typeNames":["UInt64"],"name":"instOrdUInt64","className":"Ord"},{"typeNames":["USize"],"name":"instOrdUSize","className":"Ord"},{"typeNames":["Char"],"name":"instOrdChar","className":"Ord"},{"typeNames":["Int8"],"name":"instOrdInt8","className":"Ord"},{"typeNames":["Int16"],"name":"instOrdInt16","className":"Ord"},{"typeNames":["Int32"],"name":"instOrdInt32","className":"Ord"},{"typeNames":["Int64"],"name":"instOrdInt64","className":"Ord"},{"typeNames":["ISize"],"name":"instOrdISize","className":"Ord"},{"typeNames":["BitVec"],"name":"instOrdBitVec","className":"Ord"},{"typeNames":["Option"],"name":"instOrdOption","className":"Ord"},{"typeNames":["Ordering"],"name":"instOrdOrdering","className":"Ord"},{"typeNames":["List"],"name":"List.instOrd","className":"Ord"},{"typeNames":["Array"],"name":"Array.instOrd","className":"Ord"},{"typeNames":["Vector"],"name":"Vector.instOrd","className":"Ord"},{"typeNames":["LT.lt"],"name":"instDecidableRelLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"instDecidableRelLe","className":"Decidable"},{"typeNames":["LT.lt"],"name":"Ord.instDecidableRelLt","className":"Decidable"},{"typeNames":["LE.le"],"name":"Ord.instDecidableRelLe","className":"Decidable"}],"imports":["Init.Data.String","Init.Data.Array.Basic","Init.Data.SInt.Basic","Init.Data.Vector"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L850-L857","name":"Ord.arrayOrd","line":850,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.arrayOrd","doc":"Constructs an order which compares elements of an `Array` in lexicographic order.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.arrayOrd\"><span class=\"name\">Ord</span>.<span class=\"name\">arrayOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L837-L848","name":"Ord.lex'","line":837,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.lex'","doc":"Constructs an `Ord` instance from two existing instances by combining them lexicographically.\n\nThe resulting instance compares elements first by `ord₁` and then, if this returns `Ordering.eq`, by\n`ord₂`.\n\nThe function `compareLex` can be used to perform this comparison without constructing an\nintermediate `Ord` instance. `Ordering.then` can be used to lexicographically combine the results of\ncomparisons.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.lex'\"><span class=\"name\">Ord</span>.<span class=\"name\">lex'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord₁ </span><span class=\"fn\">ord₂</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L831-L835","name":"Ord.lex","line":831,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.lex","doc":"Constructs the lexicographic order on products `α × β` from orders for `α` and `β`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.lex\"><span class=\"name\">Ord</span>.<span class=\"name\">lex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L820-L829","name":"Ord.on","line":820,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.on","doc":"Constructs an `Ord` instance that compares values according to the results of `f`.\n\nIn particular, `ord.on f` compares `x` and `y` by comparing `f x` and `f y` according to `ord`.\n\nThe function `compareOn` can be used to perform this comparison without constructing an intermediate\n`Ord` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.on\"><span class=\"name\">Ord</span>.<span class=\"name\">on</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">β</span></span> → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) → <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L811-L818","name":"Ord.opposite","line":811,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.opposite","doc":"Inverts the order of an `Ord` instance.\n\nThe result is an `Ord α` instance that returns `Ordering.lt` when `ord` would return `Ordering.gt`\nand that returns `Ordering.gt` when `ord` would return `Ordering.lt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.opposite\"><span class=\"name\">Ord</span>.<span class=\"name\">opposite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L808-L809","name":"Ord.instDecidableRelLe","line":808,"kind":"instance","docLink":"./Init/Data/Ord.html#Ord.instDecidableRelLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.instDecidableRelLe\"><span class=\"name\">Ord</span>.<span class=\"name\">instDecidableRelLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LE.le\">LE.le</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L802-L806","name":"Ord.toLE","line":802,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.toLE","doc":"Constructs an `LE` instance from an `Ord` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.toLE\"><span class=\"name\">Ord</span>.<span class=\"name\">toLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L799-L800","name":"Ord.instDecidableRelLt","line":799,"kind":"instance","docLink":"./Init/Data/Ord.html#Ord.instDecidableRelLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.instDecidableRelLt\"><span class=\"name\">Ord</span>.<span class=\"name\">instDecidableRelLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LT.lt\">LT.lt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L793-L797","name":"Ord.toLT","line":793,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.toLT","doc":"Constructs an `LT` instance from an `Ord` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.toLT\"><span class=\"name\">Ord</span>.<span class=\"name\">toLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L787-L791","name":"Ord.toBEq","line":787,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.toBEq","doc":"Constructs a `BEq` instance from an `Ord` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.toBEq\"><span class=\"name\">Ord</span>.<span class=\"name\">toBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L782-L783","name":"instDecidableRelLe","line":782,"kind":"instance","docLink":"./Init/Data/Ord.html#instDecidableRelLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instDecidableRelLe\"><span class=\"name\">instDecidableRelLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LE.le\">LE.le</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L775-L780","name":"leOfOrd","line":775,"kind":"def","docLink":"./Init/Data/Ord.html#leOfOrd","doc":"Constructs an `LT` instance from an `Ord` instance that asserts that the result of `compare`\nsatisfies `Ordering.isLE`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#leOfOrd\"><span class=\"name\">leOfOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L772-L773","name":"instDecidableRelLt","line":772,"kind":"instance","docLink":"./Init/Data/Ord.html#instDecidableRelLt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instDecidableRelLt\"><span class=\"name\">instDecidableRelLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LT.lt\">LT.lt</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L765-L770","name":"ltOfOrd","line":765,"kind":"def","docLink":"./Init/Data/Ord.html#ltOfOrd","doc":"Constructs an `LT` instance from an `Ord` instance that asserts that the result of `compare` is\n`Ordering.lt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#ltOfOrd\"><span class=\"name\">ltOfOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L761-L763","name":"lexOrd","line":761,"kind":"def","docLink":"./Init/Data/Ord.html#lexOrd","doc":"The lexicographic order on pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#lexOrd\"><span class=\"name\">lexOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L755-L757","name":"Vector.compare_eq_compare_toList","line":755,"kind":"theorem","docLink":"./Init/Data/Ord.html#Vector.compare_eq_compare_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.compare_eq_compare_toList\"><span class=\"name\">Vector</span>.<span class=\"name\">compare_eq_compare_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L751-L753","name":"Vector.compare_eq_compare_toArray","line":751,"kind":"theorem","docLink":"./Init/Data/Ord.html#Vector.compare_eq_compare_toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.compare_eq_compare_toArray\"><span class=\"name\">Vector</span>.<span class=\"name\">compare_eq_compare_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.toArray\">toArray</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.toArray\">toArray</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L747-L749","name":"Vector.compareLex_eq_compareLex_toList","line":747,"kind":"theorem","docLink":"./Init/Data/Ord.html#Vector.compareLex_eq_compareLex_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.compareLex_eq_compareLex_toList\"><span class=\"name\">Vector</span>.<span class=\"name\">compareLex_eq_compareLex_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Vector.compareLex\">Vector.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L743-L745","name":"Vector.compareLex_eq_compareLex_toArray","line":743,"kind":"theorem","docLink":"./Init/Data/Ord.html#Vector.compareLex_eq_compareLex_toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.compareLex_eq_compareLex_toArray\"><span class=\"name\">Vector</span>.<span class=\"name\">compareLex_eq_compareLex_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Vector.compareLex\">Vector.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Array.compareLex\">Array.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.toArray\">toArray</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.toArray\">toArray</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L740-L741","name":"Vector.instOrd","line":740,"kind":"instance","docLink":"./Init/Data/Ord.html#Vector.instOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.instOrd\"><span class=\"name\">Vector</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L737-L738","name":"Vector.compareLex","line":737,"kind":"def","docLink":"./Init/Data/Ord.html#Vector.compareLex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Vector.compareLex\"><span class=\"name\">Vector</span>.<span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L729-L731","name":"Array.compare_eq_compare_toList","line":729,"kind":"theorem","docLink":"./Init/Data/Ord.html#Array.compare_eq_compare_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.compare_eq_compare_toList\"><span class=\"name\">Array</span>.<span class=\"name\">compare_eq_compare_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">a₁</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\"><span class=\"fn\">a₂</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L725-L727","name":"Array.compareLex_eq_compareLex_toList","line":725,"kind":"theorem","docLink":"./Init/Data/Ord.html#Array.compareLex_eq_compareLex_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.compareLex_eq_compareLex_toList\"><span class=\"name\">Array</span>.<span class=\"name\">compareLex_eq_compareLex_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Array.compareLex\">Array.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">a₁</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\"><span class=\"fn\">a₂</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L721-L723","name":"List.compare_eq_compare_toArray","line":721,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_eq_compare_toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_eq_compare_toArray\"><span class=\"name\">List</span>.<span class=\"name\">compare_eq_compare_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L705-L719","name":"List.compareLex_eq_compareLex_toArray","line":705,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_eq_compareLex_toArray","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_eq_compareLex_toArray\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_eq_compareLex_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">l₁</span> <span class=\"fn\">l₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Array.compareLex\">Array.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L693-L694","name":"Array.compare_eq_compareLex","line":693,"kind":"theorem","docLink":"./Init/Data/Ord.html#Array.compare_eq_compareLex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.compare_eq_compareLex\"><span class=\"name\">Array</span>.<span class=\"name\">compare_eq_compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Array.compareLex\">Array.compareLex</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L690-L691","name":"Array.instOrd","line":690,"kind":"instance","docLink":"./Init/Data/Ord.html#Array.instOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.instOrd\"><span class=\"name\">Array</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L678-L687","name":"Array.compareLex.go","line":678,"kind":"def","docLink":"./Init/Data/Ord.html#Array.compareLex.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.compareLex.go\"><span class=\"name\">Array</span>.<span class=\"name\">compareLex</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L675-L688","name":"Array.compareLex","line":675,"kind":"def","docLink":"./Init/Data/Ord.html#Array.compareLex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Array.compareLex\"><span class=\"name\">Array</span>.<span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L666-L669","name":"List.compare_nil_right_eq_eq","line":666,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_nil_right_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_nil_right_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_right_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L662-L664","name":"List.compareLex_nil_right_eq_eq","line":662,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_nil_right_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_nil_right_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_right_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L657-L660","name":"List.compare_nil_left_eq_eq","line":657,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_nil_left_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_nil_left_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_left_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L653-L655","name":"List.compareLex_nil_left_eq_eq","line":653,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_nil_left_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_nil_left_eq_eq\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_left_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L649-L651","name":"List.isGE_compare_nil_right","line":649,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isGE_compare_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isGE_compare_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compare_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L645-L647","name":"List.isGE_compareLex_nil_right","line":645,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isGE_compareLex_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isGE_compareLex_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compareLex_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L640-L643","name":"List.isGE_compare_nil_left","line":640,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isGE_compare_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isGE_compare_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compare_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L636-L638","name":"List.isGE_compareLex_nil_left","line":636,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isGE_compareLex_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isGE_compareLex_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isGE_compareLex_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L631-L634","name":"List.isLE_compare_nil_right","line":631,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isLE_compare_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isLE_compare_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compare_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L627-L629","name":"List.isLE_compareLex_nil_right","line":627,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isLE_compareLex_nil_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isLE_compareLex_nil_right\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compareLex_nil_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L623-L625","name":"List.isLE_compare_nil_left","line":623,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isLE_compare_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isLE_compare_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compare_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L619-L621","name":"List.isLE_compareLex_nil_left","line":619,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.isLE_compareLex_nil_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.isLE_compareLex_nil_left\"><span class=\"name\">List</span>.<span class=\"name\">isLE_compareLex_nil_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L614-L617","name":"List.compare_nil_nil","line":614,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_nil_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_nil_nil\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L610-L612","name":"List.compareLex_nil_nil","line":610,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_nil_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_nil_nil\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L605-L608","name":"List.compare_cons_nil","line":605,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_cons_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_cons_nil\"><span class=\"name\">List</span>.<span class=\"name\">compare_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L601-L603","name":"List.compareLex_cons_nil","line":601,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_cons_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_cons_nil\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_cons_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L596-L599","name":"List.compare_nil_cons","line":596,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_nil_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_nil_cons\"><span class=\"name\">List</span>.<span class=\"name\">compare_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L592-L594","name":"List.compareLex_nil_cons","line":592,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_nil_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_nil_cons\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L587-L590","name":"List.compare_cons_cons","line":587,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">compare_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L582-L585","name":"List.compareLex_cons_cons","line":582,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compareLex_cons_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex_cons_cons\"><span class=\"name\">List</span>.<span class=\"name\">compareLex_cons_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">cmp</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <span class=\"fn\">cmp</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L579-L580","name":"List.compare_eq_compareLex","line":579,"kind":"theorem","docLink":"./Init/Data/Ord.html#List.compare_eq_compareLex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compare_eq_compareLex\"><span class=\"name\">List</span>.<span class=\"name\">compare_eq_compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Ord.html#List.compareLex\">List.compareLex</a> <a href=\"./Init/Data/Ord.html#Ord.compare\">compare</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L576-L577","name":"List.instOrd","line":576,"kind":"instance","docLink":"./Init/Data/Ord.html#List.instOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.instOrd\"><span class=\"name\">List</span>.<span class=\"name\">instOrd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L565-L574","name":"List.compareLex","line":565,"kind":"def","docLink":"./Init/Data/Ord.html#List.compareLex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#List.compareLex\"><span class=\"name\">List</span>.<span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L560-L561","name":"instOrdOrdering","line":560,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdOrdering","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdOrdering\"><span class=\"name\">instOrdOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L553-L558","name":"instOrdOption","line":553,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdOption","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdOption\"><span class=\"name\">instOrdOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L550-L551","name":"instOrdBitVec","line":550,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdBitVec\"><span class=\"name\">instOrdBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L547-L548","name":"instOrdISize","line":547,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdISize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdISize\"><span class=\"name\">instOrdISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L544-L545","name":"instOrdInt64","line":544,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdInt64\"><span class=\"name\">instOrdInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L541-L542","name":"instOrdInt32","line":541,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdInt32\"><span class=\"name\">instOrdInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L538-L539","name":"instOrdInt16","line":538,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdInt16\"><span class=\"name\">instOrdInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L535-L536","name":"instOrdInt8","line":535,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdInt8\"><span class=\"name\">instOrdInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L532-L533","name":"instOrdChar","line":532,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdChar\"><span class=\"name\">instOrdChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L529-L530","name":"instOrdUSize","line":529,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdUSize","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdUSize\"><span class=\"name\">instOrdUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L526-L527","name":"instOrdUInt64","line":526,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdUInt64","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdUInt64\"><span class=\"name\">instOrdUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L523-L524","name":"instOrdUInt32","line":523,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdUInt32","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdUInt32\"><span class=\"name\">instOrdUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L520-L521","name":"instOrdUInt16","line":520,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdUInt16","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdUInt16\"><span class=\"name\">instOrdUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L517-L518","name":"instOrdUInt8","line":517,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdUInt8","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdUInt8\"><span class=\"name\">instOrdUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L514-L515","name":"instOrdFin","line":514,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdFin\"><span class=\"name\">instOrdFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L511-L512","name":"instOrdString","line":511,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdString\"><span class=\"name\">instOrdString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L505-L509","name":"instOrdBool","line":505,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdBool\"><span class=\"name\">instOrdBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L502-L503","name":"instOrdInt","line":502,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdInt\"><span class=\"name\">instOrdInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L499-L500","name":"instOrdNat","line":499,"kind":"instance","docLink":"./Init/Data/Ord.html#instOrdNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instOrdNat\"><span class=\"name\">instOrdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L486-L497","name":"compareOn","line":486,"kind":"def","docLink":"./Init/Data/Ord.html#compareOn","doc":"Compares two values by comparing the results of applying a function.\n\nIn particular, `x` is compared to `y` by comparing `f x` and `f y`.\n\nExamples:\n* `compareOn (·.length) \"apple\" \"banana\" = .lt`\n* `compareOn (· % 3) 5 6 = .gt`\n* `compareOn (·.foldl max 0) [1, 2, 3] [3, 2, 1] = .eq`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOn\"><span class=\"name\">compareOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">ord</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L481-L481","name":"Ord.compare","line":481,"kind":"def","docLink":"./Init/Data/Ord.html#Ord.compare","doc":"Compare two elements in `α` using the comparator contained in an `[Ord α]` instance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.compare\"><span class=\"name\">Ord</span>.<span class=\"name\">compare</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L479-L479","name":"Ord.mk","line":479,"kind":"ctor","docLink":"./Init/Data/Ord.html#Ord.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord.mk\"><span class=\"name\">Ord</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compare</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L469-L481","name":"Ord","line":469,"kind":"class","docLink":"./Init/Data/Ord.html#Ord","doc":"`Ord α` provides a computable total order on `α`, in terms of the\n`compare : α → α → Ordering` function.\n\nTypically instances will be transitive, reflexive, and antisymmetric,\nbut this is not enforced by the typeclass.\n\nThere is a derive handler, so appending `deriving Ord` to an inductive type or structure\nwill attempt to create an `Ord` instance.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ord\"><span class=\"name\">Ord</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L449-L465","name":"isLE_compareOfLessAndEq","line":449,"kind":"theorem","docLink":"./Init/Data/Ord.html#isLE_compareOfLessAndEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#isLE_compareOfLessAndEq\"><span class=\"name\">isLE_compareOfLessAndEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L441-L447","name":"compareOfLessAndEq_eq_gt","line":441,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_gt\"><span class=\"name\">compareOfLessAndEq_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L434-L439","name":"compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne","line":434,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne\"><span class=\"name\">compareOfLessAndEq_eq_gt_of_lt_iff_not_gt_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">Ordering.gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L422-L432","name":"compareOfLessAndEq_eq_eq","line":422,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_eq\"><span class=\"name\">compareOfLessAndEq_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">refl</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L415-L420","name":"compareOfLessAndEq_eq_lt","line":415,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_lt\"><span class=\"name\">compareOfLessAndEq_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">Ordering.lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L407-L413","name":"compareOfLessAndEq_eq_swap","line":407,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_swap\"><span class=\"name\">compareOfLessAndEq_eq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L394-L405","name":"lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le","line":394,"kind":"theorem","docLink":"./Init/Data/Ord.html#lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le\"><span class=\"name\">lt_iff_not_gt_and_ne_of_antisymm_of_total_of_not_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">total</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_le</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L378-L392","name":"compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne","line":378,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne\"><span class=\"name\">compareOfLessAndEq_eq_swap_of_lt_iff_not_gt_and_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Ord.html#compareOfLessAndEq\">compareOfLessAndEq</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L373-L376","name":"compareLex_eq_eq","line":373,"kind":"theorem","docLink":"./Init/Data/Ord.html#compareLex_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareLex_eq_eq\"><span class=\"name\">compareLex_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cmp₁ </span><span class=\"fn\">cmp₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#compareLex\">compareLex</a> <span class=\"fn\">cmp₁</span> <span class=\"fn\">cmp₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">cmp₁</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">cmp₂</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">Ordering.eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L360-L369","name":"compareLex","line":360,"kind":"def","docLink":"./Init/Data/Ord.html#compareLex","doc":"Compares `a` and `b` lexicographically by `cmp₁` and `cmp₂`.\n\n`a` and `b` are first compared by `cmp₁`. If this returns `Ordering.eq`, `a` and `b` are compared\nby `cmp₂` to break the tie.\n\nTo lexicographically combine two `Ordering`s, use `Ordering.then`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareLex\"><span class=\"name\">compareLex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmp₁ </span><span class=\"fn\">cmp₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L347-L358","name":"compareOfLessAndBEq","line":347,"kind":"def","docLink":"./Init/Data/Ord.html#compareOfLessAndBEq","doc":"Uses a decidable less-than relation and Boolean equality to find an `Ordering`.\n\nIn particular, if `x < y` then the result is `Ordering.lt`. If `x == y` then the result is\n`Ordering.eq`. Otherwise, it is `Ordering.gt`.\n\n`compareOfLessAndEq` uses `DecidableEq` instead of `BEq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndBEq\"><span class=\"name\">compareOfLessAndBEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L334-L345","name":"compareOfLessAndEq","line":334,"kind":"def","docLink":"./Init/Data/Ord.html#compareOfLessAndEq","doc":"Uses decidable less-than and equality relations to find an `Ordering`.\n\nIn particular, if `x < y` then the result is `Ordering.lt`. If `x = y` then the result is\n`Ordering.eq`. Otherwise, it is `Ordering.gt`.\n\n`compareOfLessAndBEq` uses `BEq` instead of `DecidableEq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#compareOfLessAndEq\"><span class=\"name\">compareOfLessAndEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L327-L328","name":"Ordering.isGE_left_of_isGE_then","line":327,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_left_of_isGE_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_left_of_isGE_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_left_of_isGE_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L324-L325","name":"Ordering.isLE_left_of_isLE_then","line":324,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_left_of_isLE_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_left_of_isLE_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_left_of_isLE_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L321-L322","name":"Ordering.isLE_then_iff_and","line":321,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_then_iff_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_then_iff_and\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_then_iff_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#And\">∧</a> (<span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L318-L319","name":"Ordering.isLE_then_iff_or","line":318,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_then_iff_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_then_iff_or\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_then_iff_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L315-L316","name":"Ordering.eq_then","line":315,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L312-L313","name":"Ordering.gt_then","line":312,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.gt_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.gt_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L309-L310","name":"Ordering.lt_then","line":309,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.lt_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.lt_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L306-L307","name":"Ordering.then_eq_gt","line":306,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.then_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.then_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L303-L304","name":"Ordering.then_eq_eq","line":303,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.then_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.then_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L300-L301","name":"Ordering.then_eq_lt","line":300,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.then_eq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.then_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">then_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">o₂</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L297-L298","name":"Ordering.swap_then","line":297,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_then","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_then\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\">o₂</span>)</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.then\">then</a></span> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L294-L295","name":"Ordering.swap_inj","line":294,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_inj\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o₁ </span><span class=\"fn\">o₂</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o₁</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o₂</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L290-L292","name":"Ordering.swap_swap","line":290,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">o</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L287-L288","name":"Ordering.isGT_iff_eq_gt","line":287,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGT_iff_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT_iff_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_iff_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L284-L285","name":"Ordering.isGE_of_eq_eq","line":284,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_of_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_of_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_of_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L281-L282","name":"Ordering.isGE_of_eq_gt","line":281,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_of_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_of_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_of_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L278-L279","name":"Ordering.isGE_iff_eq_gt_or_eq_eq","line":278,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_iff_eq_gt_or_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_iff_eq_gt_or_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_iff_eq_gt_or_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L275-L276","name":"Ordering.isNe_iff_ne_eq","line":275,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isNe_iff_ne_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe_iff_ne_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_iff_ne_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L272-L273","name":"Ordering.isEq_iff_eq_eq","line":272,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isEq_iff_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq_iff_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_iff_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L269-L270","name":"Ordering.isLE_of_eq_eq","line":269,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_of_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_of_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_of_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L266-L267","name":"Ordering.isLE_of_eq_lt","line":266,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_of_eq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_of_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_of_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> → <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L263-L264","name":"Ordering.isLE_iff_eq_lt_or_eq_eq","line":263,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_iff_eq_lt_or_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_iff_eq_lt_or_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_iff_eq_lt_or_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L260-L261","name":"Ordering.isLT_iff_eq_lt","line":260,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLT_iff_eq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT_iff_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_iff_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L256-L258","name":"Ordering.isGT_swap","line":256,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGT_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L252-L254","name":"Ordering.isGE_swap","line":252,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L248-L250","name":"Ordering.isNe_swap","line":248,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isNe_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L244-L246","name":"Ordering.isEq_swap","line":244,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isEq_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L240-L242","name":"Ordering.isLE_swap","line":240,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L236-L238","name":"Ordering.isLT_swap","line":236,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLT_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L232-L234","name":"Ordering.swap_eq_eq","line":232,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L228-L230","name":"Ordering.swap_eq_lt","line":228,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_eq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_eq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L224-L226","name":"Ordering.swap_eq_gt","line":224,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_eq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_eq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L220-L222","name":"Ordering.isGE_eq_false","line":220,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L216-L218","name":"Ordering.isLE_eq_false","line":216,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_eq_false\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L213-L214","name":"Ordering.eq_eq_of_eq_swap","line":213,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_eq_of_eq_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_eq_of_eq_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_eq_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L210-L211","name":"Ordering.eq_swap_iff_eq_eq","line":210,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_swap_iff_eq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_swap_iff_eq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_swap_iff_eq_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L207-L208","name":"Ordering.eq_eq_of_isLE_of_isGE","line":207,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_eq_of_isLE_of_isGE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_eq_of_isLE_of_isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isLE_of_isGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L204-L205","name":"Ordering.eq_eq_of_isGE_of_isGE_swap","line":204,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_eq_of_isGE_of_isGE_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_eq_of_isGE_of_isGE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isGE_of_isGE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L201-L202","name":"Ordering.eq_eq_of_isLE_of_isLE_swap","line":201,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.eq_eq_of_isLE_of_isLE_swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq_eq_of_isLE_of_isLE_swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq_eq_of_isLE_of_isLE_swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">o</span>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">o</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L198-L199","name":"Ordering.swap_gt","line":198,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L195-L196","name":"Ordering.swap_eq","line":195,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L192-L193","name":"Ordering.swap_lt","line":192,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.swap_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L189-L190","name":"Ordering.isGT_gt","line":189,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGT_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L186-L187","name":"Ordering.isGE_gt","line":186,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L183-L184","name":"Ordering.isNe_gt","line":183,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isNe_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L180-L181","name":"Ordering.isEq_gt","line":180,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isEq_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L177-L178","name":"Ordering.isLE_gt","line":177,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L174-L175","name":"Ordering.isLT_gt","line":174,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLT_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT_gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.gt\">gt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L171-L172","name":"Ordering.isGT_eq","line":171,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGT_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L168-L169","name":"Ordering.isGE_eq","line":168,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L165-L166","name":"Ordering.isNe_eq","line":165,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isNe_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L162-L163","name":"Ordering.isEq_eq","line":162,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isEq_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L159-L160","name":"Ordering.isLE_eq","line":159,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L156-L157","name":"Ordering.isLT_eq","line":156,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLT_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT_eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.eq\">eq</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L153-L154","name":"Ordering.isGT_lt","line":153,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGT_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGT\">isGT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L150-L151","name":"Ordering.isGE_lt","line":150,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isGE_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isGE\">isGE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L147-L148","name":"Ordering.isNe_lt","line":147,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isNe_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isNe\">isNe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L144-L145","name":"Ordering.isEq_lt","line":144,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isEq_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isEq\">isEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L141-L142","name":"Ordering.isLE_lt","line":141,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLE_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLE\">isLE</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L138-L139","name":"Ordering.isLT_lt","line":138,"kind":"theorem","docLink":"./Init/Data/Ord.html#Ordering.isLT_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT_lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT_lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering.lt\">lt</a>.<a href=\"./Init/Data/Ord.html#Ordering.isLT\">isLT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L129-L134","name":"Ordering.isGE","line":129,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isGE","doc":"Checks whether the ordering is `gt` or `eq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGE\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L122-L127","name":"Ordering.isGT","line":122,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isGT","doc":"Checks whether the ordering is `gt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isGT\"><span class=\"name\">Ordering</span>.<span class=\"name\">isGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L115-L120","name":"Ordering.isLT","line":115,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isLT","doc":"Checks whether the ordering is `lt`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLT\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L108-L113","name":"Ordering.isLE","line":108,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isLE","doc":"Checks whether the ordering is `lt` or `eq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isLE\"><span class=\"name\">Ordering</span>.<span class=\"name\">isLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L101-L106","name":"Ordering.isNe","line":101,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isNe","doc":"Checks whether the ordering is not `eq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isNe\"><span class=\"name\">Ordering</span>.<span class=\"name\">isNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L94-L99","name":"Ordering.isEq","line":94,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.isEq","doc":"Checks whether the ordering is `eq`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.isEq\"><span class=\"name\">Ordering</span>.<span class=\"name\">isEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L45-L92","name":"Ordering.then","line":45,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.then","doc":"If `a` and `b` are `Ordering`, then `a.then b` returns `a` unless it is `.eq`, in which case it\nreturns `b`. Additionally, it has “short-circuiting” behavior similar to boolean `&&`: if `a` is not\n`.eq` then the expression for `b` is not evaluated.\n\nThis is a useful primitive for constructing lexicographic comparator functions. The `deriving Ord`\nsyntax on a structure uses the `Ord` instance to compare each field in order, combining the results\nequivalently to `Ordering.then`.\n\nUse `compareLex` to lexicographically combine two comparison functions.\n\nExamples:\n```lean example\nstructure Person where\n  name : String\n  age : Nat\n\n-- Sort people first by name (in ascending order), and people with the same name by age (in\n-- descending order)\ninstance : Ord Person where\n  compare a b := (compare a.name b.name).then (compare b.age a.age)\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Dana\", 50⟩\n```\n```output\nOrdering.gt\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Gert\", 50⟩\n```\n```output\nOrdering.gt\n```\n\n```lean example\n#eval Ord.compare (⟨\"Gert\", 33⟩ : Person) ⟨\"Gert\", 20⟩\n```\n```output\nOrdering.lt\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.then\"><span class=\"name\">Ordering</span>.<span class=\"name\">then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L32-L43","name":"Ordering.swap","line":32,"kind":"def","docLink":"./Init/Data/Ord.html#Ordering.swap","doc":"Swaps less-than and greater-than ordering results.\n\nExamples:\n* `Ordering.lt.swap = Ordering.gt`\n* `Ordering.eq.swap = Ordering.eq`\n* `Ordering.gt.swap = Ordering.lt`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.swap\"><span class=\"name\">Ordering</span>.<span class=\"name\">swap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L28-L28","name":"instDecidableEqOrdering","line":28,"kind":"instance","docLink":"./Init/Data/Ord.html#instDecidableEqOrdering","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instDecidableEqOrdering\"><span class=\"name\">instDecidableEqOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L28-L28","name":"instInhabitedOrdering","line":28,"kind":"instance","docLink":"./Init/Data/Ord.html#instInhabitedOrdering","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#instInhabitedOrdering\"><span class=\"name\">instInhabitedOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L26-L27","name":"Ordering.gt","line":26,"kind":"ctor","docLink":"./Init/Data/Ord.html#Ordering.gt","doc":"Greater than. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.gt\"><span class=\"name\">Ordering</span>.<span class=\"name\">gt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L24-L25","name":"Ordering.eq","line":24,"kind":"ctor","docLink":"./Init/Data/Ord.html#Ordering.eq","doc":"Equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.eq\"><span class=\"name\">Ordering</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L22-L23","name":"Ordering.lt","line":22,"kind":"ctor","docLink":"./Init/Data/Ord.html#Ordering.lt","doc":"Less than. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering.lt\"><span class=\"name\">Ordering</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Ord.lean#L13-L28","name":"Ordering","line":13,"kind":"inductive","docLink":"./Init/Data/Ord.html#Ordering","doc":"The result of a comparison according to a total order.\n\nThe relationship between the compared items may be:\n* `Ordering.lt`: less than\n* `Ordering.eq`: equal\n* `Ordering.gt`: greater than\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Ord.html#Ordering\"><span class=\"name\">Ordering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}