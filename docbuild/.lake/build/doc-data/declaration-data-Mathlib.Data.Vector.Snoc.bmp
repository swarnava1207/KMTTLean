{"name":"Mathlib.Data.Vector.Snoc","instances":[],"imports":["Init","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L151-L157","name":"List.Vector.mapAccumr₂_snoc","line":151,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr₂_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr₂\">mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr₂\">mapAccumr₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n  <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">r</span>.1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.2</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L146-L149","name":"List.Vector.mapAccumr₂_nil","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr₂_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr₂_nil\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr₂_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">φ</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr₂\">mapAccumr₂</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L141-L144","name":"List.Vector.map₂_snoc","line":141,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.map₂_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.map₂_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map₂_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">σ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.map₂\">map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.map₂\">map₂</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span>)</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L129-L137","name":"List.Vector.mapAccumr_snoc","line":129,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr\">mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">let <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\">let <span class=\"fn\">r</span> := <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr\">mapAccumr</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\"><span class=\"fn\">q</span>.1</span></span>;\n  <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">r</span>.1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.2</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\"><span class=\"fn\">q</span>.2</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L125-L127","name":"List.Vector.mapAccumr_nil","line":125,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.mapAccumr_nil\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">mapAccumr_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.mapAccumr\">mapAccumr</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L121-L123","name":"List.Vector.map_snoc","line":121,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.map_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.map_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">map_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L106-L113","name":"List.Vector.revCasesOn","line":106,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.revCasesOn","doc":"Define `C v` by *reverse* case analysis, i.e. by handling the cases `nil` and `xs.snoc x`\nseparately "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.revCasesOn\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snoc</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L89-L104","name":"List.Vector.revInductionOn₂","line":89,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.revInductionOn₂","doc":"Define `C v w` by *reverse* induction on a pair of vectors `v : Vector α n` and\n`w : Vector β n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.revInductionOn₂\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snoc</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">β</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">y</span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L71-L87","name":"List.Vector.revInductionOn","line":71,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.revInductionOn","doc":"Define `C v` by *reverse* induction on `v : Vector α n`.\nThat is, break the vector down starting from the right-most element, using `snoc`\n\nThis function has two arguments: `nil` handles the base case on `C nil`,\nand `snoc` defines the inductive step using `∀ x : α, C xs → C (xs.snoc x)`.\n\nThis can be used as `induction v using Vector.revInductionOn`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.revInductionOn\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">revInductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Sort</a> u_5</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nil</span> : <span class=\"fn\"><span class=\"fn\">C</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snoc</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>} → <span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>) → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">xs</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L56-L63","name":"List.Vector.replicate_succ_to_snoc","line":56,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.replicate_succ_to_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.replicate_succ_to_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">replicate_succ_to_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.replicate\">replicate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">val</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">val</span>)</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">val</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L49-L54","name":"List.Vector.reverse_snoc","line":49,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.reverse_snoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.reverse_snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/Vector/Basic.html#List.Vector.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Basic.html#List.Vector.reverse\">reverse</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L43-L47","name":"List.Vector.reverse_cons","line":43,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.reverse_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.reverse_cons\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">reverse_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>).<a href=\"./Mathlib/Data/Vector/Basic.html#List.Vector.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Basic.html#List.Vector.reverse\">reverse</a></span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L39-L41","name":"List.Vector.snoc_nil","line":39,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc_nil\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.cons\">::ᵥ</a> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L35-L37","name":"List.Vector.snoc_cons","line":35,"kind":"theorem","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc_cons\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.cons\">::ᵥ</a> <span class=\"fn\">xs</span>).<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector.cons\">::ᵥ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\">snoc</a></span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Vector/Snoc.lean#L25-L27","name":"List.Vector.snoc","line":25,"kind":"def","docLink":"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc","doc":"Append a single element to the end of a vector "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Vector/Snoc.html#List.Vector.snoc\"><span class=\"name\">List</span>.<span class=\"name\">Vector</span>.<span class=\"name\">snoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">Vector</a> <span class=\"fn\">α</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span></span></div></div>"}]}