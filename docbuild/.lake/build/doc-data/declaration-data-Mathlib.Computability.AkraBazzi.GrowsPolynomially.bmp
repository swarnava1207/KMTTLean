{"name":"Mathlib.Computability.AkraBazzi.GrowsPolynomially","instances":[],"imports":["Init","Mathlib.Analysis.Asymptotics.AsymptoticEquivalent","Mathlib.Analysis.SpecialFunctions.Pow.Real","Mathlib.Algebra.Order.ToIntervalMod","Mathlib.Analysis.SpecialFunctions.Log.Base"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L717-L719","name":"AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const","line":717,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent_const\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isEquivalent_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Asymptotics/AsymptoticEquivalent.html#Asymptotics.IsEquivalent\">Asymptotics.IsEquivalent</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L711-L715","name":"AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent","line":711,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isEquivalent\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isEquivalent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/Asymptotics/AsymptoticEquivalent.html#Asymptotics.IsEquivalent\">Asymptotics.IsEquivalent</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L663-L709","name":"AkraBazziRecurrence.GrowsPolynomially.of_isTheta","line":663,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isTheta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.of_isTheta\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">of_isTheta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Analysis/Asymptotics/Theta.html#Asymptotics.IsTheta\">=Θ[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Analysis/Asymptotics/Theta.html#Asymptotics.IsTheta\">]</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L634-L661","name":"AkraBazziRecurrence.growsPolynomially_log","line":634,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_log","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_log\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L631-L632","name":"AkraBazziRecurrence.growsPolynomially_zpow","line":631,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_zpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_zpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L628-L629","name":"AkraBazziRecurrence.growsPolynomially_pow","line":628,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_pow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L625-L626","name":"AkraBazziRecurrence.growsPolynomially_rpow","line":625,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_rpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_rpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_rpow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L620-L623","name":"AkraBazziRecurrence.GrowsPolynomially.zpow","line":620,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.zpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.zpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">zpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf_nonneg</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L615-L618","name":"AkraBazziRecurrence.GrowsPolynomially.pow","line":615,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.pow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.pow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf_nonneg</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L562-L613","name":"AkraBazziRecurrence.GrowsPolynomially.rpow","line":562,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.rpow","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.rpow\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">rpow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf_nonneg</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L556-L560","name":"AkraBazziRecurrence.GrowsPolynomially.div","line":556,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.div\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L507-L554","name":"AkraBazziRecurrence.GrowsPolynomially.inv","line":507,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.inv\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L401-L505","name":"AkraBazziRecurrence.GrowsPolynomially.add_isLittleO","line":401,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add_isLittleO","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add_isLittleO\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">add_isLittleO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfg</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">=o[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsLittleO\">]</a> <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L361-L399","name":"AkraBazziRecurrence.GrowsPolynomially.add","line":361,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.add\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\">0</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg'</span> : <span class=\"fn\">0</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">≤ᶠ[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyLE\">]</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L357-L359","name":"AkraBazziRecurrence.GrowsPolynomially.const_mul","line":357,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.const_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.const_mul\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">const_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L303-L355","name":"AkraBazziRecurrence.GrowsPolynomially.mul","line":303,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.mul\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L295-L301","name":"AkraBazziRecurrence.growsPolynomially_id","line":295,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_id\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L290-L293","name":"AkraBazziRecurrence.growsPolynomially_const","line":290,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.growsPolynomially_const\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">growsPolynomially_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L282-L284","name":"AkraBazziRecurrence.GrowsPolynomially.norm","line":282,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.norm\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L266-L280","name":"AkraBazziRecurrence.GrowsPolynomially.abs","line":266,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.abs","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.abs\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) =&gt; <a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Algebra/Order/Group/Unbundled/Abs.html#abs\">|</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L263-L264","name":"AkraBazziRecurrence.GrowsPolynomially.neg_iff","line":263,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg_iff\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">neg_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L254-L261","name":"AkraBazziRecurrence.GrowsPolynomially.neg","line":254,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.neg\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">f</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L235-L252","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg","line":235,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_zero_or_pos_or_neg\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_zero_or_pos_or_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L153-L233","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos","line":153,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_nonneg_or_nonpos\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_nonneg_or_nonpos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L85-L151","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero","line":85,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_zero_of_frequently_zero\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_zero_of_frequently_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf'</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">∃ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L80-L83","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat","line":80,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge_nat\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_ge_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>) <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>, <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L73-L78","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge","line":73,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_ge\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_ge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <span class=\"fn\">x</span></span>, <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L68-L71","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat","line":68,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le_nat\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_le_nat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>) <span class=\"fn\">↑<span class=\"fn\">n</span></span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L61-L66","name":"AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le","line":61,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.eventually_atTop_le\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">eventually_atTop_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioo\">Set.Ioo</a> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">c</span> &gt; <span class=\"fn\">0</span>, <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">x</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">∀ <span class=\"fn\">u</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Icc\">Set.Icc</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>) <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L55-L57","name":"AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq","line":55,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.iff_eventuallyEq\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">iff_eventuallyEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L43-L53","name":"AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq","line":43,"kind":"theorem","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially.congr_of_eventuallyEq\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span>.<span class=\"name\">congr_of_eventuallyEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfg</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=ᶠ[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\">GrowsPolynomially</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/AkraBazzi/GrowsPolynomially.lean#L34-L39","name":"AkraBazziRecurrence.GrowsPolynomially","line":34,"kind":"def","docLink":"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially","doc":"The growth condition that the function `g` must satisfy for the Akra-Bazzi theorem to apply.\nIt roughly states that `c₁ g(n) ≤ g(u) ≤ c₂ g(n)`, for `u` between `b*n` and `n` for any\nconstant `b ∈ (0,1)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/AkraBazzi/GrowsPolynomially.html#AkraBazziRecurrence.GrowsPolynomially\"><span class=\"name\">AkraBazziRecurrence</span>.<span class=\"name\">GrowsPolynomially</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}