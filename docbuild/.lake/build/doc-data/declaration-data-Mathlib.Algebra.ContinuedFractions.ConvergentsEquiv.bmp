{"name":"Mathlib.Algebra.ContinuedFractions.ConvergentsEquiv","instances":[],"imports":["Init","Mathlib.Algebra.ContinuedFractions.ContinuantsRecurrence","Mathlib.Algebra.ContinuedFractions.TerminatedStable","Mathlib.Tactic.FieldSimp","Mathlib.Tactic.Ring"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L382-L391","name":"ContFract.convs_eq_convs'","line":382,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#ContFract.convs_eq_convs'","doc":"Shows that the recurrence relation (`convs`) and direct evaluation (`convs'`) of a\n(regular) continued fraction coincide. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#ContFract.convs_eq_convs'\"><span class=\"name\">ContFract</span>.<span class=\"name\">convs_eq_convs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#ContFract\">ContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">↑<span class=\"fn\">c</span></span>)</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs\">convs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">↑<span class=\"fn\">c</span></span>)</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'\">convs'</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L315-L374","name":"GenContFract.convs_eq_convs'","line":315,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.convs_eq_convs'","doc":"Shows that the recurrence relation (`convs`) and direct evaluation (`convs'`) of the\ngeneralized continued fraction coincide at position `n` if the sequence of fractions contains\nstrictly positive values only.\nRequiring positivity of all values is just one possible condition to obtain this result.\nFor example, the dual - sequences with strictly negative values only - would also work.\n\nIn practice, one most commonly deals with regular continued fractions, which satisfy the\npositivity criterion required here. The analogous result for them\n(see `ContFract.convs_eq_convs`) hence follows directly from this theorem.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.convs_eq_convs'\"><span class=\"name\">GenContFract</span>.<span class=\"name\">convs_eq_convs'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Ring/Defs.html#IsStrictOrderedRing\">IsStrictOrderedRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_pos</span> : <span class=\"fn\">∀ {<span class=\"fn\">gp</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span></span>} {<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.s\">s</a></span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">gp</span></span> → <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">gp</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.a\">a</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">gp</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.b\">b</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs\">convs</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'\">convs'</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L245-L311","name":"GenContFract.succ_nth_conv_eq_squashGCF_nth_conv","line":245,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_nth_conv_eq_squashGCF_nth_conv","doc":"The convergents coincide in the expected way at the squashed position if the partial denominator\nat the squashed position is not zero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_nth_conv_eq_squashGCF_nth_conv\"><span class=\"name\">GenContFract</span>.<span class=\"name\">succ_nth_conv_eq_squashGCF_nth_conv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nth_partDen_ne_zero</span> : <span class=\"fn\">∀ {<span class=\"fn\">b</span> : <span class=\"fn\">K</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.partDens\">partDens</a></span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">b</span></span> → <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs\">convs</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\">squashGCF</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs\">convs</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L220-L241","name":"GenContFract.contsAux_eq_contsAux_squashGCF_of_le","line":220,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.contsAux_eq_contsAux_squashGCF_of_le","doc":"The auxiliary continuants before the squashed position stay the same. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.contsAux_eq_contsAux_squashGCF_of_le\"><span class=\"name\">GenContFract</span>.<span class=\"name\">contsAux_eq_contsAux_squashGCF_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.contsAux\">contsAux</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\">squashGCF</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.contsAux\">contsAux</a></span> <span class=\"fn\">m</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L208-L218","name":"GenContFract.succ_nth_conv'_eq_squashGCF_nth_conv'","line":208,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_nth_conv'_eq_squashGCF_nth_conv'","doc":"`convs'` returns the same value for a gcf and the corresponding squashed gcf at the\nsquashed position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_nth_conv'_eq_squashGCF_nth_conv'\"><span class=\"name\">GenContFract</span>.<span class=\"name\">succ_nth_conv'_eq_squashGCF_nth_conv'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'\">convs'</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\">squashGCF</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'\">convs'</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L203-L206","name":"GenContFract.squashGCF_nth_of_lt","line":203,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF_nth_of_lt","doc":"The values before the squashed position stay the same. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF_nth_of_lt\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashGCF_nth_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m_lt_n</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\">squashGCF</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.s\">s</a></span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.s\">s</a></span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L191-L201","name":"GenContFract.squashGCF_eq_self_of_terminated","line":191,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF_eq_self_of_terminated","doc":"If the gcf already terminated at position `n`, nothing gets squashed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF_eq_self_of_terminated\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashGCF_eq_self_of_terminated</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terminatedAt_n</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.TerminatedAt\">TerminatedAt</a></span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\">squashGCF</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L176-L185","name":"GenContFract.squashGCF","line":176,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF","doc":"Given a gcf `g = [h; (a₀, bₒ), (a₁, b₁), ...]`, we have\n- `squashGCF g 0 = [h + a₀ / b₀); (a₀, bₒ), ...]`,\n- `squashGCF g (n + 1) = ⟨g.h, squashSeq g.s n⟩`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashGCF\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashGCF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L146-L171","name":"GenContFract.succ_succ_nth_conv'Aux_eq_succ_nth_conv'Aux_squashSeq","line":146,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_succ_nth_conv'Aux_eq_succ_nth_conv'Aux_squashSeq","doc":"The auxiliary function `convs'Aux` returns the same value for a sequence and the\ncorresponding squashed sequence at the squashed position. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.succ_succ_nth_conv'Aux_eq_succ_nth_conv'Aux_squashSeq\"><span class=\"name\">GenContFract</span>.<span class=\"name\">succ_succ_nth_conv'Aux_eq_succ_nth_conv'Aux_squashSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'Aux\">convs'Aux</a> <span class=\"fn\">s</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.convs'Aux\">convs'Aux</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L126-L144","name":"GenContFract.squashSeq_succ_n_tail_eq_squashSeq_tail_n","line":126,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_succ_n_tail_eq_squashSeq_tail_n","doc":"Squashing at position `n + 1` and taking the tail is the same as squashing the tail of the\nsequence at position `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_succ_n_tail_eq_squashSeq_tail_n\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashSeq_succ_n_tail_eq_squashSeq_tail_n</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\">s</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail\">tail</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.tail\">tail</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L115-L124","name":"GenContFract.squashSeq_nth_of_lt","line":115,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_nth_of_lt","doc":"The values before the squashed position stay the same. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_nth_of_lt\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashSeq_nth_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m_lt_n</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L108-L113","name":"GenContFract.squashSeq_nth_of_not_terminated","line":108,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_nth_of_not_terminated","doc":"If the sequence has not terminated before position `n + 1`, the value at `n + 1` gets\nsquashed into position `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_nth_of_not_terminated\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashSeq_nth_of_not_terminated</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">gp_n </span><span class=\"fn\">gp_succ_n</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_nth_eq</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">gp_n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s_succ_nth_eq</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">gp_succ_n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.get?\">get?</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">{ <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\">gp_n</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.a\">a</a></span>, <span class=\"fn\">b</span> := <span class=\"fn\"><span class=\"fn\">gp_n</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.b\">b</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">gp_succ_n</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.a\">a</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><span class=\"fn\">gp_succ_n</span>.<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair.b\">b</a></span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L102-L106","name":"GenContFract.squashSeq_eq_self_of_terminated","line":102,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_eq_self_of_terminated","doc":"If the sequence already terminated at position `n + 1`, nothing gets squashed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq_eq_self_of_terminated\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashSeq_eq_self_of_terminated</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">terminatedAt_succ_n</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq.TerminatedAt\">TerminatedAt</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\">squashSeq</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.lean#L86-L97","name":"GenContFract.squashSeq","line":86,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq","doc":"Given a sequence of `GenContFract.Pair`s `s = [(a₀, bₒ), (a₁, b₁), ...]`, `squashSeq s n`\ncombines `⟨aₙ, bₙ⟩` and `⟨aₙ₊₁, bₙ₊₁⟩` at position `n` to `⟨aₙ, bₙ + aₙ₊₁ / bₙ₊₁⟩`. For example,\n`squashSeq s 0 = [(a₀, bₒ + a₁ / b₁), (a₁, b₁),...]`.\nIf `s.TerminatedAt (n + 1)`, then `squashSeq s n = s`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/ConvergentsEquiv.html#GenContFract.squashSeq\"><span class=\"name\">GenContFract</span>.<span class=\"name\">squashSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#DivisionRing\">DivisionRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Stream'.Seq</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract.Pair\">Pair</a> <span class=\"fn\">K</span>)</span></span></div></div>"}]}