{"name":"Mathlib.Tactic.Variable","instances":[],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.TryThis"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L306-L310","name":"Mathlib.Command.Variable.ignorevariable?","line":306,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.ignorevariable?","doc":"Hint for the unused variables linter. Copies the one for `variable`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.ignorevariable?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">ignorevariable?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Linter/UnusedVariables.html#Lean.Linter.IgnoreFunction\">Lean.Linter.IgnoreFunction</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L257-L304","name":"Mathlib.Command.Variable.elabVariables.process","line":257,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables.process","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables.process\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">elabVariables</span>.<span class=\"name\">process</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkRedundant</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedBinders?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L251-L256","name":"Mathlib.Command.Variable.elabVariables.extendScope","line":251,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables.extendScope","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables.extendScope\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">elabVariables</span>.<span class=\"name\">extendScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L243-L304","name":"Mathlib.Command.Variable.elabVariables","line":243,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables","doc":"The `variable?` command has the same syntax as `variable`, but it will auto-insert\nmissing instance arguments wherever they are needed.\nIt does not add variables that can already be deduced from others in the current context.\nBy default the command checks that variables aren't implied by earlier ones, but it does *not*\ncheck that earlier variables aren't implied by later ones.\nUnlike `variable`, the `variable?` command does not support changing variable binder types.\n\nThe `variable?` command will give a suggestion to replace itself with a command of the form\n`variable? ...binders... => ...binders...`.  The binders after the `=>` are the completed\nlist of binders. When this `=>` clause is present, the command verifies that the expanded\nbinders match the post-`=>` binders.  The purpose of this is to help keep code that uses\n`variable?` resilient against changes to the typeclass hierarchy, at least in the sense\nthat this additional information can be used to debug issues that might arise.\nOne can also replace `variable? ...binders... =>` with `variable`.\n\nThe core algorithm is to try elaborating binders one at a time, and whenever there is a\ntypeclass instance inference failure, it synthesizes binder syntax for it and adds it to\nthe list of binders and tries again, recursively. There are no guarantees that this\nprocess gives the \"correct\" list of binders.\n\nStructures tagged with the `variable_alias` attribute can serve as aliases for a collection\nof typeclasses. For example, given\n```lean\n@[variable_alias]\nstructure VectorSpace (k V : Type*) [Field k] [AddCommGroup V] [Module k V]\n```\nthen `variable? [VectorSpace k V]` is\nequivalent to `variable {k V : Type*} [Field k] [AddCommGroup V] [Module k V]`, assuming\nthat there are no pre-existing instances on `k` and `V`.\nNote that this is not a simple replacement: it only adds instances not inferable\nfrom others in the current scope.\n\nA word of warning: the core algorithm depends on pretty printing, so if terms that appear\nin binders do not round trip, this algorithm can fail. That said, it has some support\nfor quantified binders such as `[∀ i, F i]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.elabVariables\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">elabVariables</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Lean.Elab.Command.CommandElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L235-L241","name":"Mathlib.Command.Variable.cleanBinders","line":235,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.cleanBinders","doc":"Strip off whitespace and comments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.cleanBinders\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">cleanBinders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L230-L233","name":"Mathlib.Command.Variable.completeBinders","line":230,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">completeBinders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkRedundant</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L223-L228","name":"Mathlib.Command.Variable.completeBinders'.isVariableAlias","line":223,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders'.isVariableAlias","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders'.isVariableAlias\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">completeBinders'</span>.<span class=\"name\">isVariableAlias</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L152-L228","name":"Mathlib.Command.Variable.completeBinders'","line":152,"kind":"opaque","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders'","doc":"Tries elaborating binders, inserting new binders whenever typeclass inference fails.\n`i` is the index of the next binder that needs to be checked.\n\nThe `toOmit` array keeps track of which binders should be removed at the end,\nin particular the `variable_alias` binders and any redundant binders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.completeBinders'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">completeBinders'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxSteps </span><span class=\"fn\">gas</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">checkRedundant</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toOmit</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">Lean.TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L120-L150","name":"Mathlib.Command.Variable.getSubproblem","line":120,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.getSubproblem","doc":"Try elaborating `ty`. Returns `none` if it doesn't need any additional typeclasses,\nor it returns a new binder that needs to come first. Does not add info unless it throws\nan exception. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.getSubproblem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">getSubproblem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binder</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L104-L118","name":"Mathlib.Command.Variable.pendingActionableSynthMVar","line":104,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.pendingActionableSynthMVar","doc":"Find a synthetic typeclass metavariable with no expr metavariables in its type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.pendingActionableSynthMVar\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">pendingActionableSynthMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binder</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L84-L102","name":"Mathlib.Command.Variable.variableAliasAttr","line":84,"kind":"opaque","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variableAliasAttr","doc":"Attribute to record aliases for the `variable?` command. Aliases are structures that have no\nfields, and additional typeclasses are recorded as *arguments* to the structure.\n\nExample:\n```\n@[variable_alias]\nstructure VectorSpace (k V : Type*)\n  [Field k] [AddCommGroup V] [Module k V]\n```\nThen `variable? [VectorSpace k V]` ensures that these three typeclasses are present in\nthe current scope. Notice that it's looking at the arguments to the `VectorSpace` type\nconstructor. You should not have any fields in `variable_alias` structures.\n\nNotice that `VectorSpace` is not a class; the `variable?` command allows non-classes with the\n`variable_alias` attribute to use instance binders.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variableAliasAttr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">variableAliasAttr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">Lean.TagAttribute</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L46-L82","name":"Mathlib.Command.Variable.variable?","line":46,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?","doc":"The `variable?` command has the same syntax as `variable`, but it will auto-insert\nmissing instance arguments wherever they are needed.\nIt does not add variables that can already be deduced from others in the current context.\nBy default the command checks that variables aren't implied by earlier ones, but it does *not*\ncheck that earlier variables aren't implied by later ones.\nUnlike `variable`, the `variable?` command does not support changing variable binder types.\n\nThe `variable?` command will give a suggestion to replace itself with a command of the form\n`variable? ...binders... => ...binders...`.  The binders after the `=>` are the completed\nlist of binders. When this `=>` clause is present, the command verifies that the expanded\nbinders match the post-`=>` binders.  The purpose of this is to help keep code that uses\n`variable?` resilient against changes to the typeclass hierarchy, at least in the sense\nthat this additional information can be used to debug issues that might arise.\nOne can also replace `variable? ...binders... =>` with `variable`.\n\nThe core algorithm is to try elaborating binders one at a time, and whenever there is a\ntypeclass instance inference failure, it synthesizes binder syntax for it and adds it to\nthe list of binders and tries again, recursively. There are no guarantees that this\nprocess gives the \"correct\" list of binders.\n\nStructures tagged with the `variable_alias` attribute can serve as aliases for a collection\nof typeclasses. For example, given\n```lean\n@[variable_alias]\nstructure VectorSpace (k V : Type*) [Field k] [AddCommGroup V] [Module k V]\n```\nthen `variable? [VectorSpace k V]` is\nequivalent to `variable {k V : Type*} [Field k] [AddCommGroup V] [Module k V]`, assuming\nthat there are no pre-existing instances on `k` and `V`.\nNote that this is not a simple replacement: it only adds instances not inferable\nfrom others in the current scope.\n\nA word of warning: the core algorithm depends on pretty printing, so if terms that appear\nin binders do not round trip, this algorithm can fail. That said, it has some support\nfor quantified binders such as `[∀ i, F i]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">variable?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L38-L44","name":"Mathlib.Command.Variable.bracketedBinderType","line":38,"kind":"def","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.bracketedBinderType","doc":"Get the type out of a bracketed binder. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.bracketedBinderType\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">bracketedBinderType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L33-L36","name":"Mathlib.Command.Variable.variable?.checkRedundant","line":33,"kind":"opaque","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?.checkRedundant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?.checkRedundant\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">variable?</span>.<span class=\"name\">checkRedundant</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Variable.lean#L27-L31","name":"Mathlib.Command.Variable.variable?.maxSteps","line":27,"kind":"opaque","docLink":"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?.maxSteps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Variable.html#Mathlib.Command.Variable.variable?.maxSteps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">Variable</span>.<span class=\"name\">variable?</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"}]}