{"name":"Init.Data.Vector.Zip","instances":[],"imports":["Init.Data.Array.Zip","Init.Data.Vector.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L299-L300","name":"Vector.unzip_mkVector","line":299,"kind":"def","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_mkVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_mkVector\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_mkVector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L295-L297","name":"Vector.unzip_replicate","line":295,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_replicate\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L291-L293","name":"Vector.zip_of_prod","line":291,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_of_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_of_prod\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_of_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L285-L289","name":"Vector.unzip_zip","line":285,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">as</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">bs</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L279-L283","name":"Vector.unzip_zip_right","line":279,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_zip_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_zip_right\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_zip_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L273-L277","name":"Vector.unzip_zip_left","line":273,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_zip_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_zip_left\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_zip_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L269-L271","name":"Vector.zip_unzip","line":269,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_unzip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_unzip\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_unzip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L264-L266","name":"Vector.unzip_eq_map","line":264,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_eq_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_eq_map\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">xs</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\">xs</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L260-L262","name":"Vector.unzip_snd","line":260,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_snd\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α✝</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β✝</span>) <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L256-L258","name":"Vector.unzip_fst","line":256,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.unzip_fst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.unzip_fst\"><span class=\"name\">Vector</span>.<span class=\"name\">unzip_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β✝</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α✝</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β✝</span>) <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.unzip\">unzip</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L251-L252","name":"Vector.zip_mkVector","line":251,"kind":"def","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_mkVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_mkVector\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_mkVector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L247-L249","name":"Vector.zip_replicate","line":247,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_replicate\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L242-L245","name":"Vector.zip_eq_append_iff","line":242,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_eq_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_eq_append_iff\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_eq_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">as₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">as₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>       <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">bs₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>         <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">bs₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>           <span class=\"fn\"><span class=\"fn\">as₁</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">bs₁</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">as₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as₁</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as₂</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L235-L240","name":"Vector.map_prod_right_eq_zip","line":235,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_prod_right_eq_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_prod_right_eq_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">map_prod_right_eq_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L228-L233","name":"Vector.map_prod_left_eq_zip","line":228,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_prod_left_eq_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_prod_left_eq_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">map_prod_left_eq_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L222-L226","name":"Vector.map_snd_zip","line":222,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_snd_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_snd_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">map_snd_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.snd\">Prod.snd</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L215-L219","name":"Vector.map_fst_zip","line":215,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_fst_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_fst_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">map_fst_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <a href=\"./Init/Prelude.html#Prod.fst\">Prod.fst</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L209-L212","name":"Vector.of_mem_zip","line":209,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.of_mem_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.of_mem_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">of_mem_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L204-L207","name":"Vector.zip_map'","line":204,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_map'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_map'\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_map'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">g</span> <span class=\"fn\">xs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L196-L202","name":"Vector.zip_append","line":196,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_append\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as'</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs'</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">as'</span>).<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> (<span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as'</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L193-L194","name":"Vector.zip_map_right","line":193,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_map_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_map_right\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_map_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L190-L191","name":"Vector.zip_map_left","line":190,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_map_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_map_left\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_map_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#id\">id</a>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L184-L188","name":"Vector.zip_map","line":184,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_map\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">g</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Prod.map\">Prod.map</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L179-L182","name":"Vector.zip_eq_zipWith","line":179,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zip_eq_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zip_eq_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">zip_eq_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <a href=\"./Init/Prelude.html#Prod.mk\">Prod.mk</a> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L174-L177","name":"Vector.getElem_zip","line":174,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.getElem_zip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.getElem_zip\"><span class=\"name\">Vector</span>.<span class=\"name\">getElem_zip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">as</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">bs</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L166-L170","name":"Vector.reverse_zipWith","line":166,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.reverse_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.reverse_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">reverse_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.reverse\">reverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.reverse\">reverse</a></span> <span class=\"fn\"><span class=\"fn\">bs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.reverse\">reverse</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L160-L164","name":"Vector.map_zip_eq_zipWith","line":160,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_zip_eq_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_zip_eq_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">map_zip_eq_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(<a href=\"./Init/Data/Function.html#Function.curry\">Function.curry</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L154-L158","name":"Vector.map_uncurry_zip_eq_zipWith","line":154,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_uncurry_zip_eq_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_uncurry_zip_eq_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">map_uncurry_zip_eq_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Data/Function.html#Function.uncurry\">Function.uncurry</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L151-L152","name":"Vector.zipWith_mkVector","line":151,"kind":"def","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_mkVector","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_mkVector\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_mkVector</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L146-L149","name":"Vector.zipWith_replicate","line":146,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_replicate\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_replicate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">α✝</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L129-L144","name":"Vector.zipWith_eq_append_iff","line":129,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_eq_append_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_eq_append_iff\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_eq_append_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">m</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">ys</span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">as₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">as₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>       <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">bs₁</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>         <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">bs₂</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">as₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">as₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bs₁</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as₁</span> <span class=\"fn\">bs₁</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">ys</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as₂</span> <span class=\"fn\">bs₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L120-L127","name":"Vector.zipWith_append","line":120,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_append\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as'</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs'</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> (<span class=\"fn\">as</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">as'</span>) (<span class=\"fn\">bs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">bs'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as'</span> <span class=\"fn\">bs'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L115-L118","name":"Vector.extract_zipWith","line":115,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.extract_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.extract_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">extract_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝²</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α✝¹</span> → <span class=\"fn\">α✝²</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α✝</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α✝¹</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.extract\">extract</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L110-L113","name":"Vector.take_zipWith","line":110,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.take_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.take_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">take_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝¹</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝²</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <span class=\"fn\"><span class=\"fn\">α✝¹</span> → <span class=\"fn\">α✝²</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α✝</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α✝¹</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.take\">take</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.take\">take</a></span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">bs</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.take\">take</a></span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L104-L108","name":"Vector.map_zipWith","line":104,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.map_zipWith","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.map_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">map_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">γ</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">δ</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">g</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) (<span class=\"fn\">y</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span>)</span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L98-L102","name":"Vector.zipWith_foldl_eq_zip_foldl","line":98,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_foldl_eq_zip_foldl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_foldl_eq_zip_foldl\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_foldl_eq_zip_foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.foldl\">foldl</a> <span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.foldl\">foldl</a> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\">δ</span>) (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L92-L96","name":"Vector.zipWith_foldr_eq_zip_foldr","line":92,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_foldr_eq_zip_foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_foldr_eq_zip_foldr\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_foldr_eq_zip_foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\">δ</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.foldr\">foldr</a> <span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.foldr\">foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>) (<span class=\"fn\">r</span> : <span class=\"fn\">δ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>)</span> <span class=\"fn\">r</span></span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L86-L90","name":"Vector.zipWith_map_right","line":86,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_map_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_map_right\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_map_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">β'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β'</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">g</span> <span class=\"fn\">as</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">b</span>)</span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L80-L84","name":"Vector.zipWith_map_left","line":80,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_map_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_map_left\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_map_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span>)</span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L73-L78","name":"Vector.zipWith_map","line":73,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_map\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <span class=\"fn\">μ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">g</span> <span class=\"fn\">as</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">h</span> <span class=\"fn\">bs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">b</span>)</span></span>)</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L67-L71","name":"Vector.getElem?_zip_eq_some","line":67,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.getElem?_zip_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.getElem?_zip_eq_some\"><span class=\"name\">Vector</span>.<span class=\"name\">getElem?_zip_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/Vector/Basic.html#Vector.zip\">zip</a></span> <span class=\"fn\">bs</span>)</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">as</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">bs</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L60-L65","name":"Vector.getElem?_zipWith_eq_some","line":60,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith_eq_some","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith_eq_some\"><span class=\"name\">Vector</span>.<span class=\"name\">getElem?_zipWith_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">z</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">as</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">bs</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L53-L58","name":"Vector.getElem?_zipWith'","line":53,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith'","doc":"Variant of `getElem?_zipWith` using `Option.map` and `Option.bind` rather than a `match`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith'\"><span class=\"name\">Vector</span>.<span class=\"name\">getElem?_zipWith'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.map\">Option.map</a> <span class=\"fn\">g</span> <span class=\"fn\">bs</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L41-L51","name":"Vector.getElem?_zipWith","line":41,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith","doc":"See also `getElem?_zipWith'` for a variant\nusing `Option.map` and `Option.bind` rather than a `match`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.getElem?_zipWith\"><span class=\"name\">Vector</span>.<span class=\"name\">getElem?_zipWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span>)</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">as</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a>, <span class=\"fn\">bs</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>, <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">b</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span>)</span></span>\n  | <span class=\"fn\">x</span>, <span class=\"fn\">x_1</span> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L36-L39","name":"Vector.zipWith_self","line":36,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_self\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">xs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">a</span></span>)</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L31-L34","name":"Vector.zipWith_comm_of_comm","line":31,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_comm_of_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_comm_of_comm\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_comm_of_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">comm</span> : <span class=\"fn\">∀ (<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs </span><span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">ys</span> <span class=\"fn\">xs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Init/Data/Vector/Zip.lean#L25-L29","name":"Vector.zipWith_comm","line":25,"kind":"theorem","docLink":"./Init/Data/Vector/Zip.html#Vector.zipWith_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Vector/Zip.html#Vector.zipWith_comm\"><span class=\"name\">Vector</span>.<span class=\"name\">zipWith_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector\">Vector</a> <span class=\"fn\">β</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">f</span> <span class=\"fn\">as</span> <span class=\"fn\">bs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Vector/Basic.html#Vector.zipWith\">zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\">bs</span> <span class=\"fn\">as</span></span></div></div>"}]}