{"name":"Qq.Macro","instances":[{"typeNames":["Qq.Impl.QuoteM","Qq.Impl.UnquoteM"],"name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","className":"MonadLift"}],"imports":["Init","Lean","Qq.ForLean.ReduceEval","Qq.ForLean.ToExpr","Qq.Typ"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L608-L612","name":"Qq.Impl.floatExprAntiquot","line":608,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta.html#Lean.Syntax.Ident\">Lean.Ident</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L585-L605","name":"Qq.Impl.floatExprAntiquot'","line":585,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatExprAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatExprAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L573-L582","name":"Qq.Impl.floatLevelAntiquot'","line":573,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.floatLevelAntiquot'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatLevelAntiquot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>))</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L561-L562","name":"Qq.«term_=Q_»","line":561,"kind":"def","docLink":"./Qq/Macro.html#Qq.«term_=Q_»","doc":"`a =Q b` says that `a` and `b` are definitionally equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=Q_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=Q_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L549-L550","name":"Qq.«termQ(__)_1»","line":549,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQ(__)_1»","doc":"`Q(α)` is the type of Lean expressions having type `α`.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)_1»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)_1»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L530-L531","name":"Qq.«termQ(__)»","line":530,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQ(__)»","doc":"`q(t)` quotes the Lean expression `t` into a `Q(α)` (if `t : α`) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQ(__)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQ(__)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L491-L528","name":"Qq.Impl.macro","line":491,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.macro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.macro\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">macro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L487-L488","name":"Qq.«term_=QL_»","line":487,"kind":"def","docLink":"./Qq/Macro.html#Qq.«term_=QL_»","doc":"`a =QL b` says that the levels `a` and `b` are definitionally equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«term_=QL_»\"><span class=\"name\">Qq</span>.<span class=\"name\">«term_=QL_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L478-L485","name":"Qq.«termQl(_)»","line":478,"kind":"def","docLink":"./Qq/Macro.html#Qq.«termQl(_)»","doc":"`ql(u)` quotes the universe level `u`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.«termQl(_)»\"><span class=\"name\">Qq</span>.<span class=\"name\">«termQl(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L460-L476","name":"Qq.Impl.UnquoteState.withLevelNames","line":460,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.withLevelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">withLevelNames</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L452-L458","name":"Qq.withProcessPostponed","line":452,"kind":"def","docLink":"./Qq/Macro.html#Qq.withProcessPostponed","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.withProcessPostponed\"><span class=\"name\">Qq</span>.<span class=\"name\">withProcessPostponed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L445-L446","name":"Qq.Impl.lctxHasMVar","line":445,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.lctxHasMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.lctxHasMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">lctxHasMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L440-L443","name":"Qq.Impl.MVarSynth.synth","line":440,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.synth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.synth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">synth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L435-L438","name":"Qq.Impl.MVarSynth.isAssigned","line":435,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.isAssigned\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">isAssigned</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L431-L433","name":"Qq.Impl.unquoteMVar","line":431,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L415-L429","name":"Qq.Impl.unquoteMVarCore","line":415,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteMVarCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteMVarCore\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteMVarCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L382-L413","name":"Qq.Impl.quoteExpr","line":382,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.quoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L376-L380","name":"Qq.Impl.quoteLevelList","line":376,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevelList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevelList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L358-L374","name":"Qq.Impl.quoteLevel","line":358,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.quoteLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.quoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">quoteLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L349-L356","name":"Qq.Impl.isLevelFVar","line":349,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isLevelFVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isLevelFVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isLevelFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L308-L347","name":"Qq.Impl.unquoteLCtx","line":308,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLCtx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L291-L306","name":"Qq.Impl.unquoteLevelLCtx","line":291,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelLCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addDefEqs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L285-L289","name":"Qq.Impl.substLevel","line":285,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.substLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.substLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">substLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L233-L281","name":"Qq.Impl.unquoteExpr","line":233,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExpr\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L220-L231","name":"Qq.Impl.unquoteExprMVar","line":220,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L211-L218","name":"Qq.Impl.unquoteExprList","line":211,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteExprList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteExprList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteExprList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L204-L207","name":"Qq.Impl.makeDefEq","line":204,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.makeDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L193-L202","name":"Qq.Impl.makeZetaReduce","line":193,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.makeZetaReduce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.makeZetaReduce\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeZetaReduce</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L190-L191","name":"Qq.Impl.betaRev'","line":190,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.betaRev'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.betaRev'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">betaRev'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L177-L188","name":"Qq.Impl.mkAbstractedName","line":177,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L168-L175","name":"Qq.Impl.unquoteLevelList","line":168,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelList\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L157-L164","name":"Qq.Impl.unquoteLevelMVar","line":157,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevelMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevelMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L134-L155","name":"Qq.Impl.unquoteLevel","line":134,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.unquoteLevel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.unquoteLevel\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L129-L130","name":"Qq.Impl.whnfR","line":129,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.whnfR","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnfR\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnfR</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L122-L127","name":"Qq.Impl.whnf","line":122,"kind":"opaque","docLink":"./Qq/Macro.html#Qq.Impl.whnf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.whnf\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">whnf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e0</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> := <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L116-L119","name":"Qq.Impl.isBad","line":116,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isBad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isBad\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isBad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L109-L114","name":"Qq.Impl.isAssignablePattern","line":109,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.isAssignablePattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.isAssignablePattern\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isAssignablePattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L106-L107","name":"Qq.Impl.mkAbstractedLevelName","line":106,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.mkAbstractedLevelName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkAbstractedLevelName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L101-L104","name":"Qq.Impl.addSyntaxDollar","line":101,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.addSyntaxDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addSyntaxDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addSyntaxDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L92-L99","name":"Qq.Impl.stripDollars","line":92,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.stripDollars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.stripDollars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">stripDollars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L83-L89","name":"Qq.Impl.removeDollar","line":83,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.removeDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.removeDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">removeDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L76-L80","name":"Qq.Impl.addDollar","line":76,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.addDollar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.addDollar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">addDollar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L71-L73","name":"Qq.Impl.withUnquotedLCtx","line":71,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.withUnquotedLCtx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">withUnquotedLCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#MonadControlT\">MonadControlT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L63-L69","name":"Qq.Impl.determineLocalInstances","line":63,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.determineLocalInstances","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.determineLocalInstances\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">determineLocalInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L60-L61","name":"Qq.Impl.instMonadLiftQuoteMUnquoteM","line":60,"kind":"instance","docLink":"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.instMonadLiftQuoteMUnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">instMonadLiftQuoteMUnquoteM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Qq/Macro.html#Qq.Impl.QuoteM\">QuoteM</a> <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L58-L58","name":"Qq.Impl.QuoteM","line":58,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.QuoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.QuoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">QuoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L56-L56","name":"Qq.Impl.UnquoteM","line":56,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L54-L54","name":"Qq.Impl.UnquoteState.mayPostpone","line":54,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mayPostpone\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mayPostpone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L52-L52","name":"Qq.Impl.UnquoteState.levelNames","line":52,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelNames\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L50-L50","name":"Qq.Impl.UnquoteState.abstractedFVars","line":50,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars","doc":"New free variables in the new context that were newly introduced for irreducible expressions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.abstractedFVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">abstractedFVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L47-L47","name":"Qq.Impl.UnquoteState.levelBackSubst","line":47,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst","doc":"Maps free variables in the new context to levels in the old context (of type Level) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L44-L44","name":"Qq.Impl.UnquoteState.exprBackSubst","line":44,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst","doc":"Maps free variables in the new context to expressions in the old context (of type Expr) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprBackSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprBackSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L41-L41","name":"Qq.Impl.UnquoteState.unquoted","line":41,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted","doc":"New unquoted local context "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L38-L38","name":"Qq.Impl.UnquoteState.exprSubst","line":38,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst","doc":"Maps quoted expressions (of type Expr) in the old context to expressions in the new context "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.exprSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">exprSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L35-L35","name":"Qq.Impl.UnquoteState.levelSubst","line":35,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst","doc":"Maps quoted expressions (of type Level) in the old context to level parameter names in the new context "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.levelSubst\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">levelSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L32-L32","name":"Qq.Impl.UnquoteState.mvars","line":32,"kind":"def","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars","doc":"Quoted mvars in the outside lctx (of type `Level`, `Quoted _`, or `Type`).\nThe outside mvars can also be of the form `?m x y z`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mvars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L27-L27","name":"Qq.Impl.UnquoteState.mk","line":27,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquoted</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exprBackSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelBackSubst</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">abstractedFVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mayPostpone</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\">UnquoteState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L27-L54","name":"Qq.Impl.UnquoteState","line":27,"kind":"structure","docLink":"./Qq/Macro.html#Qq.Impl.UnquoteState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.UnquoteState\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">UnquoteState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L25-L25","name":"Qq.Impl.MVarSynth.level","line":25,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.level","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.level\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">level</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L24-L24","name":"Qq.Impl.MVarSynth.type","line":24,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.type","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.type\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L23-L23","name":"Qq.Impl.MVarSynth.term","line":23,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth.term","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth.term\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quotedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">unquotedMVar</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\">MVarSynth</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L22-L25","name":"Qq.Impl.MVarSynth","line":22,"kind":"inductive","docLink":"./Qq/Macro.html#Qq.Impl.MVarSynth","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.MVarSynth\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">MVarSynth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L20-L20","name":"Qq.Impl.ExprBackSubstResult.unquoted","line":20,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.unquoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">unquoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L19-L19","name":"Qq.Impl.ExprBackSubstResult.quoted","line":19,"kind":"ctor","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult.quoted\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span>.<span class=\"name\">quoted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\">ExprBackSubstResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Macro.lean#L18-L20","name":"Qq.Impl.ExprBackSubstResult","line":18,"kind":"inductive","docLink":"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Macro.html#Qq.Impl.ExprBackSubstResult\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">ExprBackSubstResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}