{"name":"Mathlib.Control.Bitraversable.Basic","instances":[],"imports":["Init","Mathlib.Control.Bifunctor","Mathlib.Control.Traversable.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L83-L83","name":"LawfulBitraversable.bitraverse_eq_bimap_id'","line":83,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_eq_bimap_id'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_eq_bimap_id'\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">bitraverse_eq_bimap_id'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">β'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor.bimap\">bimap</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L83-L83","name":"LawfulBitraversable.binaturality'","line":83,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.binaturality'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.binaturality'\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">binaturality'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L81-L81","name":"LawfulBitraversable.bitraverse_comp","line":81,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_comp\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">bitraverse_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β' </span><span class=\"fn\">γ </span><span class=\"fn\">γ'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g'</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span>)</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">g</span> <span class=\"fn\">g'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L79-L79","name":"LawfulBitraversable.bitraverse_id_id","line":79,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_id_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_id_id\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">bitraverse_id_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L70-L70","name":"LawfulBitraversable.binaturality","line":70,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.binaturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.binaturality\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">binaturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>) <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L67-L67","name":"LawfulBitraversable.bitraverse_eq_bimap_id","line":67,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_eq_bimap_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.bitraverse_eq_bimap_id\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">bitraverse_eq_bimap_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">β'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor.bimap\">bimap</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L62-L62","name":"LawfulBitraversable.comp_bitraverse","line":62,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.comp_bitraverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.comp_bitraverse\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">comp_bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β' </span><span class=\"fn\">γ </span><span class=\"fn\">γ'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g'</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> (<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">g</span> <span class=\"fn\">g'</span> <span class=\"fn\">x</span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L61-L61","name":"LawfulBitraversable.id_bitraverse","line":61,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.id_bitraverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.id_bitraverse\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">id_bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L58-L58","name":"LawfulBitraversable.mk","line":58,"kind":"ctor","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.mk\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toLawfulBifunctor</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#LawfulBifunctor\">LawfulBifunctor</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id_bitraverse</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span>), <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">comp_bitraverse</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>] [<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]\n    [<span class=\"fn\">inst_3</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>] {<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β' </span><span class=\"fn\">γ </span><span class=\"fn\">γ'</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ</span></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">γ'</span></span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β</span></span></span>)\n    (<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">G</span> <span class=\"fn\">β'</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g</span>) (<a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Functor.map\">Functor.map</a> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">g'</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Comp.mk\">Functor.Comp.mk</a> (<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">g</span> <span class=\"fn\">g'</span> <span class=\"fn\">x</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitraverse_eq_bimap_id</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\">β'</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>),\n    <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor.bimap\">bimap</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binaturality</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">G</span></span>] [<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">F</span></span>]\n    [<span class=\"fn\">inst_3</span> : <span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulApplicative\">LawfulApplicative</a> <span class=\"fn\">G</span></span>] (<span class=\"fn\">η</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation\">ApplicativeTransformation</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span>) {<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β</span></span></span>)\n    (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span>),\n    <span class=\"fn\"><span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>       <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\">bitraverse</a> (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) (<span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">η</span>.<a href=\"./Mathlib/Control/Traversable/Basic.html#ApplicativeTransformation.app\">app</a></span> <span class=\"fn\">α</span></span>)</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f'</span>) <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L58-L73","name":"LawfulBitraversable.toLawfulBifunctor","line":58,"kind":"theorem","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.toLawfulBifunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable.toLawfulBifunctor\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">toLawfulBifunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#LawfulBifunctor\">LawfulBifunctor</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L57-L73","name":"LawfulBitraversable","line":57,"kind":"class","docLink":"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable","doc":"Bifunctor. This typeclass asserts that a lawless bitraversable bifunctor is lawful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\"><span class=\"name\">LawfulBitraversable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#LawfulBifunctor\">LawfulBifunctor</a> <span class=\"fn\">t</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L51-L53","name":"bisequence","line":51,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Basic.html#bisequence","doc":"A bitraversable functor commutes with all applicative functors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#bisequence\"><span class=\"name\">bisequence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">β</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L45-L45","name":"Bitraversable.bitraverse","line":45,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.bitraverse\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α'</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β'</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">α'</span> <span class=\"fn\">β'</span>)</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L44-L44","name":"Bitraversable.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.mk\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toBifunctor</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor\">Bifunctor</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitraverse</span> :\n  <span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>] → <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α'</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β'</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">α'</span> <span class=\"fn\">β'</span>)</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L44-L47","name":"Bitraversable.toBifunctor","line":44,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.toBifunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable.toBifunctor\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">toBifunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor\">Bifunctor</a> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Basic.lean#L43-L47","name":"Bitraversable","line":43,"kind":"class","docLink":"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable","doc":"Lawless bitraversable bifunctor. This only holds data for the bimap and bitraverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\"><span class=\"name\">Bitraversable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Control/Bifunctor.html#Bifunctor\">Bifunctor</a> <span class=\"fn\">t</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u + 1)</div></div>"}]}