{"name":"Mathlib.Data.String.Basic","instances":[{"typeNames":["String"],"name":"String.LT'","className":"LT"},{"typeNames":["LT.lt"],"name":"String.decidableLT'","className":"Decidable"},{"typeNames":["String"],"name":"String.LE","className":"LE"},{"typeNames":["LE.le"],"name":"String.decidableLE","className":"Decidable"},{"typeNames":["String"],"name":"String.instLinearOrder","className":"LinearOrder"}],"imports":["Init","Batteries.Data.String.Lemmas","Mathlib.Data.List.Lex","Mathlib.Data.Char","Mathlib.Algebra.Order.Group.Nat"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L180-L182","name":"String.length_data","line":180,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.length_data","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.length_data\"><span class=\"name\">String</span>.<span class=\"name\">length_data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L175-L176","name":"List.asString_eq","line":175,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.asString_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.asString_eq\"><span class=\"name\">List</span>.<span class=\"name\">asString_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L170-L173","name":"List.asString_inj","line":170,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.asString_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.asString_inj\"><span class=\"name\">List</span>.<span class=\"name\">asString_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l </span><span class=\"fn\">l'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l'</span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L166-L168","name":"List.length_asString","line":166,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.length_asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.length_asString\"><span class=\"name\">List</span>.<span class=\"name\">length_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L163-L164","name":"List.toList_asString","line":163,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#List.toList_asString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#List.toList_asString\"><span class=\"name\">List</span>.<span class=\"name\">toList_asString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L138-L155","name":"String.instLinearOrder","line":138,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.instLinearOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.instLinearOrder\"><span class=\"name\">String</span>.<span class=\"name\">instLinearOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L134-L136","name":"String.head_empty","line":134,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.head_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.head_empty\"><span class=\"name\">String</span>.<span class=\"name\">head_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Inhabited.default\">default</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L126-L132","name":"String.toList_nonempty","line":126,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_nonempty\"><span class=\"name\">String</span>.<span class=\"name\">toList_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">&quot;&quot;</span> → <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/String/Defs.html#String.head\">head</a></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.drop\">drop</a></span> <span class=\"fn\">1</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L123-L124","name":"String.asString_toList","line":123,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.asString_toList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.asString_toList\"><span class=\"name\">String</span>.<span class=\"name\">asString_toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L119-L121","name":"String.toList_empty","line":119,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_empty\"><span class=\"name\">String</span>.<span class=\"name\">toList_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L116-L117","name":"String.asString_nil","line":116,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.asString_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.asString_nil\"><span class=\"name\">String</span>.<span class=\"name\">asString_nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>.<a href=\"./Init/Data/String/Basic.html#List.asString\">asString</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">&quot;&quot;</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L113-L114","name":"String.toList_inj","line":113,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.toList_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.toList_inj\"><span class=\"name\">String</span>.<span class=\"name\">toList_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s₂</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L109-L111","name":"String.le_iff_toList_le","line":109,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.le_iff_toList_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.le_iff_toList_le\"><span class=\"name\">String</span>.<span class=\"name\">le_iff_toList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L105-L107","name":"String.decidableLE","line":105,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.decidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.decidableLE\"><span class=\"name\">String</span>.<span class=\"name\">decidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L102-L103","name":"String.LE","line":102,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.LE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.LE\"><span class=\"name\">String</span>.<span class=\"name\">LE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">_root_.LE</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L75-L100","name":"String.lt_iff_toList_lt","line":75,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.lt_iff_toList_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.lt_iff_toList_lt\"><span class=\"name\">String</span>.<span class=\"name\">lt_iff_toList_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s₁</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s₂</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.toList\">toList</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L59-L73","name":"String.ltb_cons_addChar","line":59,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.ltb_cons_addChar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb_cons_addChar\"><span class=\"name\">String</span>.<span class=\"name\">ltb_cons_addChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs₁ </span><span class=\"fn\">cs₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/String/Basic.html#String.ltb\">ltb</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs₁</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">cs₂</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/String/Basic.html#String.ltb\">ltb</a> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs₁</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">cs₂</span> }</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L40-L57","name":"String.ltb.inductionOn","line":40,"kind":"def","docLink":"./Mathlib/Data/String/Basic.html#String.ltb.inductionOn","doc":"Induction on `String.ltb`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb.inductionOn\"><span class=\"name\">String</span>.<span class=\"name\">ltb</span>.<span class=\"name\">inductionOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a> → <a href=\"./foundational_types.html\">Sort</a> u</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it₁ </span><span class=\"fn\">it₂</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ind</span> :\n  <span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>) →\n    <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n          <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i₂</span></span> →\n            <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span> <span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span></span> →\n              <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eq</span> :\n  <span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>) →\n    <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n        <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₁</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s₂</span>.<a href=\"./Init/Data/String/Basic.html#String.get\">get</a></span> <span class=\"fn\">i₂</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">base₁</span> :\n  <span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>) →\n    <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) →\n      <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n        <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">base₂</span> :\n  <span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Prelude.html#String\">String</a>) →\n    <span class=\"fn\">(<span class=\"fn\">i₁ </span><span class=\"fn\">i₂</span> : <a href=\"./Init/Prelude.html#String.Pos\">Pos</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₁</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₁</span> }</span> <span class=\"fn\">{ <span class=\"fn\">s</span> := <span class=\"fn\">s₂</span>, <span class=\"fn\">i</span> := <span class=\"fn\">i₂</span> }</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">it₁</span> <span class=\"fn\">it₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L35-L38","name":"String.decidableLT'","line":35,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.decidableLT'","doc":"This instance has a prime to avoid the name of the corresponding instance in core Lean. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.decidableLT'\"><span class=\"name\">String</span>.<span class=\"name\">decidableLT'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L31-L33","name":"String.LT'","line":31,"kind":"instance","docLink":"./Mathlib/Data/String/Basic.html#String.LT'","doc":"This overrides an instance in core Lean. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.LT'\"><span class=\"name\">String</span>.<span class=\"name\">LT'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L21-L29","name":"String.ltb","line":21,"kind":"def","docLink":"./Mathlib/Data/String/Basic.html#String.ltb","doc":"`<` on string iterators. This coincides with `<` on strings as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.ltb\"><span class=\"name\">String</span>.<span class=\"name\">ltb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Basic.lean#L19-L19","name":"String.endPos_empty","line":19,"kind":"theorem","docLink":"./Mathlib/Data/String/Basic.html#String.endPos_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Basic.html#String.endPos_empty\"><span class=\"name\">String</span>.<span class=\"name\">endPos_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">&quot;&quot;</span>.<a href=\"./Init/Prelude.html#String.endPos\">endPos</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"}]}