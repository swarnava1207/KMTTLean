{"name":"Mathlib.NumberTheory.LegendreSymbol.GaussEisensteinLemmas","instances":[],"imports":["Init","Mathlib.Data.Nat.Prime.Factorial","Mathlib.NumberTheory.LegendreSymbol.Basic","Mathlib.Analysis.Normed.Ring.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L217-L224","name":"ZMod.eisenstein_lemma","line":217,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.eisenstein_lemma","doc":"**Eisenstein's lemma** "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.eisenstein_lemma\"><span class=\"name\">ZMod</span>.<span class=\"name\">eisenstein_lemma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha1</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha0</span> : <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">↑<span class=\"fn\">a</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">∑ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L180-L215","name":"ZMod.sum_mul_div_add_sum_mul_div_eq_mul","line":180,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.sum_mul_div_add_sum_mul_div_eq_mul","doc":"Each of the sums in this lemma is the cardinality of the set of integer points in each of the\ntwo triangles formed by the diagonal of the rectangle `(0, p/2) × (0, q/2)`. Adding them\ngives the number of points in the rectangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.sum_mul_div_add_sum_mul_div_eq_mul\"><span class=\"name\">ZMod</span>.<span class=\"name\">sum_mul_div_add_sum_mul_div_eq_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq0</span> : <span class=\"fn\">↑<span class=\"fn\">q</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∑ <span class=\"fn\">a</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">∑ <span class=\"fn\">a</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>, <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L149-L156","name":"ZMod.div_eq_filter_card","line":149,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.div_eq_filter_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.div_eq_filter_card\"><span class=\"name\">ZMod</span>.<span class=\"name\">div_eq_filter_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb0</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> | <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L139-L147","name":"ZMod.eisenstein_lemma_aux","line":139,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.eisenstein_lemma_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.eisenstein_lemma_aux\"><span class=\"name\">ZMod</span>.<span class=\"name\">eisenstein_lemma_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha2</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hap</span> : <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> | <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span>).<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">∑ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">2</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L98-L108","name":"ZMod.gauss_lemma","line":98,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.gauss_lemma","doc":"**Gauss' lemma**. The Legendre symbol can be computed by considering the number of naturals less\nthan `p/2` such that `(a * x) % p > p / 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.gauss_lemma\"><span class=\"name\">ZMod</span>.<span class=\"name\">gauss_lemma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha0</span> : <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/LegendreSymbol/Basic.html#legendreSym\">legendreSym</a> <span class=\"fn\">p</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> | <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span>).<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L90-L96","name":"ZMod.gauss_lemma_aux","line":90,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.gauss_lemma_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.gauss_lemma_aux\"><span class=\"name\">ZMod</span>.<span class=\"name\">gauss_lemma_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hap</span> : <span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑(<span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">{<span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> | <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">(<span class=\"fn\">↑<span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span>).<a href=\"./Mathlib/Data/ZMod/Basic.html#ZMod.val\">val</a></span>}</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.lean#L26-L59","name":"ZMod.Ico_map_valMinAbs_natAbs_eq_Ico_map_id","line":26,"kind":"theorem","docLink":"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.Ico_map_valMinAbs_natAbs_eq_Ico_map_id","doc":"The image of the map sending a nonzero natural number `x ≤ p / 2` to the absolute value\nof the integer in `(-p/2, p/2]` that is congruent to `a * x mod p` is the set\nof nonzero natural numbers `x` such that `x ≤ p / 2`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/LegendreSymbol/GaussEisensteinLemmas.html#ZMod.Ico_map_valMinAbs_natAbs_eq_Ico_map_id\"><span class=\"name\">ZMod</span>.<span class=\"name\">Ico_map_valMinAbs_natAbs_eq_Ico_map_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hp</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Nat.Prime</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/ZMod/Defs.html#ZMod\">ZMod</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hap</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/MapFold.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span>).<a href=\"./Mathlib/Data/ZMod/ValMinAbs.html#ZMod.valMinAbs\">valMinAbs</a></span>.<a href=\"./Init/Data/Int/Basic.html#Int.natAbs\">natAbs</a></span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span>.<a href=\"./Mathlib/Data/Finset/Defs.html#Finset.val\">val</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/Multiset/MapFold.html#Multiset.map\">Multiset.map</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ico\">Finset.Ico</a> <span class=\"fn\">1</span> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>).<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span>.<a href=\"./Mathlib/Data/Finset/Defs.html#Finset.val\">val</a></span></span></div></div>"}]}