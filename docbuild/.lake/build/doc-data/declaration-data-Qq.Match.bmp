{"name":"Qq.Match","instances":[],"imports":["Init","Qq.Macro","Qq.MetaM","Qq.ForLean.Do","Qq.SortLocalDecls"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L387-L389","name":"Qq.unpackParensIdent","line":387,"kind":"opaque","docLink":"./Qq/Match.html#Qq.unpackParensIdent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.unpackParensIdent\"><span class=\"name\">Qq</span>.<span class=\"name\">unpackParensIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L374-L382","name":"Qq.Impl.floatQMatch","line":374,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.floatQMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.floatQMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">floatQMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeq</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeqItem</span>))</span> <a href=\"./Init/Prelude.html#Lean.MacroM\">Lean.MacroM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L370-L372","name":"Qq.Impl.hasQMatch","line":370,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.hasQMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.hasQMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">hasQMatch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L335-L368","name":"Qq.matcher","line":335,"kind":"def","docLink":"./Qq/Match.html#Qq.matcher","doc":"`Qq`s expression matching in `MetaM`, up to reducible defeq.\n\nThis syntax is valid in `match`, `let`, and `if let`, but not `fun`.\n\nThe usage is very similar to the builtin `Syntax`-matching that uses `` `(<pattern>)`` notation.\nAs an example, consider matching against a `n : Q(ℕ)`, which can be written\n\n* With a `match` expression,\n  ```\n  match n with\n  | ~q(Nat.gcd $x $y) => handleGcd x y\n  | ~q($x + $y) => handleAdd x y\n  | _ => throwError \"no match\"\n  ```\n* With a `let` expression (if there is a single match)\n  ```\n  let ~q(Nat.gcd $x $y) := n | throwError \"no match\"\n  handleGcd x y\n  ```\n* With an `if let` statement\n  ```\n  if let ~q(Nat.gcd $x $y) := n then\n    handleGcd x y\n  else if let ~q($x + $y) := n then\n    handleAdd x y\n  else\n    throwError \"no match\"\n  ```\n\nIn addition to the obvious `x` and `y` captures,\nin the example above `~q` also inserts into the context a term of type `$n =Q Nat.gcd $x $y`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.matcher\"><span class=\"name\">Qq</span>.<span class=\"name\">matcher</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L320-L327","name":"Qq.Impl.mkLetDoSeqItem","line":320,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLetDoSeqItem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLetDoSeqItem\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLetDoSeqItem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">Lean.MonadQuotation</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeq</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">Lean.TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.doSeqItem</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L317-L318","name":"Qq.Impl.doElemComefrom_Do_","line":317,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.doElemComefrom_Do_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.doElemComefrom_Do_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">doElemComefrom_Do_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L314-L314","name":"Qq.Impl.term_comefrom_Do_","line":314,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.term_comefrom_Do_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.term_comefrom_Do_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">term_comefrom_Do_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L309-L312","name":"Qq.Impl.term_comefrom_Do_In_","line":309,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.term_comefrom_Do_In_","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.term_comefrom_Do_In_\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">term_comefrom_Do_In_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L301-L307","name":"Qq.Impl.isIrrefutablePattern","line":301,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.isIrrefutablePattern","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.isIrrefutablePattern\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">isIrrefutablePattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L297-L297","name":"Qq.Impl.«term_qq_match_:=_|_»","line":297,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.«term_qq_match_:=_|_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.«term_qq_match_:=_|_»\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">«term_qq_match_:=_|_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L264-L295","name":"Qq.Impl.«term_qq_match_←_|_In_»","line":264,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.«term_qq_match_←_|_In_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.«term_qq_match_←_|_In_»\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">«term_qq_match_←_|_In_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L226-L262","name":"Qq.Impl.elabPat","line":226,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.elabPat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.elabPat\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">elabPat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInsts</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L217-L225","name":"Qq.Impl.getPatVars.mkMVar","line":217,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.getPatVars.mkMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars.mkMVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span>.<span class=\"name\">mkMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L213-L215","name":"Qq.Impl.getPatVars.isPatVar","line":213,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.getPatVars.isPatVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars.isPatVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span>.<span class=\"name\">isPatVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L203-L225","name":"Qq.Impl.getPatVars","line":203,"kind":"opaque","docLink":"./Qq/Match.html#Qq.Impl.getPatVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.getPatVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">getPatVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span> <a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L201-L201","name":"Qq.Impl.PatternVar.stx","line":201,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatternVar.stx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar.stx\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L200-L200","name":"Qq.Impl.PatternVar.mvar","line":200,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatternVar.mvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar.mvar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span>.<span class=\"name\">mvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L199-L199","name":"Qq.Impl.PatternVar.arity","line":199,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatternVar.arity","doc":"Pattern variables can be functions; if so, this is their arity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar.arity\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span>.<span class=\"name\">arity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L197-L197","name":"Qq.Impl.PatternVar.name","line":197,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatternVar.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar.name\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L196-L196","name":"Qq.Impl.PatternVar.mk","line":196,"kind":"ctor","docLink":"./Qq/Match.html#Qq.Impl.PatternVar.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta.html#Lean.Syntax.Term\">Lean.Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Match.html#Qq.Impl.PatternVar\">PatternVar</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L196-L201","name":"Qq.Impl.PatternVar","line":196,"kind":"structure","docLink":"./Qq/Match.html#Qq.Impl.PatternVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatternVar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatternVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L191-L194","name":"Qq.Impl.mkNAryFunctionType","line":191,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkNAryFunctionType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkNAryFunctionType\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkNAryFunctionType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L185-L189","name":"Qq.Impl.unquoteForMatch","line":185,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.unquoteForMatch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.unquoteForMatch\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">unquoteForMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">et</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Macro.html#Qq.Impl.UnquoteM\">UnquoteM</a> (<a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L157-L183","name":"Qq.Impl.makeMatchCode","line":157,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.makeMatchCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.makeMatchCode\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">makeMatchCode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_instLift</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$m»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_instBind</span> : <span class=\"fn\">Q(<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">«$m»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uTy</span> : <span class=\"fn\">Q(<a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <span class=\"fn\">Q(<span class=\"fn\">Q(<a href=\"./foundational_types.html\">Sort</a> «$uTy»)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">discr</span> : <span class=\"fn\">Q(<span class=\"fn\">Q(<span class=\"fn\">«$$ty»</span>)</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\"><span class=\"fn\">«$m»</span> <span class=\"fn\">«$γ»</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L150-L155","name":"Qq.Impl.replaceTempExprsByQVars","line":150,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.replaceTempExprsByQVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.replaceTempExprsByQVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">replaceTempExprsByQVars</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L141-L147","name":"Qq.Impl.mkQqLets","line":141,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkQqLets","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkQqLets\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkQqLets</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span>)</span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$γ»</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <span class=\"fn\">Q(<span class=\"fn\">«$γ»</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L133-L134","name":"Qq.Impl.mkIsDefEq","line":133,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEq\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">discr</span> : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L119-L131","name":"Qq.Impl.mkIsDefEqCore","line":119,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqCore\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat </span><span class=\"fn\">discr</span> : <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span> →\n  <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n    <span class=\"fn\">(let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n    Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L105-L117","name":"Qq.Impl.mkInstantiateMVars","line":105,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkInstantiateMVars","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkInstantiateMVars\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkInstantiateMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls </span><span class=\"fn\">a✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a>\n  <span class=\"fn\">(let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">«$mkIsDefEqType_1»</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L99-L100","name":"Qq.Impl.mkLet'","line":99,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLet'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLet'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLet'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar </span><span class=\"fn\">ty </span><span class=\"fn\">val </span><span class=\"fn\">body</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L96-L97","name":"Qq.Impl.mkLambda'","line":96,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkLambda'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkLambda'\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkLambda'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar </span><span class=\"fn\">ty </span><span class=\"fn\">body</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L92-L94","name":"Qq.Impl.mkIsDefEqResultVal","line":92,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqResultVal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqResultVal\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqResultVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  <span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n  Q(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span>)</span> →\n  <span class=\"fn\">Q(<a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L88-L90","name":"Qq.Impl.mkIsDefEqResult","line":88,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqResult\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">a</span> := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\n<span class=\"fn\">let mkIsDefEqType_1 := <span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\">mkIsDefEqType</a> <span class=\"fn\">decls</span></span>;\nQ(<span class=\"fn\">«$mkIsDefEqType_1»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L84-L86","name":"Qq.Impl.mkIsDefEqType","line":84,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.mkIsDefEqType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.mkIsDefEqType\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">mkIsDefEqType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></span> → <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L81-L82","name":"Qq.Impl.PatVarDecl.fvar","line":81,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvar\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">let <span class=\"fn\">a</span> := <span class=\"fn\"><span class=\"fn\">decl</span>.<a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy\">fvarTy</a></span>;\n<span class=\"fn\">let match_1_1 :=\n  <span class=\"fn\">match <span class=\"fn\">decl</span> with\n  | <span class=\"fn\">{ <span class=\"fn\">ty</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>, <span class=\"fn\">fvarId</span> := <span class=\"fn\">fvarId</span>, <span class=\"fn\">userName</span> := <span class=\"fn\">userName</span> }</span> =&gt; <span class=\"fn\">q(<a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span>\n  | <span class=\"fn\">{ <span class=\"fn\">ty</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">val</span></span>, <span class=\"fn\">fvarId</span> := <span class=\"fn\">fvarId</span>, <span class=\"fn\">userName</span> := <span class=\"fn\">userName</span> }</span> =&gt; <span class=\"fn\">q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>;\nQ(<span class=\"fn\">«$match_1_1»</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L77-L79","name":"Qq.Impl.PatVarDecl.fvarTy","line":77,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarTy\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvarTy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a> → <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L75-L75","name":"Qq.Impl.PatVarDecl.userName","line":75,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.userName","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.userName\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">userName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L74-L74","name":"Qq.Impl.PatVarDecl.fvarId","line":74,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.fvarId\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L73-L73","name":"Qq.Impl.PatVarDecl.ty","line":73,"kind":"def","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.ty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.ty\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">ty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L72-L72","name":"Qq.Impl.PatVarDecl.mk","line":72,"kind":"ctor","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl.mk\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Q(<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">userName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\">PatVarDecl</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L72-L75","name":"Qq.Impl.PatVarDecl","line":72,"kind":"structure","docLink":"./Qq/Match.html#Qq.Impl.PatVarDecl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Qq.Impl.PatVarDecl\"><span class=\"name\">Qq</span>.<span class=\"name\">Impl</span>.<span class=\"name\">PatVarDecl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/quote4/blob/aa4c87abed970d9dfad2506000d99d30b02f476b/Qq/Match.lean#L59-L63","name":"Lean.Syntax.stripPos","line":59,"kind":"opaque","docLink":"./Qq/Match.html#Lean.Syntax.stripPos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Qq/Match.html#Lean.Syntax.stripPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">stripPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>"}]}