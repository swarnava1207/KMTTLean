{"name":"Mathlib.Util.AddRelatedDecl","instances":[],"imports":["Init","Mathlib.Init","Lean.Elab.DeclarationRange","Lean.Elab.Term"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/AddRelatedDecl.lean#L19-L74","name":"Mathlib.Tactic.addRelatedDecl","line":19,"kind":"def","docLink":"./Mathlib/Util/AddRelatedDecl.html#Mathlib.Tactic.addRelatedDecl","doc":"A helper function for constructing a related declaration from an existing one.\n\nThis is currently used by the attributes `reassoc` and `elementwise`,\nand has been factored out to avoid code duplication.\nFeel free to add features as needed for other applications.\n\nThis helper:\n* calls `addDeclarationRangesFromSyntax`, so jump-to-definition works,\n* copies the `protected` status of the existing declaration, and\n* supports copying attributes.\n\nArguments:\n* `src : Name` is the existing declaration that we are modifying.\n* `suffix : String` will be appended to `src` to form the name of the new declaration.\n* `ref : Syntax` is the syntax where the user requested the related declaration.\n* `construct type value levels : MetaM (Expr × List Name)`\n  given the type, value, and universe variables of the original declaration,\n  should construct the value of the new declaration,\n  along with the names of its universe variables.\n* `attrs` is the attributes that should be applied to both the new and the original declaration,\n  e.g. in the usage `@[reassoc (attr := simp)]`.\n  We apply it to both declarations, to have the same behavior as `to_additive`, and to shorten some\n  attribute commands. Note that `@[elementwise (attr := simp), reassoc (attr := simp)]` will try\n  to apply `simp` twice to the current declaration, but that causes no issues.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/AddRelatedDecl.html#Mathlib.Tactic.addRelatedDecl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">addRelatedDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Lean.Syntax.TSepArray</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span> <span class=\"fn\">&quot;,&quot;</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">construct</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}