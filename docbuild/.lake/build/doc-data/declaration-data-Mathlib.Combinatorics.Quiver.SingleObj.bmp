{"name":"Mathlib.Combinatorics.Quiver.SingleObj","instances":[{"typeNames":["Quiver.SingleObj"],"name":"Quiver.instUniqueSingleObj","className":"Unique"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.inst","className":"Quiver"},{"typeNames":["Quiver.SingleObj"],"name":"Quiver.SingleObj.instInhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Quiver.Cast","Mathlib.Combinatorics.Quiver.Symmetric"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L140-L143","name":"Quiver.SingleObj.pathEquivList_symm_cons","line":140,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\">pathEquivList</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\">pathEquivList</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">l</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L136-L138","name":"Quiver.SingleObj.pathEquivList_symm_nil","line":136,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_symm_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_symm_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\">pathEquivList</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">Path.nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L131-L134","name":"Quiver.SingleObj.pathEquivList_cons","line":131,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\">pathEquivList</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">pathToList</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L127-L129","name":"Quiver.SingleObj.pathEquivList_nil","line":127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\">pathEquivList</a> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">Path.nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L123-L125","name":"Quiver.SingleObj.pathEquivList","line":123,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList","doc":"Paths in `SingleObj α` quiver correspond to lists of elements of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathEquivList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathEquivList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L118-L121","name":"Quiver.SingleObj.pathToList_listToPath","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList_listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList_listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">pathToList</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">listToPath</a> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L112-L116","name":"Quiver.SingleObj.listToPath_pathToList","line":112,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath_pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath_pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\">listToPath</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\">pathToList</a> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">Path.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L104-L110","name":"Quiver.SingleObj.listToPath","line":104,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a list of elements of type `α` into a path in the quiver `SingleObj α`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.listToPath\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">listToPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L97-L102","name":"Quiver.SingleObj.pathToList","line":97,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList","doc":"Auxiliary definition for `quiver.SingleObj.pathEquivList`.\nConverts a path in the quiver `single_obj α` into a list of elements of type `a`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.pathToList\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">pathToList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L92-L95","name":"Quiver.SingleObj.toPrefunctor_symm_comp","line":92,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">β</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> (<span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\">g</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L88-L90","name":"Quiver.SingleObj.toPrefunctor_comp","line":88,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_comp\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">⋙q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L84-L86","name":"Quiver.SingleObj.toPrefunctor_symm_id","line":84,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#id\">id</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L81-L82","name":"Quiver.SingleObj.toPrefunctor_id","line":81,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_id\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> <a href=\"./Init/Prelude.html#id\">id</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">𝟭q</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_apply_map","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_map\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_symm_apply","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\">toHom</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L74-L74","name":"Quiver.SingleObj.toPrefunctor_apply_obj","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor_apply_obj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor_apply_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\">toPrefunctor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L71-L79","name":"Quiver.SingleObj.toPrefunctor","line":71,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor","doc":"Prefunctors between two `SingleObj` quivers correspond to functions between the corresponding\narrows types.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toPrefunctor\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">⥤q</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L67-L67","name":"Quiver.SingleObj.toHom_symm_apply","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_symm_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\">toHom</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L67-L67","name":"Quiver.SingleObj.toHom_apply","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom_apply\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\">toHom</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L66-L69","name":"Quiver.SingleObj.toHom","line":66,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom","doc":"The type of arrows from `star α` to itself is equivalent to the original type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.toHom\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">toHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\">star</a> <span class=\"fn\">α</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L60-L64","name":"Quiver.SingleObj.hasInvolutiveReverse","line":60,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse","doc":"Equip `SingleObj α` with an involutive reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasInvolutiveReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasInvolutiveReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rev</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.Involutive\">Function.Involutive</a> <span class=\"fn\">rev</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasInvolutiveReverse\">HasInvolutiveReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L56-L57","name":"Quiver.SingleObj.hasReverse","line":56,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse","doc":"Equip `SingleObj α` with a reverse operation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.hasReverse\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">hasReverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rev</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Symmetric.html#Quiver.HasReverse\">HasReverse</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L53-L53","name":"Quiver.SingleObj.ext","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.ext\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L48-L49","name":"Quiver.SingleObj.instInhabited","line":48,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.instInhabited\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L44-L46","name":"Quiver.SingleObj.star","line":44,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star","doc":"The single object in `SingleObj α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.star\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L41-L42","name":"Quiver.SingleObj.inst","line":41,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.inst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj.inst\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span>.<span class=\"name\">inst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L33-L35","name":"Quiver.instUniqueSingleObj","line":33,"kind":"instance","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.instUniqueSingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">instUniqueSingleObj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Unique.html#Unique\">Unique</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\">SingleObj</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/SingleObj.lean#L26-L29","name":"Quiver.SingleObj","line":26,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj","doc":"Type tag on `Unit` used to define single-object quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/SingleObj.html#Quiver.SingleObj\"><span class=\"name\">Quiver</span>.<span class=\"name\">SingleObj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a></span></div></div>"}]}