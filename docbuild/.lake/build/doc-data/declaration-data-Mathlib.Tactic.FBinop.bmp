{"name":"Mathlib.Tactic.FBinop","instances":[{"typeNames":["FBinopElab.SRec"],"name":"FBinopElab.instInhabitedSRec","className":"Inhabited"},{"typeNames":["FBinopElab.SRec"],"name":"FBinopElab.instToExprSRec","className":"Lean.ToExpr"}],"imports":["Init","Lean.Elab.App","Lean.Elab.BuiltinNotation","Mathlib.Tactic.ToExpr"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L241-L243","name":"FBinopElab.elabBinOp","line":241,"kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.elabBinOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.elabBinOp\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">elabBinOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L87-L87","name":"FBinopElab.instToExprSRec","line":87,"kind":"instance","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.instToExprSRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.instToExprSRec\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">instToExprSRec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\">SRec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L87-L87","name":"FBinopElab.instInhabitedSRec","line":87,"kind":"instance","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.instInhabitedSRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.instInhabitedSRec\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">instInhabitedSRec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\">SRec</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L86-L86","name":"FBinopElab.SRec.args","line":86,"kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.args","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.args\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">SRec</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\">SRec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L85-L85","name":"FBinopElab.SRec.name","line":85,"kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.name","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.name\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">SRec</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\">SRec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L84-L84","name":"FBinopElab.SRec.mk","line":84,"kind":"ctor","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec.mk\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">SRec</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\">SRec</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L82-L87","name":"FBinopElab.SRec","line":82,"kind":"structure","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec","doc":"Records a \"functor\", which is some function `Type u → Type v`. We only\nallow `c a1 ... an` for `c` a constant. This is so we can abstract out the universe variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.SRec\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">SRec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/FBinop.lean#L35-L37","name":"FBinopElab.prodSyntax","line":35,"kind":"def","docLink":"./Mathlib/Tactic/FBinop.html#FBinopElab.prodSyntax","doc":"`fbinop% f x y` elaborates `f x y` for `x : S α` and `y : S' β`, taking into account\nany coercions that the \"functors\" `S` and `S'` possess. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/FBinop.html#FBinopElab.prodSyntax\"><span class=\"name\">FBinopElab</span>.<span class=\"name\">prodSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}