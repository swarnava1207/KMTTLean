{"name":"Mathlib.Tactic.Linter.UnusedTacticExtension","instances":[],"imports":["Init","Mathlib.Tactic.Linter.Header"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/UnusedTacticExtension.lean#L100-L113","name":"Mathlib.Linter.UnusedTactic.«command#show_kind_»","line":100,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.«command#show_kind_»","doc":"`#show_kind tac` takes as input the syntax of a tactic and returns the `SyntaxNodeKind`\nat the head of the tactic syntax tree.\n\nThe input syntax needs to parse, though it can be *extremely* elided.\nFor instance, to see the `SyntaxNodeKind` of the `refine` tactic, you could use\n```lean\n#show_kind refine _\n```\nThe trailing underscore `_` makes the syntax valid, since `refine` expects something else.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.«command#show_kind_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">«command#show_kind_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/UnusedTacticExtension.lean#L69-L98","name":"Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic!___»","line":69,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic!___»","doc":"`#allow_unused_tactic` takes as input a space-separated list of identifiers.\nThese identifiers are then allowed by the unused tactic linter:\neven if these tactics do not modify goals, there will be no warning emitted.\n\nNote: for this to work, these identifiers should be the `SyntaxNodeKind` of each tactic.\n\nFor instance, you can allow the `done` and `skip` tactics using\n```lean\n#allow_unused_tactic Lean.Parser.Tactic.done Lean.Parser.Tactic.skip\n```\n\nThis change is file-local.  If you want a *persistent* change, then use the `!`-flag:\nthe command `#allow_unused_tactic! ids` makes the change the linter continues to ignore these\ntactics also in files importing a file where this command is issued.\n\nThe command `#show_kind tac` may help to find the `SyntaxNodeKind`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.«command#allow_unused_tactic!___»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">«command#allow_unused_tactic!___»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/UnusedTacticExtension.lean#L46-L67","name":"Mathlib.Linter.UnusedTactic.allowedRef","line":46,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.allowedRef","doc":"`Parser`s allowed to not change the tactic state.\nThis can be increased dynamically, using `#allow_unused_tactic`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.allowedRef\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">allowedRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/UnusedTacticExtension.lean#L31-L44","name":"Mathlib.Linter.UnusedTactic.addAllowedUnusedTactic","line":31,"kind":"def","docLink":"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.addAllowedUnusedTactic","doc":"`addAllowedUnusedTactic stxNodes` takes as input a `HashSet` of `SyntaxNodeKind`s and extends the\n`allowedUnusedTacticExt` environment extension with its content.\n\nThese are tactics that the unused tactic linter will ignore, since they are expected to not change\nthe tactic state.\n\nSee the `#allow_unused_tactic! ids` command for dynamically extending the extension as a user-facing\ncommand.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.addAllowedUnusedTactic\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">addAllowedUnusedTactic</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">Lean.MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stxNodes</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/UnusedTacticExtension.lean#L20-L29","name":"Mathlib.Linter.UnusedTactic.allowedUnusedTacticExt","line":20,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.allowedUnusedTacticExt","doc":"Defines the `allowedUnusedTacticExt` extension for adding a `HashSet` of `allowedUnusedTactic`s\nto the environment.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/UnusedTacticExtension.html#Mathlib.Linter.UnusedTactic.allowedUnusedTacticExt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">UnusedTactic</span>.<span class=\"name\">allowedUnusedTacticExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.SimplePersistentEnvExtension\">Lean.SimplePersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a> <span class=\"fn\">(<a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">Lean.SyntaxNodeKind</a>)</span></span></div></div>"}]}