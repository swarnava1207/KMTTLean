{"name":"Mathlib.Topology.Category.Profinite.EffectiveEpi","instances":[{"typeNames":["profiniteToCompHaus"],"name":"Profinite.instPreservesEffectiveEpisCompHausProfiniteToCompHaus","className":"CategoryTheory.Functor.PreservesEffectiveEpis"},{"typeNames":["profiniteToCompHaus"],"name":"Profinite.instReflectsEffectiveEpisCompHausProfiniteToCompHaus","className":"CategoryTheory.Functor.ReflectsEffectiveEpis"},{"typeNames":["profiniteToCompHaus"],"name":"Profinite.instEffectivelyEnoughCompHausProfiniteToCompHaus","className":"CategoryTheory.Functor.EffectivelyEnough"},{"typeNames":["Profinite"],"name":"Profinite.instPreregular","className":"CategoryTheory.Preregular"}],"imports":["Init","Mathlib.CategoryTheory.Sites.Coherent.ReflectsPreregular","Mathlib.Topology.Category.CompHaus.EffectiveEpi","Mathlib.Topology.Category.Profinite.Limits","Mathlib.Topology.Category.Stonean.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L88-L93","name":"Profinite.effectiveEpiFamily_of_jointly_surjective","line":88,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpiFamily_of_jointly_surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpiFamily_of_jointly_surjective\"><span class=\"name\">Profinite</span>.<span class=\"name\">effectiveEpiFamily_of_jointly_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">surj</span> : <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span>), <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<span class=\"fn\">π</span> <span class=\"fn\">a</span>)</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L69-L86","name":"Profinite.effectiveEpiFamily_tfae","line":69,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpiFamily_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpiFamily_tfae\"><span class=\"name\">Profinite</span>.<span class=\"name\">effectiveEpiFamily_tfae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">X</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpiFamily\">CategoryTheory.EffectiveEpiFamily</a> <span class=\"fn\">X</span> <span class=\"fn\">π</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Products.html#CategoryTheory.Limits.Sigma.desc\">CategoryTheory.Limits.Sigma.desc</a> <span class=\"fn\">π</span>)</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a>     <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span>), <span class=\"fn\">∃ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">X</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">(<span class=\"fn\">π</span> <span class=\"fn\">a</span>)</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L63-L63","name":"Profinite.instPreregular","line":63,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instPreregular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instPreregular\"><span class=\"name\">Profinite</span>.<span class=\"name\">instPreregular</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.Preregular\">CategoryTheory.Preregular</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L60-L61","name":"Profinite.instEffectivelyEnoughCompHausProfiniteToCompHaus","line":60,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instEffectivelyEnoughCompHausProfiniteToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instEffectivelyEnoughCompHausProfiniteToCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">instEffectivelyEnoughCompHausProfiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Enough.html#CategoryTheory.Functor.EffectivelyEnough\">EffectivelyEnough</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L51-L58","name":"Profinite.profiniteToCompHausEffectivePresentation","line":51,"kind":"def","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.profiniteToCompHausEffectivePresentation","doc":"An effective presentation of an `X : Profinite` with respect to the inclusion functor from `Stonean`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.profiniteToCompHausEffectivePresentation\"><span class=\"name\">Profinite</span>.<span class=\"name\">profiniteToCompHausEffectivePresentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Enough.html#CategoryTheory.Functor.EffectivePresentation\">EffectivePresentation</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L47-L49","name":"Profinite.instReflectsEffectiveEpisCompHausProfiniteToCompHaus","line":47,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instReflectsEffectiveEpisCompHausProfiniteToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instReflectsEffectiveEpisCompHausProfiniteToCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">instReflectsEffectiveEpisCompHausProfiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Preserves.html#CategoryTheory.Functor.ReflectsEffectiveEpis\">ReflectsEffectiveEpis</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L43-L45","name":"Profinite.instPreservesEffectiveEpisCompHausProfiniteToCompHaus","line":43,"kind":"instance","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instPreservesEffectiveEpisCompHausProfiniteToCompHaus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.instPreservesEffectiveEpisCompHausProfiniteToCompHaus\"><span class=\"name\">Profinite</span>.<span class=\"name\">instPreservesEffectiveEpisCompHausProfiniteToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#profiniteToCompHaus\">profiniteToCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Preserves.html#CategoryTheory.Functor.PreservesEffectiveEpis\">PreservesEffectiveEpis</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Profinite/EffectiveEpi.lean#L31-L41","name":"Profinite.effectiveEpi_tfae","line":31,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpi_tfae","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Profinite/EffectiveEpi.html#Profinite.effectiveEpi_tfae\"><span class=\"name\">Profinite</span>.<span class=\"name\">effectiveEpi_tfae</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B </span><span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">π</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">π</span></span><a href=\"./Init/Prelude.html#List.cons\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">π</span>)</span></span></span><a href=\"./Init/Prelude.html#List.cons\">]</a>.<a href=\"./Mathlib/Data/List/TFAE.html#List.TFAE\">TFAE</a></span></div></div>"}]}