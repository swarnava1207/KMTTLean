{"name":"Mathlib.Probability.Martingale.Convergence","instances":[],"imports":["Init","Mathlib.MeasureTheory.Constructions.Polish.Basic","Mathlib.MeasureTheory.Function.UniformIntegrable","Mathlib.Probability.Martingale.Upcrossing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L460-L460","name":"MeasureTheory.tendsto_eLpNorm_condexp","line":460,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_eLpNorm_condexp","doc":"**Alias** of `MeasureTheory.tendsto_eLpNorm_condExp`.\n\n---\n\n**L√©vy's upward theorem**, L¬π version: given a function `g` and a filtration `‚Ñ±`, the\nsequence defined by `ùîº[g | ‚Ñ± n]` converges in L¬π to `ùîº[g | ‚®Ü n, ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_eLpNorm_condexp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">tendsto_eLpNorm_condexp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\">‚®Ü (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L448-L458","name":"MeasureTheory.tendsto_eLpNorm_condExp","line":448,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_eLpNorm_condExp","doc":"**L√©vy's upward theorem**, L¬π version: given a function `g` and a filtration `‚Ñ±`, the\nsequence defined by `ùîº[g | ‚Ñ± n]` converges in L¬π to `ùîº[g | ‚®Ü n, ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_eLpNorm_condExp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">tendsto_eLpNorm_condExp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\">‚®Ü (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L446-L446","name":"MeasureTheory.tendsto_ae_condexp","line":446,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_ae_condexp","doc":"**Alias** of `MeasureTheory.tendsto_ae_condExp`.\n\n---\n\n**L√©vy's upward theorem**, almost everywhere version: given a function `g` and a filtration\n`‚Ñ±`, the sequence defined by `ùîº[g | ‚Ñ± n]` converges almost everywhere to `ùîº[g | ‚®Ü n, ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_ae_condexp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">tendsto_ae_condexp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">x</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\">‚®Ü (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L434-L444","name":"MeasureTheory.tendsto_ae_condExp","line":434,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_ae_condExp","doc":"**L√©vy's upward theorem**, almost everywhere version: given a function `g` and a filtration\n`‚Ñ±`, the sequence defined by `ùîº[g | ‚Ñ± n]` converges almost everywhere to `ùîº[g | ‚®Ü n, ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_ae_condExp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">tendsto_ae_condExp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">x</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\">‚®Ü (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L431-L432","name":"MeasureTheory.Integrable.tendsto_eLpNorm_condexp","line":431,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_eLpNorm_condexp","doc":"**Alias** of `MeasureTheory.Integrable.tendsto_eLpNorm_condExp`.\n\n---\n\nPart c of the **L¬π martingale convergence theorem**: Given an integrable function `g` which\nis measurable with respect to `‚®Ü n, ‚Ñ± n` where `‚Ñ±` is a filtration, the martingale defined by\n`ùîº[g | ‚Ñ± n]` converges in L¬π to `g`.\n\nThis martingale also converges to `g` almost everywhere and this result is provided by\n`MeasureTheory.Integrable.tendsto_ae_condExp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_eLpNorm_condexp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Integrable</span>.<span class=\"name\">tendsto_eLpNorm_condexp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgmeas</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">StronglyMeasurable</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L415-L429","name":"MeasureTheory.Integrable.tendsto_eLpNorm_condExp","line":415,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_eLpNorm_condExp","doc":"Part c of the **L¬π martingale convergence theorem**: Given an integrable function `g` which\nis measurable with respect to `‚®Ü n, ‚Ñ± n` where `‚Ñ±` is a filtration, the martingale defined by\n`ùîº[g | ‚Ñ± n]` converges in L¬π to `g`.\n\nThis martingale also converges to `g` almost everywhere and this result is provided by\n`MeasureTheory.Integrable.tendsto_ae_condExp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_eLpNorm_condExp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Integrable</span>.<span class=\"name\">tendsto_eLpNorm_condExp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgmeas</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">StronglyMeasurable</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L412-L413","name":"MeasureTheory.Integrable.tendsto_ae_condexp","line":412,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_ae_condexp","doc":"**Alias** of `MeasureTheory.Integrable.tendsto_ae_condExp`.\n\n---\n\nPart c of the **L¬π martingale convergence theorem**: Given an integrable function `g` which\nis measurable with respect to `‚®Ü n, ‚Ñ± n` where `‚Ñ±` is a filtration, the martingale defined by\n`ùîº[g | ‚Ñ± n]` converges almost everywhere to `g`.\n\nThis martingale also converges to `g` in L¬π and this result is provided by\n`MeasureTheory.Integrable.tendsto_eLpNorm_condExp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_ae_condexp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Integrable</span>.<span class=\"name\">tendsto_ae_condexp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgmeas</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">StronglyMeasurable</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">x</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L358-L410","name":"MeasureTheory.Integrable.tendsto_ae_condExp","line":358,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_ae_condExp","doc":"Part c of the **L¬π martingale convergence theorem**: Given an integrable function `g` which\nis measurable with respect to `‚®Ü n, ‚Ñ± n` where `‚Ñ±` is a filtration, the martingale defined by\n`ùîº[g | ‚Ñ± n]` converges almost everywhere to `g`.\n\nThis martingale also converges to `g` in L¬π and this result is provided by\n`MeasureTheory.Integrable.tendsto_eLpNorm_condExp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Integrable.tendsto_ae_condExp\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Integrable</span>.<span class=\"name\">tendsto_ae_condExp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgmeas</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/StronglyMeasurable/Basic.html#MeasureTheory.StronglyMeasurable\">StronglyMeasurable</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">x</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a> <span class=\"fn\">x</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">x</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L355-L356","name":"MeasureTheory.Martingale.ae_eq_condexp_limitProcess","line":355,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.ae_eq_condexp_limitProcess","doc":"**Alias** of `MeasureTheory.Martingale.ae_eq_condExp_limitProcess`.\n\n---\n\nPart b of the **L¬π martingale convergence theorem**: if `f` is a uniformly integrable martingale\nadapted to the filtration `‚Ñ±`, then for all `n`, `f n` is almost everywhere equal to the conditional\nexpectation of its limiting process wrt. `‚Ñ± n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.ae_eq_condexp_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">ae_eq_condexp_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/UniformIntegrable.html#MeasureTheory.UniformIntegrable\">UniformIntegrable</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L346-L353","name":"MeasureTheory.Martingale.ae_eq_condExp_limitProcess","line":346,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.ae_eq_condExp_limitProcess","doc":"Part b of the **L¬π martingale convergence theorem**: if `f` is a uniformly integrable martingale\nadapted to the filtration `‚Ñ±`, then for all `n`, `f n` is almost everywhere equal to the conditional\nexpectation of its limiting process wrt. `‚Ñ± n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.ae_eq_condExp_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">ae_eq_condExp_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/UniformIntegrable.html#MeasureTheory.UniformIntegrable\">UniformIntegrable</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L343-L344","name":"MeasureTheory.Martingale.eq_condexp_of_tendsto_eLpNorm","line":343,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.eq_condexp_of_tendsto_eLpNorm","doc":"**Alias** of `MeasureTheory.Martingale.eq_condExp_of_tendsto_eLpNorm`.\n\n---\n\nIf a martingale `f` adapted to `‚Ñ±` converges in L¬π to `g`, then for all `n`, `f n` is almost\neverywhere equal to `ùîº[g | ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.eq_condexp_of_tendsto_eLpNorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">eq_condexp_of_tendsto_eLpNorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgtends</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L326-L341","name":"MeasureTheory.Martingale.eq_condExp_of_tendsto_eLpNorm","line":326,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.eq_condExp_of_tendsto_eLpNorm","doc":"If a martingale `f` adapted to `‚Ñ±` converges in L¬π to `g`, then for all `n`, `f n` is almost\neverywhere equal to `ùîº[g | ‚Ñ± n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Martingale.eq_condExp_of_tendsto_eLpNorm\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Martingale</span>.<span class=\"name\">eq_condExp_of_tendsto_eLpNorm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Martingale\">Martingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/L1Space/Integrable.html#MeasureTheory.Integrable\">Integrable</a> <span class=\"fn\">g</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hgtends</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">g</span>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">=·∂†[</a><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/OuterMeasure/AE.html#MeasureTheory.ae\">ae</a> <span class=\"fn\">Œº</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.EventuallyEq\">]</a> <span class=\"fn\">Œº</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">[</a><span class=\"fn\">g</span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">|</a><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">‚Ñ±</span></span> <span class=\"fn\">n</span></span><a href=\"./Mathlib/MeasureTheory/Function/ConditionalExpectation/Basic.html#MeasureTheory.condExp\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L320-L324","name":"MeasureTheory.Submartingale.ae_tendsto_limitProcess_of_uniformIntegrable","line":320,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.ae_tendsto_limitProcess_of_uniformIntegrable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.ae_tendsto_limitProcess_of_uniformIntegrable\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">ae_tendsto_limitProcess_of_uniformIntegrable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hunif</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/UniformIntegrable.html#MeasureTheory.UniformIntegrable\">UniformIntegrable</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span> <span class=\"fn\">œâ</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L307-L318","name":"MeasureTheory.Submartingale.tendsto_eLpNorm_one_limitProcess","line":307,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.tendsto_eLpNorm_one_limitProcess","doc":"Part a of the **L¬π martingale convergence theorem**: a uniformly integrable submartingale\nadapted to the filtration `‚Ñ±` converges a.e. and in L¬π to an integrable function which is\nmeasurable with respect to the œÉ-algebra `‚®Ü n, ‚Ñ± n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.tendsto_eLpNorm_one_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">tendsto_eLpNorm_one_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hunif</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/UniformIntegrable.html#MeasureTheory.UniformIntegrable\">UniformIntegrable</a> <span class=\"fn\">f</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> (<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>) <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">0</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L234-L235","name":"MeasureTheory.Submartingale.mem‚Ñíp_limitProcess","line":234,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.mem‚Ñíp_limitProcess","doc":"**Alias** of `MeasureTheory.Submartingale.memLp_limitProcess`.\n\n---\n\nThe limiting process of an L·µñ-bounded submartingale is L·µñ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.mem‚Ñíp_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">mem‚Ñíp_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.MemLp\">MemLp</a> <span class=\"fn\">(<a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">Œº</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L228-L232","name":"MeasureTheory.Submartingale.memLp_limitProcess","line":228,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.memLp_limitProcess","doc":"The limiting process of an L·µñ-bounded submartingale is L·µñ. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.memLp_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">memLp_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/ENNReal/Basic.html#ENNReal\">ENNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.MemLp\">MemLp</a> <span class=\"fn\">(<a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">Œº</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L202-L226","name":"MeasureTheory.Submartingale.ae_tendsto_limitProcess","line":202,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.ae_tendsto_limitProcess","doc":"**Almost everywhere martingale convergence theorem**: An L¬π-bounded submartingale converges\nalmost everywhere to a `‚®Ü n, ‚Ñ± n`-measurable function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.ae_tendsto_limitProcess\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">ae_tendsto_limitProcess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">(<a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration.limitProcess\">Filtration.limitProcess</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span> <span class=\"fn\">œâ</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L192-L200","name":"MeasureTheory.Submartingale.exists_ae_trim_tendsto_of_bdd","line":192,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.exists_ae_trim_tendsto_of_bdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.exists_ae_trim_tendsto_of_bdd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">exists_ae_trim_tendsto_of_bdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Œº</span>.<a href=\"./Mathlib/MeasureTheory/Measure/Trim.html#MeasureTheory.Measure.trim\">trim</a></span> <span class=\"fn\">‚ãØ</span></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">c</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L185-L190","name":"MeasureTheory.Submartingale.exists_ae_tendsto_of_bdd","line":185,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.exists_ae_tendsto_of_bdd","doc":"An L¬π-bounded submartingale converges almost everywhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.exists_ae_tendsto_of_bdd\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">exists_ae_tendsto_of_bdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">‚àÉ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">c</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L179-L183","name":"MeasureTheory.Submartingale.upcrossings_ae_lt_top","line":179,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.upcrossings_ae_lt_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.upcrossings_ae_lt_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">upcrossings_ae_lt_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">‚Ñö</a>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Upcrossing.html#MeasureTheory.upcrossings\">upcrossings</a> <span class=\"fn\">(‚Üë<span class=\"fn\">a</span>)</span> <span class=\"fn\">(‚Üë<span class=\"fn\">b</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L149-L177","name":"MeasureTheory.Submartingale.upcrossings_ae_lt_top'","line":149,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.upcrossings_ae_lt_top'","doc":"An L¬π-bounded submartingale has bounded upcrossings almost everywhere. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.Submartingale.upcrossings_ae_lt_top'\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">Submartingale</span>.<span class=\"name\">upcrossings_ae_lt_top'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m0</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/MeasurableSpace/Defs.html#MeasurableSpace\">MeasurableSpace</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œº</span> : <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/MeasureSpaceDef.html#MeasureTheory.Measure\">Measure</a> <span class=\"fn\">Œ©</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">‚Ñ±</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Process/Filtration.html#MeasureTheory.Filtration\">Filtration</a> <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> <span class=\"fn\">m0</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Measure/Typeclasses/Finite.html#MeasureTheory.IsFiniteMeasure\">IsFiniteMeasure</a> <span class=\"fn\">Œº</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Basic.html#MeasureTheory.Submartingale\">Submartingale</a> <span class=\"fn\">f</span> <span class=\"fn\">‚Ñ±</span> <span class=\"fn\">Œº</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbdd</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>), <span class=\"fn\"><a href=\"./Mathlib/MeasureTheory/Function/LpSeminorm/Defs.html#MeasureTheory.eLpNorm\">eLpNorm</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">n</span>)</span> <span class=\"fn\">1</span> <span class=\"fn\">Œº</span></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">‚Üë<span class=\"fn\">R</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÄ·µê</a> (<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">‚àÇ</a><span class=\"fn\">Œº</span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Upcrossing.html#MeasureTheory.upcrossings\">upcrossings</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">f</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L132-L147","name":"MeasureTheory.tendsto_of_uncrossing_lt_top","line":132,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_of_uncrossing_lt_top","doc":"A realization of a stochastic process with bounded upcrossings and bounded liminfs is\nconvergent.\n\nWe use the spelling `< ‚àû` instead of the standard `‚â† ‚àû` in the assumptions since it is not as easy\nto change `<` to `‚â†` under binders. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.tendsto_of_uncrossing_lt_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">tendsto_of_uncrossing_lt_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf‚ÇÅ</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/LiminfLimsup.html#Filter.liminf\">Filter.liminf</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\">‚Üë<a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NNNorm.nnnorm\">‚Äñ‚Çä</a></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf‚ÇÇ</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Batteries/Data/Rat/Basic.html#Rat\">‚Ñö</a>), <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Upcrossing.html#MeasureTheory.upcrossings\">upcrossings</a> <span class=\"fn\">(‚Üë<span class=\"fn\">a</span>)</span> <span class=\"fn\">(‚Üë<span class=\"fn\">b</span>)</span> <span class=\"fn\">f</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>), <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span>)</span> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Defs/Filter.html#nhds\">nhds</a> <span class=\"fn\">c</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L127-L130","name":"MeasureTheory.upcrossings_eq_top_of_frequently_lt","line":127,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.upcrossings_eq_top_of_frequently_lt","doc":"A stochastic process that frequently visits below `a` and above `b` has infinite upcrossings. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.upcrossings_eq_top_of_frequently_lt\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">upcrossings_eq_top_of_frequently_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h‚ÇÅ</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">‚àÉ·∂†</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h‚ÇÇ</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">‚àÉ·∂†</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">,</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Upcrossing.html#MeasureTheory.upcrossings\">upcrossings</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">f</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Probability/Martingale/Convergence.lean#L106-L125","name":"MeasureTheory.not_frequently_of_upcrossings_lt_top","line":106,"kind":"theorem","docLink":"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.not_frequently_of_upcrossings_lt_top","doc":"If a stochastic process has bounded upcrossing from below `a` to above `b`,\nthen it does not frequently visit both below `a` and above `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Probability/Martingale/Convergence.html#MeasureTheory.not_frequently_of_upcrossings_lt_top\"><span class=\"name\">MeasureTheory</span>.<span class=\"name\">not_frequently_of_upcrossings_lt_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œ©</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">‚Ñï</a> ‚Üí <span class=\"fn\"><span class=\"fn\">Œ©</span> ‚Üí <a href=\"./Mathlib/Data/Real/Basic.html#Real\">‚Ñù</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">œâ</span> : <span class=\"fn\">Œ©</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hab</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hœâ</span> : <span class=\"fn\"><a href=\"./Mathlib/Probability/Martingale/Upcrossing.html#MeasureTheory.upcrossings\">upcrossings</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">f</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a>(<span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">‚àÉ·∂†</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">‚àÉ·∂†</a> (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">‚Ñï</a>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">in</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Frequently\">,</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">œâ</span></span></span>)</div></div>"}]}