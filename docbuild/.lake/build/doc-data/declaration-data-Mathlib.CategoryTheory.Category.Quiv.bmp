{"name":"Mathlib.CategoryTheory.Category.Quiv","instances":[{"typeNames":["CategoryTheory.Quiv","_builtin_typeu"],"name":"CategoryTheory.Quiv.instCoeSortType","className":"CoeSort"},{"typeNames":["CategoryTheory.Bundled.Œ±"],"name":"CategoryTheory.Quiv.str'","className":"Quiver"},{"typeNames":["CategoryTheory.Quiv"],"name":"CategoryTheory.Quiv.instInhabited","className":"Inhabited"},{"typeNames":["CategoryTheory.Quiv"],"name":"CategoryTheory.Quiv.category","className":"CategoryTheory.Category"}],"imports":["Init","Mathlib.CategoryTheory.Adjunction.Basic","Mathlib.CategoryTheory.Category.Cat","Mathlib.CategoryTheory.PathCategory.MorphismProperty"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L264-L266","name":"CategoryTheory.Quiv.adj_homEquiv","line":264,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj_homEquiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj_homEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">adj_homEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj\">adj</a>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.homEquiv\">homEquiv</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">of</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">Cat.of</a> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsEquiv\">pathsEquiv</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L249-L262","name":"CategoryTheory.Quiv.pathsEquiv","line":249,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsEquiv","doc":"The universal property of the path category of a quiver. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">pathsEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">C</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L231-L247","name":"CategoryTheory.Quiv.adj","line":231,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj","doc":"The adjunction between forming the free category on a quiver, and forgetting a category to a quiver.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.adj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">adj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free\">Cat.free</a> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">‚ä£</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\">forget</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L223-L229","name":"CategoryTheory.Quiv.pathsOf_pathComposition_toPrefunctor","line":223,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsOf_pathComposition_toPrefunctor","doc":"An unbundled version of the right triangle equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsOf_pathComposition_toPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">pathsOf_pathComposition_toPrefunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">ùü≠q</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L219-L221","name":"CategoryTheory.Quiv.freeMap_pathsOf_pathComposition","line":219,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.freeMap_pathsOf_pathComposition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.freeMap_pathsOf_pathComposition\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">freeMap_pathsOf_pathComposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">Cat.freeMap</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">V</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L214-L217","name":"CategoryTheory.Quiv.freeMapPathsOfCompPathCompositionIso","line":214,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.freeMapPathsOfCompPathCompositionIso","doc":"The left triangle identity of `Cat.free ‚ä£ Quiv.forget` as a natural isomorphism "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.freeMapPathsOfCompPathCompositionIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">freeMapPathsOfCompPathCompositionIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">Cat.freeMap</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">V</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L208-L212","name":"CategoryTheory.Quiv.pathsOf_freeMap_toPrefunctor","line":208,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsOf_freeMap_toPrefunctor","doc":"Naturality of `Paths.of`, which defines a natural transformation\n` ùü≠ _‚ü∂ Cat.free ‚ãô Quiv.forget`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathsOf_freeMap_toPrefunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">pathsOf_freeMap_toPrefunctor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">Cat.freeMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths.of\">Paths.of</a> <span class=\"fn\">W</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L201-L206","name":"CategoryTheory.Quiv.pathComposition_naturality","line":201,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathComposition_naturality","doc":"Naturality of `pathComposition`, which defines a natural transformation\n`Quiv.forget ‚ãô Cat.free ‚ü∂ ùü≠ _`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathComposition_naturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">pathComposition_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">Cat.freeMap</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">D</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L195-L199","name":"CategoryTheory.Quiv.pathCompositionNaturality","line":195,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathCompositionNaturality","doc":"Naturality of `pathComposition`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.pathCompositionNaturality\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">pathCompositionNaturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">Cat.freeMap</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">D</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.pathComposition\">pathComposition</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L189-L189","name":"CategoryTheory.Quiv.lift_obj","line":189,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">lift_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift\">lift</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L189-L189","name":"CategoryTheory.Quiv.lift_map","line":189,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">lift_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X‚úù </span><span class=\"fn\">Y‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X‚úù</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚úù</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift\">lift</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.composePath\">composePath</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">mapPath</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L188-L193","name":"CategoryTheory.Quiv.lift","line":188,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift","doc":"Any prefunctor into a category lifts to a functor from the path category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.lift\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v‚ÇÅ, u‚ÇÅ}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L173-L184","name":"CategoryTheory.Quiv.isoOfEquiv","line":173,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.isoOfEquiv","doc":"Compatible equivalences of types and hom-types induce an isomorphism of quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.isoOfEquiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">isoOfEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>) ‚Üí (<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> (<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">Y</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">of</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">of</a> <span class=\"fn\">W</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L165-L171","name":"CategoryTheory.Quiv.homOfEq_map_homOfEq","line":165,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homOfEq_map_homOfEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homOfEq_map_homOfEq\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">homOfEq_map_homOfEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>) ‚Üí (<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> (<span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">Y</span></span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X' </span><span class=\"fn\">Y'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hY</span> : <span class=\"fn\">Y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X'' </span><span class=\"fn\">Y''</span> : <span class=\"fn\">W</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX'</span> : <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">X'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hY'</span> : <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">Y'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">he</span> <span class=\"fn\">X'</span> <span class=\"fn\">Y'</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">f</span> <span class=\"fn\">hX</span> <span class=\"fn\">hY</span>)</span>)</span> <span class=\"fn\">hX'</span> <span class=\"fn\">hY'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">he</span> <span class=\"fn\">X</span> <span class=\"fn\">Y</span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">‚ãØ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L150-L150","name":"CategoryTheory.Quiv.homEquivOfIso_symm_apply","line":150,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">homEquivOfIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso\">homEquivOfIso</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">‚ãØ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L150-L150","name":"CategoryTheory.Quiv.homEquivOfIso_apply","line":150,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">homEquivOfIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso\">homEquivOfIso</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L149-L156","name":"CategoryTheory.Quiv.homEquivOfIso","line":149,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso","doc":"An isomorphism of quivers defines an equivalence on hom types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.homEquivOfIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">homEquivOfIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>) <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L145-L147","name":"CategoryTheory.Quiv.inv_map_hom_map_of_iso","line":145,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.inv_map_hom_map_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.inv_map_hom_map_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">inv_map_hom_map_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">f</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">‚ãØ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L140-L143","name":"CategoryTheory.Quiv.hom_map_inv_map_of_iso","line":140,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.hom_map_inv_map_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.hom_map_inv_map_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">hom_map_inv_map_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.homOfEq\">Quiver.homOfEq</a> <span class=\"fn\">f</span> <span class=\"fn\">‚ãØ</span> <span class=\"fn\">‚ãØ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L137-L138","name":"CategoryTheory.Quiv.hom_obj_inv_obj_of_iso","line":137,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.hom_obj_inv_obj_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.hom_obj_inv_obj_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">hom_obj_inv_obj_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <span class=\"fn\">‚Üë<span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L134-L135","name":"CategoryTheory.Quiv.inv_obj_hom_obj_of_iso","line":134,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.inv_obj_hom_obj_of_iso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.inv_obj_hom_obj_of_iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">inv_obj_hom_obj_of_iso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L127-L127","name":"CategoryTheory.Quiv.equivOfIso_apply","line":127,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">equivOfIso_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a‚úù</span> : <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso\">equivOfIso</a> <span class=\"fn\">e</span>)</span> <span class=\"fn\">a‚úù</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a‚úù</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L127-L127","name":"CategoryTheory.Quiv.equivOfIso_symm_apply","line":127,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso_symm_apply\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">equivOfIso_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a‚úù</span> : <span class=\"fn\">‚Üë<span class=\"fn\">W</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso\">equivOfIso</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a‚úù</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a‚úù</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L126-L132","name":"CategoryTheory.Quiv.equivOfIso","line":126,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso","doc":"An isomorphism of quivers defines an equivalence on carrier types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.equivOfIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">equivOfIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V </span><span class=\"fn\">W</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚Üë<span class=\"fn\">V</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">‚Üë<span class=\"fn\">W</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L112-L112","name":"CategoryTheory.Cat.free_obj","line":112,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">free_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free\">free</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">V</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">of</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">‚Üë<span class=\"fn\">V</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L112-L112","name":"CategoryTheory.Cat.free_map","line":112,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">free_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X‚úù </span><span class=\"fn\">Y‚úù</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X‚úù</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚úù</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free\">free</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.ofQuivHom\">Prefunctor.ofQuivHom</a> <span class=\"fn\">F</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Functor.toCatHom\">toCatHom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L111-L117","name":"CategoryTheory.Cat.free","line":111,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free","doc":"The functor sending each quiver to its path category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.free\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">free</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L104-L109","name":"CategoryTheory.Cat.freeMap_comp","line":104,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMap_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÉ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÉ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÉ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÇ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÉ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> (<span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\">G</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L96-L96","name":"CategoryTheory.Cat.freeMapCompIso_inv_app","line":96,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapCompIso_inv_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÉ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÉ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÉ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÇ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÉ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso\">freeMapCompIso</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L96-L96","name":"CategoryTheory.Cat.freeMapCompIso_hom_app","line":96,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapCompIso_hom_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÉ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÉ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÉ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÇ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÉ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V‚ÇÅ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso\">freeMapCompIso</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L94-L102","name":"CategoryTheory.Cat.freeMapCompIso","line":94,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso","doc":"The functor `free : Quiv ‚•§ Cat` preserves composition up to natural isomorphism and in fact up\nto equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapCompIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapCompIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÅ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÇ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V‚ÇÉ</span> : <a href=\"./foundational_types.html\">Type</a> u‚ÇÉ}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V‚ÇÉ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V‚ÇÅ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÇ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">V‚ÇÇ</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">V‚ÇÉ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> (<span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\">G</span>)</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L90-L92","name":"CategoryTheory.Cat.freeMap_id","line":90,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMap_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">ùü≠q</a> <span class=\"fn\">V</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L86-L86","name":"CategoryTheory.Cat.freeMapIdIso_hom_app","line":86,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso_hom_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapIdIso_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso\">freeMapIdIso</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L86-L86","name":"CategoryTheory.Cat.freeMapIdIso_inv_app","line":86,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso_inv_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso_inv_app\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapIdIso_inv_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso\">freeMapIdIso</a> <span class=\"fn\">V</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L84-L88","name":"CategoryTheory.Cat.freeMapIdIso","line":84,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso","doc":"The functor `free : Quiv ‚•§ Cat` preserves identities up to natural isomorphism and in fact up\nto equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMapIdIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMapIdIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">ùü≠q</a> <span class=\"fn\">V</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">‚âÖ</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L78-L78","name":"CategoryTheory.Cat.freeMap_map","line":78,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMap_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X‚úù </span><span class=\"fn\">Y‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a‚úù</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Quiver.Path</a> <span class=\"fn\">X‚úù</span> <span class=\"fn\">Y‚úù</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">a‚úù</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Prefunctor.mapPath\">mapPath</a></span> <span class=\"fn\">a‚úù</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L78-L78","name":"CategoryTheory.Cat.freeMap_obj","line":78,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMap_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a‚úù</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\">freeMap</a> <span class=\"fn\">F</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a‚úù</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a‚úù</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L77-L82","name":"CategoryTheory.Cat.freeMap","line":77,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap","doc":"A prefunctor `V ‚•§q W` induces a functor between the path categories defined by `F.mapPath`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Cat.freeMap\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">freeMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">W</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">V</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/PathCategory/Basic.html#CategoryTheory.Paths\">Paths</a> <span class=\"fn\">W</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L71-L72","name":"CategoryTheory.Prefunctor.of_toQuivHom","line":71,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.of_toQuivHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.of_toQuivHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Prefunctor</span>.<span class=\"name\">of_toQuivHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.ofQuivHom\">ofQuivHom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.toQuivHom\">toQuivHom</a> <span class=\"fn\">F</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L69-L69","name":"CategoryTheory.Prefunctor.to_ofQuivHom","line":69,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.to_ofQuivHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.to_ofQuivHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Prefunctor</span>.<span class=\"name\">to_ofQuivHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.toQuivHom\">toQuivHom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.ofQuivHom\">ofQuivHom</a> <span class=\"fn\">F</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L66-L67","name":"CategoryTheory.Prefunctor.ofQuivHom","line":66,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.ofQuivHom","doc":"Arrows in `Quiv` define prefunctors. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.ofQuivHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Prefunctor</span>.<span class=\"name\">ofQuivHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚Üë<span class=\"fn\">C</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">‚Üë<span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L62-L64","name":"CategoryTheory.Prefunctor.toQuivHom","line":62,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.toQuivHom","doc":"Prefunctors between quivers define arrows in `Quiv`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Prefunctor.toQuivHom\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Prefunctor</span>.<span class=\"name\">toQuivHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">C</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor\">‚•§q</a> <span class=\"fn\">D</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">Quiv.of</a> <span class=\"fn\">C</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">Quiv.of</a> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L55-L56","name":"CategoryTheory.Quiv.comp_eq_comp","line":55,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.comp_eq_comp","doc":"Composition in the category of quivers equals prefunctor composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.comp_eq_comp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">comp_eq_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">F</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.comp\">‚ãôq</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L52-L53","name":"CategoryTheory.Quiv.id_eq_id","line":52,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.id_eq_id","doc":"The identity in the category of quivers equals the identity prefunctor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.id_eq_id\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">id_eq_id</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.id\">ùü≠q</a> <span class=\"fn\">‚Üë<span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L47-L47","name":"CategoryTheory.Quiv.forget_map","line":47,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">forget_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X‚úù </span><span class=\"fn\">Y‚úù</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\">X‚úù</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">‚ü∂</a> <span class=\"fn\">Y‚úù</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.toPrefunctor\">toPrefunctor</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L47-L47","name":"CategoryTheory.Quiv.forget_obj","line":47,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">forget_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\">forget</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\">of</a> <span class=\"fn\">‚Üë<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L46-L50","name":"CategoryTheory.Quiv.forget","line":46,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget","doc":"The forgetful functor from categories to quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.forget\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">forget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L40-L44","name":"CategoryTheory.Quiv.category","line":40,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.category","doc":"Category structure on `Quiv` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.LargeCategory\">LargeCategory</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L37-L38","name":"CategoryTheory.Quiv.instInhabited","line":37,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.instInhabited\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L33-L35","name":"CategoryTheory.Quiv.of","line":33,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of","doc":"Construct a bundled `Quiv` from the underlying type and the typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.of\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L30-L31","name":"CategoryTheory.Quiv.str'","line":30,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.str'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.str'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">str'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">‚Üë<span class=\"fn\">C</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L28-L28","name":"CategoryTheory.Quiv.instCoeSortType","line":28,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.instCoeSortType","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv.instCoeSortType\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span>.<span class=\"name\">instCoeSortType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\">Quiv</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Quiv.lean#L21-L24","name":"CategoryTheory.Quiv","line":21,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv","doc":"Category of quivers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Quiv.html#CategoryTheory.Quiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Quiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (u + 1) u (v + 1))</div></div>"}]}