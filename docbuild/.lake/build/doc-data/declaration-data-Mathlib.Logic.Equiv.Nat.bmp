{"name":"Mathlib.Logic.Equiv.Nat","instances":[],"imports":["Init","Mathlib.Data.Nat.Bits","Mathlib.Data.Nat.Pairing"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L49-L55","name":"Equiv.prodEquivOfEquivNat","line":49,"kind":"def","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.prodEquivOfEquivNat","doc":"An equivalence between `α × α` and `α`, given that there is an equivalence between `α` and `ℕ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.prodEquivOfEquivNat\"><span class=\"name\">Equiv</span>.<span class=\"name\">prodEquivOfEquivNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L44-L47","name":"Equiv.intEquivNat","line":44,"kind":"def","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.intEquivNat","doc":"An equivalence between `ℤ` and `ℕ`, through `ℤ ≃ ℕ ⊕ ℕ` and `ℕ ⊕ ℕ ≃ ℕ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.intEquivNat\"><span class=\"name\">Equiv</span>.<span class=\"name\">intEquivNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L40-L42","name":"Equiv.natSumNatEquivNat_apply","line":40,"kind":"theorem","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat_apply\"><span class=\"name\">Equiv</span>.<span class=\"name\">natSumNatEquivNat_apply</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<a href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat\">natSumNatEquivNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Sum/Basic.html#Sum.elim\">Sum.elim</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L36-L36","name":"Equiv.natSumNatEquivNat_symm_apply","line":36,"kind":"theorem","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat_symm_apply\"><span class=\"name\">Equiv</span>.<span class=\"name\">natSumNatEquivNat_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat\">natSumNatEquivNat</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.rec\">Bool.rec</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.div2\">div2</a></span>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.div2\">div2</a></span>)</span> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bodd\">bodd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L33-L38","name":"Equiv.natSumNatEquivNat","line":33,"kind":"def","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat","doc":"An equivalence between `ℕ ⊕ ℕ` and `ℕ`, by mapping `(Sum.inl x)` to `2 * x` and `(Sum.inr x)` to\n`2 * x + 1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.natSumNatEquivNat\"><span class=\"name\">Equiv</span>.<span class=\"name\">natSumNatEquivNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L26-L26","name":"Equiv.boolProdNatEquivNat_apply","line":26,"kind":"theorem","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat_apply\"><span class=\"name\">Equiv</span>.<span class=\"name\">boolProdNatEquivNat_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat\">boolProdNatEquivNat</a> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Function.html#Function.uncurry\">Function.uncurry</a> <a href=\"./Mathlib/Data/Nat/BinaryRec.html#Nat.bit\">Nat.bit</a> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L26-L26","name":"Equiv.boolProdNatEquivNat_symm_apply","line":26,"kind":"theorem","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat_symm_apply\"><span class=\"name\">Equiv</span>.<span class=\"name\">boolProdNatEquivNat_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat\">boolProdNatEquivNat</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.boddDiv2\">boddDiv2</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Logic/Equiv/Nat.lean#L24-L31","name":"Equiv.boolProdNatEquivNat","line":24,"kind":"def","docLink":"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat","doc":"An equivalence between `Bool × ℕ` and `ℕ`, by mapping `(true, x)` to `2 * x + 1` and\n`(false, x)` to `2 * x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Logic/Equiv/Nat.html#Equiv.boolProdNatEquivNat\"><span class=\"name\">Equiv</span>.<span class=\"name\">boolProdNatEquivNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"}]}