{"name":"Mathlib.Combinatorics.Extremal.RuzsaSzemeredi","instances":[],"imports":["Init","Mathlib.Combinatorics.Additive.AP.Three.Behrend","Mathlib.Combinatorics.SimpleGraph.Triangle.Tripartite","Mathlib.Tactic.Rify"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L236-L268","name":"ruzsaSzemerediNumberNat_asymptotic_lower_bound","line":236,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_asymptotic_lower_bound","doc":"Asymptotic lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and `Ω((n ^ 2 * exp (-4 * sqrt (log n))))` edges such that\neach edge belongs to exactly one triangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_asymptotic_lower_bound\"><span class=\"name\">ruzsaSzemerediNumberNat_asymptotic_lower_bound</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">√</a><span class=\"fn\">(<a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span>)</span>)</span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsBigO\">=O[</a><a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsBigO\">]</a> <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">n</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L219-L232","name":"ruzsaSzemerediNumberNat_lower_bound","line":219,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_lower_bound","doc":"Explicit lower bound on the **Ruzsa-Szemerédi problem**.\n\nThere exists a graph with `n` vertices and\n`(n / 3 - 2) * (n - 3) / 6 * exp (-4 * sqrt (log ((n - 3) / 6)))` edges such that each edge belongs\nto exactly one triangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_lower_bound\"><span class=\"name\">ruzsaSzemerediNumberNat_lower_bound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑((<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">3</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">6</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">4</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Data/Real/Sqrt.html#Real.sqrt\">√</a><span class=\"fn\">(<a href=\"./Mathlib/Analysis/SpecialFunctions/Log/Basic.html#Real.log\">Real.log</a> <span class=\"fn\">↑((<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">3</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">6</span>)</span>)</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L192-L217","name":"rothNumberNat_le_ruzsaSzemerediNumberNat'","line":192,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#rothNumberNat_le_ruzsaSzemerediNumberNat'","doc":"Lower bound on the **Ruzsa-Szemerédi problem** in terms of 3AP-free sets.\n\nIf there exists a 3AP-free subset of `[1, ..., (n - 3) / 6]` of size `m`, then there exists a graph\nwith `n` vertices and `(n / 3 - 2) * m` edges such that each edge belongs to exactly one triangle.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#rothNumberNat_le_ruzsaSzemerediNumberNat'\"><span class=\"name\">rothNumberNat_le_ruzsaSzemerediNumberNat'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Additive/AP/Three/Defs.html#rothNumberNat\">rothNumberNat</a> ((<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">3</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">6</span>))</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L176-L190","name":"rothNumberNat_le_ruzsaSzemerediNumberNat","line":176,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#rothNumberNat_le_ruzsaSzemerediNumberNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#rothNumberNat_le_ruzsaSzemerediNumberNat\"><span class=\"name\">rothNumberNat_le_ruzsaSzemerediNumberNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Additive/AP/Three/Defs.html#rothNumberNat\">rothNumberNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> (<span class=\"fn\">6</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">3</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L169-L174","name":"addRothNumber_le_ruzsaSzemerediNumber","line":169,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#addRothNumber_le_ruzsaSzemerediNumber","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#addRothNumber_le_ruzsaSzemerediNumber\"><span class=\"name\">addRothNumber_le_ruzsaSzemerediNumber</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Basic.html#Fact\">Fact</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Group/Units/Defs.html#IsUnit\">IsUnit</a> <span class=\"fn\">2</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Additive/AP/Three/Defs.html#addRothNumber\">addRothNumber</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">α</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L103-L104","name":"ruzsaSzemerediNumberNat_two","line":103,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_two\"><span class=\"name\">ruzsaSzemerediNumberNat_two</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L100-L101","name":"ruzsaSzemerediNumberNat_one","line":100,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_one\"><span class=\"name\">ruzsaSzemerediNumberNat_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L97-L98","name":"ruzsaSzemerediNumberNat_zero","line":97,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_zero\"><span class=\"name\">ruzsaSzemerediNumberNat_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L94-L95","name":"ruzsaSzemerediNumberNat_le","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_le\"><span class=\"name\">ruzsaSzemerediNumberNat_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> <span class=\"fn\">3</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L91-L92","name":"ruzsaSzemerediNumberNat_mono","line":91,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_mono\"><span class=\"name\">ruzsaSzemerediNumberNat_mono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L87-L89","name":"ruzsaSzemerediNumberNat_card","line":87,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat_card\"><span class=\"name\">ruzsaSzemerediNumberNat_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\">ruzsaSzemerediNumberNat</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L80-L85","name":"ruzsaSzemerediNumberNat","line":80,"kind":"def","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat","doc":"The `n`-th **Ruzsa-Szemerédi number** is the maximum number of edges a locally linear graph on\n`n` vertices can have.\n\nIn other words, `ruzsaSzemerediNumberNat n` is the maximum number of edges a graph on `n` vertices\ncan have such that each edge belongs to exactly one triangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumberNat\"><span class=\"name\">ruzsaSzemerediNumberNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L77-L78","name":"ruzsaSzemerediNumber_congr","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_congr\"><span class=\"name\">ruzsaSzemerediNumber_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L69-L75","name":"ruzsaSzemerediNumber_mono","line":69,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_mono\"><span class=\"name\">ruzsaSzemerediNumber_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Logic/Embedding/Basic.html#Function.Embedding\">↪</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L64-L67","name":"SimpleGraph.LocallyLinear.le_ruzsaSzemerediNumber","line":64,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#SimpleGraph.LocallyLinear.le_ruzsaSzemerediNumber","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#SimpleGraph.LocallyLinear.le_ruzsaSzemerediNumber\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">LocallyLinear</span>.<span class=\"name\">le_ruzsaSzemerediNumber</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Basic.html#SimpleGraph.LocallyLinear\">LocallyLinear</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueFinset\">cliqueFinset</a></span> <span class=\"fn\">3</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L53-L60","name":"ruzsaSzemerediNumber_spec","line":53,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_spec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_spec\"><span class=\"name\">ruzsaSzemerediNumber_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Clique.html#SimpleGraph.cliqueFinset\">cliqueFinset</a></span> <span class=\"fn\">3</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Triangle/Basic.html#SimpleGraph.LocallyLinear\">LocallyLinear</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L51-L51","name":"ruzsaSzemerediNumber_le","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber_le\"><span class=\"name\">ruzsaSzemerediNumber_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\">ruzsaSzemerediNumber</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">α</span>)</span>.<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> <span class=\"fn\">3</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.lean#L40-L48","name":"ruzsaSzemerediNumber","line":40,"kind":"def","docLink":"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber","doc":"The **Ruzsa-Szemerédi number** of a fintype is the maximum number of edges a locally linear\ngraph on that type can have.\n\nIn other words, `ruzsaSzemerediNumber α` is the maximum number of edges a graph on `α` can have such\nthat each edge belongs to exactly one triangle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Extremal/RuzsaSzemeredi.html#ruzsaSzemerediNumber\"><span class=\"name\">ruzsaSzemerediNumber</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"}]}