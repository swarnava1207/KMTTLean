{"name":"Mathlib.Combinatorics.Young.SemistandardTableau","instances":[{"typeNames":["SemistandardYoungTableau","Nat"],"name":"SemistandardYoungTableau.instFunLike","className":"DFunLike"},{"typeNames":["SemistandardYoungTableau"],"name":"SemistandardYoungTableau.instInhabited","className":"Inhabited"}],"imports":["Init","Mathlib.Combinatorics.Young.YoungDiagram"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L139-L140","name":"SemistandardYoungTableau.instInhabited","line":139,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.instInhabited\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L134-L137","name":"SemistandardYoungTableau.highestWeight_apply","line":134,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.highestWeight_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.highestWeight_apply\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">highestWeight_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.highestWeight\">highestWeight</a> <span class=\"fn\">μ</span>)</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L125-L132","name":"SemistandardYoungTableau.highestWeight","line":125,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.highestWeight","doc":"The \"highest weight\" SSYT of a given shape has all i's in row i, for each i. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.highestWeight\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">highestWeight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L119-L123","name":"SemistandardYoungTableau.col_weak","line":119,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_weak\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">col_weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i1 </span><span class=\"fn\">i2 </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cell</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L113-L117","name":"SemistandardYoungTableau.row_weak_of_le","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak_of_le\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">row_weak_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cell</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L109-L111","name":"SemistandardYoungTableau.zeros","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.zeros","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.zeros\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">zeros</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">not_cell</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> ∉ <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L105-L107","name":"SemistandardYoungTableau.col_strict","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_strict","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_strict\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">col_strict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i1 </span><span class=\"fn\">i2 </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcell</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L101-L103","name":"SemistandardYoungTableau.row_weak","line":101,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">row_weak</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcell</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L97-L99","name":"SemistandardYoungTableau.copy_eq","line":97,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy_eq\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">copy_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy\">copy</a></span> <span class=\"fn\">entry'</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L92-L95","name":"SemistandardYoungTableau.coe_copy","line":92,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.coe_copy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.coe_copy\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">coe_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy\">copy</a></span> <span class=\"fn\">entry'</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">entry'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L83-L90","name":"SemistandardYoungTableau.copy","line":83,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy","doc":"Copy of an `SemistandardYoungTableau μ` with a new `entry` equal to the old one. Useful to fix\ndefinitional equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.copy\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">entry'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L76-L76","name":"SemistandardYoungTableau.ext_iff","line":76,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.ext_iff\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T </span><span class=\"fn\">T'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">T'</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L76-L81","name":"SemistandardYoungTableau.ext","line":76,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.ext\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T </span><span class=\"fn\">T'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">T</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">T'</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">T</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">T'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L71-L74","name":"SemistandardYoungTableau.to_fun_eq_coe","line":71,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.to_fun_eq_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.to_fun_eq_coe\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">to_fun_eq_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">T</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L64-L69","name":"SemistandardYoungTableau.instFunLike","line":64,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.instFunLike","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.instFunLike\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">instFunLike</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span>)</span> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L60-L60","name":"SemistandardYoungTableau.zeros'","line":60,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.zeros'","doc":"`entry` is required to be zero for all pairs `(i, j) ∉ μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.zeros'\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">zeros'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> ∉ <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L58-L58","name":"SemistandardYoungTableau.col_strict'","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_strict'","doc":"The entries in each column are strictly increasing (top to bottom). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.col_strict'\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">col_strict'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i1 </span><span class=\"fn\">i2 </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L56-L56","name":"SemistandardYoungTableau.row_weak'","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak'","doc":"The entries in each row are weakly increasing (left to right). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.row_weak'\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">row_weak'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\">entry</a></span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L54-L54","name":"SemistandardYoungTableau.entry","line":54,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry","doc":"`entry i j` is value of the `(i, j)` entry of the SSYT `μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.entry\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">entry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L52-L52","name":"SemistandardYoungTableau.mk","line":52,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau.mk\"><span class=\"name\">SemistandardYoungTableau</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">row_weak'</span> : <span class=\"fn\">∀ {<span class=\"fn\">i </span><span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j2</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> → <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j1</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j2</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">col_strict'</span> : <span class=\"fn\">∀ {<span class=\"fn\">i1 </span><span class=\"fn\">i2 </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i2</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> → <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i1</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i2</span> <span class=\"fn\">j</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zeros'</span> : <span class=\"fn\">∀ {<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> ∉ <span class=\"fn\">μ</span></span> → <span class=\"fn\"><span class=\"fn\">entry</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\">SemistandardYoungTableau</a> <span class=\"fn\">μ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/SemistandardTableau.lean#L46-L60","name":"SemistandardYoungTableau","line":46,"kind":"structure","docLink":"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau","doc":"A semistandard Young tableau is a filling of the cells of a Young diagram by natural\nnumbers, such that the entries in each row are weakly increasing (left to right), and the entries\nin each column are strictly increasing (top to bottom).\n\nHere, a semistandard Young tableau is represented as an unrestricted function `ℕ → ℕ → ℕ` that, for\nreasons of extensionality, is required to vanish outside `μ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/SemistandardTableau.html#SemistandardYoungTableau\"><span class=\"name\">SemistandardYoungTableau</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}