{"name":"Mathlib.Tactic.Order.Graph.Basic","instances":[{"typeNames":["Mathlib.Tactic.Order.Edge"],"name":"Mathlib.Tactic.Order.instToStringEdge","className":"ToString"}],"imports":["Init","Mathlib.Tactic.Order.CollectFacts"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L71-L75","name":"Mathlib.Tactic.Order.Graph.buildTransitiveLeProof","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.buildTransitiveLeProof","doc":"Given a `≤`-graph `g`, finds a proof of `s ≤ t` using transitivity. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.buildTransitiveLeProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">buildTransitiveLeProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idxToAtom</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L56-L69","name":"Mathlib.Tactic.Order.Graph.buildTransitiveLeProofDFS","line":56,"kind":"opaque","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.buildTransitiveLeProofDFS","doc":"DFS algorithm for constructing a proof that `x ≤ y` by finding a path from `x` to `y` in the\n`≤`-graph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.buildTransitiveLeProofDFS\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">buildTransitiveLeProofDFS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">t</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tExpr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState\">DFSState</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L54-L54","name":"Mathlib.Tactic.Order.Graph.DFSState.visited","line":54,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState.visited","doc":"`visited[v] = true` if and only if the algorithm has already entered vertex `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState.visited\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">DFSState</span>.<span class=\"name\">visited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState\">DFSState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L52-L52","name":"Mathlib.Tactic.Order.Graph.DFSState.mk","line":52,"kind":"ctor","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">DFSState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">visited</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState\">DFSState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L51-L54","name":"Mathlib.Tactic.Order.Graph.DFSState","line":51,"kind":"structure","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState","doc":"State for the DFS algorithm. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.DFSState\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">DFSState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L43-L49","name":"Mathlib.Tactic.Order.Graph.constructLeGraph","line":43,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.constructLeGraph","doc":"Constructs a directed `Graph` using `≤` facts. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.constructLeGraph\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">constructLeGraph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nVertexes</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">facts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Mathlib/Tactic/Order/CollectFacts.html#Mathlib.Tactic.Order.AtomicFact\">AtomicFact</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L39-L41","name":"Mathlib.Tactic.Order.Graph.addEdge","line":39,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.addEdge","doc":"Adds an `edge` to the graph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph.addEdge\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span>.<span class=\"name\">addEdge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">edge</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\">Graph</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L33-L35","name":"Mathlib.Tactic.Order.Graph","line":33,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph","doc":"If `g` is a `Graph`, then for a vertex with index `v`, `g[v]` is an array containing\nthe edges starting from this vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Graph\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Graph</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L30-L31","name":"Mathlib.Tactic.Order.instToStringEdge","line":30,"kind":"instance","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.instToStringEdge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.instToStringEdge\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">instToStringEdge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L27-L27","name":"Mathlib.Tactic.Order.Edge.proof","line":27,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.proof","doc":"Proof of `atomToIdx[src] ≤ atomToIdx[dst]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.proof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Edge</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L25-L25","name":"Mathlib.Tactic.Order.Edge.dst","line":25,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.dst","doc":"Destination of the edge. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.dst\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Edge</span>.<span class=\"name\">dst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L23-L23","name":"Mathlib.Tactic.Order.Edge.src","line":23,"kind":"def","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.src","doc":"Source of the edge. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.src\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Edge</span>.<span class=\"name\">src</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L21-L21","name":"Mathlib.Tactic.Order.Edge.mk","line":21,"kind":"ctor","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Edge</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src </span><span class=\"fn\">dst</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\">Edge</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Order/Graph/Basic.lean#L19-L27","name":"Mathlib.Tactic.Order.Edge","line":19,"kind":"structure","docLink":"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge","doc":"An edge in a graph. In the `order` tactic, the `proof` field stores the of\n`atomToIdx[src] ≤ atomToIdx[dst]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Order/Graph/Basic.html#Mathlib.Tactic.Order.Edge\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Order</span>.<span class=\"name\">Edge</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}