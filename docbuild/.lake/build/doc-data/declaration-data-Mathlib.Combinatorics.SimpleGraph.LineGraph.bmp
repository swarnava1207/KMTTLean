{"name":"Mathlib.Combinatorics.SimpleGraph.LineGraph","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/LineGraph.lean#L37-L37","name":"SimpleGraph.lineGraph_bot","line":37,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">lineGraph_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph\">lineGraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/LineGraph.lean#L33-L35","name":"SimpleGraph.lineGraph_adj_iff_exists","line":33,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph_adj_iff_exists","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph_adj_iff_exists\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">lineGraph_adj_iff_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph\">lineGraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">e₁</span> <span class=\"fn\">e₂</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">e₁</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">e₂</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∃ <span class=\"fn\">v</span> ∈ <span class=\"fn\">↑<span class=\"fn\">e₁</span></span>, <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">↑<span class=\"fn\">e₂</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/LineGraph.lean#L25-L31","name":"SimpleGraph.lineGraph","line":25,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph","doc":"The line graph of a simple graph `G` has its vertex set as the edges of `G`, and two vertices of\nthe line graph are adjacent if the corresponding edges share a vertex in `G`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/LineGraph.html#SimpleGraph.lineGraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">lineGraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></span></span></div></div>"}]}