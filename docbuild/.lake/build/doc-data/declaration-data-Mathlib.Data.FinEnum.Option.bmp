{"name":"Mathlib.Data.FinEnum.Option","instances":[{"typeNames":["Option"],"name":"FinEnum.instFinEnumOptionLast","className":"FinEnum"}],"imports":["Init","Mathlib.Data.FinEnum","Mathlib.Logic.Equiv.Fin.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L98-L112","name":"FinEnum.recOnEmptyOption","line":98,"kind":"def","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.recOnEmptyOption","doc":"A recursor principle for finite-and-enumerable types, analogous to `Nat.recOn`.\nIt effectively says that every `FinEnum` is either `Empty` or `Option α`, up to an `Equiv` mediated\nby `Fin`s of equal cardinality.\nIn contrast to the `Fintype` case, data can be transported along such an `Equiv`.\nAlso, since order matters, the choice of element that gets replaced by `Option.none` has\nto be provided for every step.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recOnEmptyOption\"><span class=\"name\">FinEnum</span>.<span class=\"name\">recOnEmptyOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aenum</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finChoice</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congr</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L77-L96","name":"FinEnum.recEmptyOption_of_card_pos","line":77,"kind":"theorem","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption_of_card_pos","doc":"For a type with positive `card`, the recursion principle evaluates to whatever\n`congr` makes of the step result, where `Option.none` has been inserted into the\n`(finChoice (card α - 1))`th rank of the enumeration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption_of_card_pos\"><span class=\"name\">FinEnum</span>.<span class=\"name\">recEmptyOption_of_card_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finChoice</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congr</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption\">recEmptyOption</a> <span class=\"fn\">finChoice</span> <span class=\"fn\">(fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">congr</span>)</span> <span class=\"fn\">empty</span> <span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">option</span>)</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">congr</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.insertNone\">insertNone</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span>)</span> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">finChoice</span> (<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></span></span>)</span> <span class=\"fn\">inst✝</span> <span class=\"fn\">⋯</span>\n    <span class=\"fn\">(<span class=\"fn\">option</span> <a href=\"./Mathlib/Data/FinEnum.html#ULift.instFinEnum\">ULift.instFinEnum</a>\n      <span class=\"fn\">(<a href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption\">recEmptyOption</a> <span class=\"fn\">finChoice</span> <span class=\"fn\">(fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">congr</span>)</span> <span class=\"fn\">empty</span> <span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">option</span>)</span>\n        <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift.{u, 0}</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L60-L75","name":"FinEnum.recEmptyOption_of_card_eq_zero","line":60,"kind":"theorem","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption_of_card_eq_zero","doc":"For an empty type, the recursion principle evaluates to whatever `congr`\nmakes of the base case.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption_of_card_eq_zero\"><span class=\"name\">FinEnum</span>.<span class=\"name\">recEmptyOption_of_card_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finChoice</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congr</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption\">recEmptyOption</a> <span class=\"fn\">finChoice</span> <span class=\"fn\">(fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">congr</span>)</span> <span class=\"fn\">empty</span> <span class=\"fn\">(fun {<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">option</span>)</span> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">congr</span> <span class=\"fn\">x✝</span> <span class=\"fn\">inst✝</span> <span class=\"fn\">⋯</span> <span class=\"fn\">empty</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L32-L58","name":"FinEnum.recEmptyOption","line":32,"kind":"def","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption","doc":"A recursor principle for finite-and-enumerable types, analogous to `Nat.rec`.\nIt effectively says that every `FinEnum` is either `Empty` or `Option α`, up to an `Equiv` mediated\nby `Fin`s of equal cardinality.\nIn contrast to the `Fintype` case, data can be transported along such an `Equiv`.\nAlso, since order matters, the choice of element that gets replaced by `Option.none` has\nto be provided for every step.\n\nSince every `FinEnum` instance implies a `Fintype` instance and `Prop` is squashed already,\n`Fintype.induction_empty_option` can be used if a `Prop` needs to be constructed.\nCf. `Data.Fintype.Option`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.recEmptyOption\"><span class=\"name\">FinEnum</span>.<span class=\"name\">recEmptyOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finChoice</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">congr</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>) → <span class=\"fn\">(<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">β</span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">β</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">empty</span> : <span class=\"fn\"><span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PEmpty\">PEmpty.{u + 1}</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L27-L30","name":"FinEnum.instFinEnumOptionLast","line":27,"kind":"instance","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.instFinEnumOptionLast","doc":"This is an arbitrary choice of insertion rank for a default instance.\nIt keeps the mapping of the existing `α`-inhabitants intact, modulo `Fin.castSucc`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.instFinEnumOptionLast\"><span class=\"name\">FinEnum</span>.<span class=\"name\">instFinEnumOptionLast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/FinEnum/Option.lean#L22-L25","name":"FinEnum.insertNone","line":22,"kind":"def","docLink":"./Mathlib/Data/FinEnum/Option.html#FinEnum.insertNone","doc":"Inserting an `Option.none` anywhere in an enumeration yields another enumeration. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/FinEnum/Option.html#FinEnum.insertNone\"><span class=\"name\">FinEnum</span>.<span class=\"name\">insertNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum.card\">card</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FinEnum.html#FinEnum\">FinEnum</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>"}]}