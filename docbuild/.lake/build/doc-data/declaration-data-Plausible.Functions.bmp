{"name":"Plausible.Functions","instances":[{"typeNames":["Plausible.TotalFunction"],"name":"Plausible.TotalFunction.inhabited","className":"Inhabited"},{"typeNames":["Plausible.TotalFunction"],"name":"Plausible.TotalFunction.instRepr","className":"Repr"},{"typeNames":[],"name":"Plausible.TotalFunction.Pi.sampleableExt","className":"Plausible.SampleableExt"},{"typeNames":[],"name":"Plausible.TotalFunction.PiPred.sampleableExt","className":"Plausible.SampleableExt"},{"typeNames":[],"name":"Plausible.TotalFunction.PiUncurry.sampleableExt","className":"Plausible.SampleableExt"}],"imports":["Init","Plausible.Sampleable","Plausible.Testable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L153-L158","name":"Plausible.TotalFunction.PiUncurry.sampleableExt","line":153,"kind":"instance","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.PiUncurry.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.PiUncurry.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiUncurry</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\">γ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L146-L151","name":"Plausible.TotalFunction.PiPred.sampleableExt","line":146,"kind":"instance","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.PiPred.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.PiPred.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">PiPred</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L129-L138","name":"Plausible.TotalFunction.Pi.sampleableExt","line":129,"kind":"instance","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.Pi.sampleableExt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.Pi.sampleableExt\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">Pi</span>.<span class=\"name\">sampleableExt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L117-L124","name":"Plausible.TotalFunction.shrink.dedup.insertKey","line":117,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup.insertKey","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup.insertKey\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span>.<span class=\"name\">dedup</span>.<span class=\"name\">insertKey</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pair</span> : <span class=\"fn\">(_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L116-L125","name":"Plausible.TotalFunction.shrink.dedup","line":116,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink.dedup\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span>.<span class=\"name\">dedup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L111-L125","name":"Plausible.TotalFunction.shrink","line":111,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.shrink","doc":"Shrink a total function by shrinking the lists that represent it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.shrink\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">shrink</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.Shrinkable\">Shrinkable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.Shrinkable\">Shrinkable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L100-L102","name":"Plausible.TotalFunction.List.toFinmap'","line":100,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.List.toFinmap'","doc":"Create a `Finmap` from a list of pairs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.List.toFinmap'\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">List</span>.<span class=\"name\">toFinmap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L97-L98","name":"Plausible.TotalFunction.instRepr","line":97,"kind":"instance","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.instRepr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.instRepr\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L91-L95","name":"Plausible.TotalFunction.repr","line":91,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.repr","doc":"Produce a string for a given `TotalFunction`.\nThe output is of the form `[x₀ => f x₀, .. xₙ => f xₙ, _ => y]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.repr\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L80-L89","name":"Plausible.TotalFunction.reprAux","line":80,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.reprAux","doc":"Implementation of `Repr (TotalFunction α β)`.\n\nCreates a string for a given `Finmap` and output, `x₀ => y₀, .. xₙ => yₙ`\nfor each of the entries. The brackets are provided by the calling function.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.reprAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">reprAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L76-L78","name":"Plausible.TotalFunction.apply","line":76,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.apply","doc":"Apply a total function to an argument. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.apply\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L71-L74","name":"Plausible.TotalFunction.comp","line":71,"kind":"def","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.comp","doc":"Compose a total function with a regular function on the left "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.comp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">γ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L65-L66","name":"Plausible.TotalFunction.inhabited","line":65,"kind":"instance","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.inhabited\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L63-L63","name":"Plausible.TotalFunction.withDefault","line":63,"kind":"ctor","docLink":"./Plausible/Functions.html#Plausible.TotalFunction.withDefault","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction.withDefault\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span>.<span class=\"name\">withDefault</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((_ : <span class=\"fn\">α</span>) × <span class=\"fn\">β</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Plausible/Functions.html#Plausible.TotalFunction\">TotalFunction</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Functions.lean#L52-L63","name":"Plausible.TotalFunction","line":52,"kind":"inductive","docLink":"./Plausible/Functions.html#Plausible.TotalFunction","doc":"Data structure specifying a total function using a list of pairs\nand a default value returned when the input is not in the domain of\nthe partial function.\n\n`withDefault f y` encodes `x => f x` when `x ∈ f` and `x => y`\notherwise.\n\nWe use `Σ` to encode mappings instead of `×` because we\nrely on the association list API defined in `Mathlib/Data/List/Sigma.lean`.\n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Functions.html#Plausible.TotalFunction\"><span class=\"name\">Plausible</span>.<span class=\"name\">TotalFunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}