{"name":"Mathlib.Data.WSeq.Relation","instances":[],"imports":["Init","Mathlib.Data.WSeq.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L544-L548","name":"Stream'.WSeq.bind_assoc","line":544,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_assoc\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">γ</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">g</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">g</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L511-L542","name":"Stream'.WSeq.join_join","line":511,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">SS</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">SS</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a> <span class=\"fn\">SS</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L508-L509","name":"Stream'.WSeq.ret_bind","line":508,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.ret_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.ret_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">ret_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.ret\">ret</a> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L502-L506","name":"Stream'.WSeq.bind_ret","line":502,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> (<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.ret\">ret</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L475-L500","name":"Stream'.WSeq.join_append","line":475,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\">T</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L460-L473","name":"Stream'.WSeq.join_map_ret","line":460,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_map_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_map_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_map_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.ret\">ret</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L457-L458","name":"Stream'.WSeq.join_ret","line":457,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_ret\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_ret</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.ret\">ret</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L453-L455","name":"Stream'.WSeq.bind_congr","line":453,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.bind_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">bind_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s1 </span><span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f1 </span><span class=\"fn\">f2</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">s1</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">f1</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">f2</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s1</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f1</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s2</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L448-L451","name":"Stream'.WSeq.liftRel_bind","line":448,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_bind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_bind\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f1</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">γ</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f2</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">δ</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\">f1</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f2</span> <span class=\"fn\">b</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s1</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f1</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s2</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.bind\">bind</a></span> <span class=\"fn\">f2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L445-L446","name":"Stream'.WSeq.join_congr","line":445,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.join_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">join_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">Equiv</a> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L419-L443","name":"Stream'.WSeq.liftRel_join","line":419,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_join","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_join\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_join</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span> <span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L368-L417","name":"Stream'.WSeq.liftRel_join.lem","line":368,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_join.lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_join.lem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_join</span>.<span class=\"name\">lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ST</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">HU</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">s1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>),\n    <span class=\"fn\">(<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">s</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>         <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">t</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>           <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">S</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>             <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">T</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span>)</span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>               <span class=\"fn\">s1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">s2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">S</span> <span class=\"fn\">T</span></span>) →\n      <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ma</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">T</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.join\">join</a></span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">U</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L342-L366","name":"Stream'.WSeq.liftRel_append","line":342,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_append\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s1 </span><span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t1 </span><span class=\"fn\">t2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">t1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s2</span> <span class=\"fn\">t2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s1</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\">s2</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t1</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.append\">append</a></span> <span class=\"fn\">t2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L339-L340","name":"Stream'.WSeq.map_congr","line":339,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.map_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.map_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">map_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L322-L337","name":"Stream'.WSeq.liftRel_map","line":322,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_map\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">δ</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f1</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f2</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">δ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">(<span class=\"fn\">f1</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<span class=\"fn\">f2</span> <span class=\"fn\">b</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">S</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <span class=\"fn\">f1</span> <span class=\"fn\">s1</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.map\">map</a> <span class=\"fn\">f2</span> <span class=\"fn\">s2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L300-L320","name":"Stream'.WSeq.Equiv.ext","line":300,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.ext\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L294-L298","name":"Stream'.WSeq.mem_congr","line":294,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.mem_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.mem_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">mem_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L291-L292","name":"Stream'.WSeq.get?_congr","line":291,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.get?_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.get?_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L288-L289","name":"Stream'.WSeq.dropn_congr","line":288,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.dropn_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.dropn_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">dropn_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.drop\">drop</a></span> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.drop\">drop</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L274-L286","name":"Stream'.WSeq.tail_congr","line":274,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.tail_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.tail_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">tail_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.tail\">tail</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.tail\">tail</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L270-L272","name":"Stream'.WSeq.flatten_congr","line":270,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.flatten_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.flatten_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c1 </span><span class=\"fn\">c2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">Equiv</a> <span class=\"fn\">c1</span> <span class=\"fn\">c2</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.flatten\">flatten</a> <span class=\"fn\">c1</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.flatten\">flatten</a> <span class=\"fn\">c2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L259-L268","name":"Stream'.WSeq.liftRel_flatten","line":259,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_flatten\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">c1</span> <span class=\"fn\">c2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.flatten\">flatten</a> <span class=\"fn\">c1</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.flatten\">flatten</a> <span class=\"fn\">c2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L252-L257","name":"Stream'.WSeq.flatten_equiv","line":252,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.flatten_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.flatten_equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">flatten_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation\">Computation</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.flatten\">flatten</a> <span class=\"fn\">c</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L232-L250","name":"Stream'.WSeq.head_congr","line":232,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.head_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.head_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.head\">head</a></span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Equiv\">Equiv</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.head\">head</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L229-L230","name":"Stream'.WSeq.think_congr","line":229,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.think_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.think_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.think\">think</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.think\">think</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L227-L227","name":"Stream'.WSeq.think_equiv","line":227,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.think_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.think_equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">think_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.think\">think</a></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L224-L225","name":"Stream'.WSeq.cons_congr","line":224,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.cons_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.cons_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">cons_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L220-L222","name":"Stream'.WSeq.liftRel_think_right","line":220,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_think_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_think_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_think_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.think\">think</a></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L216-L218","name":"Stream'.WSeq.liftRel_think_left","line":216,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_think_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_think_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_think_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.think\">think</a></span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L211-L214","name":"Stream'.WSeq.liftRel_cons","line":211,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_cons\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.cons\">cons</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.cons\">cons</a> <span class=\"fn\">b</span> <span class=\"fn\">t</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L207-L209","name":"Stream'.WSeq.liftRel_nil","line":207,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_nil\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.nil\">nil</a> <a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.nil\">nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L204-L205","name":"Stream'.WSeq.exists_of_liftRel_right","line":204,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.exists_of_liftRel_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.exists_of_liftRel_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_liftRel_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L197-L202","name":"Stream'.WSeq.exists_of_liftRel_left","line":197,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.exists_of_liftRel_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.exists_of_liftRel_left\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">exists_of_liftRel_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">β</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L185-L195","name":"Stream'.WSeq.liftRel_dropn_destruct","line":185,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_dropn_destruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_dropn_destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_dropn_destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L179-L181","name":"Stream'.WSeq.destruct_congr_iff","line":179,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.destruct_congr_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.destruct_congr_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_congr_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO\">BisimO</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L175-L177","name":"Stream'.WSeq.destruct_congr","line":175,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.destruct_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.destruct_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">destruct_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO\">BisimO</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">x2</span></span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L172-L173","name":"Stream'.WSeq.Equiv.equivalence","line":172,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.equivalence","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.equivalence\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">equivalence</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">Equiv</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L168-L170","name":"Stream'.WSeq.Equiv.trans","line":168,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.trans\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t </span><span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span> → <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">u</span> → <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">u</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L164-L166","name":"Stream'.WSeq.Equiv.symm","line":164,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.symm\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span> → <span class=\"fn\">t</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L160-L162","name":"Stream'.WSeq.Equiv.refl","line":160,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv.refl\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L158-L158","name":"Stream'.WSeq.«term_~ʷ_»","line":158,"kind":"def","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.«term_~ʷ_»","doc":"If two sequences are equivalent, then they have the same values and\nthe same computational behavior (i.e. if one loops forever then so does\nthe other), although they may differ in the number of `think`s needed to\narrive at the answer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.«term_~ʷ_»\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">«term_~ʷ_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L151-L156","name":"Stream'.WSeq.Equiv","line":151,"kind":"def","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv","doc":"If two sequences are equivalent, then they have the same values and\nthe same computational behavior (i.e. if one loops forever then so does\nthe other), although they may differ in the number of `think`s needed to\narrive at the answer. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L148-L149","name":"Stream'.WSeq.LiftRel.equiv","line":148,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.equiv\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">R</span></span> → <span class=\"fn\"><a href=\"./Init/Core.html#Equivalence\">Equivalence</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L117-L146","name":"Stream'.WSeq.LiftRel.trans","line":117,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.trans\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Transitive\">Transitive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Transitive\">Transitive</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L114-L115","name":"Stream'.WSeq.LiftRel.symm","line":114,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.symm\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L103-L112","name":"Stream'.WSeq.LiftRel.refl","line":103,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.refl\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Reflexive\">Reflexive</a> <span class=\"fn\">R</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Reflexive\">Reflexive</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L100-L101","name":"Stream'.WSeq.LiftRel.swap","line":100,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.swap\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L94-L98","name":"Stream'.WSeq.LiftRel.swap_lem","line":94,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.swap_lem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel.swap_lem\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span>.<span class=\"name\">swap_lem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s1</span> <span class=\"fn\">s2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">s2</span> <span class=\"fn\">s1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L78-L92","name":"Stream'.WSeq.liftRel_destruct_iff","line":78,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_destruct_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_destruct_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_destruct_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L71-L76","name":"Stream'.WSeq.liftRel_destruct","line":71,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_destruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.liftRel_destruct\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">liftRel_destruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Computation.html#Computation.LiftRel\">Computation.LiftRel</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\">LiftRel</a> <span class=\"fn\">R</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.destruct\">destruct</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L64-L69","name":"Stream'.WSeq.LiftRel","line":64,"kind":"def","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel","doc":"Two weak sequences are `LiftRel R` related if they are either both empty,\nor they are both nonempty and the heads are `R` related and the tails are\n`LiftRel R` related. (This is a coinductive definition.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRel\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L60-L62","name":"Stream'.WSeq.BisimO.imp","line":60,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO.imp\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">BisimO</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o </span><span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO\">BisimO</a> <span class=\"fn\">R</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO\">BisimO</a> <span class=\"fn\">S</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L55-L58","name":"Stream'.WSeq.BisimO","line":55,"kind":"def","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO","doc":"Definition of bisimilarity for weak sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.BisimO\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">BisimO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L50-L53","name":"Stream'.WSeq.LiftRelO.swap","line":50,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.swap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.swap\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">swap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">R</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Defs.html#Function.swap\">Function.swap</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L46-L48","name":"Stream'.WSeq.LiftRelO.imp_right","line":46,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.imp_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.imp_right\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">imp_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">D</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L39-L44","name":"Stream'.WSeq.LiftRelO.imp","line":39,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.imp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO.imp\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C </span><span class=\"fn\">D</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H1</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">R</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">S</span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H2</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span> → <span class=\"fn\"><span class=\"fn\">D</span> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">R</span> <span class=\"fn\">C</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\">LiftRelO</a> <span class=\"fn\">S</span> <span class=\"fn\">D</span> <span class=\"fn\">o</span> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Relation.lean#L30-L36","name":"Stream'.WSeq.LiftRelO","line":30,"kind":"def","docLink":"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO","doc":"lift a relation to a relation over weak sequences "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.LiftRelO\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">LiftRelO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">β</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>"}]}