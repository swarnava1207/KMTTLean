{"name":"Mathlib.Tactic.Linter.DirectoryDependency","instances":[{"typeNames":["Mathlib.Linter.DirectoryDependency.NamePrefixRel"],"name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","className":"EmptyCollection"}],"imports":["Init","Lean.Elab.Command"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L475-L494","name":"Mathlib.Linter.directoryDependencyCheck","line":475,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.directoryDependencyCheck","doc":"The `directoryDependency` linter detects detects imports between directories that are supposed to be\nindependent. If this is the case, it emits a warning.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.directoryDependencyCheck\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">directoryDependencyCheck</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainModule</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L455-L469","name":"Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs","line":455,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs","doc":"`overrideAllowedImportDirs` relates module prefixes, specifying that modules with the first\nprefix are allowed to import modules with the second prefix, even if disallowed in\n`forbiddenImportDirs`.\n\nFor example, ``(`Mathlib.Algebra.Notation, `Mathlib.Algebra)`` is in `forbiddenImportDirs` and\n``(`Mathlib.Algebra.Notation, `Mathlib.Algebra.Notation)`` is in `overrideAllowedImportDirs`\nbecause modules in `Mathlib.Algebra.Notation` cannot import modules in `Mathlib.Algebra` that are\noutside `Mathlib.Algebra.Notation`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.overrideAllowedImportDirs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">overrideAllowedImportDirs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L125-L453","name":"Mathlib.Linter.DirectoryDependency.forbiddenImportDirs","line":125,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.forbiddenImportDirs","doc":"`forbiddenImportDirs` relates module prefixes, specifying that modules with the first prefix\nshould not import modules with the second prefix (except if specifically allowed in\n`overrideAllowedImportDirs`).\n\nFor example, ``(`Mathlib.Algebra.Notation, `Mathlib.Algebra)`` is in `forbiddenImportDirs` and\n``(`Mathlib.Algebra.Notation, `Mathlib.Algebra.Notation)`` is in `overrideAllowedImportDirs`\nbecause modules in `Mathlib.Algebra.Notation` cannot import modules in `Mathlib.Algebra` that are\noutside `Mathlib.Algebra.Notation`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.forbiddenImportDirs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">forbiddenImportDirs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L120-L121","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains","line":120,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains","doc":"Is a prefix of `n₁` related to a prefix of `n₂`? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.contains\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L104-L118","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny","line":104,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny","doc":"Get a prefix of `n₁` that is related to any prefix of the names in `ns`; return the prefixes.\n\nThis should be more efficient than iterating over all names in `ns` and calling `find`,\nsince it doesn't need to worry about overlapping prefixes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.findAny\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">findAny</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L94-L102","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.find","line":94,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.find","doc":"Get a prefix of `n₁` that is related to a prefix of `n₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.find\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L89-L92","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray","line":89,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray","doc":"Convert an array of prefix pairs to a `NamePrefixRel`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.ofArray\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">ofArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L83-L87","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert","line":83,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert","doc":"Make all names with prefix `n₁` related to names with prefix `n₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.insert\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n₁ </span><span class=\"fn\">n₂</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L81-L81","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","line":81,"kind":"instance","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel.instEmptyCollection\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\">NamePrefixRel</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L69-L77","name":"Mathlib.Linter.DirectoryDependency.NamePrefixRel","line":69,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel","doc":"`NamePrefixRel` is a datatype for storing relations between name prefixes.\n\nThat is, `R : NamePrefixRel` is supposed to answer given names `(n₁, n₂)` whether there are any\nprefixes `n₁'` of `n₁` and `n₂'` of `n₂` such that `n₁' R n₂'`.\n\nThe current implementation is a `NameMap` of `NameSet`s, testing each prefix of `n₁` and `n₂` in\nturn. This can probably be optimized.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.DirectoryDependency.NamePrefixRel\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">DirectoryDependency</span>.<span class=\"name\">NamePrefixRel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L58-L65","name":"Mathlib.Linter.linter.directoryDependency","line":58,"kind":"opaque","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.linter.directoryDependency","doc":"The `directoryDependency` linter detects detects imports between directories that are supposed to be\nindependent. If this is the case, it emits a warning.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Mathlib.Linter.linter.directoryDependency\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Linter</span>.<span class=\"name\">linter</span>.<span class=\"name\">directoryDependency</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L37-L52","name":"Lean.Environment.importPath","line":37,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Environment.importPath","doc":"Find the dependency chain, starting at a module that imports `imported`, and ends with the\ncurrent module.\n\nThe path only contains the intermediate steps: it excludes `imported` and the current module.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Environment.importPath\"><span class=\"name\">Lean</span>.<span class=\"name\">Environment</span>.<span class=\"name\">importPath</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imported</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L33-L35","name":"Lean.Name.prefixToName","line":33,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixToName","doc":"Find a name in `ns` that starts with prefix `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixToName\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">prefixToName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L29-L31","name":"Lean.Name.collectPrefixes","line":29,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.collectPrefixes","doc":"Collect all prefixes of names in `ns` into a single `NameSet`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.collectPrefixes\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">collectPrefixes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ns</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L22-L27","name":"Lean.Name.prefixes","line":22,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixes","doc":"Make a `NameSet` containing all prefixes of `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.prefixes\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">prefixes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linter/DirectoryDependency.lean#L15-L20","name":"Lean.Name.findPrefix","line":15,"kind":"def","docLink":"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.findPrefix","doc":"Find the longest prefix of `n` such that `f` returns `some` (or return `none` otherwise). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linter/DirectoryDependency.html#Lean.Name.findPrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">findPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>"}]}