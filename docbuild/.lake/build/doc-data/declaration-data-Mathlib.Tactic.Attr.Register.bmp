{"name":"Mathlib.Tactic.Attr.Register","instances":[],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.Simp.SimpTheorems","Lean.Meta.Tactic.Simp.RegisterCommand","Lean.LabelAttribute"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L97-L98","name":"Parser.Attr.pnat_to_nat_coe_proc","line":97,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.pnat_to_nat_coe_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.pnat_to_nat_coe_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">pnat_to_nat_coe_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L97-L98","name":"Parser.Attr.pnat_to_nat_coe","line":97,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.pnat_to_nat_coe","doc":"A simp set for the `pnat_to_nat` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.pnat_to_nat_coe\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">pnat_to_nat_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L94-L95","name":"Parser.Attr.enat_to_nat_coe","line":94,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_coe","doc":"A simp set for pushing coercions from `ℕ` to `ℕ∞` in `enat_to_nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_coe\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">enat_to_nat_coe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L94-L95","name":"Parser.Attr.enat_to_nat_coe_proc","line":94,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_coe_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_coe_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">enat_to_nat_coe_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L91-L92","name":"Parser.Attr.enat_to_nat_top_proc","line":91,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_top_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_top_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">enat_to_nat_top_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L91-L92","name":"Parser.Attr.enat_to_nat_top","line":91,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_top","doc":"A simp set for simplifying expressions involving `⊤` in `enat_to_nat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.enat_to_nat_top\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">enat_to_nat_top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L88-L89","name":"Parser.Attr.fin_omega_proc","line":88,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.fin_omega_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.fin_omega_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">fin_omega_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L88-L89","name":"Parser.Attr.fin_omega","line":88,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.fin_omega","doc":"A simp set for the `fin_omega` wrapper around `omega`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.fin_omega\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">fin_omega</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L85-L86","name":"Parser.Attr.is_poly","line":85,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.is_poly","doc":"A stub attribute for `is_poly`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.is_poly\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">is_poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L80-L83","name":"Parser.Attr.nontriviality","line":80,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality","doc":"The `@[nontriviality]` simp set is used by the `nontriviality` tactic to automatically\ndischarge theorems about the trivial case (where we know `Subsingleton α` and many theorems\nin e.g. groups are trivially true). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">nontriviality</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L80-L83","name":"Parser.Attr.nontriviality_proc","line":80,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.nontriviality_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">nontriviality_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L77-L78","name":"Parser.Attr.ghost_simps_proc","line":77,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">ghost_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L77-L78","name":"Parser.Attr.ghost_simps","line":77,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps","doc":"Simplification rules for ghost equations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.ghost_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">ghost_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L74-L75","name":"Parser.Attr.typevec_proc","line":74,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">typevec_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L74-L75","name":"Parser.Attr.typevec","line":74,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec","doc":"simp set for the manipulation of typevec and arrow expressions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.typevec\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">typevec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L71-L72","name":"Parser.Attr.integral_simps_proc","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">integral_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L71-L72","name":"Parser.Attr.integral_simps","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps","doc":"Simp set for integral rules. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.integral_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">integral_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L57-L69","name":"Parser.Attr.mfld_simps_proc","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">mfld_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L57-L69","name":"Parser.Attr.mfld_simps","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps","doc":"The simpset `mfld_simps` records several simp lemmas that are\nespecially useful in manifolds. It is a subset of the whole set of simp lemmas, but it makes it\npossible to have quicker proofs (when used with `squeeze_simp` or `simp only`) while retaining\nreadability.\n\nThe typical use case is the following, in a file on manifolds:\nIf `simp [foo, bar]` is slow, replace it with `squeeze_simp [foo, bar, mfld_simps]` and paste\nits output. The list of lemmas should be reasonable (contrary to the output of\n`squeeze_simp [foo, bar]` which might contain tens of lemmas), and the outcome should be quick\nenough.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.mfld_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">mfld_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L53-L55","name":"Parser.Attr.zify_simps","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps","doc":"The simpset `zify_simps` is used by the tactic `zify` to move expressions from `ℕ` to `ℤ`\nwhich gives a well-behaved subtraction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">zify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L53-L55","name":"Parser.Attr.zify_simps_proc","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.zify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">zify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L49-L51","name":"Parser.Attr.qify_simps_proc","line":49,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">qify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L49-L51","name":"Parser.Attr.qify_simps","line":49,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps","doc":"The simpset `qify_simps` is used by the tactic `qify` to move expressions from `ℕ` or `ℤ` to `ℚ`\nwhich gives a well-behaved division. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.qify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">qify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L45-L47","name":"Parser.Attr.rify_simps_proc","line":45,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rify_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L45-L47","name":"Parser.Attr.rify_simps","line":45,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps","doc":"The simpset `rify_simps` is used by the tactic `rify` to move expressions from `ℕ`, `ℤ`, or\n`ℚ` to `ℝ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rify_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rify_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L42-L43","name":"Parser.Attr.rclike_simps","line":42,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rclike_simps","doc":"\"Simp attribute for lemmas about `RCLike`\" "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rclike_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rclike_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L42-L43","name":"Parser.Attr.rclike_simps_proc","line":42,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rclike_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.rclike_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">rclike_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L39-L40","name":"Parser.Attr.parity_simps","line":39,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps","doc":"Simp attribute for lemmas about `Even` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">parity_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L39-L40","name":"Parser.Attr.parity_simps_proc","line":39,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.parity_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">parity_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L34-L37","name":"Parser.Attr.field_simps","line":34,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps","doc":"The simpset `field_simps` is used by the tactic `field_simp` to\nreduce an expression in a field to an expression of the form `n / d` where `n` and `d` are\ndivision-free. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">field_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L34-L37","name":"Parser.Attr.field_simps_proc","line":34,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.field_simps_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">field_simps_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L31-L32","name":"Parser.Attr.monad_norm","line":31,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm","doc":"Simp set for `functor_norm` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">monad_norm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L31-L32","name":"Parser.Attr.monad_norm_proc","line":31,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.monad_norm_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">monad_norm_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L21-L22","name":"Parser.Attr.functor_norm","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm","doc":"Simp set for `functor_norm` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">functor_norm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Attr/Register.lean#L21-L22","name":"Parser.Attr.functor_norm_proc","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm_proc","doc":"Simplification procedure "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Attr/Register.html#Parser.Attr.functor_norm_proc\"><span class=\"name\">Parser</span>.<span class=\"name\">Attr</span>.<span class=\"name\">functor_norm_proc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}