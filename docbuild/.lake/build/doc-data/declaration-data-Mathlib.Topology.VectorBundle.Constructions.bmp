{"name":"Mathlib.Topology.VectorBundle.Constructions","instances":[{"typeNames":["Bundle.Trivial.trivialization"],"name":"Bundle.Trivial.trivialization.isLinear","className":"Trivialization.IsLinear"},{"typeNames":["Bundle.Trivial"],"name":"Bundle.Trivial.vectorBundle","className":"VectorBundle"},{"typeNames":["Trivialization.prod"],"name":"Trivialization.prod.isLinear","className":"Trivialization.IsLinear"},{"typeNames":["Prod"],"name":"VectorBundle.prod","className":"VectorBundle"},{"typeNames":["Bundle.Pullback"],"name":"instAddCommMonoidPullback","className":"AddCommMonoid"},{"typeNames":["Bundle.Pullback"],"name":"instModulePullback","className":"Module"},{"typeNames":["Trivialization.pullback"],"name":"Trivialization.pullback_linear","className":"Trivialization.IsLinear"},{"typeNames":["Bundle.Pullback"],"name":"VectorBundle.pullback","className":"VectorBundle"}],"imports":["Init","Mathlib.Topology.FiberBundle.Constructions","Mathlib.Topology.VectorBundle.Basic","Mathlib.Analysis.NormedSpace.OperatorNorm.Prod"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L168-L180","name":"VectorBundle.pullback","line":168,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#VectorBundle.pullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#VectorBundle.pullback\"><span class=\"name\">VectorBundle</span>.<span class=\"name\">pullback</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMapClass\">ContinuousMapClass</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span> <span class=\"fn\">E</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span> (<span class=\"fn\">‚áë<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*·µñ</a> <span class=\"fn\">E</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L164-L166","name":"Trivialization.pullback_linear","line":164,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.pullback_linear","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.pullback_linear\"><span class=\"name\">Trivialization</span>.<span class=\"name\">pullback_linear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F</span> <span class=\"fn\">E</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_7}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMapClass\">ContinuousMapClass</a> <span class=\"fn\">K</span> <span class=\"fn\">B'</span> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.pullback\">pullback</a></span> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L157-L158","name":"instModulePullback","line":157,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#instModulePullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#instModulePullback\"><span class=\"name\">instModulePullback</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">B'</span> ‚Üí <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">((<span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*·µñ</a> <span class=\"fn\">E</span>) <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L155-L155","name":"instAddCommMonoidPullback","line":155,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#instAddCommMonoidPullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#instAddCommMonoidPullback\"><span class=\"name\">instAddCommMonoidPullback</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_5</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B'</span> : <a href=\"./foundational_types.html\">Type</a> u_6}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">B'</span> ‚Üí <span class=\"fn\">B</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">((<span class=\"fn\">f</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.Pullback\">*·µñ</a> <span class=\"fn\">E</span>) <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L136-L145","name":"Trivialization.continuousLinearEquivAt_prod","line":136,"kind":"theorem","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.continuousLinearEquivAt_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.continuousLinearEquivAt_prod\"><span class=\"name\">Trivialization</span>.<span class=\"name\">continuousLinearEquivAt_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e‚ÇÅ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÅ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e‚ÇÇ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÇ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span>.<a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.baseSet\">baseSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.continuousLinearEquivAt\">continuousLinearEquivAt</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.continuousLinearEquivAt\">continuousLinearEquivAt</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span> <span class=\"fn\">x</span> <span class=\"fn\">‚ãØ</span>)</span>.<a href=\"./Mathlib/Topology/Algebra/Module/Equiv.html#ContinuousLinearEquiv.prod\">prod</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.continuousLinearEquivAt\">continuousLinearEquivAt</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span> <span class=\"fn\">x</span> <span class=\"fn\">‚ãØ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L113-L132","name":"VectorBundle.prod","line":113,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#VectorBundle.prod","doc":"The product of two vector bundles is a vector bundle. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#VectorBundle.prod\"><span class=\"name\">VectorBundle</span>.<span class=\"name\">prod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_4</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u_5)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> (<span class=\"fn\">F‚ÇÅ</span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\">F‚ÇÇ</span>) <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) =&gt; <span class=\"fn\"><span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Prod\">√ó</a> <span class=\"fn\"><span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L99-L103","name":"Trivialization.prod_apply","line":99,"kind":"theorem","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.prod_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.prod_apply\"><span class=\"name\">Trivialization</span>.<span class=\"name\">prod_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e‚ÇÅ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÅ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e‚ÇÇ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÇ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Basic.html#FiberBundle\">FiberBundle</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx‚ÇÅ</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.baseSet\">baseSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx‚ÇÇ</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">e‚ÇÇ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.baseSet\">baseSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span></span> <span class=\"fn\">{ <span class=\"fn\">proj</span> := <span class=\"fn\">x</span>, <span class=\"fn\">snd</span> := <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">v‚ÇÅ</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">v‚ÇÇ</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.continuousLinearEquivAt\">continuousLinearEquivAt</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span> <span class=\"fn\">x</span> <span class=\"fn\">hx‚ÇÅ</span>)</span> <span class=\"fn\">v‚ÇÅ</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.continuousLinearEquivAt\">continuousLinearEquivAt</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span> <span class=\"fn\">x</span> <span class=\"fn\">hx‚ÇÇ</span>)</span> <span class=\"fn\">v‚ÇÇ</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L83-L94","name":"Trivialization.coordChangeL_prod","line":83,"kind":"theorem","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.coordChangeL_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.coordChangeL_prod\"><span class=\"name\">Trivialization</span>.<span class=\"name\">coordChangeL_prod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e‚ÇÅ </span><span class=\"fn\">e‚ÇÅ'</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÅ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e‚ÇÇ </span><span class=\"fn\">e‚ÇÇ'</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÇ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ'</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">‚¶É<span class=\"fn\">b</span> : <span class=\"fn\">B</span>‚¶Ñ</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span>.<a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.baseSet\">baseSet</a></span> <a href=\"./Init/Core.html#Inter.inter\">‚à©</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ'</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ'</span>)</span>.<a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization.baseSet\">baseSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.coordChangeL\">coordChangeL</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ'</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ'</span>)</span> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.coordChangeL\">coordChangeL</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span> <span class=\"fn\">e‚ÇÅ'</span> <span class=\"fn\">b</span>)</span>)</span>.<a href=\"./Mathlib/Topology/Algebra/Module/LinearMapPiProd.html#ContinuousLinearMap.prodMap\">prodMap</a></span> <span class=\"fn\">‚Üë<span class=\"fn\">(<a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.coordChangeL\">coordChangeL</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span> <span class=\"fn\">e‚ÇÇ'</span> <span class=\"fn\">b</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L79-L81","name":"Trivialization.prod.isLinear","line":79,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.prod.isLinear","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Trivialization.prod.isLinear\"><span class=\"name\">Trivialization</span>.<span class=\"name\">prod</span>.<span class=\"name\">isLinear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÅ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÅ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_4</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÅ</span> <span class=\"fn\">E‚ÇÅ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F‚ÇÇ</span> : <a href=\"./foundational_types.html\">Type</a> u_5}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F‚ÇÇ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">E‚ÇÇ</span> : <span class=\"fn\"><span class=\"fn\">B</span> ‚Üí <a href=\"./foundational_types.html\">Type</a> u_6</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace\">Bundle.TotalSpace</a> <span class=\"fn\">F‚ÇÇ</span> <span class=\"fn\">E‚ÇÇ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÅ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommMonoid\">AddCommMonoid</a> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">B</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\">E‚ÇÇ</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e‚ÇÅ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÅ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e‚ÇÇ</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/FiberBundle/Trivialization.html#Trivialization\">Trivialization</a> <span class=\"fn\">F‚ÇÇ</span> <a href=\"./Mathlib/Data/Bundle.html#Bundle.TotalSpace.proj\">Bundle.TotalSpace.proj</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÅ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">e‚ÇÇ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">e‚ÇÅ</span>.<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Trivialization.prod\">prod</a></span> <span class=\"fn\">e‚ÇÇ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L51-L59","name":"Bundle.Trivial.vectorBundle","line":51,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.vectorBundle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.vectorBundle\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">vectorBundle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#VectorBundle\">VectorBundle</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Bundle.html#Bundle.Trivial\">Trivial</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L44-L49","name":"Bundle.Trivial.trivialization.coordChangeL","line":44,"kind":"theorem","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.trivialization.coordChangeL","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.trivialization.coordChangeL\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">trivialization</span>.<span class=\"name\">coordChangeL</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.coordChangeL\">Trivialization.coordChangeL</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/Module/Equiv.html#ContinuousLinearEquiv.refl\">ContinuousLinearEquiv.refl</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/VectorBundle/Constructions.lean#L40-L41","name":"Bundle.Trivial.trivialization.isLinear","line":40,"kind":"instance","docLink":"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.trivialization.isLinear","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/VectorBundle/Constructions.html#Bundle.Trivial.trivialization.isLinear\"><span class=\"name\">Bundle</span>.<span class=\"name\">Trivial</span>.<span class=\"name\">trivialization</span>.<span class=\"name\">isLinear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ùïú</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Field/Basic.html#NontriviallyNormedField\">NontriviallyNormedField</a> <span class=\"fn\">ùïú</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#NormedAddCommGroup\">NormedAddCommGroup</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/Normed/Module/Basic.html#NormedSpace\">NormedSpace</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/VectorBundle/Basic.html#Trivialization.IsLinear\">Trivialization.IsLinear</a> <span class=\"fn\">ùïú</span> <span class=\"fn\">(<a href=\"./Mathlib/Topology/FiberBundle/Constructions.html#Bundle.Trivial.trivialization\">trivialization</a> <span class=\"fn\">B</span> <span class=\"fn\">F</span>)</span></span></div></div>"}]}