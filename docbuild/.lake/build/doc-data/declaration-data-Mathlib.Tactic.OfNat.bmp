{"name":"Mathlib.Tactic.OfNat","instances":[],"imports":["Init","Mathlib.Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/OfNat.lean#L18-L18","name":"«termOfNat(_)»","line":18,"kind":"def","docLink":"./Mathlib/Tactic/OfNat.html#«termOfNat(_)»","doc":"This macro is a shorthand for `OfNat.ofNat` combined with `no_index`.\n\nWhen writing lemmas about `OfNat.ofNat`, the term needs to be wrapped\nin `no_index` so as not to confuse `simp`, as `no_index (OfNat.ofNat n)`.\n\nSome discussion is [on Zulip here](https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.E2.9C.94.20Polynomial.2Ecoeff.20example/near/395438147).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/OfNat.html#«termOfNat(_)»\"><span class=\"name\">«termOfNat(_)»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}