{"name":"Mathlib.Data.WSeq.Productive","instances":[{"typeNames":["Stream'.WSeq.get?"],"name":"Stream'.WSeq.get?_terminates","className":"Computation.Terminates"},{"typeNames":["Stream'.WSeq.head"],"name":"Stream'.WSeq.head_terminates","className":"Computation.Terminates"},{"typeNames":["Stream'.WSeq.tail"],"name":"Stream'.WSeq.productive_tail","className":"Stream'.WSeq.Productive"},{"typeNames":["Stream'.WSeq.drop"],"name":"Stream'.WSeq.productive_dropn","className":"Stream'.WSeq.Productive"},{"typeNames":["Stream'.WSeq.ofSeq"],"name":"Stream'.WSeq.productive_ofSeq","className":"Stream'.WSeq.Productive"}],"imports":["Init","Mathlib.Data.WSeq.Relation"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L66-L69","name":"Stream'.WSeq.toSeq_ofSeq","line":66,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.toSeq_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.toSeq_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toSeq_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.toSeq\">toSeq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L53-L64","name":"Stream'.WSeq.toSeq","line":53,"kind":"def","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.toSeq","doc":"Given a productive weak sequence, we can collapse all the `think`s to\nproduce a sequence. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.toSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">toSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Seq</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L50-L51","name":"Stream'.WSeq.productive_congr","line":50,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_congr\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/Data/WSeq/Relation.html#Stream'.WSeq.Equiv\">~ʷ</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L47-L48","name":"Stream'.WSeq.productive_ofSeq","line":47,"kind":"instance","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_ofSeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_ofSeq\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_ofSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq\">Seq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L42-L43","name":"Stream'.WSeq.productive_dropn","line":42,"kind":"instance","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_dropn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_dropn\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_dropn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.drop\">drop</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L39-L40","name":"Stream'.WSeq.productive_tail","line":39,"kind":"instance","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_tail\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.tail\">tail</a></span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L36-L37","name":"Stream'.WSeq.head_terminates","line":36,"kind":"instance","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.head_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.head_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">head_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.head\">head</a></span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Terminates</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L33-L34","name":"Stream'.WSeq.get?_terminates","line":33,"kind":"instance","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Terminates</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L30-L31","name":"Stream'.WSeq.productive_iff","line":30,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.productive_iff\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">productive_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Terminates</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L28-L28","name":"Stream'.WSeq.Productive.get?_terminates","line":28,"kind":"theorem","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive.get?_terminates","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive.get?_terminates\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span>.<span class=\"name\">get?_terminates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Terminates</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L27-L27","name":"Stream'.WSeq.Productive.mk","line":27,"kind":"ctor","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive.mk\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">get?_terminates</span> : <span class=\"fn\">∀ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq.get?\">get?</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/Seq/Computation.html#Computation.Terminates\">Terminates</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\">Productive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/WSeq/Productive.lean#L24-L28","name":"Stream'.WSeq.Productive","line":24,"kind":"class","docLink":"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive","doc":"A weak sequence is *productive* if it never stalls forever - there are\nalways a finite number of `think`s between `cons` constructors.\nThe sequence itself is allowed to be infinite though. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/WSeq/Productive.html#Stream'.WSeq.Productive\"><span class=\"name\">Stream'</span>.<span class=\"name\">WSeq</span>.<span class=\"name\">Productive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/WSeq/Basic.html#Stream'.WSeq\">WSeq</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}