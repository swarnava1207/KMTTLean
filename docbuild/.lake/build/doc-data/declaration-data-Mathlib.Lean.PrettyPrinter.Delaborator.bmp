{"name":"Mathlib.Lean.PrettyPrinter.Delaborator","instances":[],"imports":["Init","Mathlib.Init","Lean.PrettyPrinter.Delaborator.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/PrettyPrinter/Delaborator.lean#L27-L32","name":"Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool","line":27,"kind":"def","docLink":"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool","doc":"Update `OptionsPerPos` at the given position, setting the key `n`\nto have the boolean value `v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos.setBool\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OptionsPerPos</span>.<span class=\"name\">setBool</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/PrettyPrinter/Delaborator.lean#L17-L25","name":"Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'","line":17,"kind":"def","docLink":"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'","doc":"Assuming the current expression in a lambda or pi,\ndescend into the body using an unused name generated from the binder's name.\nProvides `d` with both `Syntax` for the bound name as an identifier\nas well as the fresh fvar for the bound variable.\nSee also `Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/PrettyPrinter/Delaborator.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName'\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withBindingBodyUnusedName'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>"}]}