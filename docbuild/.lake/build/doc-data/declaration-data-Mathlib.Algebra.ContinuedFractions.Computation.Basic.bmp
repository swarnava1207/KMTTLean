{"name":"Mathlib.Algebra.ContinuedFractions.Computation.Basic","instances":[{"typeNames":["GenContFract.IntFractPair"],"name":"GenContFract.IntFractPair.instRepr","className":"Repr"},{"typeNames":["GenContFract.IntFractPair"],"name":"GenContFract.IntFractPair.inhabited","className":"Inhabited"},{"typeNames":["GenContFract.IntFractPair","GenContFract.IntFractPair"],"name":"GenContFract.IntFractPair.coe","className":"Coe"}],"imports":["Init","Mathlib.Algebra.Order.Floor","Mathlib.Algebra.ContinuedFractions.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L171-L185","name":"GenContFract.of","line":171,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.of","doc":"Returns the `GenContFract` of a value. In fact, the returned gcf is also a `ContFract` that\nterminates if and only if `v` is rational\n(see `Algebra.ContinuedFractions.Computation.TerminatesIffRat`).\n\nThe continued fraction representation of `v` is given by `[⌊v⌋; b₀, b₁, b₂,...]`, where\n`[b₀; b₁, b₂,...]` recursively is the continued fraction representation of `1 / (v - ⌊v⌋)`. This\nprocess stops when the fractional part `v - ⌊v⌋` hits 0 at some step.\n\nThe implementation uses `IntFractPair.stream` to obtain the partial denominators of the continued\nfraction. Refer to said function for more details about the computation process.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.of\"><span class=\"name\">GenContFract</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">LinearOrderedField</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Floor.html#FloorRing\">FloorRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Basic.html#GenContFract\">GenContFract</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L152-L167","name":"GenContFract.IntFractPair.seq1","line":152,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.seq1","doc":"Uses `IntFractPair.stream` to create a sequence with head (i.e. `seq1`) of integer and fractional\nparts of a value `v`. The first value of `IntFractPair.stream` is never `none`, so we can safely\nextract it and put the tail of the stream in the sequence part.\n\nThis is just an intermediate representation and users should not (need to) directly interact with\nit. The setup of rewriting/simplification lemmas that make the definitions easy to use is done in\n`Algebra.ContinuedFractions.Computation.Translations`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.seq1\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">seq1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">LinearOrderedField</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Floor.html#FloorRing\">FloorRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.Seq1\">Stream'.Seq1</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L145-L150","name":"GenContFract.IntFractPair.stream_isSeq","line":145,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.stream_isSeq","doc":"Shows that `IntFractPair.stream` has the sequence property, that is once we return `none` at\nposition `n`, we also return `none` at `n + 1`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.stream_isSeq\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">stream_isSeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">LinearOrderedField</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Floor.html#FloorRing\">FloorRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.stream\">IntFractPair.stream</a> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Seq/Seq.html#Stream'.IsSeq\">IsSeq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L125-L143","name":"GenContFract.IntFractPair.stream","line":125,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.stream","doc":"Creates the stream of integer and fractional parts of a value `v` needed to obtain the continued\nfraction representation of `v` in `GenContFract.of`. More precisely, given a value `v : K`, it\nrecursively computes a stream of option `ℤ × K` pairs as follows:\n- `stream v 0 = some ⟨⌊v⌋, v - ⌊v⌋⟩`\n- `stream v (n + 1) = some ⟨⌊frₙ⁻¹⌋, frₙ⁻¹ - ⌊frₙ⁻¹⌋⟩`,\n    if `stream v n = some ⟨_, frₙ⟩` and `frₙ ≠ 0`\n- `stream v (n + 1) = none`, otherwise\n\nFor example, let `(v : ℚ) := 3.4`. The process goes as follows:\n- `stream v 0 = some ⟨⌊v⌋, v - ⌊v⌋⟩ = some ⟨3, 0.4⟩`\n- `stream v 1 = some ⟨⌊0.4⁻¹⌋, 0.4⁻¹ - ⌊0.4⁻¹⌋⟩ = some ⟨⌊2.5⌋, 2.5 - ⌊2.5⌋⟩ = some ⟨2, 0.5⟩`\n- `stream v 2 = some ⟨⌊0.5⁻¹⌋, 0.5⁻¹ - ⌊0.5⁻¹⌋⟩ = some ⟨⌊2⌋, 2 - ⌊2⌋⟩ = some ⟨2, 0⟩`\n- `stream v n = none`, for `n ≥ 3`\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.stream\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">LinearOrderedField</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Floor.html#FloorRing\">FloorRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Stream/Defs.html#Stream'\">Stream'</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L121-L123","name":"GenContFract.IntFractPair.of","line":121,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.of","doc":"Creates the integer and fractional part of a value `v`, i.e. `⟨⌊v⌋, v - ⌊v⌋⟩`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.of\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Field/Defs.html#LinearOrderedField\">LinearOrderedField</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Order/Floor.html#FloorRing\">FloorRing</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L110-L113","name":"GenContFract.IntFractPair.coe_to_intFractPair","line":110,"kind":"theorem","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coe_to_intFractPair","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coe_to_intFractPair\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">coe_to_intFractPair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">K</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">fr</span> : <span class=\"fn\">K</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">{ <span class=\"fn\">b</span> := <span class=\"fn\">b</span>, <span class=\"fn\">fr</span> := <span class=\"fn\">fr</span> }</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">b</span> := <span class=\"fn\">b</span>, <span class=\"fn\">fr</span> := <span class=\"fn\"><a href=\"./Init/Coe.html#Coe.coe\">Coe.coe</a> <span class=\"fn\">fr</span></span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L106-L108","name":"GenContFract.IntFractPair.coe","line":106,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coe","doc":"Coerce a pair by coercing the fractional component. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coe\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">K</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">β</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L102-L104","name":"GenContFract.IntFractPair.coeFn","line":102,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coeFn","doc":"The coercion between integer-fraction pairs happens componentwise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.coeFn\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">coeFn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">K</span> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L89-L92","name":"GenContFract.IntFractPair.mapFr","line":89,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.mapFr","doc":"Maps a function `f` on the fractional components of a given pair.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.mapFr\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">mapFr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">K</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gp</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">β</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L86-L87","name":"GenContFract.IntFractPair.inhabited","line":86,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.inhabited\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L82-L84","name":"GenContFract.IntFractPair.instRepr","line":82,"kind":"instance","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.instRepr","doc":"Make an `IntFractPair` printable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.instRepr\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">K</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L73-L73","name":"GenContFract.IntFractPair.fr","line":73,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.fr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.fr\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">fr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">K</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L72-L72","name":"GenContFract.IntFractPair.b","line":72,"kind":"def","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.b","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.b\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">b</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L71-L71","name":"GenContFract.IntFractPair.mk","line":71,"kind":"ctor","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair.mk\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fr</span> : <span class=\"fn\">K</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\">IntFractPair</a> <span class=\"fn\">K</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/ContinuedFractions/Computation/Basic.lean#L68-L73","name":"GenContFract.IntFractPair","line":68,"kind":"structure","docLink":"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair","doc":"We collect an integer part `b = ⌊v⌋` and fractional part `fr = v - ⌊v⌋` of a value `v` in a pair\n`⟨b, fr⟩`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/ContinuedFractions/Computation/Basic.html#GenContFract.IntFractPair\"><span class=\"name\">GenContFract</span>.<span class=\"name\">IntFractPair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">K</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"}]}