{"name":"Mathlib.Tactic.Linarith.Parsing","instances":[{"typeNames":["Linarith.Monom"],"name":"Linarith.instOrdMonom","className":"Ord"}],"imports":["Init","Mathlib.Tactic.Linarith.Datatypes"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L232-L244","name":"Linarith.linearFormsAndMaxVar","line":232,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormsAndMaxVar","doc":"`linearFormsAndMaxVar red pfs` is the main interface for computing the linear forms of a list\nof expressions. Given a list `pfs` of proofs of comparisons, it produces a list `c` of `Comp`s of\nthe same length, such that `c[i]` represents the linear form of the type of `pfs[i]`.\n\nIt also returns the largest variable index that appears in comparisons in `c`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormsAndMaxVar\"><span class=\"name\">Linarith</span>.<span class=\"name\">linearFormsAndMaxVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pfs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L220-L230","name":"Linarith.toCompFold","line":220,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toCompFold","doc":"`toCompFold red e_map exprs monom_map` folds `toComp` over `exprs`,\nupdating `e_map` and `monom_map` as it goes.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toCompFold\"><span class=\"name\">Linarith</span>.<span class=\"name\">toCompFold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L205-L218","name":"Linarith.toComp","line":205,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toComp","doc":"`toComp red e e_map monom_map` converts an expression of the form `t < 0`, `t ≤ 0`, or `t = 0`\ninto a `comp` object.\n\n`e_map` maps atomic expressions to indices; `monom_map` maps monomials to indices.\nBoth of these are updated during processing and returned.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.toComp\"><span class=\"name\">Linarith</span>.<span class=\"name\">toComp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_map</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">monom_map</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/Linarith/Datatypes.html#Linarith.Comp\">Comp</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L188-L203","name":"Linarith.elimMonom","line":188,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.elimMonom","doc":"`elimMonom s map` eliminates the monomial level of the `Sum` `s`.\n\n`map` is a lookup map from monomials to variable numbers.\nThe output `RBMap ℕ ℤ` has the same structure as `s : Sum`,\nbut each monomial key is replaced with its index according to `map`.\nIf any new monomials are encountered, they are assigned variable numbers and `map` is updated.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.elimMonom\"><span class=\"name\">Linarith</span>.<span class=\"name\">elimMonom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\">Map</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L147-L186","name":"Linarith.linearFormOfExpr","line":147,"kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfExpr","doc":"`linearFormOfExpr red map e` computes the linear form of `e`.\n\n`map` is a lookup map from atomic expressions to variable numbers.\nIf a new atomic expression is encountered, it is added to the map with a new number.\nIt matches atomic expressions up to reducibility given by `red`.\n\nBecause it matches up to definitional equality, this function must be in the `MetaM` monad,\nand forces some functions that call it into `MetaM` as well.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfExpr\"><span class=\"name\">Linarith</span>.<span class=\"name\">linearFormOfExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L134-L145","name":"Linarith.linearFormOfAtom","line":134,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfAtom","doc":"`linearFormOfAtom red map e` is the atomic case for `linear_form_of_expr`.\nIf `e` appears with index `k` in `map`, it returns the singleton sum `var k`.\nOtherwise it updates `map`, adding `e` with index `n`, and returns the singleton sum `var n`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.linearFormOfAtom\"><span class=\"name\">Linarith</span>.<span class=\"name\">linearFormOfAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\">ExprMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L126-L132","name":"Linarith.ExprMap","line":126,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap","doc":"`ExprMap` is used to record atomic expressions which have been seen while processing inequality\nexpressions.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.ExprMap\"><span class=\"name\">Linarith</span>.<span class=\"name\">ExprMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L117-L119","name":"Linarith.var","line":117,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.var","doc":"A single variable `n` is represented by a sum with coefficient `1` and monomial `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.var\"><span class=\"name\">Linarith</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L113-L115","name":"Linarith.scalar","line":113,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.scalar","doc":"A scalar `z` is represented by a `Sum` with coefficient `z` and monomial `one` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.scalar\"><span class=\"name\">Linarith</span>.<span class=\"name\">scalar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L110-L111","name":"Linarith.one","line":110,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.one","doc":"The unit monomial `one` is represented by the empty RBMap. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.one\"><span class=\"name\">Linarith</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L106-L108","name":"Linarith.SumOfMonom","line":106,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.SumOfMonom","doc":"`SumOfMonom m` lifts `m` to a sum with coefficient `1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.SumOfMonom\"><span class=\"name\">Linarith</span>.<span class=\"name\">SumOfMonom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L94-L104","name":"Linarith.Sum.pow","line":94,"kind":"opaque","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.pow","doc":"The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.pow\"><span class=\"name\">Linarith</span>.<span class=\"name\">Sum</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L89-L92","name":"Linarith.Sum.mul","line":89,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.mul","doc":"`sum.mul s1 s2` distributes the multiplication of two sums. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.mul\"><span class=\"name\">Linarith</span>.<span class=\"name\">Sum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s1 </span><span class=\"fn\">s2</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L85-L87","name":"Linarith.Sum.scaleByMonom","line":85,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.scaleByMonom","doc":"`Sum.scaleByMonom s m` multiplies every monomial in `s` by `m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.scaleByMonom\"><span class=\"name\">Linarith</span>.<span class=\"name\">Sum</span>.<span class=\"name\">scaleByMonom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L82-L83","name":"Linarith.Sum.one","line":82,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.one","doc":"`1` is represented as the singleton sum of the monomial `Monom.one` with coefficient 1. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum.one\"><span class=\"name\">Linarith</span>.<span class=\"name\">Sum</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\">Sum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L79-L80","name":"Linarith.Sum","line":79,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum","doc":"Linear combinations of monomials are represented by mapping monomials to coefficients. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Sum\"><span class=\"name\">Linarith</span>.<span class=\"name\">Sum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L76-L77","name":"Linarith.instOrdMonom","line":76,"kind":"instance","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.instOrdMonom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.instOrdMonom\"><span class=\"name\">Linarith</span>.<span class=\"name\">instOrdMonom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L70-L74","name":"Linarith.Monom.lt","line":70,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.lt","doc":"Compare monomials by first comparing their keys and then their powers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.lt\"><span class=\"name\">Linarith</span>.<span class=\"name\">Monom</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> → <a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L67-L68","name":"Linarith.Monom.one","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.one","doc":"`1` is represented by the empty monomial, the product of no variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom.one\"><span class=\"name\">Linarith</span>.<span class=\"name\">Monom</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\">Monom</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L64-L65","name":"Linarith.Monom","line":64,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom","doc":"Variables (represented by natural numbers) map to their power. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Monom\"><span class=\"name\">Linarith</span>.<span class=\"name\">Monom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L59-L60","name":"Linarith.Map","line":59,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map","doc":"A local abbreviation for `RBMap` so we don't need to write `Ord.compare` each time. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#Linarith.Map\"><span class=\"name\">Linarith</span>.<span class=\"name\">Map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L48-L55","name":"instAddRBMapOfZeroOfDecidableEq_mathlib","line":48,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#instAddRBMapOfZeroOfDecidableEq_mathlib","doc":"We introduce a local instance allowing addition of `RBMap`s,\nremoving any keys with value zero.\nWe don't need to prove anything about this addition, as it is only used in meta code.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#instAddRBMapOfZeroOfDecidableEq_mathlib\"><span class=\"name\">instAddRBMapOfZeroOfDecidableEq_mathlib</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">(<a href=\"./Batteries/Data/RBMap/Basic.html#Batteries.RBMap\">Batteries.RBMap</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span> <span class=\"fn\">c</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Linarith/Parsing.lean#L35-L45","name":"List.findDefeq","line":35,"kind":"def","docLink":"./Mathlib/Tactic/Linarith/Parsing.html#List.findDefeq","doc":"`findDefeq red m e` looks for a key in `m` that is defeq to `e` (up to transparency `red`),\nand returns the value associated with this key if it exists.\nOtherwise, it fails.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Linarith/Parsing.html#List.findDefeq\"><span class=\"name\">List</span>.<span class=\"name\">findDefeq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Lean.Meta.TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">v</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">v</span></span></div></div>"}]}