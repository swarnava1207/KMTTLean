{"name":"Mathlib.Topology.Category.Stonean.Basic","instances":[{"typeNames":["TopCat.carrier"],"name":"CompHaus.instExtremallyDisconnectedCarrierToTopTrueOfProjective","className":"ExtremallyDisconnected"},{"typeNames":[],"name":"Stonean.instHasPropExtremallyDisconnectedCarrier","className":"CompHausLike.HasProp"},{"typeNames":["TopCat.carrier"],"name":"Stonean.instExtremallyDisconnectedCarrierToTop","className":"ExtremallyDisconnected"},{"typeNames":["Prefunctor.obj"],"name":"Stonean.instProjectiveCompHausCompHaus","className":"CategoryTheory.Projective"},{"typeNames":["Prefunctor.obj"],"name":"Stonean.instProjectiveProfiniteObjToProfinite","className":"CategoryTheory.Projective"},{"typeNames":[],"name":"Stonean.instProjective","className":"CategoryTheory.Projective"},{"typeNames":["CompHaus.presentation.π"],"name":"CompHaus.presentation.epi_π","className":"CategoryTheory.Epi"},{"typeNames":["Profinite.presentation.π"],"name":"Profinite.presentation.epi_π","className":"CategoryTheory.Epi"}],"imports":["Init","Mathlib.Topology.ExtremallyDisconnected","Mathlib.Topology.Category.CompHaus.Projective","Mathlib.Topology.Category.Profinite.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L296-L299","name":"Profinite.projective_of_extrDisc","line":296,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.projective_of_extrDisc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.projective_of_extrDisc\"><span class=\"name\">Profinite</span>.<span class=\"name\">projective_of_extrDisc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hX</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L292-L292","name":"Profinite.lift_lifts_assoc","line":292,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts_assoc\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift_lifts_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z✝</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\">lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L292-L294","name":"Profinite.lift_lifts","line":292,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift_lifts\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift_lifts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\">lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L275-L290","name":"Profinite.lift","line":275,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift","doc":"```\n               X\n               |\n              (f)\n               |\n               \\/\n  Z ---(e)---> Y\n```\nIf `Z` is a Stonean space, `f : X ⟶ Y` an epi in `Profinite` and `e : Z ⟶ Y` is arbitrary,\nthen `lift e f` is a fixed (but arbitrary) lift of `e` to a morphism `Z ⟶ X`. It is\n`CompHaus.lift e f` as a morphism in `Profinite`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.lift\"><span class=\"name\">Profinite</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Z</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L267-L273","name":"Profinite.presentation.epi_π","line":267,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.epi_π","doc":"The morphism from `presentation X` to `X` is an epimorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.epi_π\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span>.<span class=\"name\">epi_π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π\">π</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L262-L265","name":"Profinite.presentation.π","line":262,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π","doc":"The morphism from `presentation X` to `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation.π\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span>.<span class=\"name\">π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">Stonean.toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation\">presentation</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L255-L260","name":"Profinite.presentation","line":255,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation","doc":"If `X` is profinite, `presentation X` is a Stonean space equipped with an epimorphism down to\n`X` (see `Profinite.presentation.π` and `Profinite.presentation.epi_π`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Profinite.presentation\"><span class=\"name\">Profinite</span>.<span class=\"name\">presentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L240-L249","name":"CompHaus.Gleason","line":240,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.Gleason","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.Gleason\"><span class=\"name\">CompHaus</span>.<span class=\"name\">Gleason</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L236-L236","name":"CompHaus.lift_lifts_assoc","line":236,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts_assoc\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift_lifts_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">Z</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\">compHaus</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z✝</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\">lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">e</span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L236-L238","name":"CompHaus.lift_lifts","line":236,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift_lifts\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift_lifts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">Z</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\">compHaus</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\">lift</a> <span class=\"fn\">e</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L218-L234","name":"CompHaus.lift","line":218,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift","doc":"```\n               X\n               |\n              (f)\n               |\n               \\/\n  Z ---(e)---> Y\n```\nIf `Z` is a Stonean space, `f : X ⟶ Y` an epi in `CompHaus` and `e : Z ⟶ Y` is arbitrary, then\n`lift e f` is a fixed (but arbitrary) lift of `e` to a morphism `Z ⟶ X`. It exists because\n`Z` is a projective object in `CompHaus`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.lift\"><span class=\"name\">CompHaus</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">Z</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\">compHaus</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">Z</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\">compHaus</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L215-L216","name":"Stonean.compHaus","line":215,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus","doc":"The underlying `CompHaus` of a `Stonean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.compHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">compHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L210-L213","name":"CompHaus.presentation.epi_π","line":210,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.epi_π","doc":"The morphism from `presentation X` to `X` is an epimorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.epi_π\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span>.<span class=\"name\">epi_π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π\">π</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L205-L208","name":"CompHaus.presentation.π","line":205,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π","doc":"The morphism from `presentation X` to `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation.π\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span>.<span class=\"name\">π</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">Stonean.toCompHaus</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation\">presentation</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L188-L203","name":"CompHaus.presentation","line":188,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation","doc":"If `X` is compact Hausdorff, `presentation X` is a Stonean space equipped with an epimorphism\ndown to `X` (see `CompHaus.presentation.π` and `CompHaus.presentation.epi_π`). It is a\n\"constructive\" witness to the fact that `CompHaus` has enough projectives. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.presentation\"><span class=\"name\">CompHaus</span>.<span class=\"name\">presentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L172-L182","name":"Stonean.instProjective","line":172,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjective","doc":"Every Stonean space is projective in `Stonean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjective\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L160-L170","name":"Stonean.instProjectiveProfiniteObjToProfinite","line":160,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveProfiniteObjToProfinite","doc":"Every Stonean space is projective in `Profinite` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveProfiniteObjToProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjectiveProfiniteObjToProfinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\">toProfinite</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L148-L158","name":"Stonean.instProjectiveCompHausCompHaus","line":148,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveCompHausCompHaus","doc":"Every Stonean space is projective in `CompHaus` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instProjectiveCompHausCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">instProjectiveCompHausCompHaus</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">toCompHaus</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L115-L146","name":"Stonean.epi_iff_surjective","line":115,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.epi_iff_surjective","doc":"A morphism in `Stonean` is an epi iff it is surjective.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.epi_iff_surjective\"><span class=\"name\">Stonean</span>.<span class=\"name\">epi_iff_surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Epi\">CategoryTheory.Epi</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L104-L113","name":"Stonean.mkFinite","line":104,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mkFinite","doc":"A finite discrete space as a Stonean space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.mkFinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">mkFinite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Order.html#DiscreteTopology\">DiscreteTopology</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L100-L102","name":"Stonean.toProfinite","line":100,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite","doc":"The functor from Stonean spaces to profinite spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toProfinite\"><span class=\"name\">Stonean</span>.<span class=\"name\">toProfinite</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a> <a href=\"./Mathlib/Topology/Category/Profinite/Basic.html#Profinite\">Profinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L98-L98","name":"Stonean.instExtremallyDisconnectedCarrierToTop","line":98,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instExtremallyDisconnectedCarrierToTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instExtremallyDisconnectedCarrierToTop\"><span class=\"name\">Stonean</span>.<span class=\"name\">instExtremallyDisconnectedCarrierToTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L92-L96","name":"Stonean.of","line":92,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.of","doc":"Construct a term of `Stonean` from a type endowed with the structure of a\ncompact, Hausdorff and extremally disconnected topological space.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.of\"><span class=\"name\">Stonean</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Filter.html#CompactSpace\">CompactSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Separation/Hausdorff.html#T2Space\">T2Space</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L88-L90","name":"Stonean.instHasPropExtremallyDisconnectedCarrier","line":88,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instHasPropExtremallyDisconnectedCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.instHasPropExtremallyDisconnectedCarrier\"><span class=\"name\">Stonean</span>.<span class=\"name\">instHasPropExtremallyDisconnectedCarrier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">CompHausLike.HasProp</a> <span class=\"fn\">(fun (<span class=\"fn\">Y</span> : <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\">Y</span></span></span>)</span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L82-L84","name":"Stonean.fullyFaithfulToCompHaus","line":82,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.fullyFaithfulToCompHaus","doc":"The forgetful functor `Stonean ⥤ CompHaus` is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.fullyFaithfulToCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">fullyFaithfulToCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\">toCompHaus</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.FullyFaithful\">FullyFaithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L78-L80","name":"Stonean.toCompHaus","line":78,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus","doc":"The (forgetful) functor from Stonean spaces to compact Hausdorff spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean.toCompHaus\"><span class=\"name\">Stonean</span>.<span class=\"name\">toCompHaus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a> <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L68-L68","name":"CompHaus.toStonean_toTop","line":68,"kind":"theorem","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean_toTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean_toTop\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toStonean_toTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean\">toStonean</a></span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L67-L72","name":"CompHaus.toStonean","line":67,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean","doc":"`Projective` implies `Stonean`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.toStonean\"><span class=\"name\">CompHaus</span>.<span class=\"name\">toStonean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\">Stonean</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L50-L65","name":"CompHaus.instExtremallyDisconnectedCarrierToTopTrueOfProjective","line":50,"kind":"instance","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.instExtremallyDisconnectedCarrierToTopTrueOfProjective","doc":"`Projective` implies `ExtremallyDisconnected`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#CompHaus.instExtremallyDisconnectedCarrierToTopTrueOfProjective\"><span class=\"name\">CompHaus</span>.<span class=\"name\">instExtremallyDisconnectedCarrierToTopTrueOfProjective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/CompHaus/Basic.html#CompHaus\">CompHaus</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Preadditive/Projective/Basic.html#CategoryTheory.Projective\">CategoryTheory.Projective</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/ExtremallyDisconnected.html#ExtremallyDisconnected\">ExtremallyDisconnected</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Topology/Category/Stonean/Basic.lean#L45-L46","name":"Stonean","line":45,"kind":"def","docLink":"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean","doc":"`Stonean` is the category of extremally disconnected compact Hausdorff spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Topology/Category/Stonean/Basic.html#Stonean\"><span class=\"name\">Stonean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}