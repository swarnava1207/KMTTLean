{"name":"Mathlib.Data.Finsupp.Notation","instances":[{"typeNames":["Finsupp"],"name":"Finsupp.instRepr","className":"Repr"}],"imports":["Init","Mathlib.Data.Finsupp.Single"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L80-L89","name":"Finsupp.instRepr","line":80,"kind":"instance","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.instRepr","doc":"Display `Finsupp` using `fun₀` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.instRepr\"><span class=\"name\">Finsupp</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/Finsupp/Defs.html#Finsupp\">→₀</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L72-L78","name":"Finsupp.updateUnexpander","line":72,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.updateUnexpander","doc":"Unexpander for the `fun₀ | i => x` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.updateUnexpander\"><span class=\"name\">Finsupp</span>.<span class=\"name\">updateUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L66-L70","name":"Finsupp.singleUnexpander","line":66,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.singleUnexpander","doc":"Unexpander for the `fun₀ | i => x` notation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.singleUnexpander\"><span class=\"name\">Finsupp</span>.<span class=\"name\">singleUnexpander</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Lean.PrettyPrinter.Unexpander</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L44-L48","name":"Finsupp.elabUpdate₀","line":44,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.elabUpdate₀","doc":"`Finsupp` elaborator for `update₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.elabUpdate₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">elabUpdate₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L38-L42","name":"Finsupp.elabSingle₀","line":38,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.elabSingle₀","doc":"`Finsupp` elaborator for `single₀`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.elabSingle₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">elabSingle₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElab\">Lean.Elab.Term.TermElab</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L35-L36","name":"Finsupp.stxUpdate₀","line":35,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.stxUpdate₀","doc":"Implementation detail for `fun₀`, used by both `Finsupp` and `DFinsupp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.stxUpdate₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">stxUpdate₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L33-L34","name":"Finsupp.stxSingle₀","line":33,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.stxSingle₀","doc":"Implementation detail for `fun₀`, used by both `Finsupp` and `DFinsupp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.stxSingle₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">stxSingle₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L25-L31","name":"Finsupp.fun₀","line":25,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀","doc":"`fun₀ | i => a` is notation for `Finsupp.single i a`, and with multiple match arms,\n`fun₀ ... | i => a` is notation for `Finsupp.update (fun₀ ...) i a`.\n\nAs a result, if multiple match arms coincide, the last one takes precedence. \n\nIf the expected type is `Π₀ i, α i` (`DFinsupp`)\n  and `Mathlib.Data.DFinsupp.Notation` is imported,\n  then this is notation for `DFinsupp.single` and  `Dfinsupp.update` instead."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀\"><span class=\"name\">Finsupp</span>.<span class=\"name\">fun₀</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Finsupp/Notation.lean#L21-L23","name":"Finsupp.fun₀.matchAlts","line":21,"kind":"def","docLink":"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀.matchAlts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Finsupp/Notation.html#Finsupp.fun₀.matchAlts\"><span class=\"name\">Finsupp</span>.<span class=\"name\">fun₀</span>.<span class=\"name\">matchAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.Parser\">Lean.Parser.Parser</a></div></div>"}]}