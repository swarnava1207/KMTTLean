{"name":"Mathlib.Data.Num.Bitwise","instances":[{"typeNames":["PosNum"],"name":"PosNum.instOrOp","className":"OrOp"},{"typeNames":["PosNum","PosNum","Num"],"name":"PosNum.instHAndNum","className":"HAnd"},{"typeNames":["PosNum","PosNum","Num"],"name":"PosNum.instHXorNum","className":"HXor"},{"typeNames":["PosNum","Nat","PosNum"],"name":"PosNum.instHShiftLeftNat","className":"HShiftLeft"},{"typeNames":["PosNum","Nat","Num"],"name":"PosNum.instHShiftRightNatNum","className":"HShiftRight"},{"typeNames":["Num"],"name":"Num.instOrOp","className":"OrOp"},{"typeNames":["Num"],"name":"Num.instAndOp","className":"AndOp"},{"typeNames":["Num"],"name":"Num.instXor","className":"Xor"},{"typeNames":["Num","Nat","Num"],"name":"Num.instHShiftLeftNat","className":"HShiftLeft"},{"typeNames":["Num","Nat","Num"],"name":"Num.instHShiftRightNat","className":"HShiftRight"},{"typeNames":["Eq"],"name":"instDecidableEqNzsNum","className":"Decidable"},{"typeNames":["Eq"],"name":"instDecidableEqSNum","className":"Decidable"},{"typeNames":["NzsNum","SNum"],"name":"instCoeNzsNumSNum","className":"Coe"},{"typeNames":["SNum"],"name":"instZeroSNum","className":"Zero"},{"typeNames":["NzsNum"],"name":"instOneNzsNum","className":"One"},{"typeNames":["SNum"],"name":"instOneSNum","className":"One"},{"typeNames":["NzsNum"],"name":"instInhabitedNzsNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"instInhabitedSNum","className":"Inhabited"},{"typeNames":["SNum"],"name":"SNum.instNeg","className":"Neg"},{"typeNames":["SNum"],"name":"SNum.instAdd","className":"Add"},{"typeNames":["SNum"],"name":"SNum.instSub","className":"Sub"},{"typeNames":["SNum"],"name":"SNum.instMul","className":"Mul"}],"imports":["Init","Mathlib.Data.Num.Basic","Mathlib.Data.Vector.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L438-L439","name":"SNum.instMul","line":438,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instMul\"><span class=\"name\">SNum</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L434-L436","name":"SNum.mul","line":434,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.mul","doc":"Multiply two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.mul\"><span class=\"name\">SNum</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L431-L432","name":"SNum.instSub","line":431,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instSub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instSub\"><span class=\"name\">SNum</span>.<span class=\"name\">instSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L427-L429","name":"SNum.sub","line":427,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sub","doc":"Subtract two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.sub\"><span class=\"name\">SNum</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L424-L425","name":"SNum.instAdd","line":424,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instAdd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instAdd\"><span class=\"name\">SNum</span>.<span class=\"name\">instAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L420-L422","name":"SNum.add","line":420,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.add","doc":"Add two `SNum`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.add\"><span class=\"name\">SNum</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L414-L418","name":"SNum.cAdd","line":414,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.cAdd","doc":"`SNum.cAdd n m a` is `n + m + a` (where `a` should be read as either 0 or 1).\n`a` represents a carry bit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.cAdd\"><span class=\"name\">SNum</span>.<span class=\"name\">cAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L409-L412","name":"SNum.bits","line":409,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bits","doc":"`a.bits n` is the vector of the `n` first bits of `a` (starting from the LSB). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bits\"><span class=\"name\">SNum</span>.<span class=\"name\">bits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L397-L403","name":"SNum.czAdd","line":397,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.czAdd","doc":"`SNum.czAdd a b n` is `n + a - b` (where `a` and `b` should be read as either 0 or 1).\nThis is useful to implement the carry system in `cAdd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.czAdd\"><span class=\"name\">SNum</span>.<span class=\"name\">czAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L394-L395","name":"SNum.instNeg","line":394,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.instNeg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.instNeg\"><span class=\"name\">SNum</span>.<span class=\"name\">instNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L390-L392","name":"SNum.neg","line":390,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.neg","doc":"The opposite of a `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.neg\"><span class=\"name\">SNum</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L386-L388","name":"SNum.pred","line":386,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.pred","doc":"The predecessor of a `SNum` (i.e. the operation of removing one). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.pred\"><span class=\"name\">SNum</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L382-L384","name":"SNum.succ","line":382,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.succ","doc":"The successor of a `SNum` (i.e. the operation adding one). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.succ\"><span class=\"name\">SNum</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L376-L380","name":"SNum.testBit","line":376,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.testBit","doc":"`SNum.testBit n a` is `true` iff the `n`-th bit (starting from the LSB) of `a` is active.\nIf the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.testBit\"><span class=\"name\">SNum</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L372-L374","name":"SNum.rec'","line":372,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.rec'","doc":"An induction principle for `SNum` which avoids relying on `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.rec'\"><span class=\"name\">SNum</span>.<span class=\"name\">rec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L367-L370","name":"SNum.drec'","line":367,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.drec'","doc":"A dependent induction principle for `SNum` which avoids relying on `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.drec'\"><span class=\"name\">SNum</span>.<span class=\"name\">drec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">zero</a> <span class=\"fn\">b</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">p</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L361-L365","name":"SNum.tail","line":361,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.tail","doc":"The `tail` of a `SNum` is obtained by removing the LSB.\nEdge cases: `tail 1 = 0`, `tail (-2) = -1`, `tail 0 = 0` and `tail (-1) = -1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.tail\"><span class=\"name\">SNum</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L356-L359","name":"SNum.head","line":356,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.head","doc":"The `head` of a `SNum` is the boolean value of its LSB. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.head\"><span class=\"name\">SNum</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L343-L348","name":"NzsNum.drec'","line":343,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.drec'","doc":"A dependent induction principle for `NzsNum`, with base cases\n`0 : SNum` and `(-1) : SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.drec'\"><span class=\"name\">NzsNum</span>.<span class=\"name\">drec'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./foundational_types.html\">Sort</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">z</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">SNum.zero</a> <span class=\"fn\">b</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">SNum.bit</a> <span class=\"fn\">b</span> <span class=\"fn\">p</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\">SNum.nz</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L335-L335","name":"SNum.bit_one","line":335,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit_one\"><span class=\"name\">SNum</span>.<span class=\"name\">bit_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">zero</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\">nz</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb\">NzsNum.msb</a> <span class=\"fn\">b</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L333-L333","name":"SNum.bit_zero","line":333,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit_zero\"><span class=\"name\">SNum</span>.<span class=\"name\">bit_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\">bit</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">zero</a> <span class=\"fn\">b</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\">zero</a> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L329-L331","name":"SNum.bit1","line":329,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit1","doc":"Add an active bit at the end of a `SNum`. This mimics `ZNum.bit1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit1\"><span class=\"name\">SNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L325-L327","name":"SNum.bit0","line":325,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit0","doc":"Add an inactive bit at the end of a `SNum`. This mimics `ZNum.bit0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit0\"><span class=\"name\">SNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L322-L323","name":"SNum.«term_::_»","line":322,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term_::_»","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.«term_::_»\"><span class=\"name\">SNum</span>.<span class=\"name\">«term_::_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L316-L320","name":"SNum.bit","line":316,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.bit","doc":"Add a bit at the end of a `SNum`. This mimics `NzsNum.bit`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.bit\"><span class=\"name\">SNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L313-L314","name":"SNum.«term~_»","line":313,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.«term~_»","doc":"Bitwise `not` for `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.«term~_»\"><span class=\"name\">SNum</span>.<span class=\"name\">«term~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L306-L310","name":"SNum.not","line":306,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.not","doc":"Bitwise `not` for `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.not\"><span class=\"name\">SNum</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L301-L304","name":"SNum.sign","line":301,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.sign","doc":"Sign of a `SNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.sign\"><span class=\"name\">SNum</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L289-L293","name":"NzsNum.tail","line":289,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.tail","doc":"The `tail` of a `NzsNum` is the `SNum` obtained by removing the LSB.\nEdge cases: `tail 1 = 0` and `tail (-2) = -1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.tail\"><span class=\"name\">NzsNum</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L284-L287","name":"NzsNum.head","line":284,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.head","doc":"The `head` of a `NzsNum` is the boolean value of its LSB. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.head\"><span class=\"name\">NzsNum</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L280-L282","name":"NzsNum.bit1","line":280,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit1","doc":"Add an active bit at the end of a `NzsNum`. This mimics `PosNum.bit1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit1\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L276-L278","name":"NzsNum.bit0","line":276,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit0","doc":"Add an inactive bit at the end of a `NzsNum`. This mimics `PosNum.bit0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit0\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L273-L274","name":"NzsNum.«term~_»","line":273,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term~_»","doc":"Bitwise `not` for `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term~_»\"><span class=\"name\">NzsNum</span>.<span class=\"name\">«term~_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L267-L271","name":"NzsNum.not","line":267,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.not","doc":"Bitwise `not` for `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.not\"><span class=\"name\">NzsNum</span>.<span class=\"name\">not</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L262-L265","name":"NzsNum.sign","line":262,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.sign","doc":"Sign of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.sign\"><span class=\"name\">NzsNum</span>.<span class=\"name\">sign</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L259-L260","name":"NzsNum.«term_::_»","line":259,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term_::_»","doc":"Add a bit at the end of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.«term_::_»\"><span class=\"name\">NzsNum</span>.<span class=\"name\">«term_::_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L248-L249","name":"instInhabitedSNum","line":248,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instInhabitedSNum\"><span class=\"name\">instInhabitedSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L245-L246","name":"instInhabitedNzsNum","line":245,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instInhabitedNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instInhabitedNzsNum\"><span class=\"name\">instInhabitedNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L242-L243","name":"instOneSNum","line":242,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instOneSNum\"><span class=\"name\">instOneSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L239-L240","name":"instOneNzsNum","line":239,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instOneNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instOneNzsNum\"><span class=\"name\">instOneNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#One\">One</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L236-L237","name":"instZeroSNum","line":236,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instZeroSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instZeroSNum\"><span class=\"name\">instZeroSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Zero\">Zero</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L233-L234","name":"instCoeNzsNumSNum","line":233,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instCoeNzsNumSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instCoeNzsNumSNum\"><span class=\"name\">instCoeNzsNumSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L231-L231","name":"instDecidableEqSNum","line":231,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqSNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instDecidableEqSNum\"><span class=\"name\">instDecidableEqSNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L230-L230","name":"SNum.nz","line":230,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.nz","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.nz\"><span class=\"name\">SNum</span>.<span class=\"name\">nz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L229-L229","name":"SNum.zero","line":229,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum.zero\"><span class=\"name\">SNum</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#SNum\">SNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L214-L231","name":"SNum","line":214,"kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#SNum","doc":"Alternative representation of integers using a sign bit at the end.\nThe convention on sign here is to have the argument to `msb` denote\nthe sign of the MSB itself, with all higher bits set to the negation\nof this sign. The result is interpreted in two's complement.\n\n   13  = ..0001101(base 2) = nz (bit1 (bit0 (bit1 (msb true))))\n   -13 = ..1110011(base 2) = nz (bit1 (bit1 (bit0 (msb false))))\n\nAs with `Num`, a special case must be added for zero, which has no msb,\nbut by two's complement symmetry there is a second special case for -1.\nHere the `Bool` field indicates the sign of the number.\n\n   0  = ..0000000(base 2) = zero false\n   -1 = ..1111111(base 2) = zero true "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#SNum\"><span class=\"name\">SNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L212-L212","name":"instDecidableEqNzsNum","line":212,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#instDecidableEqNzsNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#instDecidableEqNzsNum\"><span class=\"name\">instDecidableEqNzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L210-L211","name":"NzsNum.bit","line":210,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit","doc":"Add a bit at the end of a `NzsNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.bit\"><span class=\"name\">NzsNum</span>.<span class=\"name\">bit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L209-L209","name":"NzsNum.msb","line":209,"kind":"ctor","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum.msb\"><span class=\"name\">NzsNum</span>.<span class=\"name\">msb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\">NzsNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L206-L212","name":"NzsNum","line":206,"kind":"inductive","docLink":"./Mathlib/Data/Num/Bitwise.html#NzsNum","doc":"This is a nonzero (and \"non minus one\") version of `SNum`.\nSee the documentation of `SNum` for more details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#NzsNum\"><span class=\"name\">NzsNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L199-L202","name":"Num.oneBits","line":199,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.oneBits","doc":"`n.oneBits` is the list of indices of active bits in the binary representation of `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.oneBits\"><span class=\"name\">Num</span>.<span class=\"name\">oneBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L193-L197","name":"Num.testBit","line":193,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.testBit\"><span class=\"name\">Num</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L191-L191","name":"Num.shiftr_eq_shiftRight","line":191,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftr_eq_shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr_eq_shiftRight\"><span class=\"name\">Num</span>.<span class=\"name\">shiftr_eq_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr\">shiftr</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L189-L189","name":"Num.instHShiftRightNat","line":189,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftRightNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftRightNat\"><span class=\"name\">Num</span>.<span class=\"name\">instHShiftRightNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L184-L187","name":"Num.shiftr","line":184,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftr","doc":"Right-shift the binary representation of a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftr\"><span class=\"name\">Num</span>.<span class=\"name\">shiftr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L182-L182","name":"Num.shiftl_eq_shiftLeft","line":182,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftl_eq_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl_eq_shiftLeft\"><span class=\"name\">Num</span>.<span class=\"name\">shiftl_eq_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl\">shiftl</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L180-L180","name":"Num.instHShiftLeftNat","line":180,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftLeftNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instHShiftLeftNat\"><span class=\"name\">Num</span>.<span class=\"name\">instHShiftLeftNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L175-L178","name":"Num.shiftl","line":175,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.shiftl","doc":"Left-shift the binary representation of a `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.shiftl\"><span class=\"name\">Num</span>.<span class=\"name\">shiftl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L173-L173","name":"Num.lxor_eq_xor","line":173,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lxor_eq_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor_eq_xor\"><span class=\"name\">Num</span>.<span class=\"name\">lxor_eq_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor\">lxor</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L171-L171","name":"Num.instXor","line":171,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instXor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instXor\"><span class=\"name\">Num</span>.<span class=\"name\">instXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Xor\">Xor</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L165-L169","name":"Num.lxor","line":165,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lxor","doc":"Bitwise \"xor\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lxor\"><span class=\"name\">Num</span>.<span class=\"name\">lxor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L152-L163","name":"Num.ldiff","line":152,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `Num`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.ldiff\"><span class=\"name\">Num</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L150-L150","name":"Num.land_eq_and","line":150,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.land_eq_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.land_eq_and\"><span class=\"name\">Num</span>.<span class=\"name\">land_eq_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#Num.land\">land</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L148-L148","name":"Num.instAndOp","line":148,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instAndOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instAndOp\"><span class=\"name\">Num</span>.<span class=\"name\">instAndOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L142-L146","name":"Num.land","line":142,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.land","doc":"Bitwise \"and\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.land\"><span class=\"name\">Num</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L140-L140","name":"Num.lor_eq_or","line":140,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lor_eq_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor_eq_or\"><span class=\"name\">Num</span>.<span class=\"name\">lor_eq_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor\">lor</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L138-L138","name":"Num.instOrOp","line":138,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.instOrOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.instOrOp\"><span class=\"name\">Num</span>.<span class=\"name\">instOrOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L132-L136","name":"Num.lor","line":132,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#Num.lor","doc":"Bitwise \"or\" for `Num`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#Num.lor\"><span class=\"name\">Num</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L126-L126","name":"PosNum.shiftr_eq_shiftRight","line":126,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr_eq_shiftRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr_eq_shiftRight\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftr_eq_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr\">shiftr</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L124-L124","name":"PosNum.instHShiftRightNatNum","line":124,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftRightNatNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftRightNatNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHShiftRightNatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftRight\">HShiftRight</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L117-L122","name":"PosNum.shiftr","line":117,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr","doc":"Right-shift the binary representation of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftr\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L113-L115","name":"PosNum.shiftl_succ_eq_bit0_shiftl","line":113,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_succ_eq_bit0_shiftl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_succ_eq_bit0_shiftl\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl_succ_eq_bit0_shiftl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span>).<a href=\"./Mathlib/Data/Num/Basic.html#PosNum.bit0\">bit0</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L110-L110","name":"PosNum.shiftl_eq_shiftLeft","line":110,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_eq_shiftLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl_eq_shiftLeft\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl_eq_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl\">shiftl</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L108-L108","name":"PosNum.instHShiftLeftNat","line":108,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftLeftNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHShiftLeftNat\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHShiftLeftNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HShiftLeft\">HShiftLeft</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L103-L106","name":"PosNum.shiftl","line":103,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl","doc":"Left-shift the binary representation of a `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.shiftl\"><span class=\"name\">PosNum</span>.<span class=\"name\">shiftl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L97-L101","name":"PosNum.oneBits","line":97,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.oneBits","doc":"`n.oneBits 0` is the list of indices of active bits in the binary representation of `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.oneBits\"><span class=\"name\">PosNum</span>.<span class=\"name\">oneBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L87-L95","name":"PosNum.testBit","line":87,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.testBit","doc":"`a.testBit n` is `true` iff the `n`-th bit (starting from the LSB) in the binary representation\nof `a` is active. If the size of `a` is less than `n`, this evaluates to `false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.testBit\"><span class=\"name\">PosNum</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L85-L85","name":"PosNum.lxor_eq_xor","line":85,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor_eq_xor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor_eq_xor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lxor_eq_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor\">lxor</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L83-L83","name":"PosNum.instHXorNum","line":83,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHXorNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHXorNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHXorNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HXor\">HXor</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L71-L81","name":"PosNum.lxor","line":71,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor","doc":"Bitwise \"xor\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lxor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lxor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L53-L69","name":"PosNum.ldiff","line":53,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.ldiff","doc":"Bitwise `fun a b ↦ a && !b` for `PosNum`. For example, `ldiff 5 9 = 4`:\n```\n 101\n1001\n----\n 100\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.ldiff\"><span class=\"name\">PosNum</span>.<span class=\"name\">ldiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L51-L51","name":"PosNum.land_eq_and","line":51,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.land_eq_and","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land_eq_and\"><span class=\"name\">PosNum</span>.<span class=\"name\">land_eq_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land\">land</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L49-L49","name":"PosNum.instHAndNum","line":49,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instHAndNum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instHAndNum\"><span class=\"name\">PosNum</span>.<span class=\"name\">instHAndNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HAnd\">HAnd</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L38-L47","name":"PosNum.land","line":38,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.land","doc":"Bitwise \"and\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.land\"><span class=\"name\">PosNum</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#Num\">Num</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L36-L36","name":"PosNum.lor_eq_or","line":36,"kind":"theorem","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lor_eq_or","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor_eq_or\"><span class=\"name\">PosNum</span>.<span class=\"name\">lor_eq_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor\">lor</a></span> <span class=\"fn\">q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L34-L34","name":"PosNum.instOrOp","line":34,"kind":"instance","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.instOrOp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.instOrOp\"><span class=\"name\">PosNum</span>.<span class=\"name\">instOrOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Num/Bitwise.lean#L23-L32","name":"PosNum.lor","line":23,"kind":"def","docLink":"./Mathlib/Data/Num/Bitwise.html#PosNum.lor","doc":"Bitwise \"or\" for `PosNum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Num/Bitwise.html#PosNum.lor\"><span class=\"name\">PosNum</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a> → <a href=\"./Mathlib/Data/Num/Basic.html#PosNum\">PosNum</a></span></div></div>"}]}