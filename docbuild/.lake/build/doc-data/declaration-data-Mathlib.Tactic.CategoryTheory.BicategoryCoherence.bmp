{"name":"Mathlib.Tactic.CategoryTheory.BicategoryCoherence","instances":[{"typeNames":["CategoryTheory.CategoryStruct.id"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHomId","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom"},{"typeNames":["CategoryTheory.CategoryStruct.comp"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHomComp","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom"},{"typeNames":[],"name":"Mathlib.Tactic.BicategoryCoherence.liftHomOf","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom"},{"typeNames":["CategoryTheory.CategoryStruct.id"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂Id","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.hom"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorHom","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.inv"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorInv","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.hom"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorHom","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.inv"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorInv","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.hom"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorHom","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Iso.inv"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorInv","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.CategoryStruct.comp"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂Comp","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Bicategory.whiskerLeft"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerLeft","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"},{"typeNames":["CategoryTheory.Bicategory.whiskerRight"],"name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerRight","className":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂"}],"imports":["Init","Mathlib.CategoryTheory.Bicategory.Coherence","Mathlib.Tactic.CategoryTheory.BicategoricalComp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L155-L162","name":"Mathlib.Tactic.BicategoryCoherence.assoc_liftHom₂","line":155,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.assoc_liftHom₂","doc":"Auxiliary simp lemma for the `coherence` tactic:\nthis move brackets to the left in order to expose a maximal prefix\nbuilt out of unitors and associators.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.assoc_liftHom₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">assoc_liftHom₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h </span><span class=\"fn\">i</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ι</span> : <span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">θ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">θ</span> <span class=\"fn\">ι</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span>)</span> <span class=\"fn\">ι</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L136-L139","name":"Mathlib.Tactic.BicategoryCoherence.whisker_simps","line":136,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.whisker_simps","doc":"Simp lemmas for rewriting a 2-morphism into a normal form.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.whisker_simps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">whisker_simps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L130-L132","name":"Mathlib.Tactic.BicategoryCoherence.tacticBicategory_coherence","line":130,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.tacticBicategory_coherence","doc":"Coherence tactic for bicategories.\nUse `pure_coherence` instead, which is a frontend to this one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.tacticBicategory_coherence\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">tacticBicategory_coherence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L111-L128","name":"Mathlib.Tactic.BicategoryCoherence.bicategory_coherence","line":111,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.bicategory_coherence","doc":"Coherence tactic for bicategories. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.bicategory_coherence\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">bicategory_coherence</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L103-L109","name":"Mathlib.Tactic.BicategoryCoherence.mkLiftMap₂LiftExpr","line":103,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.mkLiftMap₂LiftExpr","doc":"Auxiliary definition for `bicategorical_coherence`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.mkLiftMap₂LiftExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">mkLiftMap₂LiftExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L94-L100","name":"Mathlib.Tactic.BicategoryCoherence.exception'","line":94,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.exception'","doc":"Helper function for throwing exceptions with respect to the main goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.exception'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">exception'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L90-L92","name":"Mathlib.Tactic.BicategoryCoherence.exception","line":90,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.exception","doc":"Helper function for throwing exceptions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.exception\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">exception</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L84-L86","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerRight","line":84,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerRight","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerRight\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂WhiskerRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">CategoryTheory.Bicategory.whiskerRight</a> <span class=\"fn\">η</span> <span class=\"fn\">h</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L80-L82","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerLeft","line":80,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerLeft","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂WhiskerLeft\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂WhiskerLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">CategoryTheory.Bicategory.whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">η</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L76-L78","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂Comp","line":76,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂Comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂Comp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂Comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g </span><span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">θ</span> : <span class=\"fn\">g</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">h</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">θ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">θ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L72-L74","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorInv","line":72,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂AssociatorInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.associator\">CategoryTheory.Bicategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L68-L70","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorHom","line":68,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂AssociatorHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂AssociatorHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c </span><span class=\"fn\">d</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">h</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.associator\">CategoryTheory.Bicategory.associator</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L65-L66","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorInv","line":65,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂RightUnitorInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.rightUnitor\">CategoryTheory.Bicategory.rightUnitor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L62-L63","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorHom","line":62,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂RightUnitorHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂RightUnitorHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.rightUnitor\">CategoryTheory.Bicategory.rightUnitor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L59-L60","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorInv","line":59,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorInv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂LeftUnitorInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.leftUnitor\">CategoryTheory.Bicategory.leftUnitor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L56-L57","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorHom","line":56,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂LeftUnitorHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂LeftUnitorHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.leftUnitor\">CategoryTheory.Bicategory.leftUnitor</a> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L53-L54","name":"Mathlib.Tactic.BicategoryCoherence.liftHom₂Id","line":53,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂Id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHom₂Id\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHom₂Id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L51-L51","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂.lift","line":51,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂.lift","doc":"A lift of a 2-morphism to the free bicategory.\nThis should only exist for \"structural\" 2-morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂.lift\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom₂</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift\">LiftHom.lift</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift\">LiftHom.lift</a> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L48-L48","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂.mk","line":48,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom₂</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lift</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift\">LiftHom.lift</a> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift\">LiftHom.lift</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\">LiftHom₂</a> <span class=\"fn\">η</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L47-L51","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom₂","line":47,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂","doc":"A typeclass carrying a choice of lift of a 2-morphism from `B` to `FreeBicategory B`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom₂\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η</span> : <span class=\"fn\">f</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">g</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L45-L45","name":"Mathlib.Tactic.BicategoryCoherence.liftHomOf","line":45,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomOf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomOf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHomOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L42-L43","name":"Mathlib.Tactic.BicategoryCoherence.liftHomComp","line":42,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomComp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomComp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHomComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L40-L40","name":"Mathlib.Tactic.BicategoryCoherence.liftHomId","line":40,"kind":"instance","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.liftHomId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">liftHomId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L38-L38","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom.lift","line":38,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift","doc":"A lift of a morphism to the free bicategory.\nThis should only exist for \"structural\" morphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.lift\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.of\">CategoryTheory.FreeBicategory.of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.of\">CategoryTheory.FreeBicategory.of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L35-L35","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom.mk","line":35,"kind":"ctor","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lift</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.of\">CategoryTheory.FreeBicategory.of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Free.html#CategoryTheory.FreeBicategory.of\">CategoryTheory.FreeBicategory.of</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\">LiftHom</a> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/BicategoryCoherence.lean#L34-L38","name":"Mathlib.Tactic.BicategoryCoherence.LiftHom","line":34,"kind":"class","docLink":"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom","doc":"A typeclass carrying a choice of lift of a 1-morphism from `B` to `FreeBicategory B`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/BicategoryCoherence.html#Mathlib.Tactic.BicategoryCoherence.LiftHom\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryCoherence</span>.<span class=\"name\">LiftHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">CategoryTheory.Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>"}]}