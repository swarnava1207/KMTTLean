{"name":"Plausible.Testable","instances":[{"typeNames":["Plausible.TestResult"],"name":"Plausible.instInhabitedTestResult","className":"Inhabited"},{"typeNames":["Plausible.Configuration"],"name":"Plausible.instInhabitedConfiguration","className":"Inhabited"},{"typeNames":["Plausible.Configuration"],"name":"Plausible.instToExprConfiguration","className":"Lean.ToExpr"},{"typeNames":[],"name":"Plausible.instPrintableProp","className":"Plausible.PrintableProp"},{"typeNames":["Plausible.TestResult"],"name":"Plausible.TestResult.instToString","className":"ToString"},{"typeNames":["And"],"name":"Plausible.Testable.andTestable","className":"Plausible.Testable"},{"typeNames":["Or"],"name":"Plausible.Testable.orTestable","className":"Plausible.Testable"},{"typeNames":["Iff"],"name":"Plausible.Testable.iffTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.decGuardTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.forallTypesTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.forallTypesULiftTestable","className":"Plausible.Testable"},{"typeNames":["OptionT"],"name":"Plausible.Testable.instInhabitedOptionTOfPure","className":"Inhabited"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.varTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.propVarTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.unusedVarTestable","className":"Plausible.Testable"},{"typeNames":["Plausible.NamedBinder"],"name":"Plausible.Testable.subtypeVarTestable","className":"Plausible.Testable"},{"typeNames":[],"name":"Plausible.Testable.decidableTestable","className":"Plausible.Testable"},{"typeNames":["Eq"],"name":"Plausible.Eq.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["Ne"],"name":"Plausible.Ne.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["LE.le"],"name":"Plausible.LE.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["LT.lt"],"name":"Plausible.LT.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["And"],"name":"Plausible.And.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["Or"],"name":"Plausible.Or.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["Iff"],"name":"Plausible.Iff.printableProp","className":"Plausible.PrintableProp"},{"typeNames":[],"name":"Plausible.Imp.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["Not"],"name":"Plausible.Not.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["True"],"name":"Plausible.True.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["False"],"name":"Plausible.False.printableProp","className":"Plausible.PrintableProp"},{"typeNames":["Eq"],"name":"Plausible.Bool.printableProp","className":"Plausible.PrintableProp"}],"imports":["Init","Lean.Elab.Tactic.Config","Plausible.Sampleable"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L611-L611","name":"Plausible.«command#test_»","line":611,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.«command#test_»","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.«command#test_»\"><span class=\"name\">Plausible</span>.<span class=\"name\">«command#test_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L588-L602","name":"Plausible.Testable.check","line":588,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.check","doc":"Run a test suite for `p` and throw an exception if `p` does not hold. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.check\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf\">Decorations.DecorationsOf</a> <span class=\"fn\">p</span></span> := by mk_decorations)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p'</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">Lean.CoreM</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L569-L583","name":"Plausible.Decorations.tacticMk_decorations","line":569,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Decorations.tacticMk_decorations","doc":"In a goal of the shape `⊢ DecorationsOf p`, `mk_decoration` examines\nthe syntax of `p` and adds `NamedBinder` around universal quantifications\nto improve error messages. This tool can be used in the declaration of a\nfunction as follows:\n```lean\ndef foo (p : Prop) (p' : Decorations.DecorationsOf p := by mk_decorations) [Testable p'] : ...\n```\n`p` is the parameter given by the user, `p'` is a definitionally equivalent\nproposition where the quantifiers are annotated with `NamedBinder`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.tacticMk_decorations\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">tacticMk_decorations</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L561-L564","name":"Plausible.Decorations.DecorationsOf","line":561,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf","doc":"`DecorationsOf p` is used as a hint to `mk_decorations` to specify\nthat the goal should be satisfied with a proposition equivalent to `p`\nwith added annotations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.DecorationsOf\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">DecorationsOf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L546-L559","name":"Plausible.Decorations.addDecorations","line":546,"kind":"opaque","docLink":"./Plausible/Testable.html#Plausible.Decorations.addDecorations","doc":"Traverse the syntax of a proposition to find universal quantifiers\nquantifiers and add `NamedBinder` annotations next to them. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Decorations.addDecorations\"><span class=\"name\">Plausible</span>.<span class=\"name\">Decorations</span>.<span class=\"name\">addDecorations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L533-L538","name":"Plausible.Testable.checkIO","line":533,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.checkIO","doc":"Run a test suite for `p` in `BaseIO` using the global RNG in `stdGenRef`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.checkIO\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">checkIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L529-L531","name":"Plausible.Testable.runSuite","line":529,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.runSuite","doc":"Try to find a counter-example of `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runSuite\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Rand\">Rand</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L514-L527","name":"Plausible.Testable.runSuiteAux","line":514,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.runSuiteAux","doc":"Try `n` times to find a counter-example for `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runSuiteAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runSuiteAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Rand\">Rand</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L507-L512","name":"Plausible.giveUp","line":507,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.giveUp","doc":"Count the number of times the test procedure gave up. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.giveUp\"><span class=\"name\">Plausible</span>.<span class=\"name\">giveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L497-L505","name":"Plausible.retry","line":497,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.retry","doc":"Execute `cmd` and repeat every time the result is `gaveUp` (at most `n` times). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.retry\"><span class=\"name\">Plausible</span>.<span class=\"name\">retry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Rand\">Rand</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Rand\">Rand</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L489-L490","name":"Plausible.Bool.printableProp","line":489,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Bool.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Bool.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Bool</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L486-L487","name":"Plausible.False.printableProp","line":486,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.False.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.False.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">False</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L483-L484","name":"Plausible.True.printableProp","line":483,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.True.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.True.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">True</span>.<span class=\"name\">printableProp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L480-L481","name":"Plausible.Not.printableProp","line":480,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Not.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Not.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Not</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L477-L478","name":"Plausible.Imp.printableProp","line":477,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Imp.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Imp.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Imp</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">(<span class=\"fn\">x</span> → <span class=\"fn\">y</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L474-L475","name":"Plausible.Iff.printableProp","line":474,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Iff.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Iff.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Iff</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L471-L472","name":"Plausible.Or.printableProp","line":471,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Or.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Or.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Or</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L468-L469","name":"Plausible.And.printableProp","line":468,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.And.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.And.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">And</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">x</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L463-L464","name":"Plausible.LT.printableProp","line":463,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.LT.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.LT.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">LT</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L460-L461","name":"Plausible.LE.printableProp","line":460,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.LE.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.LE.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">LE</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L457-L458","name":"Plausible.Ne.printableProp","line":457,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Ne.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Ne.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Ne</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L454-L455","name":"Plausible.Eq.printableProp","line":454,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Eq.printableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Eq.printableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Eq</span>.<span class=\"name\">printableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L439-L446","name":"Plausible.Testable.decidableTestable","line":439,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.decidableTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.decidableTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decidableTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L424-L437","name":"Plausible.Testable.subtypeVarTestable","line":424,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.subtypeVarTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.subtypeVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">subtypeVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">(<span class=\"fn\">p</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var'</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var'</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L414-L422","name":"Plausible.Testable.unusedVarTestable","line":414,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.unusedVarTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.unusedVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">unusedVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L407-L412","name":"Plausible.Testable.propVarTestable","line":407,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.propVarTestable","doc":"Test a universal property about propositions "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.propVarTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">propVarTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Prop</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>))</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">p</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L386-L405","name":"Plausible.Testable.varTestable","line":386,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.varTestable","doc":"Test a universal property by creating a sample of the right type and instantiating the\nbound variable with it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.varTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">varTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L375-L384","name":"Plausible.Testable.minimize","line":375,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.minimize","doc":"Once a property fails to hold on an example, look for smaller counter-examples\nto show the user. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.minimize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L350-L373","name":"Plausible.Testable.minimizeAux","line":350,"kind":"opaque","docLink":"./Plausible/Testable.html#Plausible.Testable.minimizeAux","doc":"Shrink a counter-example `x` by using `Shrinkable.shrink x`, picking the first\ncandidate that falsifies a property and recursively shrinking that one.\nThe process is guaranteed to terminate because `shrink x` produces\na proof that all the values it produces are smaller (according to `SizeOf`)\nthan `x`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.minimizeAux\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">minimizeAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt\">SampleableExt</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.proxy\">SampleableExt.proxy</a> <span class=\"fn\">α</span></span>) × <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">(<a href=\"./Plausible/Sampleable.html#Plausible.SampleableExt.interp\">SampleableExt.interp</a> <span class=\"fn\">x</span>)</span>)</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L345-L346","name":"Plausible.Testable.instInhabitedOptionTOfPure","line":345,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.instInhabitedOptionTOfPure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.instInhabitedOptionTOfPure\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">instInhabitedOptionTOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L337-L342","name":"Plausible.Testable.addShrinks","line":337,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.addShrinks","doc":"Increase the number of shrinking steps in a test result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.addShrinks\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">addShrinks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L323-L335","name":"Plausible.Testable.formatFailure","line":323,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.formatFailure","doc":"Format the counter-examples found in a test failure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.formatFailure\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">formatFailure</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L316-L321","name":"Plausible.Testable.forallTypesULiftTestable","line":316,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.forallTypesULiftTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.forallTypesULiftTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">forallTypesULiftTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a> u), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L309-L313","name":"Plausible.Testable.forallTypesTestable","line":309,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.forallTypesTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.forallTypesTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">forallTypesTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">f</span> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <a href=\"./foundational_types.html\">Type</a>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L295-L307","name":"Plausible.Testable.decGuardTestable","line":295,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.decGuardTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.decGuardTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">decGuardTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">p</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span>) → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">h</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.NamedBinder\">NamedBinder</a> <span class=\"fn\">var</span> <span class=\"fn\">(∀ (<span class=\"fn\">h</span> : <span class=\"fn\">p</span>), <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">h</span></span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L282-L291","name":"Plausible.Testable.iffTestable","line":282,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.iffTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.iffTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">iffTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">q</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">q</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L270-L280","name":"Plausible.Testable.orTestable","line":270,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.orTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.orTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">orTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L264-L268","name":"Plausible.Testable.andTestable","line":264,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.Testable.andTestable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.andTestable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">andTestable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L260-L262","name":"Plausible.Testable.slimTrace","line":260,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.slimTrace","doc":"A `dbgTrace` with special formatting "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.slimTrace\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">slimTrace</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L258-L258","name":"Plausible.Testable.runProp","line":258,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.runProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.runProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">runProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L245-L250","name":"Plausible.Configuration.verbose","line":245,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.verbose","doc":"A configuration with all the trace options enabled, useful for debugging. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.verbose\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L237-L239","name":"Plausible.TestResult.isFailure","line":237,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.isFailure","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.isFailure\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">isFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L232-L235","name":"Plausible.TestResult.addVarInfo","line":232,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.addVarInfo","doc":"Add some formatting to the information recorded by `addInfo`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.addVarInfo\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addVarInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L222-L230","name":"Plausible.TestResult.addInfo","line":222,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.addInfo","doc":"When we assign a value to a universally quantified variable,\nwe record that value using this function so that our counter-examples\ncan be informative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.addInfo\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">addInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L218-L220","name":"Plausible.TestResult.iff","line":218,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.iff","doc":"Test `q` by testing `p` and proving the equivalence between the two. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.iff\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">q</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L209-L216","name":"Plausible.TestResult.imp","line":209,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.imp","doc":"If `q → p`, then `¬ p → ¬ q` which means that testing `p` can allow us\nto find counter-examples to `q`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.imp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">imp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">q</span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> (<a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span>) <span class=\"fn\">(<a href=\"./Init/Core.html#PSum.inl\">PSum.inl</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L195-L207","name":"Plausible.TestResult.or","line":195,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.or","doc":"Combine the test result for properties `p` and `q` to create a test for their disjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.or\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">q</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L186-L193","name":"Plausible.TestResult.and","line":186,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.and","doc":"Combine the test result for properties `p` and `q` to create a test for their conjunction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.and\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">q</span></span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> (<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">q</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L181-L184","name":"Plausible.TestResult.combine","line":181,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.combine","doc":"Applicative combinator proof carrying test results. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.combine\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">(<span class=\"fn\">p</span> → <span class=\"fn\">q</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span> → <a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">q</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L179-L179","name":"Plausible.TestResult.instToString","line":179,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.TestResult.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.instToString\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L173-L177","name":"Plausible.TestResult.toString","line":173,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.TestResult.toString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.toString\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L169-L169","name":"Plausible.NamedBinder","line":169,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.NamedBinder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.NamedBinder\"><span class=\"name\">Plausible</span>.<span class=\"name\">NamedBinder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_n</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L167-L167","name":"Plausible.Testable.run","line":167,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Testable.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.run\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minimize</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L166-L166","name":"Plausible.Testable.mk","line":166,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.Testable.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">run</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <span class=\"fn\"><a href=\"./Plausible/Gen.html#Plausible.Gen\">Gen</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.Testable\">Testable</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L165-L167","name":"Plausible.Testable","line":165,"kind":"class","docLink":"./Plausible/Testable.html#Plausible.Testable","doc":"`Testable p` uses random examples to try to disprove `p`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Testable\"><span class=\"name\">Plausible</span>.<span class=\"name\">Testable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L162-L163","name":"Plausible.instPrintableProp","line":162,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.instPrintableProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instPrintableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">instPrintableProp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L156-L156","name":"Plausible.PrintableProp.printProp","line":156,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.PrintableProp.printProp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp.printProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">printProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L155-L155","name":"Plausible.PrintableProp.mk","line":155,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.PrintableProp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">printProp</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.PrintableProp\">PrintableProp</a> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L150-L156","name":"Plausible.PrintableProp","line":150,"kind":"class","docLink":"./Plausible/Testable.html#Plausible.PrintableProp","doc":"`PrintableProp p` allows one to print a proposition so that\n`Plausible` can indicate how values relate to each other.\nIt's basically a poor man's delaborator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.PrintableProp\"><span class=\"name\">Plausible</span>.<span class=\"name\">PrintableProp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L145-L148","name":"Plausible.elabConfig","line":145,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.elabConfig","doc":"Allow elaboration of `Configuration` arguments to tactics.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.elabConfig\"><span class=\"name\">Plausible</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L138-L143","name":"Plausible.instToExprConfiguration","line":138,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.instToExprConfiguration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instToExprConfiguration\"><span class=\"name\">Plausible</span>.<span class=\"name\">instToExprConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">Lean.ToExpr</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L135-L135","name":"Plausible.instInhabitedConfiguration","line":135,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.instInhabitedConfiguration","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedConfiguration\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedConfiguration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L134-L134","name":"Plausible.Configuration.quiet","line":134,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.quiet","doc":"Disable output.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.quiet\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">quiet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L130-L130","name":"Plausible.Configuration.randomSeed","line":130,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.randomSeed","doc":"Hard code the seed to use for the RNG\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.randomSeed\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">randomSeed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L126-L126","name":"Plausible.Configuration.traceShrinkCandidates","line":126,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceShrinkCandidates","doc":"Enable tracing of all attempted values during shrinking.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceShrinkCandidates\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrinkCandidates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L122-L122","name":"Plausible.Configuration.traceShrink","line":122,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceShrink","doc":"Enable basic tracing of shrinking.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceShrink\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceShrink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L118-L118","name":"Plausible.Configuration.traceSuccesses","line":118,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceSuccesses","doc":"Enable tracing of values that fulfilled the property and were thus discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceSuccesses\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceSuccesses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L114-L114","name":"Plausible.Configuration.traceDiscarded","line":114,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.traceDiscarded","doc":"Enable tracing of values that didn't fulfill preconditions and were thus discarded.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.traceDiscarded\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">traceDiscarded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L110-L110","name":"Plausible.Configuration.numRetries","line":110,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.numRetries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.numRetries\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numRetries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L109-L109","name":"Plausible.Configuration.maxSize","line":109,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.maxSize","doc":"The maximum size of the values to generate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.maxSize\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">maxSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L105-L105","name":"Plausible.Configuration.numInst","line":105,"kind":"def","docLink":"./Plausible/Testable.html#Plausible.Configuration.numInst","doc":"How many test instances to generate.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.numInst\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">numInst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L101-L101","name":"Plausible.Configuration.mk","line":101,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.Configuration.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numInst </span><span class=\"fn\">maxSize </span><span class=\"fn\">numRetries</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceDiscarded </span><span class=\"fn\">traceSuccesses </span><span class=\"fn\">traceShrink </span><span class=\"fn\">traceShrinkCandidates</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">randomSeed</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quiet</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Plausible/Testable.html#Plausible.Configuration\">Configuration</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L100-L135","name":"Plausible.Configuration","line":100,"kind":"structure","docLink":"./Plausible/Testable.html#Plausible.Configuration","doc":"Configuration for testing a property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.Configuration\"><span class=\"name\">Plausible</span>.<span class=\"name\">Configuration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L98-L98","name":"Plausible.instInhabitedTestResult","line":98,"kind":"instance","docLink":"./Plausible/Testable.html#Plausible.instInhabitedTestResult","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.instInhabitedTestResult\"><span class=\"name\">Plausible</span>.<span class=\"name\">instInhabitedTestResult</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">a✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L91-L97","name":"Plausible.TestResult.failure","line":91,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.TestResult.failure","doc":"A counter-example to `p`; the strings specify values for the relevant variables.\n`failure h vs n` also carries a proof that `p` does not hold. This way, we can\nguarantee that there will be no false positive. The last component, `n`,\nis the number of times that the counter-example was shrunk.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.failure\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">p</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L86-L90","name":"Plausible.TestResult.gaveUp","line":86,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.TestResult.gaveUp","doc":"Give up when a well-formed example cannot be generated.\n`gaveUp n` tells us that `n` invalid examples were tried.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.gaveUp\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">gaveUp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L78-L85","name":"Plausible.TestResult.success","line":78,"kind":"ctor","docLink":"./Plausible/Testable.html#Plausible.TestResult.success","doc":"Succeed when we find another example satisfying `p`.\nIn `success h`, `h` is an optional proof of the proposition.\nWithout the proof, all we know is that we found one example\nwhere `p` holds. With a proof, the one test was sufficient to\nprove that `p` holds and we do not need to keep finding examples.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult.success\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span>.<span class=\"name\">success</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> <a href=\"./Init/Core.html#PSum\">⊕'</a> <span class=\"fn\">p</span> → <span class=\"fn\"><a href=\"./Plausible/Testable.html#Plausible.TestResult\">TestResult</a> <span class=\"fn\">p</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Testable.lean#L76-L98","name":"Plausible.TestResult","line":76,"kind":"inductive","docLink":"./Plausible/Testable.html#Plausible.TestResult","doc":"Result of trying to disprove `p` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Testable.html#Plausible.TestResult\"><span class=\"name\">Plausible</span>.<span class=\"name\">TestResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}