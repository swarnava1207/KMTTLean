{"name":"Mathlib.Combinatorics.Young.YoungDiagram","instances":[{"typeNames":["YoungDiagram","Prod"],"name":"YoungDiagram.instSetLikeProdNat","className":"SetLike"},{"typeNames":[],"name":"YoungDiagram.decidableMem","className":"Decidable"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instMax","className":"Max"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instMin","className":"Min"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instOrderBot","className":"OrderBot"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instInhabited","className":"Inhabited"},{"typeNames":["YoungDiagram"],"name":"YoungDiagram.instDistribLattice","className":"DistribLattice"}],"imports":["Init","Mathlib.Data.Finset.Preimage","Mathlib.Data.Finset.Prod","Mathlib.Data.SetLike.Basic","Mathlib.Order.UpperLower.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L453-L453","name":"YoungDiagram.equivListRowLens_apply_coe","line":453,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_apply_coe\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_apply_coe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\">equivListRowLens</a> <span class=\"fn\">μ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L453-L453","name":"YoungDiagram.equivListRowLens_symm_apply","line":453,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ww</span> : <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\">equivListRowLens</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">ww</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\">↑<span class=\"fn\">ww</span></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L451-L458","name":"YoungDiagram.equivListRowLens","line":451,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens","doc":"Equivalence between Young diagrams and weakly decreasing lists of positive natural numbers.\nA Young diagram `μ` is equivalent to a list of row lengths. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.equivListRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">equivListRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L445-L449","name":"YoungDiagram.rowLens_ofRowLens_eq_self","line":445,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self","doc":"The right_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_ofRowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_ofRowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hw</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L439-L443","name":"YoungDiagram.ofRowLens_to_rowLens_eq_self","line":439,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self","doc":"The left_inv direction of the equivalence "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens_to_rowLens_eq_self\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens_to_rowLens_eq_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L434-L437","name":"YoungDiagram.rowLen_ofRowLens","line":434,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens","doc":"The length of the `i`th row in `ofRowLens w hw` is the `i`th entry of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hw</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L427-L432","name":"YoungDiagram.rowLens_length_ofRowLens","line":427,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens","doc":"The number of rows in `ofRowLens w hw` is the length of `w` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_length_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_length_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hw</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">w</span>, <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L423-L425","name":"YoungDiagram.mem_ofRowLens","line":423,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_ofRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hw</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\">ofRowLens</a> <span class=\"fn\">w</span> <span class=\"fn\">hw</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">c</span>.1</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L407-L421","name":"YoungDiagram.ofRowLens","line":407,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens","doc":"Young diagram from a sorted list "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ofRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ofRowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L401-L405","name":"YoungDiagram.mem_cellsOfRowLens","line":401,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cellsOfRowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\">YoungDiagram.cellsOfRowLens</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>), <span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">c</span>.1</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L393-L399","name":"YoungDiagram.cellsOfRowLens","line":393,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens","doc":"The cells making up a `YoungDiagram` from a list of row lengths "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cellsOfRowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cellsOfRowLens</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L372-L375","name":"YoungDiagram.pos_of_mem_rowLens","line":372,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.pos_of_mem_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">pos_of_mem_rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L369-L370","name":"YoungDiagram.rowLens_sorted","line":369,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens_sorted\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens_sorted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/Sort.html#List.Sorted\">List.Sorted</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L365-L367","name":"YoungDiagram.length_rowLens","line":365,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.length_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">length_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L361-L363","name":"YoungDiagram.get_rowLens","line":361,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.get_rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">get_rowLens</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\">rowLens</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L357-L359","name":"YoungDiagram.rowLens","line":357,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens","doc":"List of row lengths of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLens\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLens</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L340-L342","name":"YoungDiagram.colLen_anti","line":340,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L337-L338","name":"YoungDiagram.colLen_eq_card","line":337,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">col</a></span> <span class=\"fn\">j</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L330-L335","name":"YoungDiagram.col_eq_prod","line":330,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">col</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j</span>)</span></span> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">j</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L326-L328","name":"YoungDiagram.mem_iff_lt_colLen","line":326,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_colLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L322-L324","name":"YoungDiagram.rowLen_transpose","line":322,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L318-L320","name":"YoungDiagram.colLen_transpose","line":318,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\">colLen</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L314-L316","name":"YoungDiagram.colLen","line":314,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen","doc":"Length of a column of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.colLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">colLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L310-L312","name":"YoungDiagram.exists_not_mem_col","line":310,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> ∉ <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L308-L308","name":"YoungDiagram.mk_mem_col_iff","line":308,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">col</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L305-L306","name":"YoungDiagram.mem_col_iff","line":305,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_col_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_col_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\">col</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">c</span>.2</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L301-L303","name":"YoungDiagram.col","line":301,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col","doc":"The `j`-th column of a Young diagram consists of the cells whose second coordinate is `j`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.col\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">col</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L285-L290","name":"YoungDiagram.rowLen_anti","line":285,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_anti\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_anti</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i1 </span><span class=\"fn\">i2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i2</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L282-L283","name":"YoungDiagram.rowLen_eq_card","line":282,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen_eq_card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen_eq_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">row</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L275-L280","name":"YoungDiagram.row_eq_prod","line":275,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row_eq_prod\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row_eq_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">row</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">i</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Mathlib/Data/SProd.html#SProd.sprod\">×ˢ</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L270-L273","name":"YoungDiagram.mem_iff_lt_rowLen","line":270,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_iff_lt_rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_iff_lt_rowLen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\">rowLen</a></span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L266-L268","name":"YoungDiagram.rowLen","line":266,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen","doc":"Length of a row of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.rowLen\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">rowLen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L257-L264","name":"YoungDiagram.exists_not_mem_row","line":257,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.exists_not_mem_row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">exists_not_mem_row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> ∉ <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L255-L255","name":"YoungDiagram.mk_mem_row_iff","line":255,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk_mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk_mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">row</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L252-L253","name":"YoungDiagram.mem_row_iff","line":252,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_row_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_row_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\">row</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">c</span>.1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L248-L250","name":"YoungDiagram.row","line":248,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row","doc":"The `i`-th row of a Young diagram consists of the cells whose first coordinate is `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.row\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">row</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L228-L228","name":"YoungDiagram.transposeOrderIso_apply","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\">transposeOrderIso</a> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L228-L228","name":"YoungDiagram.transposeOrderIso_symm_apply","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso_symm_apply\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso_symm_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\">transposeOrderIso</a>)</span> <span class=\"fn\">μ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L227-L230","name":"YoungDiagram.transposeOrderIso","line":227,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso","doc":"Transposing Young diagrams is an `OrderIso`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transposeOrderIso\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transposeOrderIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L223-L225","name":"YoungDiagram.transpose_mono","line":223,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_mono\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_le</span> : <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L215-L221","name":"YoungDiagram.transpose_le_iff","line":215,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_le_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L209-L213","name":"YoungDiagram.le_of_transpose_le","line":209,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.le_of_transpose_le\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">le_of_transpose_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_le</span> : <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L203-L206","name":"YoungDiagram.transpose_eq_iff","line":203,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L198-L201","name":"YoungDiagram.transpose_eq_iff_eq_transpose","line":198,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_eq_iff_eq_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_eq_iff_eq_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ν</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L193-L196","name":"YoungDiagram.transpose_transpose","line":193,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose_transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L189-L191","name":"YoungDiagram.mem_transpose","line":189,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_transpose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\">transpose</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Prod.html#Prod.swap\">swap</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L180-L187","name":"YoungDiagram.transpose","line":180,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose","doc":"The `transpose` of a Young diagram is obtained by swapping i's with j's. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.transpose\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">transpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L174-L176","name":"YoungDiagram.card","line":174,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card","doc":"Cardinality of a Young diagram "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.card\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L168-L170","name":"YoungDiagram.instDistribLattice","line":168,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instDistribLattice\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instDistribLattice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L165-L166","name":"YoungDiagram.instInhabited","line":165,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instInhabited\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L161-L163","name":"YoungDiagram.coe_bot","line":161,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L157-L159","name":"YoungDiagram.not_mem_bot","line":157,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.not_mem_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">not_mem_bot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L153-L155","name":"YoungDiagram.cells_bot","line":153,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_bot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L141-L151","name":"YoungDiagram.instOrderBot","line":141,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBot","doc":"The empty Young diagram is (⊥ : young_diagram). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instOrderBot\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instOrderBot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#OrderBot\">OrderBot</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L137-L139","name":"YoungDiagram.mem_inf","line":137,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">ν</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L133-L135","name":"YoungDiagram.coe_inf","line":133,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">ν</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L129-L131","name":"YoungDiagram.cells_inf","line":129,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_inf\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_inf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">ν</span>).<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L122-L127","name":"YoungDiagram.instMin","line":122,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instMin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instMin\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L118-L120","name":"YoungDiagram.mem_sup","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">ν</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L114-L116","name":"YoungDiagram.coe_sup","line":114,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.coe_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">coe_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">ν</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">μ</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\">ν</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L110-L112","name":"YoungDiagram.cells_sup","line":110,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_sup\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_sup</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">ν</span>).<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L103-L108","name":"YoungDiagram.instMax","line":103,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instMax","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instMax\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L99-L101","name":"YoungDiagram.cells_ssubset_iff","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_ssubset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_ssubset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#HasSSubset.SSubset\">⊂</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L95-L97","name":"YoungDiagram.cells_subset_iff","line":95,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells_subset_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells_subset_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ </span><span class=\"fn\">ν</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">ν</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">μ</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">ν</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L87-L91","name":"YoungDiagram.up_left_mem","line":87,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem","doc":"In \"English notation\", a Young diagram is drawn so that (i1, j1) ≤ (i2, j2)\nmeans (i1, j1) is weakly up-and-left of (i2, j2). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.up_left_mem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">up_left_mem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i1 </span><span class=\"fn\">i2 </span><span class=\"fn\">j1 </span><span class=\"fn\">j2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcell</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i2</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">i1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">j1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L84-L85","name":"YoungDiagram.decidableMem","line":84,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.decidableMem\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">decidableMem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L79-L82","name":"YoungDiagram.mem_mk","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cells</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLowerSet</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">{ <span class=\"fn\">cells</span> := <span class=\"fn\">cells</span>, <span class=\"fn\">isLowerSet</span> := <span class=\"fn\">isLowerSet</span> }</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">cells</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L75-L77","name":"YoungDiagram.mem_cells","line":75,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mem_cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mem_cells</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">μ</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">μ</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">μ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L70-L73","name":"YoungDiagram.instSetLikeProdNat","line":70,"kind":"instance","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeProdNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.instSetLikeProdNat\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">instSetLikeProdNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/SetLike/Basic.html#SetLike\">SetLike</a> <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L66-L66","name":"YoungDiagram.isLowerSet","line":66,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet","doc":"Cells are up-left justified, witnessed by the fact that `cells` is a lower set in `ℕ × ℕ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.isLowerSet\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">isLowerSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L64-L64","name":"YoungDiagram.cells","line":64,"kind":"def","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells","doc":"A finite set which represents a finite collection of cells on the `ℕ × ℕ` grid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">cells</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L62-L62","name":"YoungDiagram.mk","line":62,"kind":"ctor","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.mk\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cells</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isLowerSet</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsLowerSet\">IsLowerSet</a> <span class=\"fn\">↑<span class=\"fn\">cells</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L61-L61","name":"YoungDiagram.ext_iff","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext_iff\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L61-L61","name":"YoungDiagram.ext","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.ext\"><span class=\"name\">YoungDiagram</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\">YoungDiagram</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cells</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram.cells\">cells</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Young/YoungDiagram.lean#L55-L66","name":"YoungDiagram","line":55,"kind":"structure","docLink":"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram","doc":"A Young diagram is a finite collection of cells on the `ℕ × ℕ` grid such that whenever\na cell is present, so are all the ones above and to the left of it. Like matrices, an `(i, j)` cell\nis a cell in row `i` and column `j`, where rows are enumerated downward and columns rightward.\n\nYoung diagrams are modeled as finite sets in `ℕ × ℕ` that are lower sets with respect to the\nstandard order on products. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Young/YoungDiagram.html#YoungDiagram\"><span class=\"name\">YoungDiagram</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}