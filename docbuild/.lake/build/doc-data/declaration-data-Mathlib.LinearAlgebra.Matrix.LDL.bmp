{"name":"Mathlib.LinearAlgebra.Matrix.LDL","instances":[{"typeNames":["LDL.lowerInv"],"name":"LDL.invertibleLowerInv","className":"Invertible"}],"imports":["Init","Mathlib.Analysis.InnerProductSpace.GramSchmidtOrtho","Mathlib.LinearAlgebra.Matrix.PosDef"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L109-L115","name":"LDL.lower_conj_diag","line":109,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower_conj_diag","doc":"**LDL decomposition**: any positive definite matrix `S` can be\ndecomposed as `S = LDLᴴ` where `L` is a lower-triangular matrix and `D` is a diagonal matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower_conj_diag\"><span class=\"name\">LDL</span>.<span class=\"name\">lower_conj_diag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower\">lower</a> <span class=\"fn\">hS</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag\">diag</a> <span class=\"fn\">hS</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower\">lower</a> <span class=\"fn\">hS</span>)</span>.<a href=\"./Mathlib/Data/Matrix/ConjTranspose.html#Matrix.conjTranspose\">conjTranspose</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">S</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L105-L107","name":"LDL.lower","line":105,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower","doc":"The lower triangular matrix `L` of the LDL decomposition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lower\"><span class=\"name\">LDL</span>.<span class=\"name\">lower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L90-L103","name":"LDL.diag_eq_lowerInv_conj","line":90,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag_eq_lowerInv_conj","doc":"Inverse statement of **LDL decomposition**: we can conjugate a positive definite matrix\nby some lower triangular matrix and get a diagonal matrix. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag_eq_lowerInv_conj\"><span class=\"name\">LDL</span>.<span class=\"name\">diag_eq_lowerInv_conj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag\">diag</a> <span class=\"fn\">hS</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">S</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span>)</span>.<a href=\"./Mathlib/Data/Matrix/ConjTranspose.html#Matrix.conjTranspose\">conjTranspose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L84-L88","name":"LDL.lowerInv_triangular","line":84,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_triangular","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_triangular\"><span class=\"name\">LDL</span>.<span class=\"name\">lowerInv_triangular</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L80-L82","name":"LDL.diag","line":80,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag","doc":"The diagonal matrix `D` of the LDL decomposition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diag\"><span class=\"name\">LDL</span>.<span class=\"name\">diag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L76-L78","name":"LDL.diagEntries","line":76,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diagEntries","doc":"The entries of the diagonal matrix `D` of the LDL decomposition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.diagEntries\"><span class=\"name\">LDL</span>.<span class=\"name\">diagEntries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L72-L74","name":"LDL.lowerInv_orthogonal","line":72,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_orthogonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_orthogonal\"><span class=\"name\">LDL</span>.<span class=\"name\">lowerInv_orthogonal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\">n</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₀</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/InnerProductSpace/Defs.html#Inner.inner\">inner</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Lp/WithLp.html#WithLp.equiv\">WithLp.equiv</a> <span class=\"fn\">2</span> <span class=\"fn\">(<span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span>)</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span> <span class=\"fn\">i</span>)</span>)</span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/Normed/Lp/WithLp.html#WithLp.equiv\">WithLp.equiv</a> <span class=\"fn\">2</span> <span class=\"fn\">(<span class=\"fn\">n</span> → <span class=\"fn\">𝕜</span>)</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix.transpose\">transpose</a></span>.<a href=\"./Mathlib/Data/Matrix/Mul.html#Matrix.mulVec\">mulVec</a></span> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span> <span class=\"fn\">j</span>)</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L64-L70","name":"LDL.invertibleLowerInv","line":64,"kind":"instance","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.invertibleLowerInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.invertibleLowerInv\"><span class=\"name\">LDL</span>.<span class=\"name\">invertibleLowerInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Invertible/Defs.html#Invertible\">Invertible</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L53-L62","name":"LDL.lowerInv_eq_gramSchmidtBasis","line":53,"kind":"theorem","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_eq_gramSchmidtBasis","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv_eq_gramSchmidtBasis\"><span class=\"name\">LDL</span>.<span class=\"name\">lowerInv_eq_gramSchmidtBasis</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\">lowerInv</a> <span class=\"fn\">hS</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/StdBasis.html#Pi.basisFun\">Pi.basisFun</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/Basis.html#Basis.toMatrix\">toMatrix</a></span> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Analysis/InnerProductSpace/GramSchmidtOrtho.html#gramSchmidtBasis\">gramSchmidtBasis</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/StdBasis.html#Pi.basisFun\">Pi.basisFun</a> <span class=\"fn\">𝕜</span> <span class=\"fn\">n</span>)</span>)</span></span>)</span>.<a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix.transpose\">transpose</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/LinearAlgebra/Matrix/LDL.lean#L46-L51","name":"LDL.lowerInv","line":46,"kind":"def","docLink":"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv","doc":"The inverse of the lower triangular matrix `L` of the LDL-decomposition. It is obtained by\napplying Gram-Schmidt-Orthogonalization w.r.t. the inner product induced by `Sᵀ` on the standard\nbasis vectors `Pi.basisFun`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/LinearAlgebra/Matrix/LDL.html#LDL.lowerInv\"><span class=\"name\">LDL</span>.<span class=\"name\">lowerInv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝕜</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Analysis/RCLike/Basic.html#RCLike\">RCLike</a> <span class=\"fn\">𝕜</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedLT\">WellFoundedLT</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#LocallyFiniteOrderBot\">LocallyFiniteOrderBot</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hS</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/LinearAlgebra/Matrix/PosDef.html#Matrix.PosDef\">PosDef</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Matrix/Defs.html#Matrix\">Matrix</a> <span class=\"fn\">n</span> <span class=\"fn\">n</span> <span class=\"fn\">𝕜</span></span></div></div>"}]}