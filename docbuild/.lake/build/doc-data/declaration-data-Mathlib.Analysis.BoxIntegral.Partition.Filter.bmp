{"name":"Mathlib.Analysis.BoxIntegral.Partition.Filter","instances":[{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instPartialOrder","className":"PartialOrder"},{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instBoundedOrder","className":"BoundedOrder"},{"typeNames":["BoxIntegral.IntegrationParams"],"name":"BoxIntegral.IntegrationParams.instInhabited","className":"Inhabited"},{"typeNames":["LE.le"],"name":"BoxIntegral.IntegrationParams.instDecidableLE","className":"Decidable"},{"typeNames":["Eq"],"name":"BoxIntegral.IntegrationParams.instDecidableEq","className":"Decidable"},{"typeNames":["BoxIntegral.IntegrationParams.toFilterDistortioniUnion"],"name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilterDistortion"],"name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilter"],"name":"BoxIntegral.IntegrationParams.toFilter_neBot","className":"Filter.NeBot"},{"typeNames":["BoxIntegral.IntegrationParams.toFilteriUnion"],"name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","className":"Filter.NeBot"}],"imports":["Init","Mathlib.Analysis.BoxIntegral.Partition.SubboxInduction","Mathlib.Analysis.BoxIntegral.Partition.Split"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L515-L520","name":"BoxIntegral.IntegrationParams.eventually_isPartition","line":515,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.eventually_isPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.eventually_isPartition\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">eventually_isPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">∀ᶠ</a> (<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>) <a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">in</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Eventually\">,</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">IsPartition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L510-L513","name":"BoxIntegral.IntegrationParams.toFilteriUnion_neBot","line":510,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span>)</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.NeBot\">NeBot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L507-L508","name":"BoxIntegral.IntegrationParams.toFilter_neBot","line":507,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">toFilter</a></span> <span class=\"fn\">I</span>)</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.NeBot\">NeBot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L503-L505","name":"BoxIntegral.IntegrationParams.toFilterDistortion_neBot","line":503,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">toFilterDistortion</a></span> <span class=\"fn\">I</span> <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.distortion\">distortion</a></span>)</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.NeBot\">NeBot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L499-L501","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","line":499,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot'\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion_neBot'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">toFilterDistortioniUnion</a></span> <span class=\"fn\">I</span> (<span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">compl</a></span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span>) <span class=\"fn\">π₀</span>)</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.NeBot\">NeBot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L493-L497","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","line":493,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion_neBot\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion_neBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc₁</span> : <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">compl</a></span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">toFilterDistortioniUnion</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">π₀</span>)</span>.<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.NeBot\">NeBot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L487-L491","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","line":487,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_isPartition\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">exists_memBaseSet_isPartition</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">IsPartition</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L480-L485","name":"BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","line":480,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.exists_memBaseSet_le_iUnion_eq\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">exists_memBaseSet_le_iUnion_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc₁</span> : <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">compl</a></span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.toPrepartition\">toPrepartition</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">π₀</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L464-L478","name":"BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","line":464,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.tendsto_embedBox_toFilteriUnion_top\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">tendsto_embedBox_toFilteriUnion_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I </span><span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">J</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.Tendsto\">Filter.Tendsto</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.embedBox\">TaggedPrepartition.embedBox</a> <span class=\"fn\">I</span> <span class=\"fn\">J</span> <span class=\"fn\">h</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">J</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.single\">Prepartition.single</a> <span class=\"fn\">J</span> <span class=\"fn\">I</span> <span class=\"fn\">h</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L459-L462","name":"BoxIntegral.IntegrationParams.hasBasis_toFilter","line":459,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">toFilter</a></span> <span class=\"fn\">I</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt; <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">π</span></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L453-L457","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","line":453,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion_top\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilteriUnion_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">IsPartition</a></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L447-L451","name":"BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","line":447,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilteriUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilteriUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\">(fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span></span></span>)</span>\n  <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span></span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">r</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L441-L445","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","line":441,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortioniUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilterDistortioniUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\">toFilterDistortioniUnion</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">π₀</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L433-L439","name":"BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","line":433,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.hasBasis_toFilterDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">hasBasis_toFilterDistortion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">toFilterDistortion</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Mathlib/Order/Filter/Bases/Basic.html#Filter.HasBasis\">HasBasis</a></span> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>) =&gt;\n  <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L429-L431","name":"BoxIntegral.IntegrationParams.toFilteriUnion_congr","line":429,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_congr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_congr\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π₁ </span><span class=\"fn\">π₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">π₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L424-L427","name":"BoxIntegral.IntegrationParams.toFilteriUnion_mono","line":424,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L419-L422","name":"BoxIntegral.IntegrationParams.toFilter_mono","line":419,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">toFilter</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">toFilter</a></span> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L412-L417","name":"BoxIntegral.IntegrationParams.toFilterDistortion_mono","line":412,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion_mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">toFilterDistortion</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\">toFilterDistortion</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L408-L410","name":"BoxIntegral.IntegrationParams.RCond.min","line":408,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.min","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.min\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span>.<span class=\"name\">min</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">r₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">r₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L403-L406","name":"BoxIntegral.IntegrationParams.RCond.mono","line":403,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond.mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L391-L401","name":"BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","line":391,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.biUnionTagged_memBaseSet\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">biUnionTagged_memBaseSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">πi</span> : <span class=\"fn\">(<span class=\"fn\">J</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">J</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">J</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\">πi</span> <span class=\"fn\">J</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">πi</span> <span class=\"fn\">J</span>)</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsPartition\">IsPartition</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Split.html#BoxIntegral.Prepartition.compl\">compl</a></span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.Prepartition.biUnionTagged\">biUnionTagged</a></span> <span class=\"fn\">πi</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L367-L389","name":"BoxIntegral.IntegrationParams.MemBaseSet.filter","line":367,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.filter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hπ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.filter\">filter</a></span> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L356-L363","name":"BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","line":356,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.unionComplToSubordinate\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">unionComplToSubordinate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hπ₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.Icc\">Box.Icc</a> <span class=\"fn\">I</span></span>, <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hU</span> : <span class=\"fn\"><span class=\"fn\">π₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">π₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/SubboxInduction.html#BoxIntegral.TaggedPrepartition.unionComplToSubordinate\">unionComplToSubordinate</a></span> <span class=\"fn\">π₂</span> <span class=\"fn\">hU</span> <span class=\"fn\">r₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L342-L354","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","line":342,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_common_compl\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">exists_common_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π₁ </span><span class=\"fn\">π₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hU</span> : <span class=\"fn\"><span class=\"fn\">π₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>),\n  <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">π₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₁</span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L337-L340","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono","line":337,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box.Icc\">Box.Icc</a> <span class=\"fn\">I</span></span>, <span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hπ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L329-L334","name":"BoxIntegral.IntegrationParams.MemBaseSet.mono'","line":329,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mono'\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c₁ </span><span class=\"fn\">c₂</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r₁ </span><span class=\"fn\">r₂</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">l₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">∀ <span class=\"fn\">J</span> ∈ <span class=\"fn\">π</span>, <span class=\"fn\"><span class=\"fn\">r₁</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.tag\">tag</a></span> <span class=\"fn\">J</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">r₂</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.tag\">tag</a></span> <span class=\"fn\">J</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hπ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₁</span> <span class=\"fn\">r₁</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c₂</span> <span class=\"fn\">r₂</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L322-L324","name":"BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","line":322,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter_inf_iUnion_eq\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter_inf_iUnion_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\">toFilter</a></span> <span class=\"fn\">I</span></span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter.principal\">Filter.principal</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">π</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">π₀</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\">toFilteriUnion</a> <span class=\"fn\">I</span> <span class=\"fn\">π₀</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L318-L320","name":"BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","line":318,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.rCond_of_bRiemann_eq_false\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">rCond_of_bRiemann_eq_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\">bRiemann</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\">RCond</a></span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L312-L316","name":"BoxIntegral.IntegrationParams.toFilteriUnion","line":312,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilteriUnion I π₀` if for any `c : ℝ≥0`\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilteriUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilteriUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L306-L310","name":"BoxIntegral.IntegrationParams.toFilterDistortioniUnion","line":306,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortioniUnion I c π₀` if\nthere exists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s`\ncontains each prepartition `π` such that `l.MemBaseSet I c r π` and `π.iUnion = π₀.iUnion`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortioniUnion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortioniUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π₀</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L300-L304","name":"BoxIntegral.IntegrationParams.toFilter","line":300,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilter I` if for any `c : ℝ≥0` there\nexists a function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that\n`s` contains each prepartition `π` such that `l.MemBaseSet I c r π`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilter\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L293-L298","name":"BoxIntegral.IntegrationParams.toFilterDistortion","line":293,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion","doc":"A set `s : Set (TaggedPrepartition I)` belongs to `l.toFilterDistortion I c` if there exists\na function `r : ℝⁿ → (0, ∞)` (or a constant `r` if `l.bRiemann = true`) such that `s` contains each\nprepartition `π` such that `l.MemBaseSet I c r π`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.toFilterDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">toFilterDistortion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Filter/Defs.html#Filter\">Filter</a> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L289-L291","name":"BoxIntegral.IntegrationParams.RCond","line":289,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond","doc":"A predicate saying that in case `l.bRiemann = true`, the function `r` is a constant. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.RCond\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">RCond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L286-L286","name":"BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","line":286,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_compl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.exists_compl\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">exists_compl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">∃ (<span class=\"fn\">π'</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>), <span class=\"fn\"><span class=\"fn\">π'</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π'</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L285-L285","name":"BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","line":285,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.distortion_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.distortion_le\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">distortion_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L284-L284","name":"BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","line":284,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isHenstock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isHenstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">isHenstock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsHenstock\">IsHenstock</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L283-L283","name":"BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","line":283,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.isSubordinate\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">isSubordinate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsSubordinate\">IsSubordinate</a></span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L281-L281","name":"BoxIntegral.IntegrationParams.MemBaseSet.mk","line":281,"kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet.mk\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSubordinate</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsSubordinate\">IsSubordinate</a></span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isHenstock</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.IsHenstock\">IsHenstock</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">distortion_le</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exists_compl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">∃ (<span class=\"fn\">π'</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition\">Prepartition</a> <span class=\"fn\">I</span></span>), <span class=\"fn\"><span class=\"fn\">π'</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\">π</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition.iUnion\">iUnion</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">π'</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Basic.html#BoxIntegral.Prepartition.distortion\">distortion</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\">MemBaseSet</a></span> <span class=\"fn\">I</span> <span class=\"fn\">c</span> <span class=\"fn\">r</span> <span class=\"fn\">π</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L266-L287","name":"BoxIntegral.IntegrationParams.MemBaseSet","line":266,"kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet","doc":"The predicate corresponding to a base set of the filter defined by an\n`IntegrationParams`. It says that\n\n* if `l.bHenstock`, then `π` is a Henstock prepartition, i.e. each tag belongs to the corresponding\n  closed box;\n* `π` is subordinate to `r`;\n* if `l.bDistortion`, then the distortion of each box in `π` is less than or equal to `c`;\n* if `l.bDistortion`, then there exists a prepartition `π'` with distortion `≤ c` that covers\n  exactly `I \\ π.iUnion`.\n\nThe last condition is automatically verified for partitions, and is used in the proof of the\nSacks-Henstock inequality to compare two prepartitions covering the same part of the box.\n\nIt is also automatically satisfied for any `c > 1`, see TODO section of the module docstring for\ndetails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.MemBaseSet\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">MemBaseSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Box/Basic.html#BoxIntegral.Box\">Box</a> <span class=\"fn\">ι</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Data/NNReal/Defs.html#NNReal\">NNReal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">ι</span> → <a href=\"./Mathlib/Data/Real/Basic.html#Real\">ℝ</a>)</span> → <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Order/Interval/Set/Defs.html#Set.Ioi\">Set.Ioi</a> <span class=\"fn\">0</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">π</span> : <span class=\"fn\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Tagged.html#BoxIntegral.TaggedPrepartition\">TaggedPrepartition</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L263-L264","name":"BoxIntegral.IntegrationParams.gp_le","line":263,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.gp_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.gp_le\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">gp_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP\">GP</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L261-L261","name":"BoxIntegral.IntegrationParams.henstock_le_mcShane","line":261,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_mcShane","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_mcShane\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">henstock_le_mcShane</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\">Henstock</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane\">McShane</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L259-L259","name":"BoxIntegral.IntegrationParams.henstock_le_riemann","line":259,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_riemann","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.henstock_le_riemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">henstock_le_riemann</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\">Henstock</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann\">Riemann</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L253-L257","name":"BoxIntegral.IntegrationParams.GP","line":253,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP","doc":"The `BoxIntegral.IntegrationParams` corresponding to the generalized Perron integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. We also\nrequire an upper estimate on the distortion of all boxes of the partition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.GP\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">GP</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L246-L251","name":"BoxIntegral.IntegrationParams.McShane","line":246,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane","doc":"The `BoxIntegral.IntegrationParams` corresponding to the McShane integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r`; the tags may be outside of the corresponding closed box\n(but still inside the ambient closed box `I.Icc`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.McShane\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">McShane</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L240-L244","name":"BoxIntegral.IntegrationParams.Henstock","line":240,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Henstock-Kurzweil integral. In the\ncorresponding filter, we require that the tagged partition is subordinate to a (possibly,\ndiscontinuous) positive function `r` and each tag belongs to the corresponding closed box. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Henstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">Henstock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L231-L238","name":"BoxIntegral.IntegrationParams.Riemann","line":231,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann","doc":"The `BoxIntegral.IntegrationParams` corresponding to the Riemann integral. In the\ncorresponding filter, we require that the diameters of all boxes `J` of a tagged partition are\nbounded from above by a constant upper estimate that may not depend on the geometry of `J`, and each\ntag belongs to the corresponding closed box. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.Riemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">Riemann</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L228-L229","name":"BoxIntegral.IntegrationParams.instDecidableEq","line":228,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableEq\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L225-L226","name":"BoxIntegral.IntegrationParams.instDecidableLE","line":225,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instDecidableLE\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instDecidableLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L218-L223","name":"BoxIntegral.IntegrationParams.instInhabited","line":218,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instInhabited","doc":"The value `BoxIntegral.IntegrationParams.GP = ⊥`\n(`bRiemann = false`, `bHenstock = true`, `bDistortion = true`)\ncorresponds to a generalization of the Henstock integral such that the Divergence theorem holds true\nwithout additional integrability assumptions, see the module docstring for details. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instInhabited\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L215-L216","name":"BoxIntegral.IntegrationParams.instBoundedOrder","line":215,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instBoundedOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instBoundedOrder\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instBoundedOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L211-L213","name":"BoxIntegral.IntegrationParams.isoProd","line":211,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.isoProd","doc":"Auxiliary `OrderIso` with a product type used to lift a `BoundedOrder` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.isoProd\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">isoProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a> <a href=\"./Mathlib/Order/Hom/Basic.html#OrderIso\">≃o</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L208-L209","name":"BoxIntegral.IntegrationParams.instPartialOrder","line":208,"kind":"instance","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instPartialOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.instPartialOrder\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">instPartialOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L201-L206","name":"BoxIntegral.IntegrationParams.equivProd","line":201,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.equivProd","doc":"Auxiliary equivalence with a product type used to lift an order. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.equivProd\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">equivProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a><a href=\"./Mathlib/Order/Basic.html#OrderDual\">ᵒᵈ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L195-L195","name":"BoxIntegral.IntegrationParams.bDistortion","line":195,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bDistortion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L195-L195","name":"BoxIntegral.IntegrationParams.bHenstock","line":195,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bHenstock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L195-L195","name":"BoxIntegral.IntegrationParams.bRiemann","line":195,"kind":"def","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">bRiemann</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L194-L194","name":"BoxIntegral.IntegrationParams.mk","line":194,"kind":"ctor","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.mk\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bRiemann </span><span class=\"fn\">bHenstock </span><span class=\"fn\">bDistortion</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L193-L193","name":"BoxIntegral.IntegrationParams.ext_iff","line":193,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext_iff\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\">bRiemann</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\">bRiemann</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L193-L193","name":"BoxIntegral.IntegrationParams.ext","line":193,"kind":"theorem","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.ext\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\">IntegrationParams</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bRiemann</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\">bRiemann</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bRiemann\">bRiemann</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bHenstock</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bHenstock\">bHenstock</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bDistortion</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams.bDistortion\">bDistortion</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Analysis/BoxIntegral/Partition/Filter.lean#L177-L195","name":"BoxIntegral.IntegrationParams","line":177,"kind":"structure","docLink":"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams","doc":"An `IntegrationParams` is a structure holding 3 boolean values used to define a filter to be\nused in the definition of a box-integrable function.\n\n* `bRiemann`: the value `true` means that the filter corresponds to a Riemann-style integral, i.e.\n  in the definition of integrability we require a constant upper estimate `r` on the size of boxes\n  of a tagged partition; the value `false` means that the estimate may depend on the position of the\n  tag.\n\n* `bHenstock`: the value `true` means that we require that each tag belongs to its own closed box;\n  the value `false` means that we only require that tags belong to the ambient box.\n\n* `bDistortion`: the value `true` means that `r` can depend on the maximal ratio of sides of the\n  same box of a partition. Presence of this case makes quite a few proofs harder but we can prove\n  the divergence theorem only for the filter `BoxIntegral.IntegrationParams.GP = ⊥ =\n  {bRiemann := false, bHenstock := true, bDistortion := true}`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Analysis/BoxIntegral/Partition/Filter.html#BoxIntegral.IntegrationParams\"><span class=\"name\">BoxIntegral</span>.<span class=\"name\">IntegrationParams</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}