{"name":"Mathlib.NumberTheory.ModularForms.QExpansion","instances":[],"imports":["Init","Mathlib.Analysis.Complex.TaylorSeries","Mathlib.Analysis.Complex.UpperHalfPlane.Exp","Mathlib.NumberTheory.ModularForms.Basic","Mathlib.NumberTheory.ModularForms.Identities","Mathlib.RingTheory.PowerSeries.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L183-L190","name":"CuspFormClass.exp_decay_atImInfty","line":183,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.exp_decay_atImInfty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.exp_decay_atImInfty\"><span class=\"name\">CuspFormClass</span>.<span class=\"name\">exp_decay_atImInfty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#CuspFormClass\">CuspFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsBigO\">=O[</a><a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/FunctionsBoundedAtInfty.html#UpperHalfPlane.atImInfty\">UpperHalfPlane.atImInfty</a><a href=\"./Mathlib/Analysis/Asymptotics/Defs.html#Asymptotics.IsBigO\">]</a> <span class=\"fn\">fun (<span class=\"fn\">τ</span> : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Exponential.html#Real.exp\">Real.exp</a> (<span class=\"fn\">-<span class=\"fn\">2</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Mathlib/Analysis/SpecialFunctions/Trigonometric/Basic.html#Real.pi\">Real.pi</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">τ</span>.<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane.im\">im</a></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L178-L181","name":"CuspFormClass.cuspFunction_apply_zero","line":178,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.cuspFunction_apply_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.cuspFunction_apply_zero\"><span class=\"name\">CuspFormClass</span>.<span class=\"name\">cuspFunction_apply_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#CuspFormClass\">CuspFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L174-L176","name":"CuspFormClass.zero_at_infty_comp_ofComplex","line":174,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.zero_at_infty_comp_ofComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#CuspFormClass.zero_at_infty_comp_ofComplex\"><span class=\"name\">CuspFormClass</span>.<span class=\"name\">zero_at_infty_comp_ofComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Γ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#CuspFormClass\">CuspFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">Γ</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.comap\">Filter.comap</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.im\">Complex.im</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a>)</span>.<a href=\"./Mathlib/Order/Filter/ZeroAndBoundedAtFilter.html#Filter.ZeroAtFilter\">ZeroAtFilter</a></span> (<span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">↑<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Topology.html#UpperHalfPlane.ofComplex\">UpperHalfPlane.ofComplex</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L160-L166","name":"ModularFormClass.hasFPowerSeries_cuspFunction","line":160,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasFPowerSeries_cuspFunction","doc":"The `q`-expansion of `f` is an `FPowerSeries` representing `cuspFunction n f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasFPowerSeries_cuspFunction\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">hasFPowerSeries_cuspFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Analytic/Basic.html#HasFPowerSeriesOnBall\">HasFPowerSeriesOnBall</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries\">qExpansionFormalMultilinearSeries</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L150-L158","name":"ModularFormClass.qExpansionFormalMultilinearSeries_radius","line":150,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries_radius","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries_radius\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">qExpansionFormalMultilinearSeries_radius</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries\">qExpansionFormalMultilinearSeries</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/Analysis/Analytic/Basic.html#FormalMultilinearSeries.radius\">radius</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L144-L148","name":"ModularFormClass.qExpansionFormalMultilinearSeries_apply_norm","line":144,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries_apply_norm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries_apply_norm\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">qExpansionFormalMultilinearSeries_apply_norm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries\">qExpansionFormalMultilinearSeries</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span> <span class=\"fn\">m</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion\">qExpansion</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span></span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L135-L142","name":"ModularFormClass.qExpansionFormalMultilinearSeries","line":135,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries","doc":"The `q`-expansion of a level `n` modular form, bundled as a `FormalMultilinearSeries`.\n\nTODO: Maybe get rid of this and instead define a general API for converting `PowerSeries` to\n`FormalMultlinearSeries`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansionFormalMultilinearSeries\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">qExpansionFormalMultilinearSeries</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/FormalMultilinearSeries.html#FormalMultilinearSeries\">FormalMultilinearSeries</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L130-L133","name":"ModularFormClass.hasSum_qExpansion","line":130,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasSum_qExpansion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasSum_qExpansion\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">hasSum_qExpansion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">τ</span> : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/InfiniteSum/Defs.html#HasSum\">HasSum</a> <span class=\"fn\">(fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion\">qExpansion</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Complex/Periodic.html#Function.Periodic.qParam\">Function.Periodic.qParam</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <span class=\"fn\">↑<span class=\"fn\">τ</span></span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">τ</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L119-L128","name":"ModularFormClass.hasSum_qExpansion_of_abs_lt","line":119,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasSum_qExpansion_of_abs_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.hasSum_qExpansion_of_abs_lt\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">hasSum_qExpansion_of_abs_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">q</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Algebra/InfiniteSum/Defs.html#HasSum\">HasSum</a> <span class=\"fn\">(fun (<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion\">qExpansion</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span> <span class=\"fn\">q</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L115-L117","name":"ModularFormClass.qExpansion_coeff","line":115,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion_coeff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion_coeff\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">qExpansion_coeff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion\">qExpansion</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">m</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/IteratedDeriv/Defs.html#iteratedDeriv\">iteratedDeriv</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L111-L113","name":"ModularFormClass.qExpansion","line":111,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion","doc":"The `q`-expansion of a level `n` modular form, bundled as a `PowerSeries`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.qExpansion\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">qExpansion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries\">PowerSeries</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L105-L109","name":"ModularFormClass.analyticAt_cuspFunction_zero","line":105,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.analyticAt_cuspFunction_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.analyticAt_cuspFunction_zero\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">analyticAt_cuspFunction_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Analytic/Basic.html#AnalyticAt\">AnalyticAt</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">0</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L92-L103","name":"ModularFormClass.differentiableAt_cuspFunction","line":92,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.differentiableAt_cuspFunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.differentiableAt_cuspFunction\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">differentiableAt_cuspFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">q</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hq</span> : <a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a><span class=\"fn\">q</span><a href=\"./Mathlib/Analysis/Normed/Group/Basic.html#Norm.norm\">‖</a> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/FDeriv/Basic.html#DifferentiableAt\">DifferentiableAt</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">SlashInvariantFormClass.cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L87-L90","name":"ModularFormClass.bounded_at_infty_comp_ofComplex","line":87,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.bounded_at_infty_comp_ofComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.bounded_at_infty_comp_ofComplex\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">bounded_at_infty_comp_ofComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Γ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">Γ</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/Filter/Defs.html#Filter.comap\">Filter.comap</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex.im\">Complex.im</a> <a href=\"./Mathlib/Order/Filter/AtTopBot/Defs.html#Filter.atTop\">Filter.atTop</a>)</span>.<a href=\"./Mathlib/Order/Filter/ZeroAndBoundedAtFilter.html#Filter.BoundedAtFilter\">BoundedAtFilter</a></span> (<span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">↑<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Topology.html#UpperHalfPlane.ofComplex\">UpperHalfPlane.ofComplex</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L83-L85","name":"ModularFormClass.differentiableAt_comp_ofComplex","line":83,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.differentiableAt_comp_ofComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#ModularFormClass.differentiableAt_comp_ofComplex\"><span class=\"name\">ModularFormClass</span>.<span class=\"name\">differentiableAt_comp_ofComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Γ</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Subgroup/Defs.html#Subgroup\">Subgroup</a> <span class=\"fn\">(<a href=\"./Mathlib/LinearAlgebra/Matrix/SpecialLinearGroup.html#Matrix.SpecialLinearGroup\">Matrix.SpecialLinearGroup</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">2</span>)</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/Basic.html#ModularFormClass\">ModularFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">Γ</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/Data/Complex/Basic.html#Complex.im\">im</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Analysis/Calculus/FDeriv/Basic.html#DifferentiableAt\">DifferentiableAt</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> (<span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">↑<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Topology.html#UpperHalfPlane.ofComplex\">UpperHalfPlane.ofComplex</a></span>) <span class=\"fn\">z</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L72-L75","name":"SlashInvariantFormClass.eq_cuspFunction","line":72,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.eq_cuspFunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.eq_cuspFunction\"><span class=\"name\">SlashInvariantFormClass</span>.<span class=\"name\">eq_cuspFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashInvariantForms.html#SlashInvariantFormClass\">SlashInvariantFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">τ</span> : <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\">cuspFunction</a> <span class=\"fn\">n</span> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Analysis/Complex/Periodic.html#Function.Periodic.qParam\">Function.Periodic.qParam</a> <span class=\"fn\">↑<span class=\"fn\">n</span></span> <span class=\"fn\">↑<span class=\"fn\">τ</span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">τ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L66-L70","name":"SlashInvariantFormClass.cuspFunction","line":66,"kind":"def","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction","doc":"The analytic function `F` such that `f τ = F (exp (2 * π * I * τ / n))`, extended by a choice of\nlimit at `0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.cuspFunction\"><span class=\"name\">SlashInvariantFormClass</span>.<span class=\"name\">cuspFunction</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a> → <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/ModularForms/QExpansion.lean#L53-L64","name":"SlashInvariantFormClass.periodic_comp_ofComplex","line":53,"kind":"theorem","docLink":"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.periodic_comp_ofComplex","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/ModularForms/QExpansion.html#SlashInvariantFormClass.periodic_comp_ofComplex\"><span class=\"name\">SlashInvariantFormClass</span>.<span class=\"name\">periodic_comp_ofComplex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> <span class=\"fn\">F</span> <a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Basic.html#UpperHalfPlane\">UpperHalfPlane</a> <a href=\"./Mathlib/Data/Complex/Basic.html#Complex\">ℂ</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/NumberTheory/ModularForms/SlashInvariantForms.html#SlashInvariantFormClass\">SlashInvariantFormClass</a> <span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/NumberTheory/ModularForms/CongruenceSubgroups.html#CongruenceSubgroup.Gamma\">CongruenceSubgroup.Gamma</a> <span class=\"fn\">n</span>)</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Periodic.html#Function.Periodic\">Function.Periodic</a> (<span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">↑<a href=\"./Mathlib/Analysis/Complex/UpperHalfPlane/Topology.html#UpperHalfPlane.ofComplex\">UpperHalfPlane.ofComplex</a></span>) <span class=\"fn\">↑<span class=\"fn\">n</span></span></span></div></div>"}]}