{"name":"Mathlib.Order.PrimeIdeal","instances":[{"typeNames":[],"name":"Order.Ideal.IsMaximal.isPrime","className":"Order.Ideal.IsPrime"},{"typeNames":[],"name":"Order.Ideal.IsPrime.isMaximal","className":"Order.Ideal.IsMaximal"}],"imports":["Init","Mathlib.Order.Ideal","Mathlib.Order.PFilter"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L200-L204","name":"Order.Ideal.PrimePair.F_isPrime","line":200,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F_isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L193-L198","name":"Order.PFilter.IsPrime.toPrimePair","line":193,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.toPrimePair","doc":"Create an element of type `Order.Ideal.PrimePair` from a filter satisfying the predicate\n`Order.PFilter.IsPrime`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.toPrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">toPrimePair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">IsPrime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">Ideal.PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L191-L191","name":"Order.PFilter.IsPrime.compl_ideal","line":191,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.compl_ideal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.compl_ideal\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">compl_ideal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">IsPrime</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">IsIdeal</a> <span class=\"fn\">(↑<span class=\"fn\">F</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L190-L190","name":"Order.PFilter.IsPrime.mk","line":190,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime.mk\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compl_ideal</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">IsIdeal</a> <span class=\"fn\">(↑<span class=\"fn\">F</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L189-L189","name":"Order.PFilter.isPrime_iff","line":189,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.isPrime_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.isPrime_iff\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">isPrime_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\">IsPrime</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.IsIdeal\">IsIdeal</a> <span class=\"fn\">(↑<span class=\"fn\">F</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L187-L191","name":"Order.PFilter.IsPrime","line":187,"kind":"class","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime","doc":"A filter `F` is prime if its complement is an ideal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.PFilter.IsPrime\"><span class=\"name\">Order</span>.<span class=\"name\">PFilter</span>.<span class=\"name\">IsPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L170-L177","name":"Order.Ideal.IsPrime.isMaximal","line":170,"kind":"instance","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.isMaximal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.isMaximal\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">isMaximal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsMaximal\">IsMaximal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L167-L168","name":"Order.Ideal.isPrime_iff_mem_or_compl_mem","line":167,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff_mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L160-L165","name":"Order.Ideal.isPrime_of_mem_or_compl_mem","line":160,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_of_mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_of_mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_of_mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L157-L158","name":"Order.Ideal.IsPrime.mem_compl_of_not_mem","line":157,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_compl_of_not_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_compl_of_not_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_compl_of_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxnI</span> : <span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L152-L155","name":"Order.Ideal.IsPrime.mem_or_compl_mem","line":152,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_compl_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_compl_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_or_compl_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L129-L144","name":"Order.Ideal.IsMaximal.isPrime","line":129,"kind":"instance","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsMaximal.isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsMaximal.isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsMaximal</span>.<span class=\"name\">isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsMaximal\">IsMaximal</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L120-L121","name":"Order.Ideal.isPrime_iff_mem_or_mem","line":120,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff_mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff_mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L110-L118","name":"Order.Ideal.IsPrime.of_mem_or_mem","line":110,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.of_mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.of_mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">of_mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">P</span>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L104-L108","name":"Order.Ideal.IsPrime.mem_or_mem","line":104,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mem_or_mem\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mem_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#SemilatticeInf\">SemilatticeInf</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">P</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">I</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L92-L96","name":"Order.Ideal.PrimePair.I_isPrime","line":92,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isPrime","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_isPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L85-L90","name":"Order.Ideal.IsPrime.toPrimePair","line":85,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toPrimePair","doc":"Create an element of type `Order.Ideal.PrimePair` from an ideal satisfying the predicate\n`Order.Ideal.IsPrime`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toPrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">toPrimePair</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L79-L79","name":"Order.Ideal.IsPrime.compl_filter","line":79,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.compl_filter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.compl_filter\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">compl_filter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">IsPFilter</a> <span class=\"fn\">(↑<span class=\"fn\">I</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L78-L78","name":"Order.Ideal.IsPrime.mk","line":78,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.mk\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toIsProper</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">compl_filter</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">IsPFilter</a> <span class=\"fn\">(↑<span class=\"fn\">I</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L78-L79","name":"Order.Ideal.IsPrime.toIsProper","line":78,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toIsProper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime.toIsProper\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span>.<span class=\"name\">toIsProper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L77-L77","name":"Order.Ideal.isPrime_iff","line":77,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.isPrime_iff\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">isPrime_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\">IsPrime</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.IsPFilter\">IsPFilter</a> <span class=\"fn\">(↑<span class=\"fn\">I</span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L75-L79","name":"Order.Ideal.IsPrime","line":75,"kind":"class","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime","doc":"An ideal `I` is prime if its complement is a filter.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.IsPrime\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">IsPrime</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><span class=\"fn\">I</span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L70-L71","name":"Order.Ideal.PrimePair.F_union_I","line":70,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_union_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F_union_I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F_union_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L67-L68","name":"Order.Ideal.PrimePair.I_union_F","line":67,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_union_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_union_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_union_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L64-L65","name":"Order.Ideal.PrimePair.disjoint","line":64,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.disjoint\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L59-L62","name":"Order.Ideal.PrimePair.I_isProper","line":59,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isProper","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I_isProper\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I_isProper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span>.<a href=\"./Mathlib/Order/Ideal.html#Order.Ideal.IsProper\">IsProper</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L56-L57","name":"Order.Ideal.PrimePair.compl_F_eq_I","line":56,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_F_eq_I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_F_eq_I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">compl_F_eq_I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L53-L54","name":"Order.Ideal.PrimePair.compl_I_eq_F","line":53,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_I_eq_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.compl_I_eq_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">compl_I_eq_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IF</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span>)</span><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">IF</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L47-L47","name":"Order.Ideal.PrimePair.isCompl_I_F","line":47,"kind":"theorem","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.isCompl_I_F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.isCompl_I_F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">isCompl_I_F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\">I</a></span></span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\">F</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L46-L46","name":"Order.Ideal.PrimePair.F","line":46,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.F\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">F</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L45-L45","name":"Order.Ideal.PrimePair.I","line":45,"kind":"def","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.I\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">I</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L44-L44","name":"Order.Ideal.PrimePair.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair.mk\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Ideal.html#Order.Ideal\">Ideal</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/PFilter.html#Order.PFilter\">PFilter</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isCompl_I_F</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#IsCompl\">IsCompl</a> <span class=\"fn\">↑<span class=\"fn\">I</span></span> <span class=\"fn\">↑<span class=\"fn\">F</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\">PrimePair</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/PrimeIdeal.lean#L42-L47","name":"Order.Ideal.PrimePair","line":42,"kind":"structure","docLink":"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair","doc":"A pair of an `Order.Ideal` and an `Order.PFilter` which form a partition of `P`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/PrimeIdeal.html#Order.Ideal.PrimePair\"><span class=\"name\">Order</span>.<span class=\"name\">Ideal</span>.<span class=\"name\">PrimePair</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_2</div></div>"}]}