{"name":"Mathlib.Tactic.CategoryTheory.Coherence.Basic","instances":[],"imports":["Init","Mathlib.Tactic.CategoryTheory.Coherence.Normalize","Mathlib.Tactic.CategoryTheory.Coherence.PureCoherence","Mathlib.CategoryTheory.Category.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L90-L105","name":"Mathlib.Tactic.BicategoryLike.main","line":90,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.main","doc":"The core function for `monoidal` and `bicategory` tactics. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.main\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">Context</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">MkMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂\">MonadMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadCoherehnceHom\">MonadCoherehnceHom</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MonadNormalizeNaturality\">MonadNormalizeNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/PureCoherence.html#Mathlib.Tactic.BicategoryLike.MkEqOfNaturality\">MkEqOfNaturality</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L82-L88","name":"Mathlib.Tactic.BicategoryLike.List.splitEvenOdd","line":82,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.List.splitEvenOdd","doc":"List.splitEvenOdd [0, 1, 2, 3, 4] = ([0, 2, 4], [1, 3]) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.List.splitEvenOdd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">List</span>.<span class=\"name\">splitEvenOdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L63-L80","name":"Mathlib.Tactic.BicategoryLike.ofNormalizedEq","line":63,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.ofNormalizedEq","doc":"Split the goal `α ≫ η ≫ ηs = α' ≫ η' ≫ ηs'` into `α = α'`, `η = η'`, and `ηs = ηs'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.ofNormalizedEq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">ofNormalizedEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L56-L61","name":"Mathlib.Tactic.BicategoryLike.mk_eq_of_cons","line":56,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.mk_eq_of_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.mk_eq_of_cons\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">mk_eq_of_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryTheory.CategoryStruct.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁ </span><span class=\"fn\">f₂ </span><span class=\"fn\">f₃ </span><span class=\"fn\">f₄</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">α'</span> : <span class=\"fn\">f₁</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">f₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">η </span><span class=\"fn\">η'</span> : <span class=\"fn\">f₂</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">f₃</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ηs </span><span class=\"fn\">ηs'</span> : <span class=\"fn\">f₃</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">f₄</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_α</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">α'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_η</span> : <span class=\"fn\">η</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">η'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e_ηs</span> : <span class=\"fn\">ηs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">ηs'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η</span> <span class=\"fn\">ηs</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">α'</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">η'</span> <span class=\"fn\">ηs'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L32-L52","name":"Mathlib.Tactic.BicategoryLike.normalForm","line":32,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.normalForm","doc":"Transform an equality between 2-morphisms into the equality between their normalizations. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.normalForm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">normalForm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.Context\">Context</a> <span class=\"fn\">ρ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₁\">MonadMor₁</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂Iso\">MonadMor₂Iso</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MonadNormalExpr\">MonadNormalExpr</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Normalize.html#Mathlib.Tactic.BicategoryLike.MkEval\">MkEval</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MkMor₂\">MkMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.MonadMor₂\">MonadMor₂</a> <span class=\"fn\">(<a href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Datatypes.html#Mathlib.Tactic.BicategoryLike.CoherenceM\">CoherenceM</a> <span class=\"fn\">ρ</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nm</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Coherence/Basic.lean#L29-L30","name":"Mathlib.Tactic.BicategoryLike.mk_eq","line":29,"kind":"theorem","docLink":"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.mk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Coherence/Basic.html#Mathlib.Tactic.BicategoryLike.mk_eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BicategoryLike</span>.<span class=\"name\">mk_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a' </span><span class=\"fn\">b'</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>"}]}