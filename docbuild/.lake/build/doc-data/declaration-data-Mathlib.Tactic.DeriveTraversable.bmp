{"name":"Mathlib.Tactic.DeriveTraversable","instances":[],"imports":["Init","Mathlib.Control.Traversable.Lemmas","Lean.Elab.Match","Lean.Elab.Deriving.Basic","Lean.Elab.PreDefinition.Main"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L489-L492","name":"Mathlib.Deriving.Traversable.lawfulTraversableDeriveHandler","line":489,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.lawfulTraversableDeriveHandler","doc":"The deriving handler for `LawfulTraversable`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.lawfulTraversableDeriveHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">lawfulTraversableDeriveHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L461-L487","name":"Mathlib.Deriving.Traversable.deriveLawfulTraversable","line":461,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveLawfulTraversable","doc":"Prove the traversable laws and derive `LawfulTraversable`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveLawfulTraversable\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">deriveLawfulTraversable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L440-L459","name":"Mathlib.Deriving.Traversable.traversableLawStarter","line":440,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traversableLawStarter","doc":"Run the following tactic:\n```lean\nintros _ .. x\ndsimp only [Traversable.traverse, Functor.map]\ninduction x <;> (the simp tactic corresponding to s) <;> (tac)\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traversableLawStarter\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">traversableLawStarter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.InductionSubgoal\">Lean.Meta.InductionSubgoal</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L430-L439","name":"Mathlib.Deriving.Traversable.simpFunctorGoal","line":430,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.simpFunctorGoal","doc":"Simplify the goal `m` using `functor_norm`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.simpFunctorGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">simpFunctorGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Lean.Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Lean.Meta.Simp.SimprocsArray</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Lean.Meta.Simp.Discharge</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simplifyTarget</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIdsToSimp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stats</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a> := <span class=\"fn\">{ }</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Lean.Meta.Simp.Stats</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L424-L426","name":"Mathlib.Deriving.Traversable.traversableDeriveHandler","line":424,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traversableDeriveHandler","doc":"The deriving handler for `Traversable`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traversableDeriveHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">traversableDeriveHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L394-L422","name":"Mathlib.Deriving.Traversable.deriveTraversable","line":394,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveTraversable","doc":"derive the `traverse` definition and declare `Traversable` using this. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveTraversable\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">deriveTraversable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L371-L392","name":"Mathlib.Deriving.Traversable.mkTraverse","line":371,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkTraverse","doc":"derive the `traverse` definition of a `Traversable` instance "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkTraverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mkTraverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L361-L369","name":"Mathlib.Deriving.Traversable.traverseConstructor.mkFunCtor","line":361,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseConstructor.mkFunCtor","doc":"`mkFunCtor ctor [(true, (arg₁ : m type₁)), (false, (arg₂ : type₂)), (true, (arg₃ : m type₃)),\n(false, (arg₄ : type₄))]` makes `fun (x₁ : type₁) (x₃ : type₃) => ctor x₁ arg₂ x₃ arg₄`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseConstructor.mkFunCtor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">traverseConstructor</span>.<span class=\"name\">mkFunCtor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars </span><span class=\"fn\">aargs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L340-L369","name":"Mathlib.Deriving.Traversable.traverseConstructor","line":340,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseConstructor","doc":"For a sum type `inductive Foo (α : Type) | foo1 : List α → ℕ → Foo α | ...`\n``traverseConstructor `foo1 `Foo applInst f `α `β [`(x : List α), `(y : ℕ)]``\nsynthesizes `foo1 <$> traverse f x <*> pure y.` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseConstructor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">traverseConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applInst </span><span class=\"fn\">f </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₀</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L321-L338","name":"Mathlib.Deriving.Traversable.traverseField","line":321,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseField","doc":"For a sum type `inductive Foo (α : Type) | foo1 : List α → ℕ → Foo α | ...`\n``traverseField `Foo f `α `(x : List α)`` synthesizes\n`traverse f x` as part of traversing `foo1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.traverseField\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">traverseField</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cl </span><span class=\"fn\">f </span><span class=\"fn\">v </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L307-L319","name":"Mathlib.Deriving.Traversable.nestedTraverse","line":307,"kind":"opaque","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.nestedTraverse","doc":"`nestedTraverse f α (List (Array (List α)))` synthesizes the expression\n`traverse (traverse (traverse f))`. `nestedTraverse` assumes that `α` appears in\n`(List (Array (List α)))` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.nestedTraverse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">nestedTraverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">v </span><span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L300-L303","name":"Mathlib.Deriving.Traversable.lawfulFunctorDeriveHandler","line":300,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.lawfulFunctorDeriveHandler","doc":"The deriving handler for `LawfulFunctor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.lawfulFunctorDeriveHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">lawfulFunctorDeriveHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L268-L298","name":"Mathlib.Deriving.Traversable.deriveLawfulFunctor","line":268,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveLawfulFunctor","doc":"Prove the functor laws and derive `LawfulFunctor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveLawfulFunctor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">deriveLawfulFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L262-L264","name":"Mathlib.Deriving.Traversable.functorDeriveHandler","line":262,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.functorDeriveHandler","doc":"The deriving handler for `Functor`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.functorDeriveHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">functorDeriveHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L251-L260","name":"Mathlib.Deriving.Traversable.higherOrderDeriveHandler","line":251,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.higherOrderDeriveHandler","doc":"Make the new deriving handler depends on other deriving handlers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.higherOrderDeriveHandler\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">higherOrderDeriveHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) (<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#liftM\">liftM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/AppBuilder.html#Lean.Meta.mkAppM\">Lean.Meta.mkAppM</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">arg</span><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">Lean.Elab.DerivingHandler</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L206-L249","name":"Mathlib.Deriving.Traversable.mkOneInstance","line":206,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkOneInstance","doc":"Derive the `cls` instance for the inductive type constructor `n` using the `tac` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkOneInstance\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mkOneInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">cls</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tac</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInst</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>) (<span class=\"fn\">arg</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#liftM\">liftM</a> <span class=\"fn\">(<a href=\"./Lean/Meta/AppBuilder.html#Lean.Meta.mkAppM\">Lean.Meta.mkAppM</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">arg</span><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L186-L204","name":"Mathlib.Deriving.Traversable.mkInstanceNameForTypeExpr","line":186,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkInstanceNameForTypeExpr","doc":"Similar to `mkInstanceName`, but for a `Expr` type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkInstanceNameForTypeExpr\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mkInstanceNameForTypeExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L153-L184","name":"Mathlib.Deriving.Traversable.deriveFunctor","line":153,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveFunctor","doc":"derive the `map` definition and declare `Functor` using this. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.deriveFunctor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">deriveFunctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L131-L151","name":"Mathlib.Deriving.Traversable.mkMap","line":131,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkMap","doc":"derive the `map` definition of a `Functor` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkMap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mkMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L127-L129","name":"Mathlib.Deriving.Traversable.getFVarsNotImplementationDetails","line":127,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getFVarsNotImplementationDetails","doc":"Get `Expr`s of `FVarId`s which is not implementation details in the current context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getFVarsNotImplementationDetails\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">getFVarsNotImplementationDetails</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L120-L125","name":"Mathlib.Deriving.Traversable.getFVarIdsNotImplementationDetails","line":120,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getFVarIdsNotImplementationDetails","doc":"Get `FVarId`s which is not implementation details in the current context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getFVarIdsNotImplementationDetails\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">getFVarIdsNotImplementationDetails</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L79-L118","name":"Mathlib.Deriving.Traversable.mkCasesOnMatch","line":79,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkCasesOnMatch","doc":"Makes a `match` expression corresponding to the application of `casesOn` like:\n```lean\nmatch (motive := motive) indices₁, indices₂, .., (val : type.{univs} params₁ params₂ ..) with\n| _, _, .., ctor₁ fields₁₁ fields₁₂ .. => rhss ctor₁ [fields₁₁, fields₁₂, ..]\n| _, _, .., ctor₂ fields₂₁ fields₂₂ .. => rhss ctor₂ [fields₂₁, fields₂₂, ..]\n```\nThis is convenient to make a definition with equation lemmas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mkCasesOnMatch\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mkCasesOnMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levels</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indices</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhss</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L69-L77","name":"Mathlib.Deriving.Traversable.mapConstructor","line":69,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mapConstructor","doc":"similar to `traverseConstructor` but for `Functor` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mapConstructor\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mapConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₀</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args₁</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L57-L67","name":"Mathlib.Deriving.Traversable.getAuxDefOfDeclName","line":57,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getAuxDefOfDeclName","doc":"Get the auxiliary local declaration corresponding to the current declaration. If there are\nmultiple declarations it will throw. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.getAuxDefOfDeclName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">getAuxDefOfDeclName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L39-L55","name":"Mathlib.Deriving.Traversable.mapField","line":39,"kind":"def","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mapField","doc":"similar to `traverseField` but for `Functor` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.mapField\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">mapField</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cl </span><span class=\"fn\">f </span><span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/DeriveTraversable.lean#L23-L37","name":"Mathlib.Deriving.Traversable.nestedMap","line":23,"kind":"opaque","docLink":"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.nestedMap","doc":"`nestedMap f α (List (Array (List α)))` synthesizes the expression\n`Functor.map (Functor.map (Functor.map f))`. `nestedMap` assumes that `α` appears in\n`(List (Array (List α)))`.\n\n(Similar to `nestedTraverse` but for `Functor`.) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/DeriveTraversable.html#Mathlib.Deriving.Traversable.nestedMap\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Deriving</span>.<span class=\"name\">Traversable</span>.<span class=\"name\">nestedMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">v </span><span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term.html#Lean.Elab.Term.TermElabM\">Lean.Elab.TermElabM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"}]}