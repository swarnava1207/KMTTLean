{"name":"Mathlib.GroupTheory.Perm.Fin","instances":[],"imports":["Init","Mathlib.GroupTheory.Perm.Cycle.Type","Mathlib.GroupTheory.Perm.Option","Mathlib.Logic.Equiv.Fin.Rotate","Mathlib.Logic.Equiv.Fintype"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L326-L332","name":"Equiv.Perm.prod_Ioi_comp_eq_sign_mul_prod","line":326,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.prod_Ioi_comp_eq_sign_mul_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.prod_Ioi_comp_eq_sign_mul_prod\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">prod_Ioi_comp_eq_sign_mul_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">j</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ioi\">Finset.Ioi</a> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">j</span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">σ</span>)</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">j</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ioi\">Finset.Ioi</a> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L303-L324","name":"Equiv.Perm.prod_Iio_comp_eq_sign_mul_prod","line":303,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.prod_Iio_comp_eq_sign_mul_prod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.prod_Iio_comp_eq_sign_mul_prod\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">prod_Iio_comp_eq_sign_mul_prod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\">R</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∀ (<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">j</span> <span class=\"fn\">i</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∏ <span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Iio\">Finset.Iio</a> <span class=\"fn\">j</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\">σ</span> <span class=\"fn\">j</span>)</span></span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">σ</span>)</span></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">∏ <span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Iio\">Finset.Iio</a> <span class=\"fn\">j</span></span>, <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span> <span class=\"fn\">j</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L298-L301","name":"Equiv.Perm.sign_eq_prod_prod_Ioi","line":298,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.sign_eq_prod_prod_Ioi","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.sign_eq_prod_prod_Ioi\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">sign_eq_prod_prod_Ioi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">σ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">j</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Ioi\">Finset.Ioi</a> <span class=\"fn\">i</span></span>, <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L287-L296","name":"Equiv.Perm.sign_eq_prod_prod_Iio","line":287,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.sign_eq_prod_prod_Iio","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.sign_eq_prod_prod_Iio\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">sign_eq_prod_prod_Iio</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">σ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∏ <span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>, <span class=\"fn\">∏ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Order/Interval/Finset/Defs.html#Finset.Iio\">Finset.Iio</a> <span class=\"fn\">j</span></span>, <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">σ</span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L276-L277","name":"Fin.isThreeCycle_cycleRange_two","line":276,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.isThreeCycle_cycleRange_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.isThreeCycle_cycleRange_two\"><span class=\"name\">Fin</span>.<span class=\"name\">isThreeCycle_cycleRange_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Type.html#Equiv.Perm.IsThreeCycle\">IsThreeCycle</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L267-L274","name":"Fin.cycleType_cycleRange","line":267,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleType_cycleRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleType_cycleRange\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleType_cycleRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h0</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Type.html#Equiv.Perm.cycleType\">cycleType</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">↑<span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L260-L265","name":"Fin.isCycle_cycleRange","line":260,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.isCycle_cycleRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.isCycle_cycleRange\"><span class=\"name\">Fin</span>.<span class=\"name\">isCycle_cycleRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h0</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Basic.html#Equiv.Perm.IsCycle\">IsCycle</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L255-L258","name":"Fin.cycleRange_symm_succ","line":255,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_symm_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_symm_succ\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_symm_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">Equiv.symm</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span>)</span> <span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span> <span class=\"fn\">j</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L251-L253","name":"Fin.cycleRange_symm_zero","line":251,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_symm_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_symm_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_symm_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">Equiv.symm</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L244-L249","name":"Fin.cycleRange_succAbove","line":244,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_succAbove","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_succAbove\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_succAbove</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span> <span class=\"fn\">j</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L222-L242","name":"Fin.succAbove_cycleRange","line":222,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.succAbove_cycleRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.succAbove_cycleRange\"><span class=\"name\">Fin</span>.<span class=\"name\">succAbove_cycleRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>.<a href=\"./Mathlib/Data/Fin/Basic.html#Fin.succAbove\">succAbove</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">Equiv.swap</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span>)</span> <span class=\"fn\"><span class=\"fn\">j</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L218-L220","name":"Fin.sign_cycleRange","line":218,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.sign_cycleRange","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.sign_cycleRange\"><span class=\"name\">Fin</span>.<span class=\"name\">sign_cycleRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">Equiv.Perm.sign</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L215-L216","name":"Fin.cycleRange_zero'","line":215,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_zero'","doc":"**Alias** of `Fin.cycleRange_mk_zero`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_zero'\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">h</span>⟩</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L210-L213","name":"Fin.cycleRange_mk_zero","line":210,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_mk_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_mk_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_mk_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">⟨<span class=\"fn\">0</span>, <span class=\"fn\">h</span>⟩</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L205-L208","name":"Fin.cycleRange_last","line":205,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_last","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_last\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_last</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Fin/Basic.html#Fin.last\">last</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L198-L203","name":"Fin.cycleRange_zero","line":198,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_zero\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L191-L196","name":"Fin.cycleRange_apply","line":191,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_apply\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">j</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L187-L189","name":"Fin.cycleRange_self","line":187,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_self\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L184-L185","name":"Fin.cycleRange_of_eq","line":184,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_eq\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L181-L182","name":"Fin.coe_cycleRange_of_lt","line":181,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.coe_cycleRange_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.coe_cycleRange_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_cycleRange_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L178-L179","name":"Fin.cycleRange_of_lt","line":178,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_lt\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L165-L176","name":"Fin.coe_cycleRange_of_le","line":165,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.coe_cycleRange_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.coe_cycleRange_of_le\"><span class=\"name\">Fin</span>.<span class=\"name\">coe_cycleRange_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">↑<span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L149-L163","name":"Fin.cycleRange_of_le","line":149,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_le\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/NeZero.html#NeZero\">NeZero</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L143-L147","name":"Fin.cycleRange_of_gt","line":143,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_gt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange_of_gt\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange_of_gt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\">cycleRange</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">j</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L134-L141","name":"Fin.cycleRange","line":134,"kind":"def","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange","doc":"`Fin.cycleRange i` is the cycle `(0 1 2 ... i)` leaving `(i+1 ... (n-1))` unchanged. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Fin.cycleRange\"><span class=\"name\">Fin</span>.<span class=\"name\">cycleRange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Equiv.Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L128-L130","name":"cycleType_finRotate_of_le","line":128,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#cycleType_finRotate_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#cycleType_finRotate_of_le\"><span class=\"name\">cycleType_finRotate_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Type.html#Equiv.Perm.cycleType\">cycleType</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">n</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L124-L126","name":"cycleType_finRotate","line":124,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#cycleType_finRotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#cycleType_finRotate\"><span class=\"name\">cycleType_finRotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>))</span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Type.html#Equiv.Perm.cycleType\">cycleType</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L119-L122","name":"isCycle_finRotate_of_le","line":119,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#isCycle_finRotate_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#isCycle_finRotate_of_le\"><span class=\"name\">isCycle_finRotate_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Basic.html#Equiv.Perm.IsCycle\">IsCycle</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L109-L117","name":"isCycle_finRotate","line":109,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#isCycle_finRotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#isCycle_finRotate\"><span class=\"name\">isCycle_finRotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>))</span>.<a href=\"./Mathlib/GroupTheory/Perm/Cycle/Basic.html#Equiv.Perm.IsCycle\">IsCycle</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L105-L107","name":"support_finRotate_of_le","line":105,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#support_finRotate_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#support_finRotate_of_le\"><span class=\"name\">support_finRotate_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/GroupTheory/Perm/Support.html#Equiv.Perm.support\">support</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L100-L103","name":"support_finRotate","line":100,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#support_finRotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#support_finRotate\"><span class=\"name\">support_finRotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>))</span>.<a href=\"./Mathlib/GroupTheory/Perm/Support.html#Equiv.Perm.support\">support</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">Finset.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L92-L98","name":"sign_finRotate","line":92,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#sign_finRotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#sign_finRotate\"><span class=\"name\">sign_finRotate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">Equiv.Perm.sign</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L79-L90","name":"finRotate_succ_eq_decomposeFin","line":79,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#finRotate_succ_eq_decomposeFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#finRotate_succ_eq_decomposeFin\"><span class=\"name\">finRotate_succ_eq_decomposeFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">Equiv.Perm.decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Fin/Rotate.html#finRotate\">finRotate</a> <span class=\"fn\">n</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L61-L67","name":"Finset.univ_perm_fin_succ","line":61,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Finset.univ_perm_fin_succ","doc":"The set of all permutations of `Fin (n + 1)` can be constructed by augmenting the set of\npermutations of `Fin n` by each element of `Fin (n + 1)` in turn. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Finset.univ_perm_fin_succ\"><span class=\"name\">Finset</span>.<span class=\"name\">univ_perm_fin_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">univ</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Image.html#Finset.map\">map</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">Equiv.Perm.decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span>.<a href=\"./Mathlib/Logic/Embedding/Basic.html#Equiv.toEmbedding\">toEmbedding</a></span> <a href=\"./Mathlib/Data/Fintype/Defs.html#Finset.univ\">univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L56-L59","name":"Equiv.Perm.decomposeFin.symm_sign","line":56,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin.symm_sign","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin.symm_sign\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin</span>.<span class=\"name\">symm_sign</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">-<span class=\"fn\">1</span></span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Sign.html#Equiv.Perm.sign\">sign</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L51-L54","name":"Equiv.Perm.decomposeFin_symm_apply_one","line":51,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_one\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin_symm_apply_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">swap</a> <span class=\"fn\">0</span> <span class=\"fn\">p</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L40-L49","name":"Equiv.Perm.decomposeFin_symm_apply_succ","line":40,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_succ\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin_symm_apply_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">swap</a> <span class=\"fn\">0</span> <span class=\"fn\">p</span>)</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">e</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.succ\">succ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L36-L38","name":"Equiv.Perm.decomposeFin_symm_apply_zero","line":36,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_apply_zero\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin_symm_apply_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L31-L34","name":"Equiv.Perm.decomposeFin_symm_of_one","line":31,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_of_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_of_one\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin_symm_of_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">swap</a> <span class=\"fn\">0</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L26-L29","name":"Equiv.Perm.decomposeFin_symm_of_refl","line":26,"kind":"theorem","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_of_refl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin_symm_of_refl\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin_symm_of_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\">decomposeFin</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.refl\">Equiv.refl</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Basic.html#Equiv.swap\">swap</a> <span class=\"fn\">0</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/GroupTheory/Perm/Fin.lean#L19-L24","name":"Equiv.Perm.decomposeFin","line":19,"kind":"def","docLink":"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin","doc":"Permutations of `Fin (n + 1)` are equivalent to fixing a single\n`Fin (n + 1)` and permuting the remaining with a `Perm (Fin n)`.\nThe fixed `Fin (n + 1)` is swapped with `0`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/GroupTheory/Perm/Fin.html#Equiv.Perm.decomposeFin\"><span class=\"name\">Equiv</span>.<span class=\"name\">Perm</span>.<span class=\"name\">decomposeFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.Perm\">Perm</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"}]}