{"name":"Mathlib.AlgebraicTopology.SimplicialSet.Coskeletal","instances":[{"typeNames":["OfNat.ofNat"],"name":"SSet.StrictSegal.isCoskeletal'","className":"CategoryTheory.SimplicialObject.IsCoskeletal"},{"typeNames":["CategoryTheory.nerve","OfNat.ofNat"],"name":"CategoryTheory.Nerve.instIsCoskeletalNerveOfNatNat","className":"CategoryTheory.SimplicialObject.IsCoskeletal"}],"imports":["Init","Mathlib.AlgebraicTopology.SimplicialObject.Coskeletal","Mathlib.AlgebraicTopology.SimplicialSet.StrictSegal","Mathlib.CategoryTheory.Functor.KanExtension.Adjunction","Mathlib.CategoryTheory.Functor.KanExtension.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L246-L251","name":"CategoryTheory.Nerve.cosk₂Iso","line":246,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.cosk₂Iso","doc":"The natural isomorphism between `nerveFunctor` and `nerveFunctor₂ ⋙ Truncated.cosk 2` whose\ncomponents `nerve C ≅ (Truncated.cosk 2).obj (nerveFunctor₂.obj C)` shows that nerves of categories\nare 2-coskeletal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.cosk₂Iso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">cosk₂Iso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerveFunctor\">nerveFunctor</a> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\">nerveFunctor₂</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated.cosk\">SSet.Truncated.cosk</a> <span class=\"fn\">2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L242-L244","name":"CategoryTheory.Nerve.nerveFunctor₂","line":242,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂","doc":"The essential data of the nerve functor is contained in the 2-truncation, which is\nrecorded by the composite functor `nerveFunctor₂`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.nerveFunctor₂\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">nerveFunctor₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet.Truncated\">SSet.Truncated</a> <span class=\"fn\">2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L239-L240","name":"CategoryTheory.Nerve.instIsCoskeletalNerveOfNatNat","line":239,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.instIsCoskeletalNerveOfNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#CategoryTheory.Nerve.instIsCoskeletalNerveOfNatNat\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Nerve</span>.<span class=\"name\">instIsCoskeletalNerveOfNatNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Coskeletal.html#CategoryTheory.SimplicialObject.IsCoskeletal\">SimplicialObject.IsCoskeletal</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Nerve.html#CategoryTheory.nerve\">nerve</a> <span class=\"fn\">C</span>)</span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L223-L225","name":"SSet.StrictSegal.isCoskeletal'","line":223,"kind":"instance","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isCoskeletal'","doc":"When `X` satisfies `IsStrictSegal`, `X` is 2-coskeletal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isCoskeletal'\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isCoskeletal'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.IsStrictSegal\">IsStrictSegal</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Coskeletal.html#CategoryTheory.SimplicialObject.IsCoskeletal\">CategoryTheory.SimplicialObject.IsCoskeletal</a> <span class=\"fn\">X</span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L218-L221","name":"SSet.StrictSegal.isCoskeletal","line":218,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isCoskeletal","doc":"When `X` is `StrictSegal`, `X` is 2-coskeletal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isCoskeletal\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isCoskeletal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplicialObject/Coskeletal.html#CategoryTheory.SimplicialObject.IsCoskeletal\">CategoryTheory.SimplicialObject.IsCoskeletal</a> <span class=\"fn\">X</span> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L213-L216","name":"SSet.StrictSegal.isRightKanExtension","line":213,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isRightKanExtension","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isRightKanExtension\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isRightKanExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/KanExtension/Basic.html#CategoryTheory.Functor.IsRightKanExtension\">CategoryTheory.Functor.IsRightKanExtension</a> <span class=\"fn\">X</span>\n  <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L207-L211","name":"SSet.StrictSegal.isPointwiseRightKanExtension","line":207,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtension","doc":"Since `StrictSegal.isPointwiseRightKanExtensionAt` proves that the appropriate\ncones are limit cones, `rightExtensionInclusion X 2` is a pointwise right Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtension\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\">Truncated.rightExtensionInclusion</a> <span class=\"fn\">X</span> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/KanExtension/Pointwise.html#CategoryTheory.Functor.RightExtension.IsPointwiseRightKanExtension\">IsPointwiseRightKanExtension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L175-L205","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt","line":175,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt","doc":"A strict Segal simplicial set is 2-coskeletal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\">Truncated.rightExtensionInclusion</a> <span class=\"fn\">X</span> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/KanExtension/Pointwise.html#CategoryTheory.Functor.RightExtension.IsPointwiseRightKanExtensionAt\">IsPointwiseRightKanExtensionAt</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L161-L168","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₃","line":161,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₃\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span>.<span class=\"name\">fac_aux₃</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/StructuredArrow/Basic.html#CategoryTheory.StructuredArrow.proj\">CategoryTheory.StructuredArrow.proj</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.pt\">pt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">1</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift\">lift</a> <span class=\"fn\">sx</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂\">strArrowMk₂</a> <span class=\"fn\">φ</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L92-L159","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₂","line":92,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₂\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span>.<span class=\"name\">fac_aux₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/StructuredArrow/Basic.html#CategoryTheory.StructuredArrow.proj\">CategoryTheory.StructuredArrow.proj</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.pt\">pt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hij</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">j</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfLe\">SimplexCategory.mkOfLe</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">j</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">hij</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift\">lift</a> <span class=\"fn\">sx</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂\">strArrowMk₂</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfLe\">SimplexCategory.mkOfLe</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">j</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">hij</span>)</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L83-L90","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₁","line":83,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.fac_aux₁\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span>.<span class=\"name\">fac_aux₁</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/StructuredArrow/Basic.html#CategoryTheory.StructuredArrow.proj\">CategoryTheory.StructuredArrow.proj</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.pt\">pt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfSucc\">SimplexCategory.mkOfSucc</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">hi</span>⟩</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift\">lift</a> <span class=\"fn\">sx</span> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.π\">π</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂\">strArrowMk₂</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Basic.html#SimplexCategory.mkOfSucc\">SimplexCategory.mkOfSucc</a> <span class=\"fn\">⟨<span class=\"fn\">i</span>, <span class=\"fn\">hi</span>⟩</span>)</span> <span class=\"fn\">⋯</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L59-L81","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift","line":59,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift","doc":"Given a term in the cone over the diagram\n`(proj (op ⦋n⦌) ((Truncated.inclusion 2).op ⋙ (Truncated.inclusion 2).op ⋙ X)` where `X` is\nStrict Segal, one can produce an `n`-simplex in `X`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.lift\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sx</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/StrictSegal.html#SSet.StrictSegal\">StrictSegal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone\">CategoryTheory.Limits.Cone</a>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Comma/StructuredArrow/Basic.html#CategoryTheory.StructuredArrow.proj\">CategoryTheory.StructuredArrow.proj</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span>\n          <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n      <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Cones.html#CategoryTheory.Limits.Cone.pt\">pt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L53-L57","name":"SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂","line":53,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂","doc":"A morphism in `SimplexCategory` with domain `⦋0⦌`, `⦋1⦌`, or `⦋2⦌` defines an object in the\ncomma category `StructuredArrow (op ⦋n⦌) (Truncated.inclusion (n := 2)).op`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.StrictSegal.isPointwiseRightKanExtensionAt.strArrowMk₂\"><span class=\"name\">SSet</span>.<span class=\"name\">StrictSegal</span>.<span class=\"name\">isPointwiseRightKanExtensionAt</span>.<span class=\"name\">strArrowMk₂</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> := by omega)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Comma/StructuredArrow/Basic.html#CategoryTheory.StructuredArrow\">CategoryTheory.StructuredArrow</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.mk\">SimplexCategory.mk</a> <span class=\"fn\">n</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">2</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L37-L37","name":"SSet.Truncated.rightExtensionInclusion_hom_app","line":37,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_hom_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_hom_app\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">rightExtensionInclusion_hom_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated\">SimplexCategory.Truncated</a> <span class=\"fn\">n</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\">rightExtensionInclusion</a> <span class=\"fn\">X</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.Comma.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X✝</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a✝</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L37-L37","name":"SSet.Truncated.rightExtensionInclusion_left","line":37,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_left\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">rightExtensionInclusion_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\">rightExtensionInclusion</a> <span class=\"fn\">X</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.Comma.left\">left</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">X</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L37-L37","name":"SSet.Truncated.rightExtensionInclusion_right_as","line":37,"kind":"theorem","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_right_as","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion_right_as\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">rightExtensionInclusion_right_as</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\">rightExtensionInclusion</a> <span class=\"fn\">X</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.Comma.right\">right</a></span>.<a href=\"./Mathlib/CategoryTheory/Discrete/Basic.html#CategoryTheory.Discrete.as\">as</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.lean#L35-L40","name":"SSet.Truncated.rightExtensionInclusion","line":35,"kind":"def","docLink":"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion","doc":"The identity natural transformation exhibits a simplicial set as a right extension of its\nrestriction along `(Truncated.inclusion (n := n)).op`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Coskeletal.html#SSet.Truncated.rightExtensionInclusion\"><span class=\"name\">SSet</span>.<span class=\"name\">Truncated</span>.<span class=\"name\">rightExtensionInclusion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/AlgebraicTopology/SimplicialSet/Basic.html#SSet\">SSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/KanExtension/Basic.html#CategoryTheory.Functor.RightExtension\">RightExtension</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicTopology/SimplexCategory/Defs.html#SimplexCategory.Truncated.inclusion\">SimplexCategory.Truncated.inclusion</a> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"}]}