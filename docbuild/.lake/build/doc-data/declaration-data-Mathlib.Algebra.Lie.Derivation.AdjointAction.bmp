{"name":"Mathlib.Algebra.Lie.Derivation.AdjointAction","instances":[],"imports":["Init","Mathlib.Algebra.Lie.Abelian","Mathlib.Algebra.Lie.Derivation.Basic","Mathlib.Algebra.Lie.OfAssociative"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L89-L96","name":"LieDerivation.maxTrivSubmodule_eq_bot_of_center_eq_bot","line":89,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.maxTrivSubmodule_eq_bot_of_center_eq_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.maxTrivSubmodule_eq_bot_of_center_eq_bot\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">maxTrivSubmodule_eq_bot_of_center_eq_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#LieAlgebra.center\">LieAlgebra.center</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#LieModule.maxTrivSubmodule\">LieModule.maxTrivSubmodule</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L83-L87","name":"LieDerivation.mem_ad_idealRange_iff","line":83,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.mem_ad_idealRange_iff","doc":"A derivation `D` belongs to the ideal range of the adjoint action iff it is of the form `ad x`\nfor some `x` in the Lie algebra `L`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.mem_ad_idealRange_iff\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">mem_ad_idealRange_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">D</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieHom.idealRange\">idealRange</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">x</span> : <span class=\"fn\">L</span>), <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L77-L81","name":"LieDerivation.ad_isIdealMorphism","line":77,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_isIdealMorphism","doc":"The range of the adjoint action homomorphism from a Lie algebra `L` to the Lie algebra of its\nderivations is an ideal of the latter. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_isIdealMorphism\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">ad_isIdealMorphism</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieHom.IsIdealMorphism\">IsIdealMorphism</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L72-L74","name":"LieDerivation.lie_der_ad_eq_ad_der","line":72,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.lie_der_ad_eq_ad_der","doc":"The commutator of a derivation `D` and a derivation of the form `ad x` is `ad (D x)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.lie_der_ad_eq_ad_der\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">lie_der_ad_eq_ad_der</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">D</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<span class=\"fn\">D</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L67-L70","name":"LieDerivation.injective_ad_of_center_eq_bot","line":67,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.injective_ad_of_center_eq_bot","doc":"If the center of a Lie algebra is trivial, then the adjoint action is injective. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.injective_ad_of_center_eq_bot\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">injective_ad_of_center_eq_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#LieAlgebra.center\">LieAlgebra.center</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L61-L65","name":"LieDerivation.ad_ker_eq_center","line":61,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_ker_eq_center","doc":"The kernel of the adjoint action on a Lie algebra is equal to its center. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_ker_eq_center\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">ad_ker_eq_center</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#LieAlgebra.center\">LieAlgebra.center</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L58-L58","name":"LieDerivation.lie_ad","line":58,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.lie_ad","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.lie_ad\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">lie_ad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">D</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">D</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L56-L56","name":"LieDerivation.ad_apply_lieDerivation","line":56,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_apply_lieDerivation","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_apply_lieDerivation\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">ad_apply_lieDerivation</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">D</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">(<span class=\"fn\">D</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">x</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">D</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L53-L54","name":"LieDerivation.coe_ad_apply_eq_ad_apply","line":53,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.coe_ad_apply_eq_ad_apply","doc":"The definitions `LieDerivation.ad` and `LieAlgebra.ad` agree. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.coe_ad_apply_eq_ad_apply\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">coe_ad_apply_eq_ad_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/OfAssociative.html#LieAlgebra.ad\">LieAlgebra.ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L40-L40","name":"LieDerivation.ad_apply_apply","line":40,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad_apply_apply\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">ad_apply_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">a✝</span> : <span class=\"fn\">L</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span> <span class=\"fn\">a</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁅</a><span class=\"fn\">a</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">,</a> <span class=\"fn\">a✝</span><a href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\">⁆</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Derivation/AdjointAction.lean#L37-L49","name":"LieDerivation.ad","line":37,"kind":"def","docLink":"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad","doc":"The adjoint action of a Lie algebra `L` on itself, seen as a morphism of Lie algebras from\n`L` to its derivations.\nNote the minus sign: this is chosen to so that `ad ⁅x, y⁆ = ⁅ad x, ad y⁆`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Derivation/AdjointAction.html#LieDerivation.ad\"><span class=\"name\">LieDerivation</span>.<span class=\"name\">ad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L</span> <a href=\"./Mathlib/Algebra/Lie/Basic.html#LieHom\">→ₗ⁅</a><span class=\"fn\">R</span><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieHom\">⁆</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Derivation/Basic.html#LieDerivation\">LieDerivation</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"}]}