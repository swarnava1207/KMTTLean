{"name":"Mathlib.Combinatorics.Quiver.Cast","instances":[],"imports":["Init","Mathlib.Combinatorics.Quiver.Basic","Mathlib.Combinatorics.Quiver.Path"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L128-L132","name":"Quiver.eq_nil_of_length_zero","line":128,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.eq_nil_of_length_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.eq_nil_of_length_zero\"><span class=\"name\">Quiver</span>.<span class=\"name\">eq_nil_of_length_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hzero</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">Path.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">Path.nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L123-L126","name":"Quiver.hom_cast_eq_of_cons_eq_cons","line":123,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.hom_cast_eq_of_cons_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.hom_cast_eq_of_cons_eq_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">hom_cast_eq_of_cons_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">v' </span><span class=\"fn\">w</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">v</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e'</span> : <span class=\"fn\">v'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">e'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">Hom.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L118-L121","name":"Quiver.cast_eq_of_cons_eq_cons","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.cast_eq_of_cons_eq_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.cast_eq_of_cons_eq_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">cast_eq_of_cons_eq_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">v' </span><span class=\"fn\">w</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">v</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e'</span> : <span class=\"fn\">v'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">e'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">Path.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L113-L116","name":"Quiver.Path.cast_cons","line":113,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_cons\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">u' </span><span class=\"fn\">w'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">v</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hw</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.cons\">cons</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">Hom.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">hw</span> <span class=\"fn\">e</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L108-L111","name":"Quiver.Path.eq_cast_iff_heq","line":108,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.eq_cast_iff_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.eq_cast_iff_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">eq_cast_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u'</span> <span class=\"fn\">v'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">p'</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L103-L106","name":"Quiver.Path.cast_eq_iff_heq","line":103,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_eq_iff_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_eq_iff_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_eq_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u'</span> <span class=\"fn\">v'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L98-L101","name":"Quiver.Path.cast_heq","line":98,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L93-L96","name":"Quiver.Path.cast_nil","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_nil\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">u'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hu</span> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">nil</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L86-L91","name":"Quiver.Path.cast_cast","line":86,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v' </span><span class=\"fn\">u'' </span><span class=\"fn\">v''</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu'</span> : <span class=\"fn\">u'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv'</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu'</span> <span class=\"fn\">hv'</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L82-L84","name":"Quiver.Path.cast_rfl_rfl","line":82,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_rfl_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_rfl_rfl\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_rfl_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L77-L80","name":"Quiver.Path.cast_eq_cast","line":77,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_eq_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast_eq_cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">_root_.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">p</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L73-L75","name":"Quiver.Path.cast","line":73,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast","doc":"Change the endpoints of a path using equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Path.cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Path</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Path.html#Quiver.Path\">Path</a> <span class=\"fn\">u'</span> <span class=\"fn\">v'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L61-L64","name":"Quiver.Hom.eq_cast_iff_heq","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.eq_cast_iff_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.eq_cast_iff_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">eq_cast_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e'</span> : <span class=\"fn\">u'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">e'</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L56-L59","name":"Quiver.Hom.cast_eq_iff_heq","line":56,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_eq_iff_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_eq_iff_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast_eq_iff_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e'</span> : <span class=\"fn\">u'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">e</span> <span class=\"fn\">e'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L51-L54","name":"Quiver.Hom.cast_heq","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_heq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_heq\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast_heq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">e</span>)</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L44-L49","name":"Quiver.Hom.cast_cast","line":44,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v' </span><span class=\"fn\">u'' </span><span class=\"fn\">v''</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu'</span> : <span class=\"fn\">u'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv'</span> : <span class=\"fn\">v'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu'</span> <span class=\"fn\">hv'</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">e</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L40-L42","name":"Quiver.Hom.cast_rfl_rfl","line":40,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_rfl_rfl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_rfl_rfl\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast_rfl_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">e</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L35-L38","name":"Quiver.Hom.cast_eq_cast","line":35,"kind":"theorem","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_eq_cast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast_eq_cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast_eq_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\">cast</a> <span class=\"fn\">hu</span> <span class=\"fn\">hv</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#cast\">_root_.cast</a> <span class=\"fn\">⋯</span> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/Quiver/Cast.lean#L31-L33","name":"Quiver.Hom.cast","line":31,"kind":"def","docLink":"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast","doc":"Change the endpoints of an arrow using equalities. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/Quiver/Cast.html#Quiver.Hom.cast\"><span class=\"name\">Quiver</span>.<span class=\"name\">Hom</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver\">Quiver</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">u</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">v'</span></div></div>"}]}