{"name":"Mathlib.Algebra.Homology.DerivedCategory.Fractions","instances":[{"typeNames":["HomotopyCategory.quasiIso"],"name":"DerivedCategory.instHasLeftCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","className":"CategoryTheory.MorphismProperty.HasLeftCalculusOfFractions"},{"typeNames":["HomotopyCategory.quasiIso"],"name":"DerivedCategory.instHasRightCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","className":"CategoryTheory.MorphismProperty.HasRightCalculusOfFractions"}],"imports":["Init","Mathlib.Algebra.Homology.DerivedCategory.HomologySequence","Mathlib.Algebra.Homology.Embedding.CochainComplex"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L135-L159","name":"DerivedCategory.left_fac_of_isStrictlyLE_of_isStrictlyGE","line":135,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac_of_isStrictlyLE_of_isStrictlyGE","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category\nwith `X` strictly `≤ b`, and `Y` striclty `≥ a` and `≤ b`\ncan be written as `f = Q.map g ≫ inv (Q.map s)` with `g : X ⟶ Y'` and\n`s : Y ⟶ Y'` a quasi-isomorphism with `Y'` strictly `≥ a` and `≤ b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac_of_isStrictlyLE_of_isStrictlyGE\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">left_fac_of_isStrictlyLE_of_isStrictlyGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">Y'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">a</span></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">b</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">x</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>), <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L109-L133","name":"DerivedCategory.right_fac_of_isStrictlyLE_of_isStrictlyGE","line":109,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac_of_isStrictlyLE_of_isStrictlyGE","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category\nwith `X` strictly `≥ a` and `≤ b`, and `Y` striclty `≥ a`\ncan be written as `f = inv (Q.map s) ≫ Q.map g` with `s : X' ⟶ X`\na quasi-isomorphism with `X'` strictly `≥ a` and `≤ b`, and `g : X' ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac_of_isStrictlyLE_of_isStrictlyGE\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">right_fac_of_isStrictlyLE_of_isStrictlyGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">a</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">a</span></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">b</span></span>) (<span class=\"fn\">s</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span>) (<span class=\"fn\">x</span> :\n  <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L86-L107","name":"DerivedCategory.left_fac_of_isStrictlyGE","line":86,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac_of_isStrictlyGE","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category with `Y` strictly `≥ n`\ncan be written as `f = Q.map g ≫ inv (Q.map s)` with `g : X ⟶ Y'` and `s : Y ⟶ Y'`\na quasi-isomorphism with `Y'` strictly `≥ n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac_of_isStrictlyGE\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">left_fac_of_isStrictlyGE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">Y'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyGE\">IsStrictlyGE</a></span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L64-L84","name":"DerivedCategory.right_fac_of_isStrictlyLE","line":64,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac_of_isStrictlyLE","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category with `X` strictly `≤ n`\ncan be written as `f = inv (Q.map s) ≫ Q.map g` with `s : X' ⟶ X` a quasi-isomorphism with\n`X'` strictly `≤ n` and `g : X' ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac_of_isStrictlyLE\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">right_fac_of_isStrictlyLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (_ : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X'</span>.<a href=\"./Mathlib/Algebra/Homology/Embedding/CochainComplex.html#CochainComplex.IsStrictlyLE\">IsStrictlyLE</a></span> <span class=\"fn\">n</span></span>) (<span class=\"fn\">s</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L51-L62","name":"DerivedCategory.left_fac","line":51,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category can be written\nas `f = Q.map g ≫ inv (Q.map s)` with `g : X ⟶ Y'` and `s : Y ⟶ Y'` a quasi-isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.left_fac\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">left_fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">Y'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y'</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L38-L49","name":"DerivedCategory.right_fac","line":38,"kind":"theorem","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac","doc":"Any morphism `f : Q.obj X ⟶ Q.obj Y` in the derived category can be written\nas `f = inv (Q.map s) ≫ Q.map g` with `s : X' ⟶ X` a quasi-isomorphism and `g : X' ⟶ Y`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.right_fac\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">right_fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#HasDerivedCategory\">HasDerivedCategory</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">X'</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/HomologicalComplex.html#CochainComplex\">CochainComplex</a> <span class=\"fn\">C</span> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a></span>) (<span class=\"fn\">s</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span></span>) (<span class=\"fn\">g</span> : <span class=\"fn\">X'</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n  <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.inv\">CategoryTheory.inv</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">s</span>)</span>)</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Algebra/Homology/DerivedCategory/Basic.html#DerivedCategory.Q\">Q</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">g</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L34-L36","name":"DerivedCategory.instHasRightCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","line":34,"kind":"instance","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.instHasRightCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.instHasRightCalculusOfFractionsHomotopyCategoryIntUpQuasiIso\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">instHasRightCalculusOfFractionsHomotopyCategoryIntUpQuasiIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/Localization.html#HomotopyCategory.quasiIso\">HomotopyCategory.quasiIso</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.up\">ComplexShape.up</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Localization/CalculusOfFractions.html#CategoryTheory.MorphismProperty.HasRightCalculusOfFractions\">HasRightCalculusOfFractions</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Homology/DerivedCategory/Fractions.lean#L30-L32","name":"DerivedCategory.instHasLeftCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","line":30,"kind":"instance","docLink":"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.instHasLeftCalculusOfFractionsHomotopyCategoryIntUpQuasiIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Homology/DerivedCategory/Fractions.html#DerivedCategory.instHasLeftCalculusOfFractionsHomotopyCategoryIntUpQuasiIso\"><span class=\"name\">DerivedCategory</span>.<span class=\"name\">instHasLeftCalculusOfFractionsHomotopyCategoryIntUpQuasiIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Abelian/Basic.html#CategoryTheory.Abelian\">CategoryTheory.Abelian</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/Localization.html#HomotopyCategory.quasiIso\">HomotopyCategory.quasiIso</a> <span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Homology/ComplexShape.html#ComplexShape.up\">ComplexShape.up</a> <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Localization/CalculusOfFractions.html#CategoryTheory.MorphismProperty.HasLeftCalculusOfFractions\">HasLeftCalculusOfFractions</a></span></div></div>"}]}