{"name":"Mathlib.Algebra.Lie.Semisimple.Basic","instances":[{"typeNames":[],"name":"LieAlgebra.instIsFaithfulOfHasTrivialRadical","className":"LieModule.IsFaithful"},{"typeNames":[],"name":"LieAlgebra.IsSimple.instIsIrreducible","className":"IsSimpleOrder"},{"typeNames":[],"name":"LieAlgebra.IsSimple.instHasTrivialRadical","className":"LieAlgebra.HasTrivialRadical"},{"typeNames":["LieIdeal"],"name":"LieAlgebra.IsSemisimple.instDistribLattice","className":"DistribLattice"},{"typeNames":["LieIdeal"],"name":"LieAlgebra.IsSemisimple.instBooleanAlgebra","className":"BooleanAlgebra"},{"typeNames":[],"name":"LieAlgebra.IsSemisimple.instHasTrivialRadical","className":"LieAlgebra.HasTrivialRadical"},{"typeNames":[],"name":"LieAlgebra.IsSimple.instIsSemisimple","className":"LieAlgebra.IsSemisimple"}],"imports":["Init","Mathlib.Algebra.Lie.Semisimple.Defs","Mathlib.Order.BooleanGenerators"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L322-L322","name":"LieAlgebra.ad_ker_eq_bot_of_hasTrivialRadical","line":322,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.ad_ker_eq_bot_of_hasTrivialRadical","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.ad_ker_eq_bot_of_hasTrivialRadical\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">ad_ker_eq_bot_of_hasTrivialRadical</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/OfAssociative.html#LieAlgebra.ad\">ad</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieHom.ker\">ker</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L314-L320","name":"LieAlgebra.abelian_radical_iff_solvable_is_abelian","line":314,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.abelian_radical_iff_solvable_is_abelian","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.abelian_radical_iff_solvable_is_abelian\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">abelian_radical_iff_solvable_is_abelian</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/RingTheory/Noetherian/Defs.html#IsNoetherian\">IsNoetherian</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.radical\">radical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.IsSolvable\">IsSolvable</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span> → <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L310-L312","name":"LieAlgebra.abelian_radical_of_hasTrivialRadical","line":310,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.abelian_radical_of_hasTrivialRadical","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.abelian_radical_of_hasTrivialRadical\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">abelian_radical_of_hasTrivialRadical</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.radical\">radical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L304-L308","name":"LieAlgebra.subsingleton_of_hasTrivialRadical_lie_abelian","line":304,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.subsingleton_of_hasTrivialRadical_lie_abelian","doc":"An abelian Lie algebra with trivial radical is trivial. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.subsingleton_of_hasTrivialRadical_lie_abelian\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">subsingleton_of_hasTrivialRadical_lie_abelian</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L293-L302","name":"LieAlgebra.IsSimple.instIsSemisimple","line":293,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instIsSemisimple","doc":"A simple Lie algebra is semisimple. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instIsSemisimple\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">instIsSemisimple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L276-L289","name":"LieAlgebra.IsSemisimple.instHasTrivialRadical","line":276,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instHasTrivialRadical","doc":"A semisimple Lie algebra has trivial radical. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instHasTrivialRadical\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSemisimple</span>.<span class=\"name\">instHasTrivialRadical</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L272-L274","name":"LieAlgebra.IsSemisimple.instBooleanAlgebra","line":272,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instBooleanAlgebra","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instBooleanAlgebra\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSemisimple</span>.<span class=\"name\">instBooleanAlgebra</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BooleanAlgebra.html#BooleanAlgebra\">BooleanAlgebra</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L269-L270","name":"LieAlgebra.IsSemisimple.instDistribLattice","line":269,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instDistribLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.instDistribLattice\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSemisimple</span>.<span class=\"name\">instDistribLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L265-L267","name":"LieAlgebra.IsSemisimple.booleanGenerators","line":265,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.booleanGenerators","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.booleanGenerators\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSemisimple</span>.<span class=\"name\">booleanGenerators</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BooleanGenerators.html#IsCompactlyGenerated.BooleanGenerators\">IsCompactlyGenerated.BooleanGenerators</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">I</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L114-L182","name":"LieAlgebra.IsSemisimple.isSimple_of_isAtom","line":114,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.isSimple_of_isAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSemisimple.isSimple_of_isAtom\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSemisimple</span>.<span class=\"name\">isSimple_of_isAtom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSemisimple\">IsSemisimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L97-L103","name":"LieAlgebra.IsSimple.instHasTrivialRadical","line":97,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instHasTrivialRadical","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instHasTrivialRadical\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">instHasTrivialRadical</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L94-L95","name":"LieAlgebra.IsSimple.isAtom_iff_eq_top","line":94,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.isAtom_iff_eq_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.isAtom_iff_eq_top\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">isAtom_iff_eq_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L90-L91","name":"LieAlgebra.IsSimple.isAtom_top","line":90,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.isAtom_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.isAtom_top\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">isAtom_top</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L87-L88","name":"LieAlgebra.IsSimple.eq_top_of_isAtom","line":87,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.eq_top_of_isAtom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.eq_top_of_isAtom\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">eq_top_of_isAtom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hI</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Atoms.html#IsAtom\">IsAtom</a> <span class=\"fn\">I</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L79-L84","name":"LieAlgebra.IsSimple.instIsIrreducible","line":79,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instIsIrreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.IsSimple.instIsIrreducible\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">IsSimple</span>.<span class=\"name\">instIsIrreducible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.IsSimple\">IsSimple</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieModule.IsIrreducible\">LieModule.IsIrreducible</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L67-L73","name":"LieAlgebra.hasTrivialRadical_iff_no_abelian_ideals","line":67,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_iff_no_abelian_ideals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_iff_no_abelian_ideals\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">hasTrivialRadical_iff_no_abelian_ideals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Abelian.html#IsLieAbelian\">IsLieAbelian</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span> → <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L63-L65","name":"LieAlgebra.hasTrivialRadical_iff_no_solvable_ideals","line":63,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_iff_no_solvable_ideals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_iff_no_solvable_ideals\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">hasTrivialRadical_iff_no_solvable_ideals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.IsSolvable\">IsSolvable</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span> → <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L59-L61","name":"LieAlgebra.hasTrivialRadical_of_no_solvable_ideals","line":59,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_of_no_solvable_ideals","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.hasTrivialRadical_of_no_solvable_ideals\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">hasTrivialRadical_of_no_solvable_ideals</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.IsSolvable\">IsSolvable</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span> → <span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L54-L56","name":"LieAlgebra.instIsFaithfulOfHasTrivialRadical","line":54,"kind":"instance","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.instIsFaithfulOfHasTrivialRadical","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.instIsFaithfulOfHasTrivialRadical\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">instIsFaithfulOfHasTrivialRadical</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/OfAssociative.html#LieModule.IsFaithful\">LieModule.IsFaithful</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L50-L52","name":"LieAlgebra.HasTrivialRadical.eq_bot_of_isSolvable","line":50,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.HasTrivialRadical.eq_bot_of_isSolvable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieAlgebra.HasTrivialRadical.eq_bot_of_isSolvable\"><span class=\"name\">LieAlgebra</span>.<span class=\"name\">HasTrivialRadical</span>.<span class=\"name\">eq_bot_of_isSolvable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieAlgebra\">LieAlgebra</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieAlgebra.HasTrivialRadical\">HasTrivialRadical</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Submodule.html#LieIdeal\">LieIdeal</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">hI</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Solvable.html#LieAlgebra.IsSolvable\">IsSolvable</a> <span class=\"fn\">↥<span class=\"fn\">I</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">I</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Algebra/Lie/Semisimple/Basic.lean#L36-L41","name":"LieModule.nontrivial_of_isIrreducible","line":36,"kind":"theorem","docLink":"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieModule.nontrivial_of_isIrreducible","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Algebra/Lie/Semisimple/Basic.html#LieModule.nontrivial_of_isIrreducible\"><span class=\"name\">LieModule</span>.<span class=\"name\">nontrivial_of_isIrreducible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">R</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRing\">LieRing</a> <span class=\"fn\">L</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Defs.html#AddCommGroup\">AddCommGroup</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Module/Defs.html#Module\">Module</a> <span class=\"fn\">R</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Basic.html#LieRingModule\">LieRingModule</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Lie/Semisimple/Defs.html#LieModule.IsIrreducible\">IsIrreducible</a> <span class=\"fn\">R</span> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">M</span></span></div></div>"}]}