{"name":"Plausible.Random","instances":[{"typeNames":["Plausible.RandGT","Plausible.RandGT"],"name":"Plausible.instMonadLiftTRandGTOfMonadLift","className":"MonadLiftT"},{"typeNames":["Fin"],"name":"Plausible.Random.instFinSucc","className":"Plausible.Random"},{"typeNames":["Bool"],"name":"Plausible.Random.instBool","className":"Plausible.Random"},{"typeNames":["Nat"],"name":"Plausible.Random.instBoundedRandomNat","className":"Plausible.BoundedRandom"},{"typeNames":["Int"],"name":"Plausible.Random.instBoundedRandomInt","className":"Plausible.BoundedRandom"},{"typeNames":["Fin"],"name":"Plausible.Random.instBoundedRandomFin","className":"Plausible.BoundedRandom"},{"typeNames":["BitVec"],"name":"Plausible.Random.instBoundedRandomBitVec","className":"Plausible.BoundedRandom"}],"imports":["Init"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L195-L199","name":"Plausible.runRandWith","line":195,"kind":"def","docLink":"./Plausible/Random.html#Plausible.runRandWith","doc":"Run the random computaton `cmd` with `seed` for the RNG.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.runRandWith\"><span class=\"name\">Plausible</span>.<span class=\"name\">runRandWith</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">seed</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandT\">RandT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L180-L193","name":"Plausible.runRand","line":180,"kind":"def","docLink":"./Plausible/Random.html#Plausible.runRand","doc":"Computes a `RandT m α` using the global `stdGenRef` as RNG.\n\nNote that:\n- `stdGenRef` is not necessarily properly seeded on program startup\n  as of now and will therefore be deterministic.\n- `stdGenRef` is not thread local, hence two threads accessing it\n  at the same time will get the exact same generator.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.runRand\"><span class=\"name\">Plausible</span>.<span class=\"name\">runRand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <a href=\"./Init/System/IO.html#IO.RealWorld\">IO.RealWorld</a>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandT\">RandT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L169-L172","name":"Plausible.Random.instBoundedRandomBitVec","line":169,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instBoundedRandomBitVec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instBoundedRandomBitVec\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instBoundedRandomBitVec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L164-L167","name":"Plausible.Random.instBoundedRandomFin","line":164,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instBoundedRandomFin","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instBoundedRandomFin\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instBoundedRandomFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L159-L162","name":"Plausible.Random.instBoundedRandomInt","line":159,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instBoundedRandomInt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instBoundedRandomInt\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instBoundedRandomInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L154-L157","name":"Plausible.Random.instBoundedRandomNat","line":154,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instBoundedRandomNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instBoundedRandomNat\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instBoundedRandomNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L151-L152","name":"Plausible.Random.instBool","line":151,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instBool","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instBool\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L145-L149","name":"Plausible.Random.randBool","line":145,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Random.randBool","doc":"Generate a random `Bool`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.randBool\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">randBool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L142-L143","name":"Plausible.Random.instFinSucc","line":142,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.Random.instFinSucc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.instFinSucc\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">instFinSucc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L136-L140","name":"Plausible.Random.randFin","line":136,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Random.randFin","doc":"Generate a random `Fin`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.randFin\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">randFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L131-L134","name":"Plausible.Random.randBound","line":131,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Random.randBound","doc":"Generate a random value of type `α` between `x` and `y` inclusive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.randBound\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">randBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L128-L129","name":"Plausible.Random.rand","line":128,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Random.rand","doc":"Generate a random value of type `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.rand\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">rand</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L114-L118","name":"Plausible.Rand.down","line":114,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand.down","doc":"Given a random generator for `ULift α`, we can convert it to a random generator for `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand.down\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandG\">RandG</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandG\">RandG</a> <span class=\"fn\">g</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L108-L112","name":"Plausible.Rand.up","line":108,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand.up","doc":"Given a random generator for `α`, we can convert it to a random generator for `ULift α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand.up\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandG\">RandG</a> <span class=\"fn\">g</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandG\">RandG</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L103-L106","name":"Plausible.Rand.range","line":103,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand.range","doc":"Get the range of Nat that can be generated by the generator `g` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand.range\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span>.<span class=\"name\">range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L96-L101","name":"Plausible.Rand.split","line":96,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand.split","doc":"Create a new random number generator distinct from the one stored in the state "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand.split\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span>.<span class=\"name\">split</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L89-L94","name":"Plausible.Rand.next","line":89,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand.next","doc":"Generate one more `Nat` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand.next\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L75-L86","name":"Plausible.RandT.down","line":75,"kind":"def","docLink":"./Plausible/Random.html#Plausible.RandT.down","doc":"Given a random generator for `ULift α`, we can convert it to a random generator for `α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.RandT.down\"><span class=\"name\">Plausible</span>.<span class=\"name\">RandT</span>.<span class=\"name\">down</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m_down</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m'</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L65-L73","name":"Plausible.RandT.up","line":65,"kind":"def","docLink":"./Plausible/Random.html#Plausible.RandT.up","doc":"Given a random generator for `α`, we can convert it to a random generator for `ULift α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.RandT.up\"><span class=\"name\">Plausible</span>.<span class=\"name\">RandT</span>.<span class=\"name\">up</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> (max u v) → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m_up</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ULift\">ULift</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L63-L63","name":"Plausible.BoundedRandom.randomR","line":63,"kind":"def","docLink":"./Plausible/Random.html#Plausible.BoundedRandom.randomR","doc":"Generate a value of type `α` between `lo` and `hi` randomly using generator `g`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.BoundedRandom.randomR\"><span class=\"name\">Plausible</span>.<span class=\"name\">BoundedRandom</span>.<span class=\"name\">randomR</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L59-L59","name":"Plausible.BoundedRandom.mk","line":59,"kind":"ctor","docLink":"./Plausible/Random.html#Plausible.BoundedRandom.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.BoundedRandom.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">BoundedRandom</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">randomR</span> : <span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">(<span class=\"fn\">lo </span><span class=\"fn\">hi</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span> → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>] → <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">lo</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">hi</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.BoundedRandom\">BoundedRandom</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L57-L63","name":"Plausible.BoundedRandom","line":57,"kind":"class","docLink":"./Plausible/Random.html#Plausible.BoundedRandom","doc":"`BoundedRandom m α` gives us machinery to generate values of type `α` between certain bounds in\nthe monad `m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.BoundedRandom\"><span class=\"name\">Plausible</span>.<span class=\"name\">BoundedRandom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max 1 u) u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L55-L55","name":"Plausible.Random.random","line":55,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Random.random","doc":"Generate a value of type `α` randomly using generator `g`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.random\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">random</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L51-L51","name":"Plausible.Random.mk","line":51,"kind":"ctor","docLink":"./Plausible/Random.html#Plausible.Random.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random.mk\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">random</span> : <span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Data/Random.html#RandomGen\">RandomGen</a> <span class=\"fn\">g</span></span>] → <span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Plausible/Random.html#Plausible.Random\">Random</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L48-L55","name":"Plausible.Random","line":48,"kind":"class","docLink":"./Plausible/Random.html#Plausible.Random","doc":"`Random m α` gives us machinery to generate values of type `α` in the monad `m`.\n\nNote that `m` is a parameter as some types may only be sampleable with access to a certain monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Random\"><span class=\"name\">Plausible</span>.<span class=\"name\">Random</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max 1 u) u_1)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L45-L46","name":"Plausible.instMonadLiftTRandGTOfMonadLift","line":45,"kind":"instance","docLink":"./Plausible/Random.html#Plausible.instMonadLiftTRandGTOfMonadLift","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.instMonadLiftTRandGTOfMonadLift\"><span class=\"name\">Plausible</span>.<span class=\"name\">instMonadLiftTRandGTOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">m</span>)</span> <span class=\"fn\">(<a href=\"./Plausible/Random.html#Plausible.RandGT\">RandGT</a> <span class=\"fn\">g</span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L42-L43","name":"Plausible.Rand","line":42,"kind":"def","docLink":"./Plausible/Random.html#Plausible.Rand","doc":"A monad to generate random objects using the generator type `StdGen`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.Rand\"><span class=\"name\">Plausible</span>.<span class=\"name\">Rand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L38-L40","name":"Plausible.RandT","line":38,"kind":"def","docLink":"./Plausible/Random.html#Plausible.RandT","doc":"A monad transformer to generate random objects using the generator type `StdGen`.\n`RandT m α` should be thought of a random value in `m α`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.RandT\"><span class=\"name\">Plausible</span>.<span class=\"name\">RandT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L35-L36","name":"Plausible.RandG","line":35,"kind":"def","docLink":"./Plausible/Random.html#Plausible.RandG","doc":"A monad to generate random objects using the generator type `g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.RandG\"><span class=\"name\">Plausible</span>.<span class=\"name\">RandG</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/plausible/blob/4dfba8b20a5ce570b9ef8bae969dd163782f9793/Plausible/Random.lean#L33-L34","name":"Plausible.RandGT","line":33,"kind":"def","docLink":"./Plausible/Random.html#Plausible.RandGT","doc":"A monad transformer to generate random objects using the generic generator type `g` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Plausible/Random.html#Plausible.RandGT\"><span class=\"name\">Plausible</span>.<span class=\"name\">RandGT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}