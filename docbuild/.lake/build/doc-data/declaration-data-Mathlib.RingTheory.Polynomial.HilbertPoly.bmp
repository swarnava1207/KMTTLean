{"name":"Mathlib.RingTheory.Polynomial.HilbertPoly","instances":[],"imports":["Init","Mathlib.Algebra.Polynomial.AlgebraMap","Mathlib.Algebra.Polynomial.Eval.SMul","Mathlib.Algebra.Polynomial.Roots","Mathlib.Order.Interval.Set.Infinite","Mathlib.RingTheory.Polynomial.Pochhammer","Mathlib.RingTheory.PowerSeries.WellKnown","Mathlib.Tactic.FieldSimp"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L264-L274","name":"Polynomial.natDegree_hilbertPoly_of_ne_zero","line":264,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_hilbertPoly_of_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_hilbertPoly_of_ne_zero\"><span class=\"name\">Polynomial</span>.<span class=\"name\">natDegree_hilbertPoly_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hh</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Div.html#Polynomial.rootMultiplicity\">rootMultiplicity</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L243-L262","name":"Polynomial.natDegree_hilbertPoly_of_ne_zero_of_rootMultiplicity_lt","line":243,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_hilbertPoly_of_ne_zero_of_rootMultiplicity_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_hilbertPoly_of_ne_zero_of_rootMultiplicity_lt\"><span class=\"name\">Polynomial</span>.<span class=\"name\">natDegree_hilbertPoly_of_ne_zero_of_rootMultiplicity_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\">p</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpd</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Div.html#Polynomial.rootMultiplicity\">rootMultiplicity</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Div.html#Polynomial.rootMultiplicity\">rootMultiplicity</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L231-L241","name":"Polynomial.hilbertPoly_eq_zero_of_le_rootMultiplicity_one","line":231,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_eq_zero_of_le_rootMultiplicity_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_eq_zero_of_le_rootMultiplicity_one\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_eq_zero_of_le_rootMultiplicity_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdp</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Div.html#Polynomial.rootMultiplicity\">rootMultiplicity</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L225-L229","name":"Polynomial.hilbertPoly_mul_one_sub_pow_add","line":225,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_mul_one_sub_pow_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_mul_one_sub_pow_add\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_mul_one_sub_pow_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.X\">X</a>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span>).<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> (<span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L217-L223","name":"Polynomial.hilbertPoly_mul_one_sub_succ","line":217,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_mul_one_sub_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_mul_one_sub_succ\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_mul_one_sub_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.X\">X</a>)).<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> (<span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L205-L215","name":"Polynomial.eq_hilbertPoly_of_forall_coeff_eq_eval","line":205,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.eq_hilbertPoly_of_forall_coeff_eq_eval","doc":"If `h : F[X]` and there exists some `N : ℕ` such that for any number `n : ℕ` bigger than `N`\nwe have `PowerSeries.coeff F n (p * invOneSubPow F d) = h.eval (n : F)`, then `h` is exactly\n`Polynomial.hilbertPoly p d`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.eq_hilbertPoly_of_forall_coeff_eq_eval\"><span class=\"name\">Polynomial</span>.<span class=\"name\">eq_hilbertPoly_of_forall_coeff_eq_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hhN</span> : <span class=\"fn\">∀ <span class=\"fn\">n</span> &gt; <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span> (<span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/WellKnown.html#PowerSeries.invOneSubPow\">PowerSeries.invOneSubPow</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Eval/Defs.html#Polynomial.eval\">eval</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">h</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L203-L203","name":"Polynomial.exists_unique_hilbertPoly","line":203,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.exists_unique_hilbertPoly","doc":"**Alias** of `Polynomial.existsUnique_hilbertPoly`.\n\n---\n\nThe polynomial satisfying the key property of `Polynomial.hilbertPoly p d` is unique.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.exists_unique_hilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">exists_unique_hilbertPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">h</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">∃ (<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∀ <span class=\"fn\">n</span> &gt; <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span> (<span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/WellKnown.html#PowerSeries.invOneSubPow\">PowerSeries.invOneSubPow</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Eval/Defs.html#Polynomial.eval\">eval</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L187-L201","name":"Polynomial.existsUnique_hilbertPoly","line":187,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.existsUnique_hilbertPoly","doc":"The polynomial satisfying the key property of `Polynomial.hilbertPoly p d` is unique.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.existsUnique_hilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">existsUnique_hilbertPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">h</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">∃ (<span class=\"fn\">N</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\">∀ <span class=\"fn\">n</span> &gt; <span class=\"fn\">N</span>, <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span> (<span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/WellKnown.html#PowerSeries.invOneSubPow\">PowerSeries.invOneSubPow</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Eval/Defs.html#Polynomial.eval\">eval</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">h</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L156-L185","name":"Polynomial.coeff_mul_invOneSubPow_eq_hilbertPoly_eval","line":156,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.coeff_mul_invOneSubPow_eq_hilbertPoly_eval","doc":"The key property of Hilbert polynomials. If `F` is a field with characteristic `0`, `p : F[X]` and\n`d : ℕ`, then for any large enough `n : ℕ`, `(Polynomial.hilbertPoly p d).eval (n : F)` equals the\ncoefficient of `Xⁿ` in the power series expansion of `p/(1 - X)ᵈ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.coeff_mul_invOneSubPow_eq_hilbertPoly_eval\"><span class=\"name\">Polynomial</span>.<span class=\"name\">coeff_mul_invOneSubPow_eq_hilbertPoly_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/Basic.html#PowerSeries.coeff\">PowerSeries.coeff</a> <span class=\"fn\">F</span> <span class=\"fn\">n</span>)</span> (<span class=\"fn\">↑<span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/RingTheory/PowerSeries/WellKnown.html#PowerSeries.invOneSubPow\">PowerSeries.invOneSubPow</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span>)</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Eval/Defs.html#Polynomial.eval\">eval</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L145-L152","name":"Polynomial.hilbertPoly_linearMap","line":145,"kind":"def","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_linearMap","doc":"The function that sends any `p : F[X]` to `Polynomial.hilbertPoly p d` is an `F`-linear map from\n`F[X]` to `F[X]`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_linearMap\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_linearMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span> <a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">→ₗ[</a><span class=\"fn\">F</span><a href=\"./Mathlib/Algebra/Module/LinearMap/Defs.html#LinearMap\">]</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L133-L142","name":"Polynomial.hilbertPoly_smul","line":133,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_smul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_smul\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_smul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">F</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\">p</span>).<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L123-L131","name":"Polynomial.hilbertPoly_add_left","line":123,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_add_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_add_left\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_add_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">q</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">q</span>).<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">d</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L119-L121","name":"Polynomial.hilbertPoly_X_pow_succ","line":119,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_X_pow_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_X_pow_succ\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_X_pow_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.X\">X</a> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span>).<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> (<span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L116-L117","name":"Polynomial.hilbertPoly_succ","line":116,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_succ\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> (<span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.support\">support</a></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">i</span></span> <a href=\"./Mathlib/Algebra/Notation/Defs.html#HSMul.hSMul\">•</a> <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">i</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L114-L114","name":"Polynomial.hilbertPoly_zero_right","line":114,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_zero_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_zero_right\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_zero_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L109-L112","name":"Polynomial.hilbertPoly_zero_left","line":109,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_zero_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly_zero_left\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly_zero_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\">hilbertPoly</a> <span class=\"fn\">0</span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L96-L107","name":"Polynomial.hilbertPoly","line":96,"kind":"def","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly","doc":"`Polynomial.hilbertPoly p 0 = 0`; for any `d : ℕ`, `Polynomial.hilbertPoly p (d + 1)`\nis defined as `∑ i ∈ p.support, (p.coeff i) • Polynomial.preHilbertPoly F d i`. If\n`M` is a graded module whose Poincaré series can be written as `p(X)/(1 - X)ᵈ` for some\n`p : ℚ[X]` with integer coefficients, then `Polynomial.hilbertPoly p d` is the Hilbert\npolynomial of `M`. See also `Polynomial.coeff_mul_invOneSubPow_eq_hilbertPoly_eval`,\nwhich says that `PowerSeries.coeff F n (p * PowerSeries.invOneSubPow F d)` equals\n`(Polynomial.hilbertPoly p d).eval (n : F)` for any large enough `n : ℕ`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.hilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">hilbertPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L85-L92","name":"Polynomial.preHilbertPoly_eq_choose_sub_add","line":85,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly_eq_choose_sub_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly_eq_choose_sub_add\"><span class=\"name\">Polynomial</span>.<span class=\"name\">preHilbertPoly_eq_choose_sub_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkn</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Eval/Defs.html#Polynomial.eval\">eval</a> <span class=\"fn\">(↑<span class=\"fn\">n</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">d</span>).<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> <span class=\"fn\">d</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L81-L83","name":"Polynomial.leadingCoeff_preHilbertPoly","line":81,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.leadingCoeff_preHilbertPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.leadingCoeff_preHilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">leadingCoeff_preHilbertPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.leadingCoeff\">leadingCoeff</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L67-L79","name":"Polynomial.coeff_preHilbertPoly_self","line":67,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.coeff_preHilbertPoly_self","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.coeff_preHilbertPoly_self\"><span class=\"name\">Polynomial</span>.<span class=\"name\">coeff_preHilbertPoly_self</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial.coeff\">coeff</a></span> <span class=\"fn\">d</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Mathlib/Data/Nat/Factorial/Basic.html#Nat.factorial\">factorial</a></span>)</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L61-L65","name":"Polynomial.natDegree_preHilbertPoly","line":61,"kind":"theorem","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_preHilbertPoly","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.natDegree_preHilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">natDegree_preHilbertPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/CharZero/Defs.html#CharZero\">CharZero</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\">preHilbertPoly</a> <span class=\"fn\">F</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span>)</span>.<a href=\"./Mathlib/Algebra/Polynomial/Degree/Definitions.html#Polynomial.natDegree\">natDegree</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">d</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/RingTheory/Polynomial/HilbertPoly.lean#L46-L59","name":"Polynomial.preHilbertPoly","line":46,"kind":"def","docLink":"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly","doc":"For any field `F` and natural numbers `d` and `k`, `Polynomial.preHilbertPoly F d k`\nis defined as `(d.factorial : F)⁻¹ • ((ascPochhammer F d).comp (X - (C (k : F)) + 1))`.\nThis is the most basic form of Hilbert polynomials. `Polynomial.preHilbertPoly ℚ d 0`\nis exactly the Hilbert polynomial of the polynomial ring `ℚ[X_0,...,X_d]` viewed as\na graded module over itself. In fact, `Polynomial.preHilbertPoly F d k` is the\nsame as `Polynomial.hilbertPoly ((X : F[X]) ^ k) (d + 1)` for any field `F` and\n`d k : ℕ` (see the lemma `Polynomial.hilbertPoly_X_pow_succ`). See also the lemma\n`Polynomial.preHilbertPoly_eq_choose_sub_add`, which states that if `CharZero F`,\nthen for any `d k n : ℕ` with `k ≤ n`, `(Polynomial.preHilbertPoly F d k).eval (n : F)`\nequals `(n - k + d).choose d`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/RingTheory/Polynomial/HilbertPoly.html#Polynomial.preHilbertPoly\"><span class=\"name\">Polynomial</span>.<span class=\"name\">preHilbertPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Polynomial/Basic.html#Polynomial\">Polynomial</a> <span class=\"fn\">F</span></span></div></div>"}]}