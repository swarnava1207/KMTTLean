{"name":"Mathlib.CategoryTheory.Bicategory.Kan.IsKan","instances":[],"imports":["Init","Mathlib.CategoryTheory.Bicategory.Extension"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L242-L243","name":"CategoryTheory.Bicategory.RightLift.IsKan","line":242,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.RightLift.IsKan","doc":"A right Kan lift of `g` along `f` is a terminal object in `RightLift f g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.RightLift.IsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">RightLift</span>.<span class=\"name\">IsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.RightLift\">RightLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max v w) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L233-L234","name":"CategoryTheory.Bicategory.RightExtension.IsKan","line":233,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.RightExtension.IsKan","doc":"A right Kan extension of `g` along `f` is a terminal object in `RightExtension f g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.RightExtension.IsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">RightExtension</span>.<span class=\"name\">IsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.RightExtension\">RightExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max v w) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L221-L223","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan.ofIsoAbsKan","line":221,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.ofIsoAbsKan","doc":"Transport evidence that a left lift is a Kan lift across an isomorphism of lifts. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.ofIsoAbsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">ofIsoAbsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L217-L219","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan.isKan","line":217,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.isKan","doc":"An absolute left Kan lift is a left Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.isKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">isKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L212-L215","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan.desc","line":212,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.desc","doc":"The family of 2-morphisms out of an absolute left Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan.desc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">g</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">h</span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L200-L204","name":"CategoryTheory.Bicategory.LeftLift.IsKan.whiskerOfCommute","line":200,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.whiskerOfCommute","doc":"If `s ≅ t` and `IsKan (s.whisker h)`, then `IsKan (t.whisker h)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.whiskerOfCommute\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">whiskerOfCommute</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.whisker\">whisker</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.whisker\">whisker</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L191-L198","name":"CategoryTheory.Bicategory.LeftLift.IsKan.ofIdComp","line":191,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.ofIdComp","doc":"If `t : LeftLift f (𝟙 c ≫ g)` is a Kan lift, then `t.ofIdComp : LeftLift f g` is also\na Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.ofIdComp\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">ofIdComp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">g</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.ofIdComp\">ofIdComp</a></span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L187-L189","name":"CategoryTheory.Bicategory.LeftLift.IsKan.ofIsoKan","line":187,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.ofIsoKan","doc":"Transport evidence that a left lift is a Kan lift across an isomorphism of lifts. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.ofIsoKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">ofIsoKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L183-L185","name":"CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_inv_right","line":183,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_inv_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_inv_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso_inv_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso\">uniqueUpToIso</a></span> <span class=\"fn\">Q</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.CommaMorphism.right\">right</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L179-L181","name":"CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_hom_right","line":179,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_hom_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso_hom_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso_hom_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso\">uniqueUpToIso</a></span> <span class=\"fn\">Q</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.CommaMorphism.right\">right</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc\">desc</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L175-L177","name":"CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso","line":175,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso","doc":"Kan lifts on `g` along `f` are unique up to isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.uniqueUpToIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L169-L173","name":"CategoryTheory.Bicategory.LeftLift.IsKan.hom_ext","line":169,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.hom_ext","doc":"Two 2-morphisms out of a left Kan lift are equal if their compositions with\neach triangle 2-morphism are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.hom_ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ </span><span class=\"fn\">τ'</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">k</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">whiskerRight</a> <span class=\"fn\">τ</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">whiskerRight</a> <span class=\"fn\">τ'</span> <span class=\"fn\">f</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">τ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L164-L164","name":"CategoryTheory.Bicategory.LeftLift.IsKan.fac_assoc","line":164,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.fac_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.fac_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">fac_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span> <span class=\"fn\">f</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">whiskerRight</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L164-L167","name":"CategoryTheory.Bicategory.LeftLift.IsKan.fac","line":164,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.fac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.fac\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerRight\">whiskerRight</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.unit\">unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L160-L162","name":"CategoryTheory.Bicategory.LeftLift.IsKan.desc","line":160,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc","doc":"The family of 2-morphisms out of a left Kan lift. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.desc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift.lift\">lift</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L154-L158","name":"CategoryTheory.Bicategory.LeftLift.IsKan.mk","line":154,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.mk","doc":"To show that a left lift `t` is a Kan lift, we need to show that for every left lift `s`\nthere is a unique morphism `t ⟶ s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>) → <span class=\"fn\">t</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>) (<span class=\"fn\">τ</span> : <span class=\"fn\">t</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">s</span>), <span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">desc</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L146-L148","name":"CategoryTheory.Bicategory.LeftLift.IsAbsKan","line":146,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan","doc":"An absolute left Kan lift is a Kan lift such that every 1-morphism commutes with it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsAbsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsAbsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L143-L144","name":"CategoryTheory.Bicategory.LeftLift.IsKan","line":143,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan","doc":"A left Kan lift of `g` along `f` is an initial object in `LeftLift f g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftLift.IsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftLift</span>.<span class=\"name\">IsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">a</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftLift\">LeftLift</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max v w) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L130-L133","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan.ofIsoAbsKan","line":130,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.ofIsoAbsKan","doc":"Transport evidence that a left extension is a Kan extension across an isomorphism\nof extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.ofIsoAbsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">ofIsoAbsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L126-L128","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan.isKan","line":126,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.isKan","doc":"An absolute left Kan extension is a left Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.isKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">isKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L121-L124","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan.desc","line":121,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.desc","doc":"The family of 2-morphisms out of an absolute left Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan.desc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\">IsAbsKan</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">h</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span> <span class=\"fn\">h</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L109-L113","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.whiskerOfCommute","line":109,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.whiskerOfCommute","doc":"If `s ≅ t` and `IsKan (s.whisker h)`, then `IsKan (t.whisker h)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.whiskerOfCommute\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">whiskerOfCommute</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.whisker\">whisker</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.whisker\">whisker</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L100-L107","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.ofCompId","line":100,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.ofCompId","doc":"If `t : LeftExtension f (g ≫ 𝟙 c)` is a Kan extension, then `t.ofCompId : LeftExtension f g`\nis also a Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.ofCompId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">ofCompId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">c</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.ofCompId\">ofCompId</a></span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L95-L98","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.ofIsoKan","line":95,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.ofIsoKan","doc":"Transport evidence that a left extension is a Kan extension across an isomorphism\nof extensions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.ofIsoKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">ofIsoKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L91-L93","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_inv_right","line":91,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_inv_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_inv_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso_inv_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso\">uniqueUpToIso</a></span> <span class=\"fn\">Q</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.CommaMorphism.right\">right</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L87-L89","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_hom_right","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_hom_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso_hom_right\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso_hom_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso\">uniqueUpToIso</a></span> <span class=\"fn\">Q</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/Comma/Basic.html#CategoryTheory.CommaMorphism.right\">right</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc\">desc</a></span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L83-L85","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso","line":83,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso","doc":"Kan extensions on `g` along `f` are unique up to isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.uniqueUpToIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">uniqueUpToIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">s</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">t</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L77-L81","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.hom_ext","line":77,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.hom_ext","doc":"Two 2-morphisms out of a left Kan extension are equal if their compositions with\neach triangle 2-morphism are equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.hom_ext\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">τ </span><span class=\"fn\">τ'</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">k</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">τ</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">τ'</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">τ'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L72-L72","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.fac_assoc","line":72,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.fac_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.fac_assoc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">fac_assoc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span>)</span>)</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L72-L75","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.fac","line":72,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.fac","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.fac\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">fac</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory.whiskerLeft\">whiskerLeft</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc\">desc</a></span> <span class=\"fn\">s</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.unit\">unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L68-L70","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.desc","line":68,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc","doc":"The family of 2-morphisms out of a left Kan extension. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.desc\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">desc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension.extension\">extension</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L62-L66","name":"CategoryTheory.Bicategory.LeftExtension.IsKan.mk","line":62,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.mk","doc":"To show that a left extension `t` is a Kan extension, we need to show that for every left\nextension `s` there is a unique morphism `t ⟶ s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>) → <span class=\"fn\">t</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">∀ (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>) (<span class=\"fn\">τ</span> : <span class=\"fn\">t</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">s</span>), <span class=\"fn\">τ</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">desc</span> <span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\">IsKan</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L54-L56","name":"CategoryTheory.Bicategory.LeftExtension.IsAbsKan","line":54,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan","doc":"An absolute left Kan extension is a Kan extension that commutes with any 1-morphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsAbsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsAbsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max u v) w)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Bicategory/Kan/IsKan.lean#L51-L52","name":"CategoryTheory.Bicategory.LeftExtension.IsKan","line":51,"kind":"def","docLink":"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan","doc":"A left Kan extension of `g` along `f` is an initial object in `LeftExtension f g`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Bicategory/Kan/IsKan.html#CategoryTheory.Bicategory.LeftExtension.IsKan\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">LeftExtension</span>.<span class=\"name\">IsKan</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">B</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Basic.html#CategoryTheory.Bicategory\">Bicategory</a> <span class=\"fn\">B</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">B</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">b</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">a</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">c</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Bicategory/Extension.html#CategoryTheory.Bicategory.LeftExtension\">LeftExtension</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max (max v w) w)</div></div>"}]}