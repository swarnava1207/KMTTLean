{"name":"Mathlib.Combinatorics.SimpleGraph.Subgraph","instances":[{"typeNames":["SimpleGraph.Adj"],"name":"SimpleGraph.Subgraph.instDecidableRelElemVertsAdjCoeOfAdj","className":"Decidable"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instMax","className":"Max"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instMin","className":"Min"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instTop","className":"Top"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instBot","className":"Bot"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instSupSet","className":"SupSet"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instInfSet","className":"InfSet"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.distribLattice","className":"DistribLattice"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instBoundedOrder","className":"BoundedOrder"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instCompletelyDistribLattice","className":"CompletelyDistribLattice"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.subgraphInhabited","className":"Inhabited"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instFintypeOfDecidableEqOfDecidableRelAdj","className":"Fintype"},{"typeNames":["SimpleGraph.Subgraph"],"name":"SimpleGraph.Subgraph.instFinite","className":"Finite"},{"typeNames":[],"name":"SimpleGraph.Subgraph.neighborSet.decidablePred","className":"Decidable"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.finiteAt","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.Subgraph.coeFiniteAt","className":"Fintype"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.nonempty_singletonSubgraph_verts","className":"Nonempty"},{"typeNames":["Set.Elem"],"name":"SimpleGraph.nonempty_subgraphOfAdj_verts","className":"Nonempty"},{"typeNames":["SimpleGraph.Subgraph.Adj"],"name":"SimpleGraph.Subgraph.instDecidableRel_induce_adj","className":"Decidable"},{"typeNames":["SimpleGraph.Adj"],"name":"SimpleGraph.Subgraph.instDecidableRel_deleteVerts_adj","className":"Decidable"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Finite","Mathlib.Combinatorics.SimpleGraph.Maps","Mathlib.Data.Fintype.Powerset"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1261-L1269","name":"SimpleGraph.Subgraph.instDecidableRel_deleteVerts_adj","line":1261,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRel_deleteVerts_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRel_deleteVerts_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instDecidableRel_deleteVerts_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1256-L1259","name":"SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq","line":1256,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_set_right_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_inter_verts_set_right_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1252-L1254","name":"SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq","line":1252,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_inter_verts_left_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_inter_verts_left_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> (<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1248-L1250","name":"SimpleGraph.Subgraph.deleteVerts_anti","line":1248,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_anti","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_anti\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_anti</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1242-L1246","name":"SimpleGraph.Subgraph.deleteVerts_mono'","line":1242,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1237-L1240","name":"SimpleGraph.Subgraph.deleteVerts_mono","line":1237,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1234-L1235","name":"SimpleGraph.Subgraph.deleteVerts_le","line":1234,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1230-L1232","name":"SimpleGraph.Subgraph.deleteVerts_empty","line":1230,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_empty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1225-L1228","name":"SimpleGraph.Subgraph.deleteVerts_deleteVerts","line":1225,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_deleteVerts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_deleteVerts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_deleteVerts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1221-L1223","name":"SimpleGraph.Subgraph.deleteVerts_adj","line":1221,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">u</span> ∉ <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">v</span> ∉ <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1218-L1219","name":"SimpleGraph.Subgraph.deleteVerts_verts","line":1218,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1209-L1212","name":"SimpleGraph.Subgraph.deleteVerts","line":1209,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts","doc":"Given a subgraph and a set of vertices, delete all the vertices from the subgraph,\nif present. Any edges incident to the deleted vertices are deleted as well. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteVerts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1203-L1205","name":"SimpleGraph.Subgraph.instDecidableRel_induce_adj","line":1203,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRel_induce_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRel_induce_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instDecidableRel_induce_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">V</span>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1191-L1201","name":"SimpleGraph.Subgraph.subgraphOfAdj_eq_induce","line":1191,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_eq_induce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_eq_induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphOfAdj_eq_induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">w</span><a href=\"./Init/Core.html#Insert.insert\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1187-L1189","name":"SimpleGraph.Subgraph.singletonSubgraph_eq_induce","line":1187,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_eq_induce","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_eq_induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">singletonSubgraph_eq_induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1184-L1185","name":"SimpleGraph.Subgraph.le_induce_union_right","line":1184,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1181-L1182","name":"SimpleGraph.Subgraph.le_induce_union_left","line":1181,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1175-L1179","name":"SimpleGraph.Subgraph.le_induce_union","line":1175,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_union\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1171-L1173","name":"SimpleGraph.Subgraph.le_induce_top_verts","line":1171,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_top_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.le_induce_top_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">le_induce_top_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1163-L1169","name":"SimpleGraph.Subgraph.induce_self_verts","line":1163,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_self_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_self_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_self_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1159-L1161","name":"SimpleGraph.Subgraph.induce_empty","line":1159,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_empty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_empty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1155-L1157","name":"SimpleGraph.Subgraph.induce_mono_right","line":1155,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1151-L1153","name":"SimpleGraph.Subgraph.induce_mono_left","line":1151,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1144-L1149","name":"SimpleGraph.Subgraph.induce_mono","line":1144,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1135-L1138","name":"SimpleGraph.induce_eq_coe_induce_top","line":1135,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.induce_eq_coe_induce_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.induce_eq_coe_induce_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_eq_coe_induce_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1127-L1127","name":"SimpleGraph.Subgraph.induce_verts","line":1127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1127-L1127","name":"SimpleGraph.Subgraph.induce_adj","line":1127,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1124-L1133","name":"SimpleGraph.Subgraph.induce","line":1124,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce","doc":"The induced subgraph of a subgraph. The expectation is that `s ⊆ G'.verts` for the usual\nnotion of an induced subgraph, but, in general, `s` is taken to be the new vertex set and edges\nare induced from the subgraph `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1112-L1114","name":"SimpleGraph.Subgraph.spanningCoe_deleteEdges_le","line":1112,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1108-L1110","name":"SimpleGraph.Subgraph.coe_deleteEdges_le","line":1108,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1103-L1106","name":"SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq","line":1103,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_right_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_inter_edgeSet_right_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1098-L1101","name":"SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq","line":1098,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_inter_edgeSet_left_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_inter_edgeSet_left_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> (<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">s</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1092-L1096","name":"SimpleGraph.Subgraph.deleteEdges_le_of_le","line":1092,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le_of_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">s'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1089-L1090","name":"SimpleGraph.Subgraph.deleteEdges_le","line":1089,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1084-L1087","name":"SimpleGraph.Subgraph.coe_deleteEdges_eq","line":1084,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_deleteEdges_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_deleteEdges_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges\">deleteEdges</a></span> (<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\">s</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1068-L1082","name":"SimpleGraph.Subgraph.deleteEdges_coe_eq","line":1068,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_coe_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_coe_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_coe_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> (<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\">s</span>))</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1062-L1066","name":"SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq","line":1062,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_spanningCoe_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_spanningCoe_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1058-L1060","name":"SimpleGraph.Subgraph.deleteEdges_empty_eq","line":1058,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_empty_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_empty_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_empty_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1053-L1056","name":"SimpleGraph.Subgraph.deleteEdges_deleteEdges","line":1053,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_deleteEdges","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_deleteEdges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_deleteEdges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">s'</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1049-L1051","name":"SimpleGraph.Subgraph.deleteEdges_adj","line":1049,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> ∉ <span class=\"fn\">s</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1045-L1047","name":"SimpleGraph.Subgraph.deleteEdges_verts","line":1045,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\">deleteEdges</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1030-L1039","name":"SimpleGraph.Subgraph.deleteEdges","line":1030,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges","doc":"Given a subgraph `G'` and a set of vertex pairs, remove all of the corresponding edges\nfrom its edge set, if present.\n\nSee also: `SimpleGraph.deleteEdges`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteEdges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">deleteEdges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1018-L1025","name":"SimpleGraph.Subgraph.coeSubgraph_restrict_eq","line":1018,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_restrict_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_restrict_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_restrict_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">Subgraph.restrict</a> <span class=\"fn\">H'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">H'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1011-L1016","name":"SimpleGraph.Subgraph.coeSubgraph_le","line":1011,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">H'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1007-L1009","name":"SimpleGraph.Subgraph.coeSubgraph_injective","line":1007,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L1000-L1005","name":"SimpleGraph.Subgraph.restrict_coeSubgraph","line":1000,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_coeSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict_coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">Subgraph.restrict</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G''</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L997-L998","name":"SimpleGraph.Subgraph.restrict_adj","line":997,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\">Subgraph.restrict</a> <span class=\"fn\">G''</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L992-L995","name":"SimpleGraph.Subgraph.coeSubgraph_adj","line":992,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>) (<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">⟨<span class=\"fn\">v</span>, <span class=\"fn\">hv</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">w</span>, <span class=\"fn\">hw</span>⟩</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L988-L990","name":"SimpleGraph.Subgraph.verts_coeSubgraph","line":988,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_coeSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">G''</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L983-L986","name":"SimpleGraph.Subgraph.restrict","line":983,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict","doc":"Given a subgraph of `G`, restrict it to being a subgraph of another subgraph `G'` by\ntaking the portion of `G` that intersects `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.restrict\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">restrict</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L979-L981","name":"SimpleGraph.Subgraph.coeSubgraph","line":979,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph","doc":"Given a subgraph of a subgraph of `G`, construct a subgraph of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L960-L968","name":"SimpleGraph.support_subgraphOfAdj","line":960,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.support_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.support_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">support_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">u</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L956-L958","name":"SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj","line":956,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_snd_le_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_snd_le_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L952-L954","name":"SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj","line":952,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_fst_le_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_fst_le_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L947-L950","name":"SimpleGraph.neighborSet_subgraphOfAdj","line":947,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">w</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>) <a href=\"./Init/Core.html#Union.union\">∪</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L941-L945","name":"SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne","line":941,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_of_ne_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj_of_ne_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L935-L939","name":"SimpleGraph.neighborSet_snd_subgraphOfAdj","line":935,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_snd_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_snd_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_snd_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L928-L933","name":"SimpleGraph.neighborSet_fst_subgraphOfAdj","line":928,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_fst_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_fst_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_fst_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">w</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L924-L926","name":"SimpleGraph.neighborSet_subgraphOfAdj_subset","line":924,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_subgraphOfAdj_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_subgraphOfAdj_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">w</span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L902-L922","name":"SimpleGraph.map_subgraphOfAdj","line":902,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">map_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L898-L900","name":"SimpleGraph.subgraphOfAdj_symm","line":898,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L890-L896","name":"SimpleGraph.subgraphOfAdj_le_of_adj","line":890,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_le_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_le_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_le_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L882-L888","name":"SimpleGraph.edgeSet_subgraphOfAdj","line":882,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L878-L880","name":"SimpleGraph.nonempty_subgraphOfAdj_verts","line":878,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_subgraphOfAdj_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_subgraphOfAdj_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_subgraphOfAdj_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L865-L876","name":"SimpleGraph.eq_singletonSubgraph_iff_verts_eq","line":865,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.eq_singletonSubgraph_iff_verts_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.eq_singletonSubgraph_iff_verts_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">eq_singletonSubgraph_iff_verts_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L861-L863","name":"SimpleGraph.edgeSet_singletonSubgraph","line":861,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.edgeSet_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">edgeSet_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L857-L859","name":"SimpleGraph.neighborSet_singletonSubgraph","line":857,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.neighborSet_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">neighborSet_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L849-L855","name":"SimpleGraph.map_singletonSubgraph","line":849,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_singletonSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.map_singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">map_singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L840-L847","name":"SimpleGraph.singletonSubgraph_le_iff","line":840,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_le_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_le_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_le_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L837-L838","name":"SimpleGraph.nonempty_singletonSubgraph_verts","line":837,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_singletonSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.nonempty_singletonSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">nonempty_singletonSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L823-L826","name":"SimpleGraph.Subgraph.adj_iff_of_neighborSet_equiv","line":823,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_iff_of_neighborSet_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_iff_of_neighborSet_equiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_iff_of_neighborSet_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfin</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L814-L821","name":"SimpleGraph.Subgraph.neighborSet_eq_of_equiv","line":814,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_eq_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_eq_of_equiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_eq_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hfin</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L809-L812","name":"SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj","line":809,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_eq_one_iff_unique_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_eq_one_iff_unique_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">∃!</a> <span class=\"fn\">w</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">V</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L803-L807","name":"SimpleGraph.Subgraph.degree_spanningCoe","line":803,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L797-L801","name":"SimpleGraph.Subgraph.coe_degree","line":797,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L793-L795","name":"SimpleGraph.Subgraph.degree_le'","line":793,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_le'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L788-L791","name":"SimpleGraph.Subgraph.degree_le","line":788,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.degree\">degree</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L784-L786","name":"SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree","line":784,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finset_card_neighborSet_eq_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finset_card_neighborSet_eq_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Fintype/Sets.html#Set.toFinset\">toFinset</a></span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L780-L782","name":"SimpleGraph.Subgraph.degree","line":780,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree","doc":"The degree of a vertex in a subgraph. It's zero for vertices outside the subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L775-L778","name":"SimpleGraph.Subgraph.IsSpanning.card_verts","line":775,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.card_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.card_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span>.<span class=\"name\">card_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Fintype/Sets.html#Set.toFinset\">toFinset</a></span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L771-L773","name":"SimpleGraph.Subgraph.coeFiniteAt","line":771,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeFiniteAt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeFiniteAt\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeFiniteAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L767-L769","name":"SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","line":767,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instFintypeElemNeighborSetOfVertsOfDecidablePredMemSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L760-L765","name":"SimpleGraph.Subgraph.finiteAtOfSubgraph","line":760,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAtOfSubgraph","doc":"If a subgraph is locally finite at a vertex, then so are subgraphs of that subgraph.\n\nThis is not an instance because `G''` cannot be inferred. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAtOfSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finiteAtOfSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G'</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L755-L758","name":"SimpleGraph.Subgraph.finiteAt","line":755,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAt","doc":"If a graph is locally finite at a vertex, then so is a subgraph of that graph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.finiteAt\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">finiteAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L751-L753","name":"SimpleGraph.Subgraph.neighborSet.decidablePred","line":751,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet.decidablePred","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet.decidablePred\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet</span>.<span class=\"name\">decidablePred</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidablePred\">DecidablePred</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">V</span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L747-L749","name":"SimpleGraph.Subgraph.neighborSet_subset_of_subgraph","line":747,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_of_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_of_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset_of_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L745-L745","name":"SimpleGraph.Subgraph.spanningHom.injective","line":745,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom.injective","doc":"**Alias** of `SimpleGraph.Subgraph.spanningHom_injective`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom\">spanningHom</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L742-L743","name":"SimpleGraph.Subgraph.spanningHom_injective","line":742,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom\">spanningHom</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L737-L737","name":"SimpleGraph.Subgraph.spanningHom_apply","line":737,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom\">spanningHom</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L735-L740","name":"SimpleGraph.Subgraph.spanningHom","line":735,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom","doc":"There is an induced injective homomorphism of a subgraph of `G` as\na spanning subgraph into `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningHom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L732-L733","name":"SimpleGraph.Subgraph.map_hom_top","line":732,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_hom_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_hom_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_hom_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\">hom</a></span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L730-L730","name":"SimpleGraph.Subgraph.hom.injective","line":730,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom.injective","doc":"**Alias** of `SimpleGraph.Subgraph.hom_injective`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\">hom</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L727-L728","name":"SimpleGraph.Subgraph.hom_injective","line":727,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\">hom</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L724-L725","name":"SimpleGraph.Subgraph.coe_hom","line":724,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">⇑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\">hom</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L719-L719","name":"SimpleGraph.Subgraph.hom_apply","line":719,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\">hom</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L718-L722","name":"SimpleGraph.Subgraph.hom","line":718,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom","doc":"There is an induced injective homomorphism of a subgraph of `G` into `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.hom\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L713-L716","name":"SimpleGraph.Subgraph.inclusion.injective","line":713,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion.injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion</span>.<span class=\"name\">injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\">inclusion</a> <span class=\"fn\">h</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L708-L708","name":"SimpleGraph.Subgraph.inclusion_apply_coe","line":708,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion_apply_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\">inclusion</a> <span class=\"fn\">h</span>)</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L706-L711","name":"SimpleGraph.Subgraph.inclusion","line":706,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion","doc":"Given two subgraphs, one a subgraph of the other, there is an induced injective homomorphism of\nthe subgraphs as graphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inclusion\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inclusion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L704-L704","name":"SimpleGraph.Subgraph.instFinite","line":704,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFinite","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFinite\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L692-L702","name":"SimpleGraph.Subgraph.instFintypeOfDecidableEqOfDecidableRelAdj","line":692,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeOfDecidableEqOfDecidableRelAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instFintypeOfDecidableEqOfDecidableRelAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instFintypeOfDecidableEqOfDecidableRelAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L678-L690","name":"SimpleGraph.Subgraph.map_le_iff_le_comap","line":678,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_le_iff_le_comap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_le_iff_le_comap\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_le_iff_le_comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L675-L676","name":"SimpleGraph.Subgraph.comap_equiv_top","line":675,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_equiv_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_equiv_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_equiv_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">Subgraph.comap</a> <span class=\"fn\">f</span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L664-L673","name":"SimpleGraph.Subgraph.comap_monotone","line":664,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">Subgraph.comap</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L656-L656","name":"SimpleGraph.Subgraph.comap_adj","line":656,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">u</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L656-L656","name":"SimpleGraph.Subgraph.comap_verts","line":656,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\">Subgraph.comap</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L655-L662","name":"SimpleGraph.Subgraph.comap","line":655,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap","doc":"Graph homomorphisms induce a contravariant function on subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.comap\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L650-L651","name":"SimpleGraph.Subgraph.edgeSet_map","line":650,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L647-L648","name":"SimpleGraph.Subgraph.map_iso_top","line":647,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_iso_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_iso_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_iso_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">H</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso.toHom\">toHom</a></span> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L644-L645","name":"SimpleGraph.Subgraph.map_sup","line":644,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> (<span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">H₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H₁</span></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L642-L642","name":"SimpleGraph.Subgraph.map_monotone","line":642,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L633-L640","name":"SimpleGraph.Subgraph.map_mono","line":633,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hH</span> : <span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H₂</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L630-L631","name":"SimpleGraph.Subgraph.map_comp","line":630,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_comp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">U</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G''</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">U</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">G'</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G''</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom.comp\">comp</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L628-L628","name":"SimpleGraph.Subgraph.map_id","line":628,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_id","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_id\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom.id\">Hom.id</a> <span class=\"fn\">H</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">H</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L614-L614","name":"SimpleGraph.Subgraph.map_adj","line":614,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝ </span><span class=\"fn\">a✝¹</span> : <span class=\"fn\">W</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Logic/Relation.html#Relation.Map\">Relation.Map</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L614-L614","name":"SimpleGraph.Subgraph.map_verts","line":614,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">H</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L613-L626","name":"SimpleGraph.Subgraph.map","line":613,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map","doc":"Graph homomorphisms induce a covariant function on subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L606-L608","name":"Disjoint.edgeSet","line":606,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#Disjoint.edgeSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#Disjoint.edgeSet\"><span class=\"name\">Disjoint</span>.<span class=\"name\">edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">H₁</span> <span class=\"fn\">H₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\"><span class=\"fn\">H₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <span class=\"fn\"><span class=\"fn\">H₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L603-L604","name":"SimpleGraph.Subgraph.edgeSet_mono","line":603,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L594-L601","name":"SimpleGraph.Subgraph.botEquiv","line":594,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.botEquiv","doc":"The bottom of the `Subgraph G` lattice is equivalent to the empty graph on the empty\nvertex type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.botEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">botEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L586-L592","name":"SimpleGraph.Subgraph.topEquiv","line":586,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topEquiv","doc":"The top of the `Subgraph G` lattice is equivalent to the graph itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">topEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L582-L584","name":"SimpleGraph.Subgraph.sup_spanningCoe","line":582,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sup_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">H'</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L579-L580","name":"SimpleGraph.Subgraph.spanningCoe_le_of_le","line":579,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le_of_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le_of_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L575-L577","name":"SimpleGraph.toSubgraph.isSpanning","line":575,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph.isSpanning","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph.isSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph</span>.<span class=\"name\">isSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L572-L573","name":"SimpleGraph.Subgraph.support_mono","line":572,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L564-L564","name":"SimpleGraph.toSubgraph_adj","line":564,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝ </span><span class=\"fn\">a✝¹</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L564-L564","name":"SimpleGraph.toSubgraph_verts","line":564,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">toSubgraph</a> <span class=\"fn\">H</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L563-L570","name":"SimpleGraph.toSubgraph","line":563,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph","doc":"Turn a subgraph of a `SimpleGraph` into a member of its subgraph type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L560-L561","name":"SimpleGraph.Subgraph.spanningCoe_bot","line":560,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L557-L558","name":"SimpleGraph.Subgraph.spanningCoe_top","line":557,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L552-L555","name":"SimpleGraph.Subgraph.edgeSet_iInf","line":552,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L548-L550","name":"SimpleGraph.Subgraph.edgeSet_iSup","line":548,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L541-L546","name":"SimpleGraph.Subgraph.edgeSet_sInf","line":541,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L535-L539","name":"SimpleGraph.Subgraph.edgeSet_sSup","line":535,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L531-L533","name":"SimpleGraph.Subgraph.edgeSet_sup","line":531,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">H₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L527-L529","name":"SimpleGraph.Subgraph.edgeSet_inf","line":527,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">H₁</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">H₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">H₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L523-L525","name":"SimpleGraph.Subgraph.edgeSet_bot","line":523,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L520-L521","name":"SimpleGraph.Subgraph.edgeSet_top","line":520,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L516-L518","name":"SimpleGraph.Subgraph.neighborSet_iInf","line":516,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L512-L514","name":"SimpleGraph.Subgraph.neighborSet_iSup","line":512,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L506-L510","name":"SimpleGraph.Subgraph.neighborSet_sInf","line":506,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span>)</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L500-L504","name":"SimpleGraph.Subgraph.neighborSet_sSup","line":500,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L497-L498","name":"SimpleGraph.Subgraph.neighborSet_bot","line":497,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L494-L495","name":"SimpleGraph.Subgraph.neighborSet_top","line":494,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L490-L492","name":"SimpleGraph.Subgraph.neighborSet_inf","line":490,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">H'</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L486-L488","name":"SimpleGraph.Subgraph.neighborSet_sup","line":486,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">H'</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L483-L483","name":"SimpleGraph.Subgraph.subgraphInhabited_default","line":483,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited_default","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited_default\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphInhabited_default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Inhabited.default\">default</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L483-L484","name":"SimpleGraph.Subgraph.subgraphInhabited","line":483,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.subgraphInhabited\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L481-L481","name":"SimpleGraph.Subgraph.verts_monotone","line":481,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_monotone\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Monotone/Defs.html#Monotone\">Monotone</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L480-L480","name":"SimpleGraph.Subgraph.verts_mono","line":480,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L477-L478","name":"SimpleGraph.Subgraph.instCompletelyDistribLattice","line":477,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instCompletelyDistribLattice","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instCompletelyDistribLattice\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCompletelyDistribLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompletelyDistribLattice\">CompletelyDistribLattice</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L452-L475","name":"SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms","line":452,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms","doc":"Note that subgraphs do not form a Boolean algebra, because of `verts`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.completelyDistribLatticeMinimalAxioms\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">completelyDistribLatticeMinimalAxioms</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/CompleteBooleanAlgebra.html#CompletelyDistribLattice.MinimalAxioms\">CompletelyDistribLattice.MinimalAxioms</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L446-L450","name":"SimpleGraph.Subgraph.instBoundedOrder","line":446,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBoundedOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBoundedOrder\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instBoundedOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/BoundedOrder/Basic.html#BoundedOrder\">BoundedOrder</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L438-L444","name":"SimpleGraph.Subgraph.distribLattice","line":438,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.distribLattice","doc":"For subgraphs `G₁`, `G₂`, `G₁ ≤ G₂` iff `G₁.verts ⊆ G₂.verts` and\n`∀ a b, G₁.adj a b → G₂.adj a b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.distribLattice\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">distribLattice</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Lattice.html#DistribLattice\">DistribLattice</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L432-L436","name":"SimpleGraph.Subgraph.verts_spanningCoe_injective","line":432,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_spanningCoe_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_spanningCoe_injective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_spanningCoe_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L424-L430","name":"SimpleGraph.Subgraph.topIso","line":424,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topIso","doc":"The graph isomorphism between the top element of `G.subgraph` and `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.topIso\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">topIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L422-L422","name":"SimpleGraph.Subgraph.IsInduced.top","line":422,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced.top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced.top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsInduced</span>.<span class=\"name\">top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced\">IsInduced</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L420-L420","name":"SimpleGraph.Subgraph.coe_bot","line":420,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L417-L418","name":"SimpleGraph.Subgraph.verts_iInf","line":417,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_iInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋂ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L414-L415","name":"SimpleGraph.Subgraph.verts_iSup","line":414,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L410-L412","name":"SimpleGraph.Subgraph.verts_sInf","line":410,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sInf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sInf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sInf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋂ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L406-L408","name":"SimpleGraph.Subgraph.verts_sSup","line":406,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⋃ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L401-L404","name":"SimpleGraph.Subgraph.iInf_adj_of_nonempty","line":401,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj_of_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj_of_nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iInf_adj_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ι</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L394-L399","name":"SimpleGraph.Subgraph.sInf_adj_of_nonempty","line":394,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj_of_nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj_of_nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sInf_adj_of_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L390-L392","name":"SimpleGraph.Subgraph.iInf_adj","line":390,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iInf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iInf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(⨅ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L386-L388","name":"SimpleGraph.Subgraph.iSup_adj","line":386,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iSup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.iSup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">iSup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(⨆ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L382-L384","name":"SimpleGraph.Subgraph.sInf_adj","line":382,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sInf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sInf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">(∀ <span class=\"fn\">G'</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L378-L380","name":"SimpleGraph.Subgraph.sSup_adj","line":378,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sSup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sSup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sSup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SetNotation.html#SupSet.sSup\">sSup</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ <span class=\"fn\">G_1</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G_1</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L374-L376","name":"SimpleGraph.Subgraph.verts_bot","line":374,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_bot","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_bot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L370-L372","name":"SimpleGraph.Subgraph.verts_top","line":370,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_top","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_top\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_top</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L366-L368","name":"SimpleGraph.Subgraph.verts_inf","line":366,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_inf","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_inf\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G₁ </span><span class=\"fn\">G₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">G₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L362-L364","name":"SimpleGraph.Subgraph.verts_sup","line":362,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts_sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G₁ </span><span class=\"fn\">G₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">G₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L358-L360","name":"SimpleGraph.Subgraph.not_bot_adj","line":358,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.not_bot_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.not_bot_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">not_bot_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L354-L356","name":"SimpleGraph.Subgraph.top_adj","line":354,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.top_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.top_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">top_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L350-L352","name":"SimpleGraph.Subgraph.inf_adj","line":350,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inf_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.inf_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">inf_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G₁ </span><span class=\"fn\">G₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">G₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L346-L348","name":"SimpleGraph.Subgraph.sup_adj","line":346,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.sup_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">sup_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G₁ </span><span class=\"fn\">G₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">G₁</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">G₂</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L338-L344","name":"SimpleGraph.Subgraph.instInfSet","line":338,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInfSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instInfSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instInfSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet\">InfSet</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L326-L336","name":"SimpleGraph.Subgraph.instSupSet","line":326,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSupSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instSupSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instSupSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#SupSet\">SupSet</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L317-L324","name":"SimpleGraph.Subgraph.instBot","line":317,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBot","doc":"The `bot` subgraph is the subgraph with no vertices or edges. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instBot\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instBot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot\">Bot</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L308-L315","name":"SimpleGraph.Subgraph.instTop","line":308,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instTop","doc":"The `top` subgraph is `G` as a subgraph of itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instTop\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instTop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top\">Top</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L299-L306","name":"SimpleGraph.Subgraph.instMin","line":299,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instMin","doc":"The intersection of two subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instMin\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L290-L297","name":"SimpleGraph.Subgraph.instMax","line":290,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instMax","doc":"The union of two subgraphs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instMax\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instMax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L286-L288","name":"SimpleGraph.Subgraph.copy_eq","line":286,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">copy_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V''</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hV</span> : <span class=\"fn\">V''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj'</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\">adj'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy\">copy</a></span> <span class=\"fn\">V''</span> <span class=\"fn\">hV</span> <span class=\"fn\">adj'</span> <span class=\"fn\">hadj</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">G'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L274-L284","name":"SimpleGraph.Subgraph.copy","line":274,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy","doc":"Create an equal copy of a subgraph (see `copy_eq`) with possibly different definitional equalities.\nSee Note [range copy pattern].\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.copy\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">V''</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hV</span> : <span class=\"fn\">V''</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj'</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\">adj'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L271-L272","name":"SimpleGraph.Subgraph.vert","line":271,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.vert","doc":"Give a vertex as an element of the subgraph's vertex type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.vert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">vert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L268-L269","name":"SimpleGraph.Subgraph.incidenceSet_subset","line":268,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet\">incidenceSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L264-L266","name":"SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet","line":264,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet_subset_incidenceSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet_subset_incidenceSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet\">incidenceSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.incidenceSet\">incidenceSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L261-L262","name":"SimpleGraph.Subgraph.incidenceSet","line":261,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet","doc":"The `incidenceSet` is the set of edges incident to a given vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.incidenceSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">incidenceSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L259-L259","name":"SimpleGraph.Subgraph.mem_verts_if_mem_edge","line":259,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_if_mem_edge","doc":"**Alias** of `SimpleGraph.Subgraph.mem_verts_of_mem_edge`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_if_mem_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_verts_if_mem_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L252-L257","name":"SimpleGraph.Subgraph.mem_verts_of_mem_edge","line":252,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_of_mem_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_verts_of_mem_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_verts_of_mem_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">he</span> : <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L245-L250","name":"SimpleGraph.Subgraph.image_coe_edgeSet_coe","line":245,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.image_coe_edgeSet_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.image_coe_edgeSet_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">image_coe_edgeSet_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#Set.image\">''</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L242-L243","name":"SimpleGraph.Subgraph.edgeSet_coe","line":242,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.map\">Sym2.map</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a></span> <a href=\"./Mathlib/Data/Set/Operations.html#Set.preimage\">⁻¹'</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L239-L240","name":"SimpleGraph.Subgraph.mem_edgeSet","line":239,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_edgeSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_edgeSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L236-L237","name":"SimpleGraph.Subgraph.edgeSet_subset","line":236,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.edgeSet\">edgeSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L233-L234","name":"SimpleGraph.Subgraph.edgeSet","line":233,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet","doc":"The edge set of `G'` consists of a subset of edges of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edgeSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L225-L231","name":"SimpleGraph.Subgraph.coeNeighborSetEquiv","line":225,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeNeighborSetEquiv","doc":"A subgraph as a graph has equivalent neighbor sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeNeighborSetEquiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coeNeighborSetEquiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L222-L223","name":"SimpleGraph.Subgraph.mem_neighborSet","line":222,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_neighborSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_neighborSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_neighborSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L219-L220","name":"SimpleGraph.Subgraph.neighborSet_subset_verts","line":219,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L216-L217","name":"SimpleGraph.Subgraph.neighborSet_subset","line":216,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L213-L214","name":"SimpleGraph.Subgraph.neighborSet","line":213,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet","doc":"`G'.neighborSet v` is the set of vertices adjacent to `v` in `G'`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">neighborSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L210-L211","name":"SimpleGraph.Subgraph.support_subset_verts","line":210,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_subset_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support_subset_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support_subset_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L208-L208","name":"SimpleGraph.Subgraph.mem_support","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_support","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L205-L206","name":"SimpleGraph.Subgraph.support","line":205,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support","doc":"`H.support` is the set of vertices that form edges in the subgraph `H`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L201-L203","name":"SimpleGraph.Subgraph.IsInduced.adj","line":201,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced.adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced.adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsInduced</span>.<span class=\"name\">adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG'</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced\">IsInduced</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">a</span></span> <span class=\"fn\">↑<span class=\"fn\">b</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L196-L199","name":"SimpleGraph.Subgraph.IsInduced","line":196,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced","doc":"A subgraph is called an *induced subgraph* if vertices of `G'` are adjacent if\nthey are adjacent in `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsInduced\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsInduced</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L187-L187","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply","line":187,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_symm_apply\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Basic.html#RelIso.symm\">RelIso.symm</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning\">spanningCoeEquivCoeOfSpanning</a></span> <span class=\"fn\">h</span>)</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L187-L187","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe","line":187,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning_apply_coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning_apply_coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning\">spanningCoeEquivCoeOfSpanning</a></span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L186-L194","name":"SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning","line":186,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning","doc":"`spanningCoe` is equivalent to `coe` for a subgraph that `IsSpanning`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoeEquivCoeOfSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoeEquivCoeOfSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">≃g</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L180-L184","name":"SimpleGraph.Subgraph.spanningCoe_subgraphOfAdj","line":180,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hadj</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.fromEdgeSet\">fromEdgeSet</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L177-L178","name":"SimpleGraph.Subgraph.mem_of_adj_spanningCoe","line":177,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_of_adj_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mem_of_adj_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mem_of_adj_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">↑<span class=\"fn\">s</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L174-L175","name":"SimpleGraph.Subgraph.spanningCoe_inj","line":174,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_inj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_inj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G₁ </span><span class=\"fn\">G₂</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">G₁</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">G₂</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L172-L172","name":"SimpleGraph.Subgraph.spanningCoe_le","line":172,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L167-L170","name":"SimpleGraph.Subgraph.Adj.of_spanningCoe","line":167,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.of_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.of_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">of_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L161-L161","name":"SimpleGraph.Subgraph.spanningCoe_adj","line":161,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝ </span><span class=\"fn\">a✝¹</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L158-L165","name":"SimpleGraph.Subgraph.spanningCoe","line":158,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe","doc":"Coercion from `Subgraph G` to `SimpleGraph V`.  If `G'` is a spanning\nsubgraph, then `G'.spanningCoe` yields an isomorphic graph.\nIn general, this adds in all vertices from `V` as isolated vertices. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L156-L156","name":"SimpleGraph.Subgraph.IsSpanning.verts_eq_univ","line":156,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.verts_eq_univ","doc":"**Alias** of the forward direction of `SimpleGraph.Subgraph.isSpanning_iff`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning.verts_eq_univ\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span>.<span class=\"name\">verts_eq_univ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span> → <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L153-L154","name":"SimpleGraph.Subgraph.isSpanning_iff","line":153,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.isSpanning_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.isSpanning_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isSpanning_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\">IsSpanning</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#Set.univ\">Set.univ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L149-L151","name":"SimpleGraph.Subgraph.IsSpanning","line":149,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning","doc":"A subgraph is called a *spanning subgraph* if it contains all the vertices of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.IsSpanning\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsSpanning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L146-L147","name":"SimpleGraph.Subgraph.instDecidableRelElemVertsAdjCoeOfAdj","line":146,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRelElemVertsAdjCoeOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.instDecidableRelElemVertsAdjCoeOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instDecidableRelElemVertsAdjCoeOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L143-L144","name":"SimpleGraph.Subgraph.Adj.coe","line":143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">⟨<span class=\"fn\">u</span>, <span class=\"fn\">⋯</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">v</span>, <span class=\"fn\">⋯</span>⟩</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L138-L140","name":"SimpleGraph.Subgraph.coe_adj_sub","line":138,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">u</span></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L132-L132","name":"SimpleGraph.Subgraph.coe_adj","line":132,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span> <span class=\"fn\">↑<span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L131-L136","name":"SimpleGraph.Subgraph.coe","line":131,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe","doc":"Coercion from `G' : Subgraph G` to a `SimpleGraph G'.verts`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L124-L129","name":"SimpleGraph.Subgraph.adj_congr_of_sym2","line":124,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_congr_of_sym2","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_congr_of_sym2\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_congr_of_sym2</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">u</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L121-L122","name":"SimpleGraph.Subgraph.Adj.ne","line":121,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">v</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L118-L119","name":"SimpleGraph.Subgraph.Adj.snd_mem","line":118,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.snd_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.snd_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">snd_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L115-L116","name":"SimpleGraph.Subgraph.Adj.fst_mem","line":115,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.fst_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.fst_mem\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">fst_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L112-L113","name":"SimpleGraph.Subgraph.Adj.adj_sub","line":112,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L109-L110","name":"SimpleGraph.Subgraph.Adj.symm","line":109,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj.symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L105-L107","name":"SimpleGraph.Subgraph.adj_symm","line":105,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L102-L103","name":"SimpleGraph.Subgraph.adj_comm","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_comm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L99-L100","name":"SimpleGraph.Subgraph.loopless","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.loopless","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.loopless\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">loopless</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Irreflexive\">Irreflexive</a> <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L83-L83","name":"SimpleGraph.subgraphOfAdj_verts","line":83,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">w</span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L83-L83","name":"SimpleGraph.subgraphOfAdj_adj","line":83,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">a</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L82-L93","name":"SimpleGraph.subgraphOfAdj","line":82,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj","doc":"The one-edge subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L74-L74","name":"SimpleGraph.singletonSubgraph_adj","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">a✝ </span><span class=\"fn\">a✝¹</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot.bot\">⊥</a> <span class=\"fn\">a✝</span> <span class=\"fn\">a✝¹</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L74-L74","name":"SimpleGraph.singletonSubgraph_verts","line":74,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\">v</span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L73-L80","name":"SimpleGraph.singletonSubgraph","line":73,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph","doc":"The one-vertex subgraph. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">singletonSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L67-L67","name":"SimpleGraph.Subgraph.symm","line":67,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.symm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.symm\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">symm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L66-L66","name":"SimpleGraph.Subgraph.edge_vert","line":66,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edge_vert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edge_vert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">edge_vert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L65-L65","name":"SimpleGraph.Subgraph.adj_sub","line":65,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_sub","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.adj_sub\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">adj_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L64-L64","name":"SimpleGraph.Subgraph.Adj","line":64,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj","doc":"Edges of the subgraph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L62-L62","name":"SimpleGraph.Subgraph.verts","line":62,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts","doc":"Vertices of the subgraph "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L60-L60","name":"SimpleGraph.Subgraph.mk","line":60,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">verts</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Adj</span> : <span class=\"fn\"><span class=\"fn\">V</span> → <span class=\"fn\">V</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">adj_sub</span> : <span class=\"fn\">∀ {<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">edge_vert</span> : <span class=\"fn\">∀ {<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Adj</span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">verts</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#Symmetric\">Symmetric</a> <span class=\"fn\">Adj</span></span> := by aesop_graph)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L59-L59","name":"SimpleGraph.Subgraph.ext_iff","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L59-L59","name":"SimpleGraph.Subgraph.ext","line":59,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.ext\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">verts</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Adj</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Subgraph.lean#L54-L67","name":"SimpleGraph.Subgraph","line":54,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph","doc":"A subgraph of a `SimpleGraph` is a subset of vertices along with a restriction of the adjacency\nrelation that is symmetric and is supported by the vertex subset.  They also form a bounded lattice.\n\nThinking of `V → V → Prop` as `Set (V × V)`, a set of darts (i.e., half-edges), then\n`Subgraph.adj_sub` is that the darts of a subgraph are a subset of the darts of `G`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"}]}