{"name":"Mathlib.Data.Bracket","instances":[],"imports":["Init","Mathlib.Tactic.TypeStar"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Bracket.lean#L37-L37","name":"«term⁅_,_⁆»","line":37,"kind":"def","docLink":"./Mathlib/Data/Bracket.html#«term⁅_,_⁆»","doc":"`⁅x, y⁆` is the result of a bracket operation on elements `x` and `y`.\nIt is supported by the `Bracket` typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Bracket.html#«term⁅_,_⁆»\"><span class=\"name\">«term⁅_,_⁆»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Bracket.lean#L35-L35","name":"Bracket.bracket","line":35,"kind":"def","docLink":"./Mathlib/Data/Bracket.html#Bracket.bracket","doc":"`⁅x, y⁆` is the result of a bracket operation on elements `x` and `y`.\nIt is supported by the `Bracket` typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Bracket.html#Bracket.bracket\"><span class=\"name\">Bracket</span>.<span class=\"name\">bracket</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket\">Bracket</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span> → <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Bracket.lean#L32-L32","name":"Bracket.mk","line":32,"kind":"ctor","docLink":"./Mathlib/Data/Bracket.html#Bracket.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Bracket.html#Bracket.mk\"><span class=\"name\">Bracket</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bracket</span> : <span class=\"fn\"><span class=\"fn\">L</span> → <span class=\"fn\"><span class=\"fn\">M</span> → <span class=\"fn\">M</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Bracket.html#Bracket\">Bracket</a> <span class=\"fn\">L</span> <span class=\"fn\">M</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Bracket.lean#L24-L35","name":"Bracket","line":24,"kind":"class","docLink":"./Mathlib/Data/Bracket.html#Bracket","doc":"The `Bracket` class has three intended uses:\n1. for certain binary operations on structures, like the product `⁅x, y⁆` of two elements\n  `x`, `y` in a Lie algebra or the commutator of two elements `x` and `y` in a group.\n2. for certain actions of one structure on another, like the action `⁅x, m⁆` of an element `x`\n  of a Lie algebra on an element `m` in one of its modules (analogous to `SMul` in the\n  associative setting).\n3. for binary operations on substructures, like the commutator `⁅H, K⁆` of two subgroups `H` and\n   `K` of a group. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Bracket.html#Bracket\"><span class=\"name\">Bracket</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_2)</div></div>"}]}