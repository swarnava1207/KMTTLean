{"name":"Mathlib.Tactic.Explode.Datatypes","instances":[{"typeNames":["Mathlib.Explode.Status"],"name":"Mathlib.Explode.instInhabitedStatus","className":"Inhabited"},{"typeNames":["Mathlib.Explode.Entries"],"name":"Mathlib.Explode.instInhabitedEntries","className":"Inhabited"}],"imports":["Init","Mathlib.Init","Lean.Util.Trace"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L84-L87","name":"Mathlib.Explode.Entries.addSynonym","line":84,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.addSynonym","doc":"Add a pre-existing entry to the `ExprMap` for an additional expression.\nThis is used by `let` bindings where `expr` is an fvar. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.addSynonym\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">addSynonym</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L75-L82","name":"Mathlib.Explode.Entries.add","line":75,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.add","doc":"Add the entry unless it already exists. Sets the `line` field to the next\navailable value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.add\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L71-L73","name":"Mathlib.Explode.Entries.size","line":71,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.size","doc":"Length of our entries. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.size\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L67-L69","name":"Mathlib.Explode.Entries.find?","line":67,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.find?","doc":"Find a row where `Entry.expr` == `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.find?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">es</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L65-L65","name":"Mathlib.Explode.instInhabitedEntries","line":65,"kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedEntries","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedEntries\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">instInhabitedEntries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L64-L64","name":"Mathlib.Explode.Entries.l","line":64,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.l","doc":"Simple list of `Expr`s. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.l\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">l</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L62-L62","name":"Mathlib.Explode.Entries.s","line":62,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.s","doc":"Allows us to compare `Expr`s fast. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.s\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L60-L60","name":"Mathlib.Explode.Entries.mk","line":60,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprMap\">Lean.ExprMap</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\">Entries</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L58-L65","name":"Mathlib.Explode.Entries","line":58,"kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries","doc":"Instead of simply keeping a list of entries (`List Entry`), we create a datatype `Entries`\nthat allows us to compare expressions faster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entries\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L55-L56","name":"Mathlib.Explode.Entry.line!","line":55,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line!","doc":"Get the `line` for an `Entry` that has been added to the `Entries` structure. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line!\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">line!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L53-L53","name":"Mathlib.Explode.Entry.useAsDep","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.useAsDep","doc":"Whether or not to use this in future deps lists. Generally controlled by the `select` function\npassed to `explodeCore`. Exception: `âˆ€I` may ignore this for introduced hypotheses. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.useAsDep\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">useAsDep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L50-L50","name":"Mathlib.Explode.Entry.deps","line":50,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.deps","doc":"Which other lines (aka rows) this row depends on.\n`none` means that the dependency has been filtered out of the table. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.deps\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">deps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L47-L47","name":"Mathlib.Explode.Entry.thm","line":47,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.thm","doc":"What to display in the \"theorem applied\" column.\nMake sure to use `addMessageContext` if needed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.thm\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">thm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L44-L44","name":"Mathlib.Explode.Entry.status","line":44,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.status","doc":"What `Status` this entry has - this only affects how `â”‚`s are displayed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.status\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">status</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L42-L42","name":"Mathlib.Explode.Entry.depth","line":42,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.depth","doc":"How many `if`s (aka lambda-abstractions) this row is nested under. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.depth\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L40-L40","name":"Mathlib.Explode.Entry.line","line":40,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line","doc":"The row number, starting from `0`. This is set by `Entries.add`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.line\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">line</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L38-L38","name":"Mathlib.Explode.Entry.type","line":38,"kind":"def","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.type","doc":"A type of this expression as a `MessageData`. Make sure to use `addMessageContext`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.type\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L36-L36","name":"Mathlib.Explode.Entry.mk","line":36,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">line</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">status</span> : <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useAsDep</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\">Entry</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L35-L53","name":"Mathlib.Explode.Entry","line":35,"kind":"structure","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry","doc":"The row in the Fitch table. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Entry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Entry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L33-L33","name":"Mathlib.Explode.instInhabitedStatus","line":33,"kind":"instance","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedStatus","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.instInhabitedStatus\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">instInhabitedStatus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L31-L32","name":"Mathlib.Explode.Status.reg","line":31,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.reg","doc":"`Entry.depth` * `â”‚` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.reg\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">reg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L29-L30","name":"Mathlib.Explode.Status.lam","line":29,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.lam","doc":"`Entry.depth` * `â”‚` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.lam\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">lam</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L27-L28","name":"Mathlib.Explode.Status.cintro","line":27,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.cintro","doc":"`Entry.depth` * `â”‚` + `â”œ` Continuation intro "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.cintro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">cintro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L25-L26","name":"Mathlib.Explode.Status.intro","line":25,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.intro","doc":"`Entry.depth` * `â”‚` + `â”Œ` Normal intro "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.intro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">intro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L23-L24","name":"Mathlib.Explode.Status.sintro","line":23,"kind":"ctor","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.sintro","doc":"`â”œ` Start intro (top-level) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status.sintro\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span>.<span class=\"name\">sintro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\">Status</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Explode/Datatypes.lean#L21-L33","name":"Mathlib.Explode.Status","line":21,"kind":"inductive","docLink":"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status","doc":"How to display pipes (`â”‚`) for this entry in the Fitch table . "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Explode/Datatypes.html#Mathlib.Explode.Status\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Explode</span>.<span class=\"name\">Status</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}