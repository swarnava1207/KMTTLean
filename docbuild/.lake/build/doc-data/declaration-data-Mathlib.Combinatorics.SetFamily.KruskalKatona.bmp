{"name":"Mathlib.Combinatorics.SetFamily.KruskalKatona","instances":[],"imports":["Init","Mathlib.Combinatorics.Colex","Mathlib.Combinatorics.SetFamily.Compression.UV","Mathlib.Combinatorics.SetFamily.Intersecting","Mathlib.Data.Finset.Fin"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L345-L394","name":"Finset.erdos_ko_rado","line":345,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.erdos_ko_rado","doc":"The **Erdős–Ko–Rado theorem**.\n\nThe maximum size of an intersecting family in `α` where all sets have size `r` is bounded by\n`(card α - 1).choose (r - 1)`. This bound is sharp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.erdos_ko_rado\"><span class=\"name\">Finset</span>.<span class=\"name\">erdos_ko_rado</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝒜</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒜</span> : <span class=\"fn\"><span class=\"fn\">(↑<span class=\"fn\">𝒜</span>)</span>.<a href=\"./Mathlib/Combinatorics/SetFamily/Intersecting.html#Set.Intersecting\">Intersecting</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Slice.html#Set.Sized\">Set.Sized</a> <span class=\"fn\">r</span> <span class=\"fn\">↑<span class=\"fn\">𝒜</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>).<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> (<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L297-L341","name":"Finset.kruskal_katona_lovasz_form","line":297,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.kruskal_katona_lovasz_form","doc":"The **Lovasz formulation of the Kruskal-Katona theorem**.\n\nIf `|𝒜| ≥ k choose r`, (and everything in `𝒜` has size `r`) then the initial segment we compare to\nis just all the subsets of `{0, ..., k - 1}` of size `r`. The `i`-th iterated shadow of this is all\nthe subsets of `{0, ..., k - 1}` of size `r - i`, so the `i`-th iterated shadow of `𝒜` has at least\n`k.choose (r - i)` elements. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.kruskal_katona_lovasz_form\"><span class=\"name\">Finset</span>.<span class=\"name\">kruskal_katona_lovasz_form</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">r </span><span class=\"fn\">k </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝒜</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hir</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">r</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrk</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hkn</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Slice.html#Set.Sized\">Set.Sized</a> <span class=\"fn\">r</span> <span class=\"fn\">↑<span class=\"fn\">𝒜</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Data/Nat/Choose/Basic.html#Nat.choose\">choose</a></span> (<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">i</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">𝒜</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L287-L295","name":"Finset.iterated_kk","line":287,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.iterated_kk","doc":"An iterated form of the Kruskal-Katona theorem. In particular, the minimum possible iterated\nshadow size is attained by initial segments. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.iterated_kk\"><span class=\"name\">Finset</span>.<span class=\"name\">iterated_kk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">r </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝒜 </span><span class=\"fn\">𝒞</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Slice.html#Set.Sized\">Set.Sized</a> <span class=\"fn\">r</span> <span class=\"fn\">↑<span class=\"fn\">𝒜</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\">𝒞</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.IsInitSeg\">Colex.IsInitSeg</a> <span class=\"fn\">𝒞</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">𝒞</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">^[</a><span class=\"fn\">k</span><a href=\"./Mathlib/Logic/Function/Iterate.html#Nat.iterate\">]</a> <span class=\"fn\">𝒜</span>)</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L267-L285","name":"Finset.kruskal_katona","line":267,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.kruskal_katona","doc":"The **Kruskal-Katona theorem**.\n\nGiven a set family `𝒜` consisting of `r`-sets, and `𝒞` an initial segment of the colex order of the\nsame size, the shadow of `𝒞` is smaller than the shadow of `𝒜`. In particular, this gives that the\nminimum shadow size is achieved by initial segments of colex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.kruskal_katona\"><span class=\"name\">Finset</span>.<span class=\"name\">kruskal_katona</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝒜 </span><span class=\"fn\">𝒞</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒜r</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Slice.html#Set.Sized\">Set.Sized</a> <span class=\"fn\">r</span> <span class=\"fn\">↑<span class=\"fn\">𝒜</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒞𝒜</span> : <span class=\"fn\"><span class=\"fn\">𝒞</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒞</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.IsInitSeg\">Colex.IsInitSeg</a> <span class=\"fn\">𝒞</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒞</span>.<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a></span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a></span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L172-L193","name":"Finset.UV.isInitSeg_of_compressed","line":172,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.UV.isInitSeg_of_compressed","doc":"If we're compressed by all useful compressions, then we're an initial segment. This is the other\nkey Kruskal-Katona part. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.UV.isInitSeg_of_compressed\"><span class=\"name\">Finset</span>.<span class=\"name\">UV</span>.<span class=\"name\">isInitSeg_of_compressed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ℬ</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Slice.html#Set.Sized\">Set.Sized</a> <span class=\"fn\">r</span> <span class=\"fn\">↑<span class=\"fn\">ℬ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">∀ (<span class=\"fn\">U </span><span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#_private.Mathlib.Combinatorics.SetFamily.KruskalKatona.0.Finset.UV.UsefulCompression\">Finset.UV.UsefulCompression✝</a> <span class=\"fn\">U</span> <span class=\"fn\">V</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SetFamily/Compression/UV.html#UV.IsCompressed\">UV.IsCompressed</a> <span class=\"fn\">U</span> <span class=\"fn\">V</span> <span class=\"fn\">ℬ</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.IsInitSeg\">Colex.IsInitSeg</a> <span class=\"fn\">ℬ</span> <span class=\"fn\">r</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L130-L140","name":"Finset.UV.toColex_compress_lt_toColex","line":130,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.UV.toColex_compress_lt_toColex","doc":"Applying the compression makes the set smaller in colex. This is intuitive since a portion of\nthe set is being \"shifted down\" as `max U < max V`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.UV.toColex_compress_lt_toColex\"><span class=\"name\">Finset</span>.<span class=\"name\">UV</span>.<span class=\"name\">toColex_compress_lt_toColex</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">U </span><span class=\"fn\">V</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hU</span> : <span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hV</span> : <span class=\"fn\"><span class=\"fn\">V</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">U</span>.<a href=\"./Mathlib/Data/Finset/Max.html#Finset.max'\">max'</a></span> <span class=\"fn\">hU</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">V</span>.<a href=\"./Mathlib/Data/Finset/Max.html#Finset.max'\">max'</a></span> <span class=\"fn\">hV</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hA</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SetFamily/Compression/UV.html#UV.compress\">UV.compress</a> <span class=\"fn\">U</span> <span class=\"fn\">V</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">{ <span class=\"fn\">ofColex</span> := <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SetFamily/Compression/UV.html#UV.compress\">UV.compress</a> <span class=\"fn\">U</span> <span class=\"fn\">V</span> <span class=\"fn\">s</span></span> }</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">{ <span class=\"fn\">ofColex</span> := <span class=\"fn\">s</span> }</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L107-L119","name":"Finset.Colex.IsInitSeg.shadow","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.Colex.IsInitSeg.shadow","doc":"The shadow of an initial segment is also an initial segment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.Colex.IsInitSeg.shadow\"><span class=\"name\">Finset</span>.<span class=\"name\">Colex</span>.<span class=\"name\">IsInitSeg</span>.<span class=\"name\">shadow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">𝒜</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.IsInitSeg\">IsInitSeg</a> <span class=\"fn\">𝒜</span> <span class=\"fn\">r</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.IsInitSeg\">IsInitSeg</a> <span class=\"fn\"><span class=\"fn\">𝒜</span>.<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a></span> (<span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SetFamily/KruskalKatona.lean#L57-L105","name":"Finset.Colex.shadow_initSeg","line":57,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.Colex.shadow_initSeg","doc":"This is important for iterating Kruskal-Katona: the shadow of an initial segment is also an\ninitial segment. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SetFamily/KruskalKatona.html#Finset.Colex.shadow_initSeg\"><span class=\"name\">Finset</span>.<span class=\"name\">Colex</span>.<span class=\"name\">shadow_initSeg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/LinearOrder.html#LinearOrder\">LinearOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.initSeg\">initSeg</a> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SetFamily/Shadow.html#Finset.shadow\">shadow</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/Colex.html#Finset.Colex.initSeg\">initSeg</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finset/Erase.html#Finset.erase\">erase</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Finset/Max.html#Finset.min'\">min'</a></span> <span class=\"fn\">hs</span>)</span>)</span></span></div></div>"}]}