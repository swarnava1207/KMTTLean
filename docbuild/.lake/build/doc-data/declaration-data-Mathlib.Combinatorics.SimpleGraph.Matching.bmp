{"name":"Mathlib.Combinatorics.SimpleGraph.Matching","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Connectivity.Subgraph","Mathlib.Combinatorics.SimpleGraph.Connectivity.WalkCounting","Mathlib.Combinatorics.SimpleGraph.DegreeSum","Mathlib.Combinatorics.SimpleGraph.Operations","Mathlib.Data.Fintype.Order","Mathlib.Data.Set.Functor"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L596-L599","name":"SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_right","line":596,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_right","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_right\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">isAlternating_symmDiff_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM'</span> : <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SymmDiff.html#symmDiff\">symmDiff</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L587-L594","name":"SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_left","line":587,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_left","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.isAlternating_symmDiff_left\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">isAlternating_symmDiff_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM'</span> : <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SymmDiff.html#symmDiff\">symmDiff</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L561-L585","name":"SimpleGraph.IsPerfectMatching.symmDiff_of_isAlternating","line":561,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.symmDiff_of_isAlternating","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsPerfectMatching.symmDiff_of_isAlternating\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">symmDiff_of_isAlternating</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hG'cyc</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L538-L559","name":"SimpleGraph.IsAlternating.sup_edge","line":538,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.sup_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.sup_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAlternating</span>.<span class=\"name\">sup_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">halt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnadj</span> : <a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu'</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">u'</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">u'</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">u</span> ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x</span> <span class=\"fn\">u'</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x</span> <span class=\"fn\">u'</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx'</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">x'</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\">x'</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">x</span> ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x'</span> <span class=\"fn\">u</span></span> ‚Üí <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">x'</span> <span class=\"fn\">u</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#Max.max\">‚äî</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">edge</a> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L532-L536","name":"SimpleGraph.IsAlternating.spanningCoe","line":532,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAlternating</span>.<span class=\"name\">spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">halt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L529-L530","name":"SimpleGraph.IsAlternating.mono","line":529,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating.mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAlternating</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G' </span><span class=\"fn\">G''</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">halt</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G''</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G''</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\">IsAlternating</a></span> <span class=\"fn\">G'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L517-L527","name":"SimpleGraph.IsAlternating","line":517,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating","doc":"A graph `G` is alternating with respect to some other graph `G'`, if exactly every other edge in\n`G` is in `G'`. Note that the degree of each vertex needs to be at most 2 for this to be\npossible. This property is used to create new matchings using `symmDiff`.\nThe definition of `symmDiff` that makes sense is the one for `SimpleGraph`. The `symmDiff`\nfor `SimpleGraph.Subgraph` deriving from the lattice structure also affects the vertices included,\nwhich we do not want in this case. This is why this property, just like `IsCycles`, is defined\nfor `SimpleGraph` rather than `SimpleGraph.Subgraph`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsAlternating\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsAlternating</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L487-L515","name":"SimpleGraph.IsCycles.exists_cycle_toSubgraph_verts_eq_connectedComponentSupp","line":487,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.exists_cycle_toSubgraph_verts_eq_connectedComponentSupp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.exists_cycle_toSubgraph_verts_eq_connectedComponentSupp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">exists_cycle_toSubgraph_verts_eq_connectedComponentSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L477-L485","name":"SimpleGraph.IsCycles.reachable_deleteEdges","line":477,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.reachable_deleteEdges","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.reachable_deleteEdges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">reachable_deleteEdges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcyc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.deleteEdges\">deleteEdges</a></span> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Reachable\">Reachable</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L472-L475","name":"SimpleGraph.IsCycles.reachable_sdiff_toSubgraph_spanningCoe","line":472,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.reachable_sdiff_toSubgraph_spanningCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.reachable_sdiff_toSubgraph_spanningCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">reachable_sdiff_toSubgraph_spanningCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcyc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">G</span> <a href=\"./Init/Core.html#SDiff.sdiff\">\\</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Reachable\">Reachable</a></span> <span class=\"fn\">w</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L413-L428","name":"SimpleGraph.IsCycles.snd_of_mem_support_of_isPath_of_adj","line":413,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.snd_of_mem_support_of_isPath_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.snd_of_mem_support_of_isPath_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">snd_of_mem_support_of_isPath_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">w'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcyc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw'</span> : <span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L398-L411","name":"SimpleGraph.Subgraph.IsPerfectMatching.symmDiff_isCycles","line":398,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.symmDiff_isCycles","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.symmDiff_isCycles\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">symmDiff_isCycles</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M'</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM'</span> : <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Order/SymmDiff.html#symmDiff\">symmDiff</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L384-L394","name":"SimpleGraph.Walk.IsCycle.adj_toSubgraph_iff_of_isCycles","line":384,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsCycle.adj_toSubgraph_iff_of_isCycles","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsCycle.adj_toSubgraph_iff_of_isCycles\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">adj_toSubgraph_iff_of_isCycles</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Finite.html#SimpleGraph.LocallyFinite\">LocallyFinite</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcyc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L374-L382","name":"SimpleGraph.Walk.IsPath.isCycles_spanningCoe_toSubgraph_sup_edge","line":374,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsPath.isCycles_spanningCoe_toSubgraph_sup_edge","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsPath.isCycles_spanningCoe_toSubgraph_sup_edge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">isCycles_spanningCoe_toSubgraph_sup_edge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">u</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> ‚àâ <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#Max.max\">‚äî</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Operations.html#SimpleGraph.edge\">edge</a> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L367-L372","name":"SimpleGraph.Walk.IsCycle.isCycles_spanningCoe_toSubgraph","line":367,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsCycle.isCycles_spanningCoe_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Walk.IsCycle.isCycles_spanningCoe_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">isCycles_spanningCoe_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpc</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L358-L365","name":"SimpleGraph.IsCycles.induce_supp","line":358,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.induce_supp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.induce_supp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">induce_supp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.spanningCoe\">spanningCoe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L348-L356","name":"SimpleGraph.IsCycles.existsUnique_ne_adj","line":348,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.existsUnique_ne_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.existsUnique_ne_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">existsUnique_ne_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">w'</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">V</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L337-L346","name":"SimpleGraph.IsCycles.other_adj_of_adj","line":337,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.other_adj_of_adj","doc":"Given a vertex with one edge in a graph of cycles this gives the other edge incident\nto the same vertex.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles.other_adj_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span>.<span class=\"name\">other_adj_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\">IsCycles</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">w'</span> : <span class=\"fn\">V</span>), <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">w'</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L328-L335","name":"SimpleGraph.IsCycles","line":328,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles","doc":"A graph `G` consists of a set of cycles, if each vertex is either isolated or connected to\nexactly two vertices. This is used to create new matchings by taking the `symmDiff` with cycles.\nThe definition of `symmDiff` that makes sense is the one for `SimpleGraph`. The `symmDiff`\nfor `SimpleGraph.Subgraph` deriving from the lattice structure also affects the vertices included,\nwhich we do not want in this case. This is why this property is defined for `SimpleGraph`, rather\nthan `SimpleGraph.Subgraph`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsCycles\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsCycles</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L321-L326","name":"SimpleGraph.exists_maximal_isMatchingFree","line":321,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.exists_maximal_isMatchingFree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.exists_maximal_isMatchingFree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">exists_maximal_isMatchingFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree\">IsMatchingFree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">Gmax</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>), <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">Gmax</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">Gmax</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree\">IsMatchingFree</a></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">‚àÄ <span class=\"fn\">G'</span> &gt; <span class=\"fn\">Gmax</span>, <span class=\"fn\">‚àÉ (<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>), <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L311-L319","name":"SimpleGraph.IsMatchingFree.mono","line":311,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree.mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsMatchingFree</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmf</span> : <span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree\">IsMatchingFree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree\">IsMatchingFree</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L305-L309","name":"SimpleGraph.IsMatchingFree","line":305,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree","doc":"A graph is matching free if it has no perfect matching. It does not make much sense to\nconsider a graph being free of just matchings, because any non-trivial graph has those.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.IsMatchingFree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">IsMatchingFree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L278-L300","name":"SimpleGraph.ConnectedComponent.odd_matches_node_outside","line":278,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.ConnectedComponent.odd_matches_node_outside","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.ConnectedComponent.odd_matches_node_outside\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ConnectedComponent</span>.<span class=\"name\">odd_matches_node_outside</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkCounting.html#SimpleGraph.oddComponents\">oddComponents</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ <span class=\"fn\">w</span> ‚àà <span class=\"fn\">u</span>, <span class=\"fn\">‚àÉ (<span class=\"fn\">v</span> : <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">‚ä§</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.deleteVerts\">deleteVerts</a></span> <span class=\"fn\">u</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">(‚Üë<span class=\"fn\">v</span>)</span> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">(‚Üë<span class=\"fn\">c</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L267-L276","name":"SimpleGraph.ConnectedComponent.even_card_of_isPerfectMatching","line":267,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.ConnectedComponent.even_card_of_isPerfectMatching","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.ConnectedComponent.even_card_of_isPerfectMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">ConnectedComponent</span>.<span class=\"name\">even_card_of_isPerfectMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L256-L259","name":"SimpleGraph.Subgraph.IsPerfectMatching.toSubgraph_iff","line":256,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.toSubgraph_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.toSubgraph_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">toSubgraph_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.toSubgraph\">toSubgraph</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.spanningCoe\">spanningCoe</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L252-L254","name":"SimpleGraph.Subgraph.IsPerfectMatching.induce_connectedComponent_isMatching","line":252,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.induce_connectedComponent_isMatching","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.induce_connectedComponent_isMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">induce_connectedComponent_isMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L244-L250","name":"SimpleGraph.Subgraph.IsMatching.induce_connectedComponent","line":244,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.induce_connectedComponent","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.induce_connectedComponent\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">induce_connectedComponent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> (<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#Inter.inter\">‚à©</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span>))</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L239-L242","name":"SimpleGraph.Subgraph.IsPerfectMatching.even_card","line":239,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.even_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching.even_card\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span>.<span class=\"name\">even_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\">V</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L235-L237","name":"SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree","line":235,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff_forall_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isPerfectMatching_iff_forall_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">v</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L228-L233","name":"SimpleGraph.Subgraph.isPerfectMatching_iff","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isPerfectMatching_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isPerfectMatching_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\">IsPerfectMatching</a></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ (<span class=\"fn\">v</span> : <span class=\"fn\">V</span>), <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">‚àÉ!</a> <span class=\"fn\">w</span> <a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">:</a> <span class=\"fn\">V</span><a href=\"./Mathlib/Logic/ExistsUnique.html#ExistsUnique\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L217-L226","name":"SimpleGraph.Subgraph.IsMatching.even_card","line":217,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.even_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.even_card\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">even_card</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Fintype/Sets.html#Set.toFinset\">toFinset</a></span>.<a href=\"./Mathlib/Data/Finset/Card.html#Finset.card\">card</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L213-L215","name":"SimpleGraph.Subgraph.isMatching_iff_forall_degree","line":213,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isMatching_iff_forall_degree","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.isMatching_iff_forall_degree\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">isMatching_iff_forall_degree</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">V</span>) ‚Üí <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span></span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\">‚àÄ <span class=\"fn\">v</span> ‚àà <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.degree\">degree</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L208-L211","name":"SimpleGraph.Subgraph.IsMatching.support_eq_verts","line":208,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.support_eq_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.support_eq_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">support_eq_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L202-L206","name":"SimpleGraph.Subgraph.IsPerfectMatching","line":202,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching","doc":"The subgraph `M` of `G` is a perfect matching on `G` if it's a matching and every vertex `G` is\nmatched.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsPerfectMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsPerfectMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L196-L200","name":"SimpleGraph.Subgraph.Iso.isMatching_map","line":196,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.Iso.isMatching_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.Iso.isMatching_map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Iso</span>.<span class=\"name\">isMatching_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso\">‚âÉg</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Iso.toHom\">toHom</a></span> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span> <a href=\"./Init/Core.html#Iff\">‚Üî</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L186-L194","name":"SimpleGraph.Subgraph.IsMatching.map","line":186,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">W</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">W</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">‚Üíg</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">‚áë<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L158-L184","name":"SimpleGraph.Subgraph.IsMatching.exists_of_disjoint_sets_of_equiv","line":158,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.exists_of_disjoint_sets_of_equiv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.exists_of_disjoint_sets_of_equiv\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">exists_of_disjoint_sets_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\">s</span> <span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">‚Üë<span class=\"fn\">s</span></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">‚âÉ</a> <span class=\"fn\">‚Üë<span class=\"fn\">t</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">v</span> : <span class=\"fn\">‚Üë<span class=\"fn\">s</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">‚Üë<span class=\"fn\">v</span></span> <span class=\"fn\">‚Üë<span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">v</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚àÉ (<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>), <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">‚à™</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#And\">‚àß</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L146-L156","name":"SimpleGraph.Subgraph.IsMatching.coeSubgraph","line":146,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.coeSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.coeSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">coeSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coeSubgraph\">Subgraph.coeSubgraph</a> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L139-L144","name":"SimpleGraph.Subgraph.IsMatching.subgraphOfAdj","line":139,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L123-L137","name":"SimpleGraph.Subgraph.IsMatching.iSup","line":123,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.iSup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.iSup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">iSup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Œπ</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">Œπ</span> ‚Üí <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\">‚àÄ (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Pairwise.html#Pairwise\">Pairwise</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> <span class=\"fn\">j</span> : <span class=\"fn\">Œπ</span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(‚®Ü (<span class=\"fn\">i</span> : <span class=\"fn\">Œπ</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L103-L121","name":"SimpleGraph.Subgraph.IsMatching.sup","line":103,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M </span><span class=\"fn\">M'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM'</span> : <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Disjoint.html#Disjoint\">Disjoint</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span> <span class=\"fn\"><span class=\"fn\">M'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.support\">support</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">M</span> <a href=\"./Init/Prelude.html#Max.max\">‚äî</a> <span class=\"fn\">M'</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L99-L101","name":"SimpleGraph.Subgraph.IsMatching.not_adj_right_of_ne","line":99,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.not_adj_right_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.not_adj_right_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">not_adj_right_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huw</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L93-L97","name":"SimpleGraph.Subgraph.IsMatching.not_adj_left_of_ne","line":93,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.not_adj_left_of_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.not_adj_left_of_ne\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">not_adj_left_of_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hM</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Core.html#Ne\">‚â†</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬¨</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L85-L91","name":"SimpleGraph.Subgraph.IsMatching.map_ofLE","line":85,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.map_ofLE","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.map_ofLE\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">map_ofLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G </span><span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hGG'</span> : <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#LE.le\">‚â§</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom.ofLE\">Hom.ofLE</a> <span class=\"fn\">hGG'</span>)</span> <span class=\"fn\">M</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L80-L83","name":"SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj","line":80,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_toEdge_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge_eq_toEdge_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">toEdge</a></span> <span class=\"fn\">‚ü®<span class=\"fn\">v</span>, <span class=\"fn\">hv</span>‚ü©</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">toEdge</a></span> <span class=\"fn\">‚ü®<span class=\"fn\">w</span>, <span class=\"fn\">hw</span>‚ü©</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L76-L78","name":"SimpleGraph.Subgraph.IsMatching.toEdge.surjective","line":76,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge.surjective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge.surjective\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge</span>.<span class=\"name\">surjective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\"><span class=\"fn\">h</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">toEdge</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L70-L74","name":"SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj","line":70,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge_eq_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge_eq_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">‚àà</a> <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">h</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\">toEdge</a></span> <span class=\"fn\">‚ü®<span class=\"fn\">v</span>, <span class=\"fn\">hv</span>‚ü©</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">‚ü®<span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">v</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">w</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span>, <span class=\"fn\">hvw</span>‚ü©</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L66-L68","name":"SimpleGraph.Subgraph.IsMatching.toEdge","line":66,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge","doc":"Given a vertex, returns the unique edge of the matching it is incident to. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching.toEdge\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span>.<span class=\"name\">toEdge</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\">IsMatching</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">‚Üë<span class=\"fn\"><span class=\"fn\">M</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Matching.lean#L60-L64","name":"SimpleGraph.Subgraph.IsMatching","line":60,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching","doc":"The subgraph `M` of `G` is a matching if every vertex of `M` is incident to exactly one edge in `M`.\nWe say that the vertices in `M.support` are *matched* or *saturated*.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Matching.html#SimpleGraph.Subgraph.IsMatching\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">IsMatching</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">M</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}