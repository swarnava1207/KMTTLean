{"name":"Aesop.Forward.State","instances":[{"typeNames":["Aesop.RawHyp"],"name":"Aesop.instInhabitedRawHyp","className":"Inhabited"},{"typeNames":["Aesop.RawHyp"],"name":"Aesop.instBEqRawHyp","className":"BEq"},{"typeNames":["Aesop.RawHyp"],"name":"Aesop.instHashableRawHyp","className":"Hashable"},{"typeNames":["Aesop.Hyp"],"name":"Aesop.instInhabitedHyp","className":"Inhabited"},{"typeNames":["Aesop.Hyp"],"name":"Aesop.Hyp.instBEq","className":"BEq"},{"typeNames":["Aesop.Hyp"],"name":"Aesop.Hyp.instHashable","className":"Hashable"},{"typeNames":["Aesop.InstMap"],"name":"Aesop.instInhabitedInstMap","className":"Inhabited"},{"typeNames":["Aesop.InstMap"],"name":"Aesop.InstMap.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Aesop.InstMap"],"name":"Aesop.InstMap.instToMessageData","className":"Lean.ToMessageData"},{"typeNames":["Aesop.VariableMap"],"name":"Aesop.instInhabitedVariableMap","className":"Inhabited"},{"typeNames":["Aesop.VariableMap"],"name":"Aesop.VariableMap.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Aesop.VariableMap"],"name":"Aesop.VariableMap.instToMessageData","className":"Lean.ToMessageData"},{"typeNames":["Aesop.ClusterState"],"name":"Aesop.ClusterState.instInhabited","className":"Inhabited"},{"typeNames":["Aesop.ClusterState"],"name":"Aesop.ClusterState.instToMessageData","className":"Lean.ToMessageData"},{"typeNames":["Aesop.PatSubstSource"],"name":"Aesop.instInhabitedPatSubstSource","className":"Inhabited"},{"typeNames":["Aesop.PatSubstSource"],"name":"Aesop.instHashablePatSubstSource","className":"Hashable"},{"typeNames":["Aesop.PatSubstSource"],"name":"Aesop.instBEqPatSubstSource","className":"BEq"},{"typeNames":["Aesop.RuleState"],"name":"Aesop.instInhabitedRuleState","className":"Inhabited"},{"typeNames":["Aesop.RuleState"],"name":"Aesop.instToMessageDataRuleState","className":"Lean.ToMessageData"},{"typeNames":["Aesop.ForwardState"],"name":"Aesop.instInhabitedForwardState","className":"Inhabited"},{"typeNames":["Aesop.ForwardState"],"name":"Aesop.ForwardState.instEmptyCollection","className":"EmptyCollection"},{"typeNames":["Aesop.ForwardState"],"name":"Aesop.ForwardState.instToMessageData","className":"Lean.ToMessageData"}],"imports":["Init","Aesop.Forward.Match"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L896-L900","name":"Aesop.ForwardState.updateTargetPatSubsts","line":896,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubsts","doc":"Update the pattern substitutions after the goal's target changed.\n`goal` is the new goal. `newPatSubsts` are the new target's pattern\nsubstitutions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">updateTargetPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newPatSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L884-L894","name":"Aesop.ForwardState.updateTargetPatSubstsCore","line":884,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubstsCore","doc":"Update the pattern substitutions after the goal's target changed.\n`goal` is the new goal. `newPatSubsts` are the new target's pattern\nsubstitutions. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.updateTargetPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">updateTargetPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newPatSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L880-L882","name":"Aesop.ForwardState.eraseTargetPatSubsts","line":880,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.eraseTargetPatSubsts","doc":"Erase all pattern substitutions whose source is the target. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.eraseTargetPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">eraseTargetPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L861-L878","name":"Aesop.ForwardState.eraseHyp","line":861,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.eraseHyp","doc":"Remove a hypothesis from the forward state. If `fs` represents a local\ncontext `lctx`, then `fs.eraseHyp h ms` represents `lctx` with `h` removed.\n`type` must be the normalised type of `h`. `ms` must contain all rules for which\n`h` may unify with a maximal premise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L850-L859","name":"Aesop.ForwardState.erasePatSubsts","line":850,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.erasePatSubsts","doc":"Erase pattern substitutions with the given source. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.erasePatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">erasePatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L843-L848","name":"Aesop.ForwardState.addHypWithPatSubsts","line":843,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubsts","doc":"Add a hypothesis and to the forward state, along with any rule pattern\nsubstitutions obtained from it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypWithPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L834-L841","name":"Aesop.ForwardState.addHypWithPatSubstsCore","line":834,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubstsCore","doc":"Add a hypothesis and to the forward state, along with any rule pattern\nsubstitutions obtained from it. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypWithPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypWithPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L829-L832","name":"Aesop.ForwardState.addPatSubsts","line":829,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubsts","doc":"Add multiple pattern substitutions to the forward state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L821-L827","name":"Aesop.ForwardState.addPatSubstsCore","line":821,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstsCore","doc":"Add multiple pattern substitutions to the forward state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubstsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L816-L819","name":"Aesop.ForwardState.addPatSubst","line":816,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubst","doc":"Add a pattern substitution to the forward state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L801-L814","name":"Aesop.ForwardState.addPatSubstCore","line":801,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstCore","doc":"Add a pattern substitution to the forward state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addPatSubstCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addPatSubstCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L795-L799","name":"Aesop.ForwardState.addHyp","line":795,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHyp","doc":"Add a hypothesis to the forward state. If `fs` represents a local context\n`lctx`, then `fs.addHyp h ms` represents `lctx` with `h` added. `ms` must\noverapproximate the rules for which `h` may unify with a maximal premise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L771-L793","name":"Aesop.ForwardState.addHypCore","line":771,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.addHypCore","doc":"Add a hypothesis to the forward state. If `fs` represents a local context\n`lctx`, then `fs.addHyp h ms` represents `lctx` with `h` added. `ms` must\noverapproximate the rules for which `h` may unify with a maximal premise. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.addHypCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">addHypCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ms</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L754-L758","name":"Aesop.ForwardState.instToMessageData","line":754,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L751-L752","name":"Aesop.ForwardState.instEmptyCollection","line":751,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L747-L747","name":"Aesop.instInhabitedForwardState","line":747,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedForwardState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedForwardState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L746-L746","name":"Aesop.ForwardState.hypTypes","line":746,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.hypTypes","doc":"Normalised types of all non-implementation detail hypotheses in the\nlocal context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.hypTypes\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">hypTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L743-L743","name":"Aesop.ForwardState.patSubsts","line":743,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.patSubsts","doc":"The pattern substitutions present in the rule states. Invariant:\n`patSubsts` maps the source `s` to a rule name `r` and pattern substitution `i`\niff the rule state of `r` contains `i` with source `s`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.patSubsts\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">patSubsts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L739-L739","name":"Aesop.ForwardState.hyps","line":739,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.hyps","doc":"A map from hypotheses to the rules and premises that they matched against\nwhen they were initially added to the rule state. Invariant: the rule states\nin which a hypothesis `h` appear are exactly those identified by the rule\nnames in `hyps[h]`. Furthermore, `h` only appears in slots with premise\nindices greater than or equal to those in `hyps[h]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.hyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">hyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L733-L733","name":"Aesop.ForwardState.ruleStates","line":733,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.ruleStates","doc":"Map from each rule's name to its `RuleState`"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.ruleStates\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">ruleStates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L731-L731","name":"Aesop.ForwardState.mk","line":731,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ruleStates</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubsts</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentArray.html#Lean.PArray\">Lean.PArray</a> (<a href=\"./Aesop/Rule/Name.html#Aesop.RuleName\">RuleName</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>))</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypTypes</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ForwardState\">ForwardState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L729-L747","name":"Aesop.ForwardState","line":729,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.ForwardState","doc":"State representing the non-complete matches of a given set of forward rules\nin a given local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L722-L725","name":"Aesop.RuleState.eraseHyp","line":722,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.eraseHyp","doc":"Erase a hypothesis from the rule state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L701-L720","name":"Aesop.RuleState.erasePatSubst","line":701,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.erasePatSubst","doc":"Erase a pattern substitution that was obtained from the given source. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">source</span> : <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L688-L699","name":"Aesop.RuleState.addRawHyp.addMatches","line":688,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.addMatches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.addMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span>.<span class=\"name\">addMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">completeMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L671-L686","name":"Aesop.RuleState.addRawHyp.getCompleteMatches","line":671,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.getCompleteMatches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp.getCompleteMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span>.<span class=\"name\">getCompleteMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterStates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newCompleteMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L633-L699","name":"Aesop.RuleState.addRawHyp","line":633,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp","doc":"Add a hypothesis or pattern substitution to the rule state. Returns the new\nrule state and any newly completed matches. If a hypothesis is given and it does\nnot match premise `pi`, nothing happens. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.addRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">addRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L616-L629","name":"Aesop.ForwardRule.initialRuleState","line":616,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ForwardRule.initialRuleState","doc":"The initial (empty) rule state for a given forward rule. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ForwardRule.initialRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRule</span>.<span class=\"name\">initialRuleState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L610-L614","name":"Aesop.instToMessageDataRuleState","line":610,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instToMessageDataRuleState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instToMessageDataRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instToMessageDataRuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L608-L608","name":"Aesop.instInhabitedRuleState","line":608,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L607-L607","name":"Aesop.RuleState.patSubstSources","line":607,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.patSubstSources","doc":"The sources of all pattern substitutions present in the\n`clusterStates`. Invariant: each pattern substitution in the cluster states\nis associated with a nonempty set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.patSubstSources\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">patSubstSources</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L603-L603","name":"Aesop.RuleState.clusterStates","line":603,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.clusterStates","doc":"States for each of the rule's slot clusters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.clusterStates\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">clusterStates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L601-L601","name":"Aesop.RuleState.rule","line":601,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.rule","doc":"The rule to which this state belongs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.rule\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">rule</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L599-L599","name":"Aesop.RuleState.mk","line":599,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.RuleState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rule</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clusterStates</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patSubstSources</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RuleState\">RuleState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L598-L608","name":"Aesop.RuleState","line":598,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.RuleState","doc":"Forward state for one rule. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RuleState\"><span class=\"name\">Aesop</span>.<span class=\"name\">RuleState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L596-L596","name":"Aesop.instBEqPatSubstSource","line":596,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqPatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqPatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L596-L596","name":"Aesop.instHashablePatSubstSource","line":596,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashablePatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashablePatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L596-L596","name":"Aesop.instInhabitedPatSubstSource","line":596,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedPatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedPatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L594-L595","name":"Aesop.PatSubstSource.target","line":594,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource.target","doc":"The pattern substitution came from the goal's target. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource.target\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span>.<span class=\"name\">target</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L592-L593","name":"Aesop.PatSubstSource.hyp","line":592,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource.hyp","doc":"The pattern substitution came from the given hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource.hyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span>.<span class=\"name\">hyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\">PatSubstSource</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L589-L596","name":"Aesop.PatSubstSource","line":589,"kind":"inductive","docLink":"./Aesop/Forward/State.html#Aesop.PatSubstSource","doc":"The source of a pattern substitution. The same substitution can have\nmultiple sources. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.PatSubstSource\"><span class=\"name\">Aesop</span>.<span class=\"name\">PatSubstSource</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L574-L585","name":"Aesop.ClusterState.erasePatSubst","line":574,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.erasePatSubst","doc":"Erase a pattern substitution from the cluster state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L564-L572","name":"Aesop.ClusterState.eraseHyp","line":564,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.eraseHyp","doc":"Erase a hypothesis from the cluster state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pi</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L556-L562","name":"Aesop.ClusterState.eraseEnqueuedRawHyp","line":556,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.eraseEnqueuedRawHyp","doc":"Erase a `RawHyp` from the slot queue of the given slot. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.eraseEnqueuedRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">eraseEnqueuedRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L538-L554","name":"Aesop.ClusterState.addRawHyp","line":538,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHyp","doc":"Add a hypothesis or pattern substitution to the cluster state. If a\nhypothesis is given and its type does not match the premise corresponding to\n`slot`, it is not added. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L524-L536","name":"Aesop.ClusterState.enqueueRawHyp","line":524,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.enqueueRawHyp","doc":"Add a hypothesis or pattern substitution to the queue for its slot. If\nafterwards each slot queue contains at least one element, then the returned\ncluster state `cs` has `cs.addHypsLazily = false`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.enqueueRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">enqueueRawHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L511-L521","name":"Aesop.ClusterState.addQueuedRawHyps","line":511,"kind":"opaque","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addQueuedRawHyps","doc":"Insert the raw hyps from `slot`'s queue into the variable map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addQueuedRawHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addQueuedRawHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L496-L509","name":"Aesop.ClusterState.addRawHypCore","line":496,"kind":"opaque","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHypCore","doc":"Add a hypothesis or pattern substitution to the cluster state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addRawHypCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addRawHypCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L475-L494","name":"Aesop.ClusterState.addHyp","line":475,"kind":"opaque","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addHyp","doc":"Add a hypothesis to the cluster state. `hyp.subst` must be the substitution\nthat results from applying `h` to `slot`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L443-L473","name":"Aesop.ClusterState.addMatch","line":443,"kind":"opaque","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addMatch","doc":"Add a match to the cluster state. Returns the new cluster state and any new\ncomplete matches for this cluster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L437-L440","name":"Aesop.ClusterState.AddM.run","line":437,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.run","doc":"Run an `AddM` action. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseLMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\">AddM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L432-L435","name":"Aesop.ClusterState.AddM","line":432,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM","doc":"A monad for operations that add hyps or matches to a cluster state. The\nmonad's state is an array of complete matches discovered during while adding\nhyps/matches. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L430-L430","name":"Aesop.ClusterState.AddM.Context.premiseLMVars","line":430,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseLMVars","doc":"Metavariables for level parameters appearing in the rule's premises. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseLMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">premiseLMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L428-L428","name":"Aesop.ClusterState.AddM.Context.premiseMVars","line":428,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseMVars","doc":"Metavariables for the premises of the rule for which a hyp or match is\nbeing added. When adding hyps, they are unified with these metavariables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.premiseMVars\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">premiseMVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L425-L425","name":"Aesop.ClusterState.AddM.Context.mk","line":425,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premiseLMVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L424-L430","name":"Aesop.ClusterState.AddM.Context","line":424,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context","doc":"Context for the `AddM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.AddM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">AddM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L410-L422","name":"Aesop.ClusterState.matchPremise?.updateSubst","line":410,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?.updateSubst","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?.updateSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">matchPremise?</span>.<span class=\"name\">updateSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premises</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L379-L422","name":"Aesop.ClusterState.matchPremise?","line":379,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?","doc":"Match hypothesis `hyp` against the slot with index `slot` in `cs` (which\nmust be a valid index). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.matchPremise?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">matchPremise?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">premises</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L375-L377","name":"Aesop.ClusterState.findSlot?","line":375,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.findSlot?","doc":"Get the slot with the given premise index. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.findSlot?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">findSlot?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L370-L373","name":"Aesop.ClusterState.slot!","line":370,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slot!","doc":"Get the slot with the given index. Panic if the index is invalid. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slot!\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slot!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cs</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L365-L368","name":"Aesop.ClusterState.instToMessageData","line":365,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L355-L363","name":"Aesop.ClusterState.instInhabited","line":355,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.instInhabited\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L351-L351","name":"Aesop.ClusterState.slotMaybeHasMatches_size","line":351,"kind":"theorem","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches_size","doc":"There is exactly one boolean for each slot. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches_size\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotMaybeHasMatches_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches\">slotMaybeHasMatches</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\">slots</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L349-L349","name":"Aesop.ClusterState.slotMaybeHasMatches","line":349,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches","doc":"The `i`th element of this array is `true` if a match was at some point\nadded to slot `i`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotMaybeHasMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotMaybeHasMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L346-L346","name":"Aesop.ClusterState.slotQueues_size","line":346,"kind":"theorem","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues_size","doc":"There is exactly one queue for each slot. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues_size\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotQueues_size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues\">slotQueues</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\">slots</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L344-L344","name":"Aesop.ClusterState.slotQueues","line":344,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues","doc":"Hypotheses or pattern substitutions that have been added to the cluster\nstate, but have not yet been added to the `variableMap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slotQueues\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slotQueues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L341-L341","name":"Aesop.ClusterState.addHypsLazily","line":341,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.addHypsLazily","doc":"When this flag is `true`, hyps are added to the `slotQueues` rather than\nthe `variableMap`. This is an optimisation that avoids performing unifications\nuntil a rule can potentially generate a complete match. More precisely:\n\n- `addHypsLazily` is initially set to `true`.\n- While `addHypsLazily` is `true`, hyps are added to (and deleted from) the\n  `slotQueues` and are not added to the `variableMap`.\n  Once an addition causes all slot queues to have at least one element,\n  `addHypsLazily` is permanently set to `false` and hyps for slot 0 are added\n  to the `variableMap`.\n- While `addHypsLazily` is `false`:\n  - Hyps for slot `i` are added directly to the variable maps if `i = 0` or\n    the slot `i - 1` has matches. Otherwise they are added to the slot queue\n    for `i`. (More precisely, we only track whether slot `i - 1` has had\n    matches at some point. This allows us to ignore deletions.)\n  - The insertion of a match into slot `i` causes all hyps at slot `i + 1`\n    to be moved from the slot queue into the `variableMap`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.addHypsLazily\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">addHypsLazily</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L322-L322","name":"Aesop.ClusterState.completeMatches","line":322,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.completeMatches","doc":"Complete matches for this cluster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.completeMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">completeMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L320-L320","name":"Aesop.ClusterState.variableMap","line":320,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.variableMap","doc":"The variable map for this cluster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.variableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">variableMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L318-L318","name":"Aesop.ClusterState.conclusionDeps","line":318,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.conclusionDeps","doc":"The premises that appear in the rule's conclusion. These are the same for\nall cluster states of a rule, but are stored here for convenience. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.conclusionDeps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">conclusionDeps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L315-L315","name":"Aesop.ClusterState.slots","line":315,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.slots","doc":"The cluster's slots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.slots\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">slots</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L313-L313","name":"Aesop.ClusterState.mk","line":313,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slots</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">conclusionDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">variableMap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">completeMatches</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addHypsLazily</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotQueues</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotQueues_size</span> : <span class=\"fn\"><span class=\"fn\">slotQueues</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">slots</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotMaybeHasMatches</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slotMaybeHasMatches_size</span> : <span class=\"fn\"><span class=\"fn\">slotMaybeHasMatches</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">slots</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.ClusterState\">ClusterState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L312-L351","name":"Aesop.ClusterState","line":312,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.ClusterState","doc":"Structure representing the state of a slot cluster. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.ClusterState\"><span class=\"name\">Aesop</span>.<span class=\"name\">ClusterState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L304-L308","name":"Aesop.VariableMap.findHyps.slotHyps","line":304,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps.slotHyps","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps.slotHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findHyps</span>.<span class=\"name\">slotHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L287-L308","name":"Aesop.VariableMap.findHyps","line":287,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps","doc":"Find hyps in `slot` whose substitutions are compatible with `subst`.\nPrecondition: `slot.common` is nonempty and each variable contained in it is\nalso contained in `subst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L281-L285","name":"Aesop.VariableMap.findMatches.prevSlotMatches","line":281,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches.prevSlotMatches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches.prevSlotMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findMatches</span>.<span class=\"name\">prevSlotMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L261-L285","name":"Aesop.VariableMap.findMatches","line":261,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches","doc":"Find matches in slot `slot - 1` whose substitutions are compatible with\n`subst`. Preconditions: `slot.index` is nonzero, `slot.common` is nonempty and\neach variable contained in `slot.common` is also contained in `subst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.findMatches\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">findMatches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L256-L259","name":"Aesop.VariableMap.erasePatSubst","line":256,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.erasePatSubst","doc":"Remove the pattern substitution `subst` from `slot` and all later slots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L251-L254","name":"Aesop.VariableMap.eraseHyp","line":251,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.eraseHyp","doc":"Remove a hyp from `slot` and all later slots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L243-L249","name":"Aesop.VariableMap.addMatch","line":243,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.addMatch","doc":"Add a match `m`. Precondition: `nextSlot` is the slot with index\n`m.level + 1`. Returns `true` if the variable map changed. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.addMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">addMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextSlot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L231-L241","name":"Aesop.VariableMap.addHyp","line":231,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.addHyp","doc":"Add a hypothesis `hyp`. Precondition: `hyp` matches the premise of slot\n`slot` with substitution `hyp.subst` (and hence `hyp.subst` contains a mapping\nfor each variable in `slot.common`). Returns `true` if the variable map\nchanged. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.addHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">addHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/RuleInfo.html#Aesop.Slot\">Slot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L218-L229","name":"Aesop.VariableMap.modify","line":218,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.modify","doc":"Modify the `InstMap` associated to variable `var`. If no such `InstMap`\nexists, the function `f` is applied to the empty `InstMap` and the result is\nassociated with `var`. Returns the new variable map and the result of `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.modify\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> → <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L214-L216","name":"Aesop.VariableMap.find","line":214,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.find","doc":"Get the `InstMap` associated with a variable, or an empty `InstMap`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.find\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L210-L212","name":"Aesop.VariableMap.find?","line":210,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.find?","doc":"Get the `InstMap` associated with a variable. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.find?\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vmap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L207-L208","name":"Aesop.VariableMap.instToMessageData","line":207,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L204-L205","name":"Aesop.VariableMap.instEmptyCollection","line":204,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L200-L200","name":"Aesop.instInhabitedVariableMap","line":200,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedVariableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedVariableMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L199-L199","name":"Aesop.VariableMap.map","line":199,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.map\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L198-L198","name":"Aesop.VariableMap.mk","line":198,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.VariableMap\">VariableMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L196-L200","name":"Aesop.VariableMap","line":196,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.VariableMap","doc":"Map from variables to the matches and hypotheses of slots whose types\ncontain the variables. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.VariableMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">VariableMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L183-L191","name":"Aesop.InstMap.erasePatSubst","line":183,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.erasePatSubst","doc":"Remove the pattern substitution `subst` from `slot` and all later slots.\nFor each mapping `s ↦ e ↦ (ms, hs)` in `imap`, if `s ≥ slot`, then `subst` is\nremoved from `hs` and any matches containing `subst` are removed from `ms`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.erasePatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">erasePatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L173-L181","name":"Aesop.InstMap.eraseHyp","line":173,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.eraseHyp","doc":"Remove `hyp` from `slot` and all later slots. For each mapping\n`s ↦ e ↦ (ms, hs)` in `imap`, if `s ≥ slot`, then `hyp` is removed from `hs` and\nany matches containing `hyp` are removed from `ms`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.eraseHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">eraseHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L159-L171","name":"Aesop.InstMap.modifyMapsForSlotsFrom","line":159,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.modifyMapsForSlotsFrom","doc":"Modify the maps for slot `slot` and all later slots. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.modifyMapsForSlotsFrom\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">modifyMapsForSlotsFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L149-L157","name":"Aesop.InstMap.insertMatch","line":149,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertMatch","doc":"Inserts a match. The match `m` is associated with the slot given by its\nlevel (i.e., the maximal slot for which `m` contains a hypothesis) and the\ninstantiation of `var` given by the map's substitution. Returns `true` if the\nmatch was not previously associated with this slot and instantiation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertMatch\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertMatch</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L138-L147","name":"Aesop.InstMap.insertMatchCore","line":138,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertMatchCore","doc":"Inserts a match associated with slot `slot` and instantiation `inst`.\nThe match's level must be `slot`. Returns `true` if the match was not previously\nassociated with `slot` and `inst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertMatchCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertMatchCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L127-L136","name":"Aesop.InstMap.insertHyp","line":127,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.insertHyp","doc":"Inserts a hyp associated with slot `slot` and instantiation `inst`.\nThe hyp must be a valid assignment for the slot's premise. Returns `true` if\nthe hyp was not previously associated with `slot` and `inst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.insertHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">insertHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L116-L125","name":"Aesop.InstMap.modify","line":116,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.modify","doc":"Applies a transfomation to the data associated to `slot` and `inst`.\nIf there is no such data, the transformation is applied to `(∅, ∅)`. Returns the\nnew instantiation map and the result of `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.modify\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">modify</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> → <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L108-L114","name":"Aesop.InstMap.findD","line":108,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.findD","doc":"Returns the set of matches and hypotheses associated with a slot `slot`\nwith instantiation `inst`, or `(∅, ∅)` if `slot` and `inst` do not have any\nassociated matches. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.findD\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">findD</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L101-L106","name":"Aesop.InstMap.find?","line":101,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.find?","doc":"Returns the set of matches and hypotheses associated with a slot `slot`\nwith instantiation `inst`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.find?\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">imap</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">slot</span> : <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L88-L99","name":"Aesop.InstMap.instToMessageData","line":88,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L86-L86","name":"Aesop.InstMap.instEmptyCollection","line":86,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.instEmptyCollection","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.instEmptyCollection\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L82-L82","name":"Aesop.instInhabitedInstMap","line":82,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedInstMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedInstMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L81-L81","name":"Aesop.InstMap.map","line":81,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.map\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L80-L80","name":"Aesop.InstMap.mk","line":80,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.InstMap.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/Forward/SlotIndex.html#Aesop.SlotIndex\">SlotIndex</a> <span class=\"fn\">(<a href=\"./Lean/Data/PersistentHashMap.html#Lean.PHashMap\">Lean.PHashMap</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a> (<span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/PersistentHashSet.html#Lean.PHashSet\">Lean.PHashSet</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span>))</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.InstMap\">InstMap</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L77-L82","name":"Aesop.InstMap","line":77,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.InstMap","doc":"Partial matches associated with a particular slot instantiation. An entry\n`s ↦ e ↦ (ms, hs)` indicates that for the instantiation `e` of slot `s`, we have\npartial matches `ms` and hypotheses `hs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.InstMap\"><span class=\"name\">Aesop</span>.<span class=\"name\">InstMap</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L70-L72","name":"Aesop.Hyp.isPatSubst","line":70,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.isPatSubst","doc":"Does this `Hyp` represent a pattern substitution? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.isPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">isPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L65-L68","name":"Aesop.Hyp.containsHyp","line":65,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.containsHyp","doc":"Returns `true` if `h` is the hyp `fvarId` or is a pattern substitution\ncontaining `fvarId`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.containsHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">containsHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L59-L63","name":"Aesop.Hyp.instHashable","line":59,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.instHashable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.instHashable\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L52-L57","name":"Aesop.Hyp.instBEq","line":52,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.instBEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.instBEq\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L48-L48","name":"Aesop.instInhabitedHyp","line":48,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L47-L47","name":"Aesop.Hyp.subst","line":47,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.subst","doc":"The substitution that results from matching the hypothesis against a\npremise or that was derived from the pattern. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.subst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L44-L44","name":"Aesop.Hyp.fvarId?","line":44,"kind":"def","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.fvarId?","doc":"The hypothesis, or `none` if this is a rule pattern substitution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.fvarId?\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">fvarId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L42-L42","name":"Aesop.Hyp.mk","line":42,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.Hyp.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.Hyp\">Hyp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L40-L48","name":"Aesop.Hyp","line":40,"kind":"structure","docLink":"./Aesop/Forward/State.html#Aesop.Hyp","doc":"A hypothesis that was matched against a premise, or a rule pattern\nsubstitution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.Hyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Hyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L38-L38","name":"Aesop.instHashableRawHyp","line":38,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instHashableRawHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instHashableRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instHashableRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L38-L38","name":"Aesop.instBEqRawHyp","line":38,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instBEqRawHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instBEqRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instBEqRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L38-L38","name":"Aesop.instInhabitedRawHyp","line":38,"kind":"instance","docLink":"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.instInhabitedRawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">instInhabitedRawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L36-L37","name":"Aesop.RawHyp.patSubst","line":36,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp.patSubst","doc":"The rule pattern substitution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp.patSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span>.<span class=\"name\">patSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L34-L35","name":"Aesop.RawHyp.fvarId","line":34,"kind":"ctor","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp.fvarId","doc":"The hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp.fvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/State.html#Aesop.RawHyp\">RawHyp</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/State.lean#L31-L38","name":"Aesop.RawHyp","line":31,"kind":"inductive","docLink":"./Aesop/Forward/State.html#Aesop.RawHyp","doc":"A hypothesis that has not yet been matched against a premise, or a rule\npattern substitution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/State.html#Aesop.RawHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">RawHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}