{"name":"Mathlib.Tactic.Nontriviality.Core","instances":[],"imports":["Init","Qq.MetaM","Mathlib.Logic.Nontrivial.Basic","Mathlib.Tactic.Attr.Core"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Nontriviality/Core.lean#L103-L125","name":"Mathlib.Tactic.Nontriviality.elabNontriviality","line":103,"kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.elabNontriviality","doc":"Elaborator for the `nontriviality` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.elabNontriviality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Nontriviality</span>.<span class=\"name\">elabNontriviality</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Lean.Elab.Tactic.Tactic</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Nontriviality/Core.lean#L57-L101","name":"Mathlib.Tactic.Nontriviality.nontriviality","line":57,"kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontriviality","doc":"Attempts to generate a `Nontrivial α` hypothesis.\n\nThe tactic first checks to see that there is not already a `Nontrivial α` instance\nbefore trying to synthesize one using other techniques.\n\nIf the goal is an (in)equality, the type `α` is inferred from the goal.\nOtherwise, the type needs to be specified in the tactic invocation, as `nontriviality α`.\n\nThe `nontriviality` tactic will first look for strict inequalities amongst the hypotheses,\nand use these to derive the `Nontrivial` instance directly.\n\nOtherwise, it will perform a case split on `Subsingleton α ∨ Nontrivial α`, and attempt to discharge\nthe `Subsingleton` goal using `simp [h₁, h₂, ..., hₙ, nontriviality]`, where `[h₁, h₂, ..., hₙ]` is\na list of additional `simp` lemmas that can be passed to `nontriviality` using the syntax\n`nontriviality α using h₁, h₂, ..., hₙ`.\n\n```\nexample {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : 0 < a := by\n  nontriviality -- There is now a `Nontrivial R` hypothesis available.\n  assumption\n```\n\n```\nexample {R : Type} [CommRing R] {r s : R} : r * s = s * r := by\n  nontriviality -- There is now a `Nontrivial R` hypothesis available.\n  apply mul_comm\n```\n\n```\nexample {R : Type} [OrderedRing R] {a : R} (h : 0 < a) : (2 : ℕ) ∣ 4 := by\n  nontriviality R -- there is now a `Nontrivial R` hypothesis available.\n  dec_trivial\n```\n\n```\ndef myeq {α : Type} (a b : α) : Prop := a = b\n\nexample {α : Type} (a b : α) (h : a = b) : myeq a b := by\n  success_if_fail nontriviality α -- Fails\n  nontriviality α using myeq -- There is now a `Nontrivial α` hypothesis available\n  assumption\n```\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontriviality\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Nontriviality</span>.<span class=\"name\">nontriviality</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Nontriviality/Core.lean#L48-L55","name":"Mathlib.Tactic.Nontriviality.nontrivialityByAssumption","line":48,"kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByAssumption","doc":"Tries to generate a `Nontrivial α` instance using `nontrivial_of_ne` or `nontrivial_of_lt`\nand local hypotheses.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByAssumption\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Nontriviality</span>.<span class=\"name\">nontrivialityByAssumption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Nontriviality/Core.lean#L21-L45","name":"Mathlib.Tactic.Nontriviality.nontrivialityByElim","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByElim","doc":"Tries to generate a `Nontrivial α` instance by performing case analysis on\n`subsingleton_or_nontrivial α`,\nattempting to discharge the subsingleton branch using lemmas with `@[nontriviality]` attribute,\nincluding `Subsingleton.le` and `eq_iff_true_of_subsingleton`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.nontrivialityByElim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Nontriviality</span>.<span class=\"name\">nontrivialityByElim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Type</a> u)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Nontriviality/Core.lean#L17-L19","name":"Mathlib.Tactic.Nontriviality.subsingleton_or_nontrivial_elim","line":17,"kind":"theorem","docLink":"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.subsingleton_or_nontrivial_elim","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Nontriviality/Core.html#Mathlib.Tactic.Nontriviality.subsingleton_or_nontrivial_elim\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Nontriviality</span>.<span class=\"name\">subsingleton_or_nontrivial_elim</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#Subsingleton\">Subsingleton</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Nontrivial/Defs.html#Nontrivial\">Nontrivial</a> <span class=\"fn\">α</span></span> → <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">p</span></div></div>"}]}