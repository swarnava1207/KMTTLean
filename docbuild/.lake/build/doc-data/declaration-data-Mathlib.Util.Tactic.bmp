{"name":"Mathlib.Util.Tactic","instances":[],"imports":["Init","Mathlib.Init","Lean.MetavarContext"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/Tactic.lean#L62-L74","name":"Mathlib.Tactic.modifyLocalDecl","line":62,"kind":"def","docLink":"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyLocalDecl","doc":"`modifyLocalDecl mvarId fvarId f` updates the local decl `fvarId` in the local\ncontext of `mvarId` with `f`. `f` must leave the `fvarId` and `index` of the\n`LocalDecl` unchanged. The type of the new `LocalDecl` must be defeq to the type\nof the old `LocalDecl` (and the same applies to the value of the `LocalDecl`, if\nany).\n\nIf `mvarId` does not refer to a declared metavariable or if `fvarId` does not\nexist in the local context of `mvarId`, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyLocalDecl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">modifyLocalDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/Tactic.lean#L49-L60","name":"Mathlib.Tactic.modifyLocalContext","line":49,"kind":"def","docLink":"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyLocalContext","doc":"`modifyLocalContext mvarId f` updates the local context of the metavariable\n`mvarId` with `f`. The new local context must contain the same fvars as the old\nlocal context and the types (and values, if any) of the fvars in the new local\ncontext must be defeq to their equivalents in the old local context.\n\nIf `mvarId` does not refer to a declared metavariable, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyLocalContext\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">modifyLocalContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/Tactic.lean#L40-L47","name":"Mathlib.Tactic.modifyTarget","line":40,"kind":"def","docLink":"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyTarget","doc":"`modifyTarget mvarId f` updates the target of the metavariable `mvarId` with\n`f`. For any `e`, `f e` must be defeq to `e`. If `mvarId` does not refer to\na declared metavariable, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyTarget\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">modifyTarget</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Util/Tactic.lean#L21-L38","name":"Mathlib.Tactic.modifyMetavarDecl","line":21,"kind":"def","docLink":"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyMetavarDecl","doc":"`modifyMetavarDecl mvarId f` updates the `MetavarDecl` for `mvarId` with `f`.\nConditions on `f`:\n\n- The target of `f mdecl` is defeq to the target of `mdecl`.\n- The local context of `f mdecl` must contain the same fvars as the local\n  context of `mdecl`. For each fvar in the local context of `f mdecl`, the type\n  (and value, if any) of the fvar must be defeq to the corresponding fvar in\n  the local context of `mdecl`.\n\nIf `mvarId` does not refer to a declared metavariable, nothing happens.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Util/Tactic.html#Mathlib.Tactic.modifyMetavarDecl\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">modifyMetavarDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MonadMCtx\">Lean.MonadMCtx</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a> → <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">Lean.MetavarDecl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"}]}