{"name":"Mathlib.Tactic.CategoryTheory.Bicategory.Basic","instances":[],"imports":["Init","Mathlib.Tactic.CategoryTheory.Coherence.Basic","Mathlib.Tactic.CategoryTheory.Bicategory.Normalize","Mathlib.Tactic.CategoryTheory.Bicategory.PureCoherence"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Basic.lean#L51-L53","name":"Mathlib.Tactic.Bicategory.tacticBicategory","line":51,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.tacticBicategory","doc":"Use the coherence theorem for bicategories to solve equations in a bicategory,\nwhere the two sides only differ by replacing strings of bicategory structural morphisms\n(that is, associators, unitors, and identities)\nwith different strings of structural morphisms with the same source and target.\n\nThat is, `bicategory` can handle goals of the form\n`a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`\nwhere `a = a'`, `b = b'`, and `c = c'` can be proved using `bicategory_coherence`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.tacticBicategory\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">tacticBicategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Basic.lean#L38-L49","name":"Mathlib.Tactic.Bicategory.bicategory","line":38,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.bicategory","doc":"Use the coherence theorem for bicategories to solve equations in a bicategory,\nwhere the two sides only differ by replacing strings of bicategory structural morphisms\n(that is, associators, unitors, and identities)\nwith different strings of structural morphisms with the same source and target.\n\nThat is, `bicategory` can handle goals of the form\n`a ≫ f ≫ b ≫ g ≫ c = a' ≫ f ≫ b' ≫ g ≫ c'`\nwhere `a = a'`, `b = b'`, and `c = c'` can be proved using `bicategory_coherence`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.bicategory\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">bicategory</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Basic.lean#L34-L36","name":"Mathlib.Tactic.Bicategory.tacticBicategory_nf","line":34,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.tacticBicategory_nf","doc":"Normalize the both sides of an equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.tacticBicategory_nf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">tacticBicategory_nf</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CategoryTheory/Bicategory/Basic.lean#L30-L32","name":"Mathlib.Tactic.Bicategory.bicategoryNf","line":30,"kind":"def","docLink":"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.bicategoryNf","doc":"Normalize the both sides of an equality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CategoryTheory/Bicategory/Basic.html#Mathlib.Tactic.Bicategory.bicategoryNf\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Bicategory</span>.<span class=\"name\">bicategoryNf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span></div></div>"}]}