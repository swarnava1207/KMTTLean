{"name":"Aesop.BuiltinRules","instances":[],"imports":["Init","Aesop.BuiltinRules.Assumption","Aesop.BuiltinRules.ApplyHyps","Aesop.BuiltinRules.DestructProducts","Aesop.BuiltinRules.Ext","Aesop.BuiltinRules.Intros","Aesop.BuiltinRules.Rfl","Aesop.BuiltinRules.Split","Aesop.BuiltinRules.Subst","Aesop.Frontend.Attribute"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/BuiltinRules.lean#L57-L59","name":"Aesop.BuiltinRules.heq_iff_eq","line":57,"kind":"theorem","docLink":"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.heq_iff_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.heq_iff_eq\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">heq_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HEq\">HEq</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/BuiltinRules.lean#L50-L51","name":"Aesop.BuiltinRules.pEmpty_false","line":50,"kind":"theorem","docLink":"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.pEmpty_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.pEmpty_false\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">pEmpty_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#PEmpty\">PEmpty</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/BuiltinRules.lean#L47-L48","name":"Aesop.BuiltinRules.empty_false","line":47,"kind":"theorem","docLink":"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.empty_false","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.empty_false\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">empty_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Empty\">Empty</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#False\">False</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/BuiltinRules.lean#L44-L45","name":"Aesop.BuiltinRules.not_intro","line":44,"kind":"theorem","docLink":"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.not_intro","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/BuiltinRules.html#Aesop.BuiltinRules.not_intro\"><span class=\"name\">Aesop</span>.<span class=\"name\">BuiltinRules</span>.<span class=\"name\">not_intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">P</span> → <a href=\"./Init/Prelude.html#False\">False</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">P</span></div></div>"}]}