{"name":"Mathlib.Combinatorics.SimpleGraph.Connectivity.Subgraph","instances":[{"typeNames":["SimpleGraph.Subgraph.Preconnected","SimpleGraph.Preconnected"],"name":"SimpleGraph.Subgraph.instCoePreconnectedPreconnectedElemVertsCoe","className":"Coe"},{"typeNames":["SimpleGraph.Subgraph.Preconnected"],"name":"SimpleGraph.Subgraph.instCoeFunPreconnectedForallForallReachableElemVertsCoe","className":"CoeFun"},{"typeNames":["SimpleGraph.Subgraph.Connected","SimpleGraph.Connected"],"name":"SimpleGraph.Subgraph.instCoeConnectedConnectedElemVertsCoe","className":"Coe"},{"typeNames":["SimpleGraph.Subgraph.Connected"],"name":"SimpleGraph.Subgraph.instCoeFunConnectedForallForallReachableElemVertsCoe","className":"CoeFun"}],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Path","Mathlib.Data.Set.Card"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L513-L531","name":"SimpleGraph.extend_finset_to_connected","line":513,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.extend_finset_to_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.extend_finset_to_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">extend_finset_to_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Gpc</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tn</span> : <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Mathlib/Data/Finset/Empty.html#Finset.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">t'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Defs.html#Finset\">Finset</a> <span class=\"fn\">V</span></span>), <span class=\"fn\">t</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">t'</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">(↑<span class=\"fn\">t'</span>)</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L500-L511","name":"SimpleGraph.induce_sUnion_connected_of_pairwise_not_disjoint","line":500,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_sUnion_connected_of_pairwise_not_disjoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_sUnion_connected_of_pairwise_not_disjoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_sUnion_connected_of_pairwise_not_disjoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Sn</span> : <span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Snd</span> : <span class=\"fn\">∀ {<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}, <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span> → <span class=\"fn\"><span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span> → <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Sc</span> : <span class=\"fn\">∀ {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}, <span class=\"fn\"><span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">S</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> (<a href=\"./Mathlib/Order/SetNotation.html#Set.sUnion\">⋃₀</a> <span class=\"fn\">S</span>) <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L491-L498","name":"SimpleGraph.induce_connected_of_patches","line":491,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_connected_of_patches","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_connected_of_patches\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_connected_of_patches</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">patches</span> : <span class=\"fn\">∀ {<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span> → <span class=\"fn\">∃ <span class=\"fn\">s'</span> ⊆ <span class=\"fn\">s</span>, <span class=\"fn\">∃ (<span class=\"fn\">hu'</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s'</span>) (<span class=\"fn\">hv'</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s'</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s'</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Reachable\">Reachable</a></span> <span class=\"fn\">⟨<span class=\"fn\">u</span>, <span class=\"fn\">hu'</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">v</span>, <span class=\"fn\">hv'</span>⟩</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L477-L489","name":"SimpleGraph.induce_connected_adj_union","line":477,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_connected_adj_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_connected_adj_union\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_connected_adj_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sconn</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tconn</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">t</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">t</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>) <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L472-L475","name":"SimpleGraph.Walk.connected_induce_support","line":472,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.connected_induce_support","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.connected_induce_support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">connected_induce_support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v_1</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">V</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">v_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L467-L470","name":"SimpleGraph.Subgraph.Connected.induce_verts","line":467,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.induce_verts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.induce_verts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">induce_verts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">SimpleGraph.induce</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L462-L465","name":"SimpleGraph.induce_pair_connected_of_adj","line":462,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_pair_connected_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_pair_connected_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_pair_connected_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">u</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">}</a> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L455-L460","name":"SimpleGraph.induce_union_connected","line":455,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_union_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.induce_union_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">induce_union_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sconn</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tconn</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">t</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sintert</span> : <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>) <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L451-L453","name":"SimpleGraph.connected_induce_iff","line":451,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.connected_induce_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.connected_induce_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">connected_induce_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.induce\">induce</a> <span class=\"fn\">s</span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L441-L445","name":"SimpleGraph.Subgraph.connected_iff_forall_exists_walk_subgraph","line":441,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff_forall_exists_walk_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff_forall_exists_walk_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">connected_iff_forall_exists_walk_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ {<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> → <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L427-L439","name":"SimpleGraph.Subgraph.preconnected_iff_forall_exists_walk_subgraph","line":427,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.preconnected_iff_forall_exists_walk_subgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.preconnected_iff_forall_exists_walk_subgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">preconnected_iff_forall_exists_walk_subgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}, <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> → <span class=\"fn\">∃ (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L419-L425","name":"SimpleGraph.Subgraph.Connected.adj_union","line":419,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.adj_union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.adj_union\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">adj_union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Hconn</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Kconn</span> : <span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">uH</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vK</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">u</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">}</a></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L411-L417","name":"SimpleGraph.Subgraph.induce_union_connected","line":411,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.induce_union_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.induce_union_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">induce_union_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sconn</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">s</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tconn</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <span class=\"fn\">t</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sintert</span> : <span class=\"fn\">(<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">t</span>).<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">t</span>))</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L402-L409","name":"SimpleGraph.Walk.toSubgraph_connected","line":402,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L386-L395","name":"SimpleGraph.Walk.IsCycle.exists_isCycle_snd_verts_eq","line":386,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.exists_isCycle_snd_verts_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.exists_isCycle_snd_verts_eq\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">exists_isCycle_snd_verts_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">p'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>), <span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L374-L384","name":"SimpleGraph.Walk.IsCycle.ncard_neighborSet_toSubgraph_eq_two","line":374,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.ncard_neighborSet_toSubgraph_eq_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.ncard_neighborSet_toSubgraph_eq_two\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">ncard_neighborSet_toSubgraph_eq_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpc</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Data/Set/Card.html#Set.ncard\">ncard</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L355-L372","name":"SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_internal","line":355,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_internal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_internal\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">neighborSet_toSubgraph_internal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpc</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L339-L353","name":"SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_endpoint","line":339,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_endpoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsCycle.neighborSet_toSubgraph_endpoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsCycle</span>.<span class=\"name\">neighborSet_toSubgraph_endpoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpc</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsCycle\">IsCycle</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.penultimate\">penultimate</a></span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L321-L333","name":"SimpleGraph.Walk.IsPath.snd_of_toSubgraph_adj","line":321,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.snd_of_toSubgraph_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.snd_of_toSubgraph_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">snd_of_toSubgraph_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">v'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L311-L319","name":"SimpleGraph.Walk.IsPath.ncard_neighborSet_toSubgraph_internal_eq_two","line":311,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.ncard_neighborSet_toSubgraph_internal_eq_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.ncard_neighborSet_toSubgraph_internal_eq_two\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">ncard_neighborSet_toSubgraph_internal_eq_two</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">i</span>)</span>)</span>.<a href=\"./Mathlib/Data/Set/Card.html#Set.ncard\">ncard</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L297-L309","name":"SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_internal","line":297,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_internal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_internal\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">neighborSet_toSubgraph_internal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">i</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span><a href=\"./Init/Core.html#Insert.insert\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L291-L295","name":"SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_endpoint","line":291,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_endpoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_endpoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">neighborSet_toSubgraph_endpoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnp</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.penultimate\">penultimate</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L274-L289","name":"SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_startpoint","line":274,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_startpoint","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.IsPath.neighborSet_toSubgraph_startpoint\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">IsPath</span>.<span class=\"name\">neighborSet_toSubgraph_startpoint</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Walk.IsPath\">IsPath</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnp</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">u</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Core.html#Singleton.singleton\">{</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span><a href=\"./Init/Core.html#Singleton.singleton\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L269-L270","name":"SimpleGraph.Walk.mem_support_of_adj_toSubgraph","line":269,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_support_of_adj_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_support_of_adj_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">mem_support_of_adj_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hp</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u'</span> <span class=\"fn\">v'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L237-L267","name":"SimpleGraph.Walk.toSubgraph_adj_iff","line":237,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_adj_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">u' </span><span class=\"fn\">v'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u'</span> <span class=\"fn\">v'</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">i</span></span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">u'</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">v'</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L231-L235","name":"SimpleGraph.Walk.toSubgraph_adj_penultimate","line":231,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_penultimate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_penultimate\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_adj_penultimate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.penultimate\">penultimate</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L228-L229","name":"SimpleGraph.Walk.toSubgraph_adj_snd","line":228,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_snd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_snd\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_adj_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L215-L226","name":"SimpleGraph.Walk.toSubgraph_adj_getVert","line":215,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_getVert","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_adj_getVert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_adj_getVert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">w</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L210-L213","name":"SimpleGraph.Walk.toSubgraph_le_induce_support","line":210,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_le_induce_support","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_le_induce_support\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_le_induce_support</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">v_1</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">V</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">v_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L198-L208","name":"SimpleGraph.Walk.finite_neighborSet_toSubgraph","line":198,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.finite_neighborSet_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.finite_neighborSet_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">finite_neighborSet_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.neighborSet\">neighborSet</a></span> <span class=\"fn\">w</span>)</span>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Finite\">Finite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L192-L196","name":"SimpleGraph.Walk.adj_toSubgraph_mapLe","line":192,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.adj_toSubgraph_mapLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.adj_toSubgraph_mapLe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">adj_toSubgraph_mapLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">G</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.mapLe\">mapLe</a> <span class=\"fn\">h</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L188-L190","name":"SimpleGraph.Walk.toSubgraph_map","line":188,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_map\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V'</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G'</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V'</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">G</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Maps.html#SimpleGraph.Hom\">→g</a> <span class=\"fn\">G'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.map\">Walk.map</a> <span class=\"fn\">f</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.map\">Subgraph.map</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L183-L186","name":"SimpleGraph.Walk.toSubgraph_rotate","line":183,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_rotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_rotate\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_rotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate\">rotate</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L173-L181","name":"SimpleGraph.Walk.toSubgraph_reverse","line":173,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_reverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_reverse\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_reverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.reverse\">reverse</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L169-L171","name":"SimpleGraph.Walk.toSubgraph_append","line":169,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_append\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.append\">append</a></span> <span class=\"fn\">q</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L165-L167","name":"SimpleGraph.Walk.edgeSet_toSubgraph","line":165,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.edgeSet_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.edgeSet_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">edgeSet_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">e</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L162-L163","name":"SimpleGraph.Walk.mem_edges_toSubgraph","line":162,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_edges_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_edges_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">mem_edges_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2\">Sym2</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.edgeSet\">edgeSet</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L158-L160","name":"SimpleGraph.Walk.verts_toSubgraph","line":158,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.verts_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.verts_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">verts_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">w</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <span class=\"fn\">V</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L155-L156","name":"SimpleGraph.Walk.end_mem_verts_toSubgraph","line":155,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.end_mem_verts_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.end_mem_verts_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">end_mem_verts_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L152-L153","name":"SimpleGraph.Walk.start_mem_verts_toSubgraph","line":152,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.start_mem_verts_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.start_mem_verts_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">start_mem_verts_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L148-L150","name":"SimpleGraph.Walk.not_nil_of_adj_toSubgraph","line":148,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.not_nil_of_adj_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.not_nil_of_adj_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">not_nil_of_adj_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">w</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L139-L146","name":"SimpleGraph.Walk.mem_verts_toSubgraph","line":139,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_verts_toSubgraph","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.mem_verts_toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">mem_verts_toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L136-L137","name":"SimpleGraph.Walk.toSubgraph_cons_nil_eq_subgraphOfAdj","line":136,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_cons_nil_eq_subgraphOfAdj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph_cons_nil_eq_subgraphOfAdj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph_cons_nil_eq_subgraphOfAdj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.cons\">cons</a> <span class=\"fn\">h</span> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.nil\">nil</a>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\">toSubgraph</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L130-L134","name":"SimpleGraph.Walk.toSubgraph","line":130,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph","doc":"The subgraph consisting of the vertices and edges of the walk. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Walk.toSubgraph\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">toSubgraph</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span> → <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L107-L120","name":"SimpleGraph.Subgraph.Connected.exists_verts_eq_connectedComponentSupp","line":107,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.exists_verts_eq_connectedComponentSupp","doc":"This lemma establishes a condition under which a subgraph is the same as a connected component.\nNote the asymmetry in the hypothesis `h`: `v` is in `H.verts`, but `w` is not required to be.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.exists_verts_eq_connectedComponentSupp\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">exists_verts_eq_connectedComponentSupp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">v</span> ∈ <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>, <span class=\"fn\">∀ (<span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent\">ConnectedComponent</a></span>), <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.ConnectedComponent.supp\">supp</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L97-L105","name":"SimpleGraph.Subgraph.Connected.sup","line":97,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.sup","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.sup\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">K</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hH</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hK</span> : <span class=\"fn\"><span class=\"fn\">K</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Min.min\">⊓</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\">K</span>).<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L92-L95","name":"SimpleGraph.Subgraph.Connected.mono'","line":92,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mono'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mono'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">mono'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">∀ (<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L84-L90","name":"SimpleGraph.Subgraph.Connected.mono","line":84,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mono\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">mono</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H </span><span class=\"fn\">H'</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\">H</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">H'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H'</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L79-L82","name":"SimpleGraph.Subgraph.top_induce_pair_connected_of_adj","line":79,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.top_induce_pair_connected_of_adj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.top_induce_pair_connected_of_adj\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">top_induce_pair_connected_of_adj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huv</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Top.top\">⊤</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.induce\">induce</a></span> <a href=\"./Init/Core.html#Insert.insert\">{</a><span class=\"fn\">u</span><a href=\"./Init/Core.html#Insert.insert\">,</a> <span class=\"fn\">v</span><a href=\"./Init/Core.html#Insert.insert\">}</a>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L71-L77","name":"SimpleGraph.Subgraph.subgraphOfAdj_connected","line":71,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.subgraphOfAdj_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">subgraphOfAdj_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hvw</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.subgraphOfAdj\">subgraphOfAdj</a></span> <span class=\"fn\">hvw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L64-L69","name":"SimpleGraph.Subgraph.singletonSubgraph_connected","line":64,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_connected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.singletonSubgraph_connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">singletonSubgraph_connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.singletonSubgraph\">singletonSubgraph</a></span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L61-L62","name":"SimpleGraph.Subgraph.Connected.nonempty","line":61,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.nonempty\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L58-L59","name":"SimpleGraph.Subgraph.Connected.preconnected","line":58,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.preconnected","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.preconnected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">preconnected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L54-L56","name":"SimpleGraph.Subgraph.connected_iff","line":54,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">connected_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span>.<a href=\"./Mathlib/Data/Set/Defs.html#Set.Nonempty\">Nonempty</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L51-L52","name":"SimpleGraph.Subgraph.connected_iff'","line":51,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.connected_iff'\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">connected_iff'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L48-L49","name":"SimpleGraph.Subgraph.instCoeFunConnectedForallForallReachableElemVertsCoe","line":48,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeFunConnectedForallForallReachableElemVertsCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeFunConnectedForallForallReachableElemVertsCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCoeFunConnectedForallForallReachableElemVertsCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Reachable\">Reachable</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L46-L46","name":"SimpleGraph.Subgraph.instCoeConnectedConnectedElemVertsCoe","line":46,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeConnectedConnectedElemVertsCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeConnectedConnectedElemVertsCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCoeConnectedConnectedElemVertsCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L44-L44","name":"SimpleGraph.Subgraph.Connected.coe","line":44,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L43-L43","name":"SimpleGraph.Subgraph.Connected.mk","line":43,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coe</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Connected\">Connected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\">Connected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L40-L44","name":"SimpleGraph.Subgraph.Connected","line":40,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected","doc":"A subgraph is connected if it is connected when coerced to be a simple graph.\n\nNote: This is a structure to make it so one can be precise about how dot notation resolves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Connected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Connected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L37-L38","name":"SimpleGraph.Subgraph.preconnected_iff","line":37,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.preconnected_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.preconnected_iff\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">preconnected_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L34-L35","name":"SimpleGraph.Subgraph.instCoeFunPreconnectedForallForallReachableElemVertsCoe","line":34,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeFunPreconnectedForallForallReachableElemVertsCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoeFunPreconnectedForallForallReachableElemVertsCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCoeFunPreconnectedForallForallReachableElemVertsCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeFun\">CoeFun</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.verts\">verts</a></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Reachable\">Reachable</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L32-L32","name":"SimpleGraph.Subgraph.instCoePreconnectedPreconnectedElemVertsCoe","line":32,"kind":"instance","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoePreconnectedPreconnectedElemVertsCoe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.instCoePreconnectedPreconnectedElemVertsCoe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">instCoePreconnectedPreconnectedElemVertsCoe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L30-L30","name":"SimpleGraph.Subgraph.Preconnected.coe","line":30,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected.coe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected.coe\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Preconnected</span>.<span class=\"name\">coe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L29-L29","name":"SimpleGraph.Subgraph.Preconnected.mk","line":29,"kind":"ctor","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected.mk\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Preconnected</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coe</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph.coe\">coe</a></span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Path.html#SimpleGraph.Preconnected\">Preconnected</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">H</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\">Preconnected</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.lean#L26-L30","name":"SimpleGraph.Subgraph.Preconnected","line":26,"kind":"structure","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected","doc":"A subgraph is preconnected if it is preconnected when coerced to be a simple graph.\n\nNote: This is a structure to make it so one can be precise about how dot notation resolves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/Subgraph.html#SimpleGraph.Subgraph.Preconnected\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Subgraph</span>.<span class=\"name\">Preconnected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Subgraph.html#SimpleGraph.Subgraph\">Subgraph</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}