{"name":"Mathlib.Data.Nat.Digits","instances":[],"imports":["Init","Mathlib.Algebra.BigOperators.Intervals","Mathlib.Algebra.BigOperators.Ring.List","Mathlib.Data.Int.ModEq","Mathlib.Data.Nat.Bits","Mathlib.Data.Nat.Log","Mathlib.Data.List.Palindrome","Mathlib.Tactic.IntervalCases","Mathlib.Tactic.Linarith","Mathlib.Tactic.Ring"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L832-L836","name":"Nat.NormDigits.digits_one","line":832,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.NormDigits.digits_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.NormDigits.digits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">NormDigits</span>.<span class=\"name\">digits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n0</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nb</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L823-L830","name":"Nat.NormDigits.digits_succ","line":823,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.NormDigits.digits_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.NormDigits.digits_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">NormDigits</span>.<span class=\"name\">digits_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">m </span><span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L805-L816","name":"Nat.repr_length","line":805,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.repr_length","doc":"The core implementation of `Nat.repr` returns a String with length less than or equal to the\nnumber of digits in the decimal number (represented by `e`). For example, the decimal string\nrepresentation of any number less than 1000 (10 ^ 3) has a length less than or equal to 3. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.repr_length\"><span class=\"name\">Nat</span>.<span class=\"name\">repr_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">10</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/Repr.html#Nat.repr\">repr</a></span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L779-L803","name":"Nat.toDigitsCore_length","line":779,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_length","doc":"The String representation produced by toDigitsCore has the proper length relative to\nthe number of digits in `n < e` for some base `b`. Since this works with any base greater\nthan one, it can be used for binary, decimal, and hex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_length\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">n </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlt</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_e_pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">e</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">e</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L775-L777","name":"Nat.nat_repr_len_aux","line":775,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.nat_repr_len_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.nat_repr_len_aux\"><span class=\"name\">Nat</span>.<span class=\"name\">nat_repr_len_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_b_pos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">e</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L759-L773","name":"Nat.toDigitsCore_lens_eq","line":759,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_lens_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_lens_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_lens_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">f </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>))</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">tl</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L745-L757","name":"Nat.toDigitsCore_lens_eq_aux","line":745,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_lens_eq_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.toDigitsCore_lens_eq_aux\"><span class=\"name\">Nat</span>.<span class=\"name\">toDigitsCore_lens_eq_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">f </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">l1</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/Repr.html#Nat.toDigitsCore\">toDigitsCore</a></span> <span class=\"fn\">f</span> <span class=\"fn\">n</span> <span class=\"fn\">l2</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L734-L741","name":"Nat.eleven_dvd_of_palindrome","line":734,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.eleven_dvd_of_palindrome","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.eleven_dvd_of_palindrome\"><span class=\"name\">Nat</span>.<span class=\"name\">eleven_dvd_of_palindrome</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Mathlib/Data/List/Palindrome.html#List.Palindrome\">Palindrome</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">11</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L728-L732","name":"Nat.eleven_dvd_iff","line":728,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.eleven_dvd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.eleven_dvd_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">eleven_dvd_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">11</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">11</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.alternatingSum\">alternatingSum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L722-L726","name":"Nat.dvd_iff_dvd_ofDigits","line":722,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.dvd_iff_dvd_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.dvd_iff_dvd_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">dvd_iff_dvd_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">↑<span class=\"fn\">b'</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L719-L720","name":"Nat.nine_dvd_iff","line":719,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.nine_dvd_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.nine_dvd_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">nine_dvd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">9</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">9</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L715-L717","name":"Nat.three_dvd_iff","line":715,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.three_dvd_iff","doc":"**Divisibility by 3 Rule** "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.three_dvd_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">three_dvd_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">3</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L709-L713","name":"Nat.dvd_iff_dvd_digits_sum","line":709,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.dvd_iff_dvd_digits_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.dvd_iff_dvd_digits_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">dvd_iff_dvd_digits_sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L701-L704","name":"Nat.modEq_eleven_digits_sum","line":701,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.modEq_eleven_digits_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.modEq_eleven_digits_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_eleven_digits_sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.alternatingSum\">alternatingSum</a></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">11</span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L693-L699","name":"Nat.ofDigits_neg_one","line":693,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_neg_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_neg_one\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_neg_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\">n</span></span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Mathlib/Algebra/BigOperators/Group/List/Defs.html#List.alternatingSum\">alternatingSum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L684-L691","name":"Nat.zmodeq_ofDigits_digits","line":684,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.zmodeq_ofDigits_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.zmodeq_ofDigits_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">zmodeq_ofDigits_digits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">↑<span class=\"fn\">b'</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">↑<span class=\"fn\">b</span></span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L681-L682","name":"Nat.modEq_nine_digits_sum","line":681,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.modEq_nine_digits_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.modEq_nine_digits_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_nine_digits_sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">9</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L678-L679","name":"Nat.modEq_three_digits_sum","line":678,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.modEq_three_digits_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.modEq_three_digits_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_three_digits_sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">10</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">3</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L669-L676","name":"Nat.modEq_digits_sum","line":669,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.modEq_digits_sum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.modEq_digits_sum\"><span class=\"name\">Nat</span>.<span class=\"name\">modEq_digits_sum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">b</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L666-L667","name":"Nat.ofDigits_zmod","line":666,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmod\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_zmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>) <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L663-L664","name":"Nat.ofDigits_zmodeq","line":663,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmodeq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmodeq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_zmodeq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span>) <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L654-L661","name":"Nat.ofDigits_zmodeq'","line":654,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmodeq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_zmodeq'\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_zmodeq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">ℤ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\">b'</span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b'</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">[ZMOD</a> <span class=\"fn\">↑<span class=\"fn\">k</span></span><a href=\"./Mathlib/Data/Int/ModEq.html#Int.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L644-L652","name":"Nat.head!_digits","line":644,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.head!_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.head!_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">head!_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">1</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L641-L642","name":"Nat.ofDigits_mod_eq_head!","line":641,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_mod_eq_head!","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_mod_eq_head!\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_mod_eq_head!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/BasicAux.html#List.head!\">head!</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L638-L639","name":"Nat.ofDigits_mod","line":638,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_mod","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_mod\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">k</span>) <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">k</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L635-L636","name":"Nat.ofDigits_modEq","line":635,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_modEq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_modEq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_modEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">k</span>) <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">k</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L626-L633","name":"Nat.ofDigits_modEq'","line":626,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_modEq'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_modEq'\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_modEq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">b' </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\">b'</span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">k</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">≡</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b'</span> <span class=\"fn\">L</span></span> <a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">[MOD</a> <span class=\"fn\">k</span><a href=\"./Mathlib/Data/Nat/ModEq.html#Nat.ModEq\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L618-L624","name":"Nat.dvd_ofDigits_sub_ofDigits","line":618,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.dvd_ofDigits_sub_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.dvd_ofDigits_sub_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">dvd_ofDigits_sub_ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">a</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L603-L612","name":"Nat.digits_two_eq_bits","line":603,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_two_eq_bits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_two_eq_bits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_two_eq_bits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">2</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>) =&gt; <span class=\"fn\">bif <span class=\"fn\">b</span> then <span class=\"fn\">1</span> else <span class=\"fn\">0</span></span>)</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/Nat/Bits.html#Nat.bits\">bits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L586-L598","name":"Nat.sub_one_mul_sum_log_div_pow_eq_sub_sum_digits","line":586,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.sub_one_mul_sum_log_div_pow_eq_sub_sum_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.sub_one_mul_sum_log_div_pow_eq_sub_sum_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">sub_one_mul_sum_log_div_pow_eq_sub_sum_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Log.html#Nat.log\">log</a> <span class=\"fn\">p</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span>, <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L552-L584","name":"Nat.sub_one_mul_sum_div_pow_eq_sub_sum_digits","line":552,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.sub_one_mul_sum_div_pow_eq_sub_sum_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.sub_one_mul_sum_div_pow_eq_sub_sum_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">sub_one_mul_sum_div_pow_eq_sub_sum_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h_nonempty</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_ne_zero</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h_nonempty</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_lt</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\"><a href=\"./Mathlib/Data/Finset/Range.html#Finset.range\">Finset.range</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></span>, <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L542-L548","name":"Nat.self_div_pow_eq_ofDigits_drop","line":542,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.self_div_pow_eq_ofDigits_drop","doc":"Dividing `n` by `p^i` is like truncating the first `i` digits of `n` in base `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.self_div_pow_eq_ofDigits_drop\"><span class=\"name\">Nat</span>.<span class=\"name\">self_div_pow_eq_ofDigits_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L531-L540","name":"Nat.ofDigits_div_pow_eq_ofDigits_drop","line":531,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_div_pow_eq_ofDigits_drop","doc":"Interpreting as a base `p` number and dividing by `p^i` is the same as dropping `i`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_div_pow_eq_ofDigits_drop\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_div_pow_eq_ofDigits_drop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">digits</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">digits</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">i</span> <span class=\"fn\">digits</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L521-L529","name":"Nat.ofDigits_div_eq_ofDigits_tail","line":521,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_div_eq_ofDigits_tail","doc":"Interpreting as a base `p` number and dividing by `p` is the same as interpreting the tail.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_div_eq_ofDigits_tail\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_div_eq_ofDigits_tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hpos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">digits</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">digits</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">digits</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L513-L519","name":"Nat.base_pow_length_digits_le","line":513,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.base_pow_length_digits_le","doc":"Any non-zero natural number `m` is greater than\nb^((number of digits in the base b representation of m) - 1)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.base_pow_length_digits_le\"><span class=\"name\">Nat</span>.<span class=\"name\">base_pow_length_digits_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L503-L511","name":"Nat.base_pow_length_digits_le'","line":503,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.base_pow_length_digits_le'","doc":"Any non-zero natural number `m` is greater than\n(b+2)^((number of digits in the base (b+2) representation of m) - 1)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.base_pow_length_digits_le'\"><span class=\"name\">Nat</span>.<span class=\"name\">base_pow_length_digits_le'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L492-L501","name":"Nat.pow_length_le_mul_ofDigits","line":492,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.pow_length_le_mul_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.pow_length_le_mul_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">pow_length_le_mul_ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">l</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl2</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">hl</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <span class=\"fn\">l</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L483-L490","name":"Nat.digit_sum_le","line":483,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digit_sum_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digit_sum_le\"><span class=\"name\">Nat</span>.<span class=\"name\">digit_sum_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L480-L481","name":"Nat.sum_le_ofDigits","line":480,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.sum_le_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.sum_le_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">sum_le_ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L472-L478","name":"Nat.ofDigits_monotone","line":472,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_monotone","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_monotone\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p </span><span class=\"fn\">q</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">q</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">p</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">q</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L469-L470","name":"Nat.le_digits_len_le","line":469,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.le_digits_len_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.le_digits_len_le\"><span class=\"name\">Nat</span>.<span class=\"name\">le_digits_len_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L461-L467","name":"Nat.digits_len_le_digits_len_succ","line":461,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_len_le_digits_len_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_len_le_digits_len_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_len_le_digits_len_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L454-L459","name":"Nat.digits_append_zeroes_append_digits","line":454,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_append_zeroes_append_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_append_zeroes_append_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_append_zeroes_append_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">k </span><span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">k</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L441-L452","name":"Nat.digits_append_digits","line":441,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_append_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_append_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_append_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L437-L439","name":"Nat.ofDigits_digits_append_digits","line":437,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_digits_append_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_digits_append_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_digits_append_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L424-L435","name":"Nat.digits_base_pow_mul","line":424,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_base_pow_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_base_pow_mul\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_base_pow_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">k </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">m</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">m</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">k</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L419-L422","name":"Nat.lt_base_pow_length_digits","line":419,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.lt_base_pow_length_digits","doc":"Any number m is less than b^(number of digits in the base b representation of m) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.lt_base_pow_length_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_base_pow_length_digits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L414-L417","name":"Nat.lt_base_pow_length_digits'","line":414,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.lt_base_pow_length_digits'","doc":"Any number m is less than (b+2)^(number of digits in the base b + 2 representation of m) "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.lt_base_pow_length_digits'\"><span class=\"name\">Nat</span>.<span class=\"name\">lt_base_pow_length_digits'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L408-L412","name":"Nat.ofDigits_lt_base_pow_length","line":408,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_lt_base_pow_length","doc":"an n-digit number in base b is less than b^n if b > 1 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_lt_base_pow_length\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_lt_base_pow_length</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L396-L406","name":"Nat.ofDigits_lt_base_pow_length'","line":396,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_lt_base_pow_length'","doc":"an n-digit number in base b + 2 is less than (b + 2)^n "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_lt_base_pow_length'\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_lt_base_pow_length'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\">∀ <span class=\"fn\">x</span> ∈ <span class=\"fn\">l</span>, <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L391-L394","name":"Nat.digits_lt_base","line":391,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_lt_base","doc":"The digits in the base b expansion of n are all less than b, if b ≥ 2 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_lt_base\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_lt_base</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L376-L389","name":"Nat.digits_lt_base'","line":376,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_lt_base'","doc":"The digits in the base b+2 expansion of n are all less than b+2 "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_lt_base'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_lt_base'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">m </span><span class=\"fn\">d</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L361-L374","name":"Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq","line":361,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq","doc":"The addition of ofDigits of two lists is equal to ofDigits of digit-wise addition of them "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_add_ofDigits_eq_ofDigits_zipWith_of_length_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l2</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">l1</span> <span class=\"fn\">l2</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L343-L359","name":"Nat.ofDigits_inj_of_len_eq","line":343,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_inj_of_len_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_inj_of_len_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_inj_of_len_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L1 </span><span class=\"fn\">L2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">len</span> : <span class=\"fn\"><span class=\"fn\">L1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L2</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w1</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L1</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w2</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L2</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">L1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L2</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L335-L341","name":"Nat.mul_ofDigits","line":335,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.mul_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.mul_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">mul_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L314-L333","name":"Nat.getLast_digit_ne_zero","line":314,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.getLast_digit_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.getLast_digit_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">getLast_digit_ne_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\">m</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L302-L312","name":"Nat.digits_len","line":302,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_len","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_len\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_len</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Log.html#Nat.log\">log</a> <span class=\"fn\">b</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L298-L300","name":"Nat.digits_inj_iff","line":298,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_inj_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_inj_iff\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_inj_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L295-L296","name":"Nat.digits.injective","line":295,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits.injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits.injective\"><span class=\"name\">Nat</span>.<span class=\"name\">digits</span>.<span class=\"name\">injective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L288-L293","name":"Nat.digits_getLast","line":288,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_getLast","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_getLast\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_getLast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>))</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">q</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L279-L286","name":"Nat.digits_eq_cons_digits_div","line":279,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_eq_cons_digits_div","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_eq_cons_digits_div\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_eq_cons_digits_div</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L276-L277","name":"Nat.digits_ne_nil_iff_ne_zero","line":276,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_ne_nil_iff_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_ne_nil_iff_ne_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_ne_nil_iff_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L267-L274","name":"Nat.digits_eq_nil_iff_eq_zero","line":267,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_eq_nil_iff_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_eq_nil_iff_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_eq_nil_iff_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L255-L258","name":"Nat.ofDigits_one","line":255,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L236-L253","name":"Nat.ofDigits_digits","line":236,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_digits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_digits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_digits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L210-L234","name":"Nat.digits_ofDigits","line":210,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₁</span> : <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w₂</span> : <span class=\"fn\">∀ (<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L204-L208","name":"Nat.digits_zero_of_eq_zero","line":204,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_of_eq_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_of_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_of_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">∀ <span class=\"fn\">l</span> ∈ <span class=\"fn\">L</span>, <span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L198-L202","name":"Nat.coe_int_ofDigits","line":198,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.coe_int_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.coe_int_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">coe_int_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">(↑<span class=\"fn\">b</span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L191-L196","name":"Nat.coe_ofDigits","line":191,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.coe_ofDigits","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.coe_ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">coe_ofDigits</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">(↑<span class=\"fn\">b</span>)</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L184-L189","name":"Nat.ofDigits_append","line":184,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_append\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l1 </span><span class=\"fn\">l2</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">l1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">l2</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">l1</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">l2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L181-L182","name":"Nat.ofDigits_cons","line":181,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">hd</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> (<span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">tl</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">hd</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">tl</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L177-L179","name":"Nat.ofDigits_one_cons","line":177,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_one_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_one_cons\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_one_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> (<span class=\"fn\">h</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">L</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">1</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L174-L175","name":"Nat.ofDigits_singleton","line":174,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_singleton","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_singleton\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_singleton</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L171-L172","name":"Nat.ofDigits_nil","line":171,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_nil\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L162-L169","name":"Nat.ofDigits_eq_sum_mapIdx","line":162,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_sum_mapIdx","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_sum_mapIdx\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_eq_sum_mapIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/MapIdx.html#List.mapIdx\">List.mapIdx</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> <span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L153-L160","name":"Nat.ofDigits_eq_sum_mapIdx_aux","line":153,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_sum_mapIdx_aux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_sum_mapIdx_aux\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_eq_sum_mapIdx_aux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range\">List.range</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.zipWith\">List.zipWith</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">i</span>)</span> <span class=\"fn\">l</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.range\">List.range</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.sum\">sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L146-L151","name":"Nat.ofDigits_eq_foldr","line":146,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_foldr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits_eq_foldr\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits_eq_foldr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\">ofDigits</a> <span class=\"fn\">b</span> <span class=\"fn\">L</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.foldr\">List.foldr</a> <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">↑<span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <span class=\"fn\">0</span> <span class=\"fn\">L</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L139-L144","name":"Nat.ofDigits","line":139,"kind":"def","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits","doc":"`ofDigits b L` takes a list `L` of natural numbers, and interprets them\nas a number in semiring, as the little-endian digits in base `b`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.ofDigits\"><span class=\"name\">Nat</span>.<span class=\"name\">ofDigits</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L124-L134","name":"Nat.digits_add","line":124,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_add\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxb</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxy</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L118-L122","name":"Nat.digits_of_lt","line":118,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_of_lt\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxb</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">x</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L112-L116","name":"Nat.digits_def'","line":112,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_def'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_def'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_def'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span> → <span class=\"fn\">∀ {<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}, <span class=\"fn\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L107-L110","name":"Nat.digits_of_two_le_of_pos","line":107,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_of_two_le_of_pos","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_of_two_le_of_pos\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_of_two_le_of_pos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L103-L105","name":"Nat.digits_add_two_add_one","line":103,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_add_two_add_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_add_two_add_one\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_add_two_add_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>) <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>).<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> ((<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">2</span>))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L100-L101","name":"Nat.digits_one_succ","line":100,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_one_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_one_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_one_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L95-L97","name":"Nat.digits_one","line":95,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_one\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">1</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L91-L93","name":"Nat.digits_zero_succ'","line":91,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_succ'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_succ'\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L87-L89","name":"Nat.digits_zero_succ","line":87,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L84-L85","name":"Nat.digits_zero_zero","line":84,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a> <span class=\"fn\">0</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L80-L82","name":"Nat.digits_zero","line":80,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digits_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\">digits</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L62-L78","name":"Nat.digits","line":62,"kind":"def","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digits","doc":"`digits b n` gives the digits, in little-endian order,\nof a natural number `n` in a specified base `b`.\n\nIn any base, we have `ofDigits b L = L.foldr (fun x y ↦ x + b * y) 0`.\n* For any `2 ≤ b`, we have `l < b` for any `l ∈ digits b n`,\n  and the last digit is not zero.\n  This uniquely specifies the behaviour of `digits b`.\n* For `b = 1`, we define `digits 1 n = List.replicate n 1`.\n* For `b = 0`, we define `digits 0 n = [n]`, except `digits 0 0 = []`.\n\nNote this differs from the existing `Nat.toDigits` in core, which is used for printing numerals.\nIn particular, `Nat.toDigits b 0 = ['0']`, while `digits b 0 = []`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digits\"><span class=\"name\">Nat</span>.<span class=\"name\">digits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L56-L60","name":"Nat.digitsAux_def","line":56,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux_def\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L53-L54","name":"Nat.digitsAux_zero","line":53,"kind":"theorem","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux\">digitsAux</a></span> <span class=\"fn\">h</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L46-L51","name":"Nat.digitsAux","line":46,"kind":"def","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux","doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L42-L44","name":"Nat.digitsAux1","line":42,"kind":"def","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux1","doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux1\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Nat/Digits.lean#L37-L40","name":"Nat.digitsAux0","line":37,"kind":"def","docLink":"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux0","doc":"(Impl.) An auxiliary definition for `digits`, to help get the desired definitional unfolding. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Nat/Digits.html#Nat.digitsAux0\"><span class=\"name\">Nat</span>.<span class=\"name\">digitsAux0</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"}]}