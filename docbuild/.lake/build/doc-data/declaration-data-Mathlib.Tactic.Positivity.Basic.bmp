{"name":"Mathlib.Tactic.Positivity.Basic","instances":[],"imports":["Init","Mathlib.Algebra.Order.Group.PosPart","Mathlib.Algebra.Order.Ring.Basic","Mathlib.Data.Int.CharZero","Mathlib.Data.Nat.Factorial.Basic","Mathlib.Data.NNRat.Defs","Mathlib.Data.PNat.Defs","Mathlib.Tactic.Positivity.Core","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L536-L545","name":"Mathlib.Meta.Positivity.evalNegPart","line":536,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNegPart","doc":"Extension for `negPart`. `a⁻` is always nonegative. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNegPart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNegPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L521-L534","name":"Mathlib.Meta.Positivity.evalPosPart","line":521,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPosPart","doc":"Extension for `posPart`. `a⁺` is always nonegative, and positive if `a` is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPosPart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPosPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L512-L519","name":"Mathlib.Meta.Positivity.evalRatDen","line":512,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen","doc":"The `positivity` extension which identifies expressions of the form `Rat.den a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatDen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L496-L510","name":"Mathlib.Meta.Positivity.evalRatNum","line":496,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum","doc":"The `positivity` extension which identifies expressions of the form `Rat.num a`,\nsuch that `positivity` successfully recognises `a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalRatNum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L473-L480","name":"Mathlib.Meta.Positivity.evalNNRatDen","line":473,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatDen","doc":"The `positivity` extension which identifies expressions of the form `Rat.den a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatDen\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNNRatDen</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L458-L471","name":"Mathlib.Meta.Positivity.evalNNRatNum","line":458,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatNum","doc":"The `positivity` extension which identifies expressions of the form `NNRat.num q`,\nsuch that `positivity` successfully recognises `q`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNNRatNum\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNNRatNum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L443-L450","name":"Mathlib.Meta.Positivity.evalAscFactorial","line":443,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial","doc":"Extension for `Nat.ascFactorial`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAscFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAscFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L434-L441","name":"Mathlib.Meta.Positivity.evalFactorial","line":434,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial","doc":"Extension for `Nat.factorial`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalFactorial\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalFactorial</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L425-L432","name":"Mathlib.Meta.Positivity.evalPNatVal","line":425,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPNatVal","doc":"Extension for `PNat.val`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPNatVal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPNatVal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L416-L423","name":"Mathlib.Meta.Positivity.evalNatSucc","line":416,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc","doc":"Extension for `Nat.succ`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatSucc\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatSucc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L387-L414","name":"Mathlib.Meta.Positivity.evalIntCast","line":387,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast","doc":"Extension for the `positivity` tactic: `Int.cast` is positive (resp. non-negative)\nif its input is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L370-L385","name":"Mathlib.Meta.Positivity.evalNatCast","line":370,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast","doc":"Extension for the `positivity` tactic: `Nat.cast` is always non-negative,\nand positive when its input is. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatCast\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L346-L368","name":"Mathlib.Meta.Positivity.evalNatAbs","line":346,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs","doc":"Extension for the `positivity` tactic: `Int.natAbs` is positive when its input is.\nSince the output type of `Int.natAbs` is `ℕ`, the nonnegative case is handled by the default\n`positivity` tactic.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalNatAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalNatAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L326-L341","name":"Mathlib.Meta.Positivity.evalAbs","line":326,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs","doc":"The `positivity` extension which identifies expressions of the form `|a|`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAbs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L274-L321","name":"Mathlib.Meta.Positivity.evalPow","line":274,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow","doc":"The `positivity` extension which identifies expressions of the form `a ^ (b : ℕ)`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPow\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L263-L272","name":"Mathlib.Meta.Positivity.evalPowZeroNat","line":263,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat","doc":"The `positivity` extension which identifies expressions of the form `a ^ (0:ℕ)`.\nThis extension is run in addition to the general `a ^ b` extension (they are overlapping). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalPowZeroNat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalPowZeroNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L236-L257","name":"Mathlib.Meta.Positivity.evalIntDiv","line":236,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv","doc":"The `positivity` extension which identifies expressions of the form `a / b`,\nwhere `a` and `b` are integers. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIntDiv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIntDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L195-L221","name":"Mathlib.Meta.Positivity.evalMul","line":195,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul","doc":"The `positivity` extension which identifies expressions of the form `a * b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMul\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L150-L173","name":"Mathlib.Meta.Positivity.evalAdd","line":150,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd","doc":"The `positivity` extension which identifies expressions of the form `a + b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalAdd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L121-L148","name":"Mathlib.Meta.Positivity.evalMax","line":121,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax","doc":"Extension for the `max` operator. The `max` of two numbers is nonnegative if at least one\nis nonnegative, strictly positive if at least one is positive, and nonzero if both are nonzero. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMax\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L102-L119","name":"Mathlib.Meta.Positivity.evalMin","line":102,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin","doc":"The `positivity` extension which identifies expressions of the form `min a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalMin\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalMin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Positivity/Basic.lean#L53-L84","name":"Mathlib.Meta.Positivity.evalIte","line":53,"kind":"def","docLink":"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte","doc":"The `positivity` extension which identifies expressions of the form `ite p a b`,\nsuch that `positivity` successfully recognises both `a` and `b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Positivity/Basic.html#Mathlib.Meta.Positivity.evalIte\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Positivity</span>.<span class=\"name\">evalIte</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Positivity/Core.html#Mathlib.Meta.Positivity.PositivityExt\">PositivityExt</a></div></div>"}]}