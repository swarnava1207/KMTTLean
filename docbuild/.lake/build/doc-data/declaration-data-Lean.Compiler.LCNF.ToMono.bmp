{"name":"Lean.Compiler.LCNF.ToMono","instances":[],"imports":["Lean.Compiler.LCNF.MonoTypes","Lean.Compiler.LCNF.InferType"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L151-L155","name":"Lean.Compiler.LCNF.toMono","line":151,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L143-L149","name":"Lean.Compiler.LCNF.Decl.toMono.go","line":143,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L140-L149","name":"Lean.Compiler.LCNF.Decl.toMono","line":140,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Decl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L118-L136","name":"Lean.Compiler.LCNF.Code.toMono","line":118,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Code.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Code</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L104-L116","name":"Lean.Compiler.LCNF.trivialStructToMono","line":104,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono","doc":"Eliminate `cases` for trivial structure. See `hasTrivialStructure?` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.trivialStructToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">trivialStructToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Compiler/LCNF/MonoTypes.html#Lean.Compiler.LCNF.TrivialStructureInfo\">TrivialStructureInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L92-L102","name":"Lean.Compiler.LCNF.decToMono","line":92,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono","doc":"Convert `cases` `Decidable` => `Bool` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.decToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">decToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Cases\">Cases</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CasesCore.typeName\">typeName</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">`Decidable</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L86-L90","name":"Lean.Compiler.LCNF.FunDeclCore.toMono","line":86,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDeclCore.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.FunDeclCore.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">FunDeclCore</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L79-L82","name":"Lean.Compiler.LCNF.LetDecl.toMono","line":79,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetDecl.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetDecl</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L45-L77","name":"Lean.Compiler.LCNF.LetValue.toMono","line":45,"kind":"opaque","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.LetValue.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LetValue</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L36-L43","name":"Lean.Compiler.LCNF.ctorAppToMono","line":36,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ctorAppToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ctorAppToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorInfo</span> : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L27-L34","name":"Lean.Compiler.LCNF.argToMono","line":27,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.argToMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">argToMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L22-L25","name":"Lean.Compiler.LCNF.isTrivialConstructorApp?","line":22,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.isTrivialConstructorApp?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isTrivialConstructorApp?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetValue\">LetValue</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L17-L20","name":"Lean.Compiler.LCNF.Param.toMono","line":17,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.Param.toMono\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Param</span>.<span class=\"name\">toMono</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\">ToMonoM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L15-L15","name":"Lean.Compiler.LCNF.ToMonoM","line":15,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L13-L13","name":"Lean.Compiler.LCNF.ToMonoM.State.typeParams","line":13,"kind":"def","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.typeParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">typeParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L12-L12","name":"Lean.Compiler.LCNF.ToMonoM.State.mk","line":12,"kind":"ctor","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeParams</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Compiler/LCNF/ToMono.lean#L12-L13","name":"Lean.Compiler.LCNF.ToMonoM.State","line":12,"kind":"structure","docLink":"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ToMono.html#Lean.Compiler.LCNF.ToMonoM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">ToMonoM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}