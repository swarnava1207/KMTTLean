{"name":"Mathlib.Tactic.Tauto","instances":[],"imports":["Init","Mathlib.Tactic.CasesM","Mathlib.Tactic.Core","Mathlib.Lean.Elab.Tactic.Basic","Mathlib.Logic.Basic","Qq"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L207-L217","name":"Mathlib.Tactic.Tauto.tauto","line":207,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tauto","doc":"`tauto` breaks down assumptions of the form `_ ∧ _`, `_ ∨ _`, `_ ↔ _` and `∃ _, _`\nand splits a goal of the form `_ ∧ _`, `_ ↔ _` or `∃ _, _` until it can be discharged\nusing `reflexivity` or `solve_by_elim`.\nThis is a finishing tactic: it either closes the goal or raises an error.\n\nThe Lean 3 version of this tactic by default attempted to avoid classical reasoning\nwhere possible. This Lean 4 version makes no such attempt. The `itauto` tactic\nis designed for that purpose.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tauto\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tauto</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L198-L205","name":"Mathlib.Tactic.Tauto.tautology","line":198,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautology","doc":"Implementation of the `tauto` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautology\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tautology</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L188-L196","name":"Mathlib.Tactic.Tauto.finishingConstructorMatcher","line":188,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.finishingConstructorMatcher","doc":"Matches propositions where we want to apply the `constructor` tactic in the\nfinishing stage of `tauto`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.finishingConstructorMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">finishingConstructorMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L160-L186","name":"Mathlib.Tactic.Tauto.tautoCore","line":160,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautoCore","doc":"The core loop of the `tauto` tactic. Repeatedly tries to break down propositions\nuntil no more progress can be made. Tries `assumption` and `contradiction` at every\nstep, to discharge goals as soon as possible. Does not do anything that requires\nbacktracking.\n\nTODO: The Lean 3 version uses more-powerful versions of `contradiction` and `assumption`\nthat additionally apply `symm` and use a fancy union-find data structure to avoid\nduplicated work.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.tautoCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">tautoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L147-L155","name":"Mathlib.Tactic.Tauto.casesMatcher","line":147,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.casesMatcher","doc":"Matches propositions where we want to apply the `cases` tactic\nin the core loop of `tauto`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.casesMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">casesMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L138-L145","name":"Mathlib.Tactic.Tauto.coreConstructorMatcher","line":138,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.coreConstructorMatcher","doc":"Matches propositions where we want to apply the `constructor` tactic\nin the core loop of `tauto`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.coreConstructorMatcher\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">coreConstructorMatcher</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">Q(<a href=\"./foundational_types.html\">Prop</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L135-L136","name":"Mathlib.Tactic.Tauto.elabConfig","line":135,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.elabConfig","doc":"Function elaborating `Config`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.elabConfig\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">elabConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\">Config</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L133-L133","name":"Mathlib.Tactic.Tauto.Config.mk","line":133,"kind":"ctor","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\">Config</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L132-L133","name":"Mathlib.Tactic.Tauto.Config","line":132,"kind":"structure","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config","doc":"Config for the `tauto` tactic. Currently empty. TODO: add `closer` option. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.Config\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L121-L130","name":"Mathlib.Tactic.Tauto.distribNot","line":121,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNot","doc":"Tries to apply de-Morgan-like rules on all hypotheses.\nAlways succeeds, regardless of whether any progress was actually made.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Lean.Elab.Tactic.TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L110-L119","name":"Mathlib.Tactic.Tauto.distribNotAux","line":110,"kind":"opaque","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAux","doc":"For each fvar in `fvars`, calls `distribNotAt` and carries along the resulting\nrenamings.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAux\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L96-L108","name":"Mathlib.Tactic.Tauto.distribNotAt","line":96,"kind":"opaque","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAt","doc":"Calls `distribNotAt` on the head of `state.fvars` up to `nIters` times, returning\nearly on failure.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotAt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nIters</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L94-L94","name":"Mathlib.Tactic.Tauto.DistribNotState.currentGoal","line":94,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.currentGoal","doc":"The current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.currentGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">currentGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L91-L91","name":"Mathlib.Tactic.Tauto.DistribNotState.fvars","line":91,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.fvars","doc":"The list of hypothesis left to work on, renamed to be up-to-date with\nthe current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.fvars\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L88-L88","name":"Mathlib.Tactic.Tauto.DistribNotState.mk","line":88,"kind":"ctor","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currentGoal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\">DistribNotState</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L82-L94","name":"Mathlib.Tactic.Tauto.DistribNotState","line":82,"kind":"structure","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState","doc":"State of the `distribNotAt` function. We need to carry around the list of\nremaining hypothesis as fvars so that we can incrementally apply the\n`AssertAfterResult.subst` from each step to each of them. Otherwise,\nthey could end up referring to old hypotheses.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.DistribNotState\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">DistribNotState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Tauto.lean#L23-L80","name":"Mathlib.Tactic.Tauto.distribNotOnceAt","line":23,"kind":"def","docLink":"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotOnceAt","doc":"Tries to apply de-Morgan-like rules on a hypothesis. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Tauto.html#Mathlib.Tactic.Tauto.distribNotOnceAt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Tauto</span>.<span class=\"name\">distribNotOnceAt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypFVar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult\">Lean.Meta.AssertAfterResult</a></span></div></div>"}]}