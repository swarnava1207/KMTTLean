{"name":"Mathlib.ModelTheory.Encoding","instances":[{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instEncodableOfSigmaNatFunctions","className":"Encodable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.instCountableOfSigmaNatFunctions","className":"Countable"},{"typeNames":["FirstOrder.Language.Term"],"name":"FirstOrder.Language.Term.small","className":"Small"}],"imports":["Init","Mathlib.Computability.Encoding","Mathlib.Logic.Small.List","Mathlib.ModelTheory.Syntax","Mathlib.SetTheory.Cardinal.Arithmetic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L289-L298","name":"FirstOrder.Language.BoundedFormula.card_le","line":289,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> (<span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{max u v, u'}</a> <span class=\"fn\">(<a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.lift\">Cardinal.lift.{u', max u v}</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.card\">card</a></span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L285-L287","name":"FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","line":285,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode_sigma_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode_sigma_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <span class=\"fn\">fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span>.<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">listEncode</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L274-L274","name":"FirstOrder.Language.BoundedFormula.encoding_Γ","line":274,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\">BoundedFormula.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L274-L274","name":"FirstOrder.Language.BoundedFormula.encoding_encode","line":274,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\">BoundedFormula.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">encode</a></span> <span class=\"fn\">φ</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span>.<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">listEncode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L274-L274","name":"FirstOrder.Language.BoundedFormula.encoding_decode","line":274,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\">BoundedFormula.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">decode</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">listDecode</a> <span class=\"fn\">l</span>)</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L273-L283","name":"FirstOrder.Language.BoundedFormula.encoding","line":273,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding","doc":"An encoding of bounded formulas as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L212-L271","name":"FirstOrder.Language.BoundedFormula.listDecode_encode_list","line":212,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\">listDecode</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">List.flatMap</a> <span class=\"fn\">(fun (<span class=\"fn\">φ</span> : <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Init/Core.html#Sigma.snd\">snd</a></span>.<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\">listEncode</a></span>)</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L191-L210","name":"FirstOrder.Language.BoundedFormula.listDecode","line":191,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode","doc":"Decodes a list of symbols as a list of formulas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L185-L189","name":"FirstOrder.Language.BoundedFormula.sigmaImp_apply","line":185,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp_apply","doc":"Decodes a list of symbols as a list of formulas. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp_apply\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaImp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ </span><span class=\"fn\">ψ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp\">sigmaImp</a> <span class=\"fn\">⟨<span class=\"fn\">n</span>, <span class=\"fn\">φ</span>⟩</span> <span class=\"fn\">⟨<span class=\"fn\">n</span>, <span class=\"fn\">ψ</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">n</span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.imp\">imp</a></span> <span class=\"fn\">ψ</span></span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L180-L183","name":"FirstOrder.Language.BoundedFormula.sigmaImp","line":180,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp","doc":"Applies `imp` to two elements of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaImp\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaImp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L176-L178","name":"FirstOrder.Language.BoundedFormula.sigmaAll_apply","line":176,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll_apply\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaAll_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">φ</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll\">sigmaAll</a> <span class=\"fn\">⟨<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>, <span class=\"fn\">φ</span>⟩</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">n</span>, <span class=\"fn\"><span class=\"fn\">φ</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula.all\">all</a></span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L169-L173","name":"FirstOrder.Language.BoundedFormula.sigmaAll","line":169,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll","doc":"Applies the `forall` quantifier to an element of `(Σ n, L.BoundedFormula α n)`,\nor returns `default` if not possible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.sigmaAll\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">sigmaAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span> → <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L159-L167","name":"FirstOrder.Language.BoundedFormula.listEncode","line":159,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode","doc":"Encodes a bounded formula as a list of symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.BoundedFormula.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">BoundedFormula</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.BoundedFormula\">BoundedFormula</a></span> <span class=\"fn\">α</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">k</span></span>)</span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Relations\">Relations</a></span> <span class=\"fn\">n</span></span></span> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L152-L153","name":"FirstOrder.Language.Term.small","line":152,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.small\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">small</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u'}</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, max u u'}</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L147-L150","name":"FirstOrder.Language.Term.instCountableOfSigmaNatFunctions","line":147,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableOfSigmaNatFunctions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instCountableOfSigmaNatFunctions\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instCountableOfSigmaNatFunctions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">((<span class=\"fn\">l</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">l</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Countable/Defs.html#Countable\">Countable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L140-L145","name":"FirstOrder.Language.Term.instEncodableOfSigmaNatFunctions","line":140,"kind":"instance","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableOfSigmaNatFunctions","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.instEncodableOfSigmaNatFunctions\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">instEncodableOfSigmaNatFunctions</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">((<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Encodable/Basic.html#Encodable\">Encodable</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L109-L138","name":"FirstOrder.Language.Term.card_sigma","line":109,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_sigma\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_sigma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">((<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L106-L107","name":"FirstOrder.Language.Term.card_le","line":106,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.card_le\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">card_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.aleph0\">Cardinal.aleph0</a> <a href=\"./Init/Prelude.html#Max.max\">⊔</a> <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Cardinal/Defs.html#Cardinal.mk\">Cardinal.mk</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L102-L104","name":"FirstOrder.Language.Term.listEncode_injective","line":102,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode_injective\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode_injective</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Injective\">Function.Injective</a> <a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\">listEncode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L91-L91","name":"FirstOrder.Language.Term.encoding_decode","line":91,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_decode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_decode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\">Term.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.decode\">decode</a></span> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\">(do\n      let <span class=\"fn\">a</span> ← <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">listDecode</a> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.head?\">head?</a></span>\n      <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span>)</span></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.join\">join</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L91-L91","name":"FirstOrder.Language.Term.encoding_Γ","line":91,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_Γ\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_Γ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\">Term.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.Γ\">Γ</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L91-L91","name":"FirstOrder.Language.Term.encoding_encode","line":91,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding_encode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding_encode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\">Term.encoding</a>.<a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding.encode\">encode</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a✝</span>.<a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\">listEncode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L90-L100","name":"FirstOrder.Language.Term.encoding","line":90,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding","doc":"An encoding of terms as lists. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.encoding\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">encoding</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/Encoding.html#Computability.Encoding\">Computability.Encoding</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L66-L88","name":"FirstOrder.Language.Term.listDecode_encode_list","line":66,"kind":"theorem","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode_encode_list\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode_encode_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\">listDecode</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">List.flatMap</a> <a href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\">listEncode</a> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L57-L64","name":"FirstOrder.Language.Term.listDecode","line":57,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode","doc":"Decodes a list of variables and function symbols as a list of terms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listDecode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listDecode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/ModelTheory/Encoding.lean#L51-L55","name":"FirstOrder.Language.Term.listEncode","line":51,"kind":"def","docLink":"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode","doc":"Encodes a term as a list of variables and function symbols. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/ModelTheory/Encoding.html#FirstOrder.Language.Term.listEncode\"><span class=\"name\">FirstOrder</span>.<span class=\"name\">Language</span>.<span class=\"name\">Term</span>.<span class=\"name\">listEncode</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language\">Language</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u'}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Syntax.html#FirstOrder.Language.Term\">Term</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) × <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Mathlib/ModelTheory/Basic.html#FirstOrder.Language.Functions\">Functions</a></span> <span class=\"fn\">i</span></span></span>)</span></span></div></div>"}]}