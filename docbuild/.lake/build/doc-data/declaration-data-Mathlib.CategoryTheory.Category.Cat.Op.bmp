{"name":"Mathlib.CategoryTheory.Category.Cat.Op","instances":[],"imports":["Init","Mathlib.CategoryTheory.Category.Cat","Mathlib.CategoryTheory.Opposites"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L36-L36","name":"CategoryTheory.Cat.opEquivalence_unitIso","line":36,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_unitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_unitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opEquivalence_unitIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence\">opEquivalence</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.unitIso\">unitIso</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">NatIso.ofComponents</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>) =&gt; <span class=\"fn\">{ <span class=\"fn\">hom</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.opOp\">opOp</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x</span>)</span></span></span>, <span class=\"fn\">inv</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.unopUnop\">unopUnop</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>, <span class=\"fn\">hom_inv_id</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">inv_hom_id</span> := <span class=\"fn\">⋯</span> }</span>)</span>\n    @<a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence._proof_8\">opEquivalence._proof_8</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L36-L36","name":"CategoryTheory.Cat.opEquivalence_inverse","line":36,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_inverse","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_inverse\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opEquivalence_inverse</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence\">opEquivalence</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.inverse\">inverse</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L36-L36","name":"CategoryTheory.Cat.opEquivalence_functor","line":36,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_functor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_functor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opEquivalence_functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence\">opEquivalence</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.functor\">functor</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L36-L36","name":"CategoryTheory.Cat.opEquivalence_counitIso","line":36,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_counitIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence_counitIso\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opEquivalence_counitIso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence\">opEquivalence</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence.counitIso\">counitIso</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/NatIso.html#CategoryTheory.NatIso.ofComponents\">NatIso.ofComponents</a>\n    <span class=\"fn\">(fun (<span class=\"fn\">x</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>) =&gt; <span class=\"fn\">{ <span class=\"fn\">hom</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.unopUnop\">unopUnop</a> <span class=\"fn\">↑<span class=\"fn\">x</span></span></span>, <span class=\"fn\">inv</span> := <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.opOp\">opOp</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x</span>)</span></span></span>, <span class=\"fn\">hom_inv_id</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">inv_hom_id</span> := <span class=\"fn\">⋯</span> }</span>)</span>\n    @<a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence._proof_9\">opEquivalence._proof_9</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L35-L41","name":"CategoryTheory.Cat.opEquivalence","line":35,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence","doc":"The equivalence `Cat ≌ Cat` associating each category with its opposite category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opEquivalence\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L31-L31","name":"CategoryTheory.Cat.opFunctorInvolutive_hom_app_obj","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_hom_app_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_hom_app_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctorInvolutive_hom_app_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\">(↑<span class=\"fn\">X</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive\">opFunctorInvolutive</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">X✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L31-L31","name":"CategoryTheory.Cat.opFunctorInvolutive_inv_app_obj","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_inv_app_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_inv_app_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctorInvolutive_inv_app_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X✝</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive\">opFunctorInvolutive</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">X✝</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L31-L31","name":"CategoryTheory.Cat.opFunctorInvolutive_inv_app_map","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_inv_app_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_inv_app_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctorInvolutive_inv_app_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">↑<span class=\"fn\">X</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive\">opFunctorInvolutive</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L31-L31","name":"CategoryTheory.Cat.opFunctorInvolutive_hom_app_map","line":31,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_hom_app_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive_hom_app_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctorInvolutive_hom_app_map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">(↑<span class=\"fn\">X</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive\">opFunctorInvolutive</a>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L29-L33","name":"CategoryTheory.Cat.opFunctorInvolutive","line":29,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive","doc":"The natural isomorphism between the double application of `Cat.opFunctor` and the\nidentity functor on `Cat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctorInvolutive\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctorInvolutive</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">Functor.id</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L24-L24","name":"CategoryTheory.Cat.opFunctor_map","line":24,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor_map\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctor_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">↑<span class=\"fn\">X✝</span></span> <span class=\"fn\">↑<span class=\"fn\">Y✝</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">F</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Functor.op\">op</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L24-L24","name":"CategoryTheory.Cat.opFunctor_obj","line":24,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor_obj\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctor_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\">opFunctor</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">C</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat.of\">of</a> <span class=\"fn\">(↑<span class=\"fn\">C</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/Cat/Op.lean#L23-L27","name":"CategoryTheory.Cat.opFunctor","line":23,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor","doc":"The endofunctor `Cat ⥤ Cat` assigning to each category its opposite category. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/Cat/Op.html#CategoryTheory.Cat.opFunctor\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">Cat</span>.<span class=\"name\">opFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a> <a href=\"./Mathlib/CategoryTheory/Category/Cat.html#CategoryTheory.Cat\">Cat</a></span></div></div>"}]}