{"name":"Mathlib.CategoryTheory.FintypeCat","instances":[{"typeNames":["FintypeCat","_builtin_typeu"],"name":"FintypeCat.instCoeSort","className":"CoeSort"},{"typeNames":["FintypeCat"],"name":"FintypeCat.instInhabited","className":"Inhabited"},{"typeNames":["FintypeCat.carrier"],"name":"FintypeCat.instFintypeCarrier","className":"Fintype"},{"typeNames":["FintypeCat"],"name":"FintypeCat.instCategory","className":"CategoryTheory.Category"},{"typeNames":["FintypeCat.incl"],"name":"FintypeCat.instFullIncl","className":"CategoryTheory.Functor.Full"},{"typeNames":["FintypeCat.incl"],"name":"FintypeCat.instFaithfulIncl","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["Quiver.Hom","FintypeCat.carrier","FintypeCat.carrier"],"name":"FintypeCat.instFunLikeHomCarrier","className":"DFunLike"},{"typeNames":["FintypeCat"],"name":"FintypeCat.concreteCategoryFintype","className":"CategoryTheory.ConcreteCategory"},{"typeNames":["CategoryTheory.forget"],"name":"FintypeCat.instFullForget","className":"CategoryTheory.Functor.Full"},{"typeNames":["Quiver.Hom"],"name":"FintypeCat.instFiniteHom","className":"Finite"},{"typeNames":["CategoryTheory.Iso"],"name":"FintypeCat.instFiniteIso","className":"Finite"},{"typeNames":["CategoryTheory.Aut"],"name":"FintypeCat.instFiniteAut","className":"Finite"},{"typeNames":["FintypeCat.Skeleton"],"name":"FintypeCat.Skeleton.instInhabited","className":"Inhabited"},{"typeNames":["FintypeCat.Skeleton"],"name":"FintypeCat.Skeleton.instSmallCategory","className":"CategoryTheory.Category"},{"typeNames":["FintypeCat.Skeleton.incl"],"name":"FintypeCat.Skeleton.instFullIncl","className":"CategoryTheory.Functor.Full"},{"typeNames":["FintypeCat.Skeleton.incl"],"name":"FintypeCat.Skeleton.instFaithfulIncl","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["FintypeCat.Skeleton.incl"],"name":"FintypeCat.Skeleton.instEssSurjIncl","className":"CategoryTheory.Functor.EssSurj"},{"typeNames":["FintypeCat.Skeleton.incl"],"name":"FintypeCat.Skeleton.instIsEquivalenceIncl","className":"CategoryTheory.Functor.IsEquivalence"},{"typeNames":["FintypeCat.uSwitch"],"name":"FintypeCat.instIsEquivalenceUSwitch","className":"CategoryTheory.Functor.IsEquivalence"}],"imports":["Init","Mathlib.CategoryTheory.ConcreteCategory.Basic","Mathlib.CategoryTheory.Endomorphism","Mathlib.CategoryTheory.Skeletal","Mathlib.Data.Finite.Prod"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L272-L274","name":"FunctorToFintypeCat.naturality","line":272,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FunctorToFintypeCat.naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FunctorToFintypeCat.naturality\"><span class=\"name\">FunctorToFintypeCat</span>.<span class=\"name\">naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">C</span> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">C</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">σ</span> : <span class=\"fn\">F</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">G</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">σ</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">Y</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">σ</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L259-L260","name":"FintypeCat.instIsEquivalenceUSwitch","line":259,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instIsEquivalenceUSwitch","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instIsEquivalenceUSwitch\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instIsEquivalenceUSwitch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Functor.IsEquivalence\">IsEquivalence</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L245-L257","name":"FintypeCat.uSwitchEquivalence","line":245,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquivalence","doc":"`uSwitch.{u, v}` is an equivalence of categories with quasi-inverse `uSwitch.{v, u}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquivalence\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitchEquivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L235-L243","name":"FintypeCat.uSwitch_map_uSwitch_map","line":235,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch_map_uSwitch_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch_map_uSwitch_map\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitch_map_uSwitch_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">Y</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.trans\">trans</a></span> <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L230-L233","name":"FintypeCat.uSwitchEquiv_symm_naturality","line":230,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv_symm_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv_symm_naturality\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitchEquiv_symm_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L225-L228","name":"FintypeCat.uSwitchEquiv_naturality","line":225,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv_naturality","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv_naturality\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitchEquiv_naturality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\">uSwitchEquiv</a></span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L218-L223","name":"FintypeCat.uSwitchEquiv","line":218,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv","doc":"Switching the universe of an object `X : FintypeCat.{u}` does not change `X` up to equivalence\nof types. This is natural in the sense that it commutes with `uSwitch.map f` for\nany `f : X ⟶ Y` in `FintypeCat.{u}`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitchEquiv\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitchEquiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\">uSwitch</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L210-L216","name":"FintypeCat.uSwitch","line":210,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch","doc":"If `u` and `v` are two arbitrary universes, we may construct a functor\n`uSwitch.{u, v} : FintypeCat.{u} ⥤ FintypeCat.{v}` by sending\n`X : FintypeCat.{u}` to `ULift.{v} (Fin (Fintype.card X))`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.uSwitch\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">uSwitch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L201-L204","name":"FintypeCat.isSkeleton","line":201,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.isSkeleton","doc":"`Fintype.Skeleton` is a skeleton of `Fintype`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.isSkeleton\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">isSkeleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Skeletal.html#CategoryTheory.IsSkeletonOf\">CategoryTheory.IsSkeletonOf</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">Skeleton.incl</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L194-L197","name":"FintypeCat.Skeleton.incl_mk_nat_card","line":194,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl_mk_nat_card","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl_mk_nat_card\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">incl_mk_nat_card</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Card.html#Fintype.card\">Fintype.card</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">incl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.mk\">mk</a> <span class=\"fn\">n</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L190-L192","name":"FintypeCat.Skeleton.equivalence","line":190,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.equivalence","doc":"The equivalence between `Fintype.Skeleton` and `Fintype`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.equivalence\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">equivalence</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L188-L188","name":"FintypeCat.Skeleton.instIsEquivalenceIncl","line":188,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instIsEquivalenceIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instIsEquivalenceIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instIsEquivalenceIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Functor.IsEquivalence\">IsEquivalence</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L180-L186","name":"FintypeCat.Skeleton.instEssSurjIncl","line":180,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instEssSurjIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instEssSurjIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instEssSurjIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/EssentialImage.html#CategoryTheory.Functor.EssSurj\">EssSurj</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L178-L178","name":"FintypeCat.Skeleton.instFaithfulIncl","line":178,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instFaithfulIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instFaithfulIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instFaithfulIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L176-L176","name":"FintypeCat.Skeleton.instFullIncl","line":176,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instFullIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instFullIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instFullIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L171-L174","name":"FintypeCat.Skeleton.incl","line":171,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl","doc":"The canonical fully faithful embedding of `Fintype.Skeleton` into `FintypeCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.incl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">incl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L150-L169","name":"FintypeCat.Skeleton.is_skeletal","line":150,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.is_skeletal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.is_skeletal\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">is_skeletal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Skeletal.html#CategoryTheory.Skeletal\">CategoryTheory.Skeletal</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L145-L148","name":"FintypeCat.Skeleton.instSmallCategory","line":145,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instSmallCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instSmallCategory\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instSmallCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.SmallCategory\">CategoryTheory.SmallCategory</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L141-L141","name":"FintypeCat.Skeleton.ext_iff","line":141,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.ext_iff\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len\">len</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len\">len</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L141-L143","name":"FintypeCat.Skeleton.ext","line":141,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.ext\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len\">len</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len\">len</a></span> → <span class=\"fn\">X</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">Y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L137-L139","name":"FintypeCat.Skeleton.len","line":137,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len","doc":"Given any object of `Fintype.Skeleton`, this returns the associated natural number. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.len\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">len</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a> → <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L134-L135","name":"FintypeCat.Skeleton.instInhabited","line":134,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.instInhabited\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L130-L132","name":"FintypeCat.Skeleton.mk","line":130,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.mk","doc":"Given any natural number `n`, this creates the associated object of `Fintype.Skeleton`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton.mk\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a> → <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\">Skeleton</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L118-L126","name":"FintypeCat.Skeleton","line":118,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton","doc":"The \"standard\" skeleton for `FintypeCat`. This is the full subcategory of `FintypeCat`\nspanned by objects of the form `ULift (Fin n)` for `n : ℕ`. We parameterize the objects\nof `Fintype.Skeleton` directly as `ULift ℕ`, as the type `ULift (Fin m) ≃ ULift (Fin n)`\nis nonempty if and only if `n = m`. Specifying universes, `Skeleton : Type u` is a small\nskeletal category equivalent to `Fintype.{u}`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.Skeleton\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">Skeleton</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L113-L114","name":"FintypeCat.instFiniteAut","line":113,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteAut","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteAut\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFiniteAut</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Endomorphism.html#CategoryTheory.Aut\">CategoryTheory.Aut</a> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L110-L111","name":"FintypeCat.instFiniteIso","line":110,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteIso\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFiniteIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> (<span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L107-L108","name":"FintypeCat.instFiniteHom","line":107,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteHom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFiniteHom\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFiniteHom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Finite/Defs.html#Finite\">Finite</a> (<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L94-L94","name":"FintypeCat.equivEquivIso_apply_inv","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_apply_inv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_apply_inv\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">equivEquivIso_apply_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L94-L94","name":"FintypeCat.equivEquivIso_symm_apply_symm_apply","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_symm_apply_symm_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_symm_apply_symm_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">equivEquivIso_symm_apply_symm_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L94-L94","name":"FintypeCat.equivEquivIso_symm_apply_apply","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_symm_apply_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_symm_apply_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">equivEquivIso_symm_apply_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a>.<a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv.symm\">symm</a></span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L94-L94","name":"FintypeCat.equivEquivIso_apply_hom","line":94,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_apply_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso_apply_hom\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">equivEquivIso_apply_hom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\">equivEquivIso</a> <span class=\"fn\">e</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">e</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L93-L105","name":"FintypeCat.equivEquivIso","line":93,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso","doc":"Equivalences between finite types are the same as isomorphisms in `FintypeCat`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.equivEquivIso\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">equivEquivIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">A </span><span class=\"fn\">B</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">A</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> <span class=\"fn\"><span class=\"fn\">B</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <a href=\"./Mathlib/Logic/Equiv/Defs.html#Equiv\">≃</a> (<span class=\"fn\">A</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">B</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L87-L87","name":"FintypeCat.hom_ext_iff","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_ext_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_ext_iff\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">hom_ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L87-L90","name":"FintypeCat.hom_ext","line":87,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_ext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_ext\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">hom_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L84-L85","name":"FintypeCat.inv_hom_id_apply","line":84,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.inv_hom_id_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.inv_hom_id_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">inv_hom_id_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">y</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L80-L81","name":"FintypeCat.hom_inv_id_apply","line":80,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_inv_id_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.hom_inv_id_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">hom_inv_id_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L75-L77","name":"FintypeCat.comp_apply","line":75,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.comp_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.comp_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">comp_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">Z</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">Y</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Z</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">f</span> <span class=\"fn\">g</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L71-L73","name":"FintypeCat.id_apply","line":71,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.id_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.id_apply\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">id_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">X</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L69-L69","name":"FintypeCat.instFullForget","line":69,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFullForget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFullForget\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFullForget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.forget\">CategoryTheory.forget</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L64-L66","name":"FintypeCat.concreteCategoryFintype","line":64,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.concreteCategoryFintype","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.concreteCategoryFintype\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">concreteCategoryFintype</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory\">CategoryTheory.ConcreteCategory</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">x2</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L60-L62","name":"FintypeCat.instFunLikeHomCarrier","line":60,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFunLikeHomCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFunLikeHomCarrier\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFunLikeHomCarrier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/FunLike/Basic.html#FunLike\">FunLike</a> (<span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span> <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L58-L58","name":"FintypeCat.instFaithfulIncl","line":58,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFaithfulIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFaithfulIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFaithfulIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L57-L57","name":"FintypeCat.instFullIncl","line":57,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFullIncl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFullIncl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFullIncl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl\">incl</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L53-L53","name":"FintypeCat.incl_obj","line":53,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl_obj\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">incl_obj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl\">incl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">self</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L53-L53","name":"FintypeCat.incl_map","line":53,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl_map\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">incl_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FullSubcategory.html#CategoryTheory.InducedCategory\">CategoryTheory.InducedCategory</a> <a href=\"./foundational_types.html\">(Type</a> u_1) <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\">X✝</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl\">incl</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L52-L55","name":"FintypeCat.incl","line":52,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl","doc":"The fully faithful embedding of `FintypeCat` into the category of types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.incl\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">incl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L49-L50","name":"FintypeCat.instCategory","line":49,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instCategory","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instCategory\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instCategory</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">CategoryTheory.Category.{u_1, u_1 + 1}</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L46-L47","name":"FintypeCat.instFintypeCarrier","line":46,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFintypeCarrier","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instFintypeCarrier\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instFintypeCarrier</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L43-L44","name":"FintypeCat.instInhabited","line":43,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instInhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instInhabited\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L39-L41","name":"FintypeCat.of","line":39,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.of","doc":"Construct a bundled `FintypeCat` from the underlying type and typeclass. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.of\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">of</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L36-L37","name":"FintypeCat.instCoeSort","line":36,"kind":"instance","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instCoeSort","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.instCoeSort\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">instCoeSort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeSort\">CoeSort</a> <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a> <a href=\"./foundational_types.html\">(Type</a> u_1)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L30-L30","name":"FintypeCat.str","line":30,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.str","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.str\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\">carrier</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L29-L29","name":"FintypeCat.carrier","line":29,"kind":"def","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier","doc":"The underlying type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.carrier\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">carrier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L27-L27","name":"FintypeCat.mk","line":27,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat.mk\"><span class=\"name\">FintypeCat</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">carrier</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">str</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fintype/Defs.html#Fintype\">Fintype</a> <span class=\"fn\">carrier</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\">FintypeCat</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/FintypeCat.lean#L26-L30","name":"FintypeCat","line":26,"kind":"structure","docLink":"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat","doc":"The category of finite types. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/FintypeCat.html#FintypeCat\"><span class=\"name\">FintypeCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (u_1 + 1)</div></div>"}]}