{"name":"Mathlib.Computability.TMConfig","instances":[{"typeNames":["Eq"],"name":"Turing.ToPartrec.instDecidableEqCode","className":"Decidable"},{"typeNames":["Turing.ToPartrec.Code"],"name":"Turing.ToPartrec.instInhabitedCode","className":"Inhabited"},{"typeNames":["Turing.ToPartrec.Cont"],"name":"Turing.ToPartrec.instInhabitedCont","className":"Inhabited"},{"typeNames":["Turing.ToPartrec.Cfg"],"name":"Turing.ToPartrec.instInhabitedCfg","className":"Inhabited"}],"imports":["Init","Mathlib.Computability.Halting","Mathlib.Computability.PostTuringMachine","Mathlib.Tactic.DeriveFintype"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L680-L703","name":"Turing.ToPartrec.stepRet_eval","line":680,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepRet_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/PostTuringMachine.html#Turing.eval\">eval</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\">step</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet\">stepRet</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.halt\">Cfg.halt</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L677-L678","name":"Turing.ToPartrec.stepNormal_eval","line":677,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepNormal_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/PostTuringMachine.html#Turing.eval\">eval</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\">step</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.halt\">Cont.halt</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.halt\">Cfg.halt</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L655-L675","name":"Turing.ToPartrec.code_is_ok","line":655,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.code_is_ok","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.code_is_ok\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">code_is_ok</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok\">Ok</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L583-L653","name":"Turing.ToPartrec.cont_eval_fix","line":583,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.cont_eval_fix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.cont_eval_fix\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">cont_eval_fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fok</span> : <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok\">Ok</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/PostTuringMachine.html#Turing.eval\">eval</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\">step</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.fix\">Cont.fix</a> <span class=\"fn\">f</span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">v</span> ← <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix\">fix</a></span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span>\n  <span class=\"fn\"><a href=\"./Mathlib/Computability/PostTuringMachine.html#Turing.eval\">eval</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\">step</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.ret\">Cfg.ret</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L572-L581","name":"Turing.ToPartrec.stepNormal.is_ret","line":572,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal.is_ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal.is_ret\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepNormal</span>.<span class=\"name\">is_ret</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">k'</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>) (<span class=\"fn\">v'</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">c</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.ret\">Cfg.ret</a> <span class=\"fn\">k'</span> <span class=\"fn\">v'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L567-L570","name":"Turing.ToPartrec.Code.Ok.zero","line":567,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok.zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok.zero\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">Ok</span>.<span class=\"name\">zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok\">Ok</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/PostTuringMachine.html#Turing.eval\">Turing.eval</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\">step</a> <span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">c</span> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.halt\">Cont.halt</a> <span class=\"fn\">v</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.halt\">Cfg.halt</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L556-L565","name":"Turing.ToPartrec.Code.Ok","line":556,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok","doc":"This is a temporary definition, because we will prove in `code_is_ok` that it always holds.\nIt asserts that `c` is semantically correct; that is, for any `k` and `v`,\n`eval (stepNormal c k v) = eval (Cfg.ret k (Code.eval c v))`, as an equality of partial values\n(so one diverges iff the other does).\n\nIn particular, we can let `k = Cont.halt`, and then this asserts that `stepNormal c Cont.halt v`\nevaluates to `Cfg.halt (Code.eval c v)`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.Ok\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">Ok</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L539-L554","name":"Turing.ToPartrec.stepRet_then","line":539,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet_then","doc":"The `stepRet` function respects the `then k'` homomorphism. Note that this is an exact\nequality, not a simulation; the original and embedded machines move in lock-step until the\nembedded machine reaches the halt state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet_then\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepRet_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet\">stepRet</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then\">then</a></span> <span class=\"fn\">k'</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet\">stepRet</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.then\">then</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L527-L537","name":"Turing.ToPartrec.stepNormal_then","line":527,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal_then","doc":"The `stepNormal` function respects the `then k'` homomorphism. Note that this is an exact\nequality, not a simulation; the original and embedded machines move in lock-step until the\nembedded machine reaches the halt state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal_then\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepNormal_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then\">then</a></span> <span class=\"fn\">k'</span>)</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\">stepNormal</a> <span class=\"fn\">c</span> <span class=\"fn\">k</span> <span class=\"fn\">v</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.then\">then</a></span> <span class=\"fn\">k'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L520-L525","name":"Turing.ToPartrec.Cfg.then","line":520,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.then","doc":"The `then k` function is a \"configuration homomorphism\". Its operation on states is to append\n`k` to the continuation of a `Cfg.ret` state, and to run `k` on `v` if we are in the `Cfg.halt v`\nstate. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.then\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cfg</span>.<span class=\"name\">then</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L510-L518","name":"Turing.ToPartrec.Cont.then_eval","line":510,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">then_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then\">then</a></span> <span class=\"fn\">k'</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\"><span class=\"fn\">k'</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval\">eval</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L491-L508","name":"Turing.ToPartrec.Cont.then","line":491,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then","doc":"In order to extract a compositional semantics from the sequential execution behavior of\nconfigurations, we observe that continuations have a monoid structure, with `Cont.halt` as the unit\nand `Cont.then` as the multiplication. `Cont.then k₁ k₂` runs `k₁` until it halts, and then takes\nthe result of `k₁` and passes it to `k₂`.\n\nWe will not prove it is associative (although it is), but we are instead interested in the\nassociativity law `k₂ (eval c k₁) = eval c (k₁.then k₂)`. This holds at both the sequential and\ncompositional levels, and allows us to express running a machine without the ambient continuation\nand relate it to the original machine's evaluation steps. In the literature this is usually\nwhere one uses Turing machines embedded inside other Turing machines, but this approach allows us\nto avoid changing the ambient type `Cfg` in the middle of the recursion.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.then\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">then</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L484-L489","name":"Turing.ToPartrec.step","line":484,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step","doc":"If we are not done (in `Cfg.halt` state), then we must be still stuck on a continuation, so\nthis main loop calls `stepRet` with the new continuation. The overall `step` function transitions\nfrom one `Cfg` to another, only halting at the `Cfg.halt` state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.step\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">step</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L464-L482","name":"Turing.ToPartrec.stepRet","line":464,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet","doc":"Evaluating a continuation `k : Cont` on input `v : List ℕ`. This is the second part of\nevaluation, when we receive results from continuations built by `stepNormal`.\n\n* `Cont.halt v = v`, so we are done and transition to the `Cfg.halt v` state\n* `Cont.cons₁ fs as k v = k (v.headI :: fs as)`, so we evaluate `fs as` now with the continuation\n  `k (v.headI :: _)` (called `cons₂ v k`).\n* `Cont.cons₂ ns k v = k (ns.headI :: v)`, where we now have everything we need to evaluate\n  `ns.headI :: v`, so we return it to `k`.\n* `Cont.comp f k v = k (f v)`, so we call `f v` with `k` as the continuation.\n* `Cont.fix f k v = k (if v.headI = 0 then k v.tail else fix f v.tail)`, where `v` is a value,\n  so we evaluate the if statement and either call `k` with `v.tail`, or call `fix f v` with `k` as\n  the continuation (which immediately calls `f` with `Cont.fix f k` as the continuation).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepRet\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepRet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L437-L462","name":"Turing.ToPartrec.stepNormal","line":437,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal","doc":"Evaluating `c : Code` in a continuation `k : Cont` and input `v : List ℕ`. This goes by\nrecursion on `c`, building an augmented continuation and a value to pass to it.\n\n* `zero' v = 0 :: v` evaluates immediately, so we return it to the parent continuation\n* `succ v = [v.headI.succ]` evaluates immediately, so we return it to the parent continuation\n* `tail v = v.tail` evaluates immediately, so we return it to the parent continuation\n* `cons f fs v = (f v).headI :: fs v` requires two sub-evaluations, so we evaluate\n  `f v` in the continuation `k (_.headI :: fs v)` (called `Cont.cons₁ fs v k`)\n* `comp f g v = f (g v)` requires two sub-evaluations, so we evaluate\n  `g v` in the continuation `k (f _)` (called `Cont.comp f k`)\n* `case f g v = v.head.casesOn (f v.tail) (fun n => g (n :: v.tail))` has the information needed\n  to evaluate the case statement, so we do that and transition to either\n  `f v` or `g (n :: v.tail)`.\n* `fix f v = let v' := f v; if v'.headI = 0 then k v'.tail else fix f v'.tail`\n  needs to first evaluate `f v`, so we do that and leave the rest for the continuation (called\n  `Cont.fix f k`)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.stepNormal\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">stepNormal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L435-L435","name":"Turing.ToPartrec.instInhabitedCfg","line":435,"kind":"instance","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCfg","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCfg\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">instInhabitedCfg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L434-L434","name":"Turing.ToPartrec.Cfg.ret","line":434,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.ret","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.ret\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cfg</span>.<span class=\"name\">ret</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L433-L433","name":"Turing.ToPartrec.Cfg.halt","line":433,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.halt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg.halt\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cfg</span>.<span class=\"name\">halt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\">Cfg</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L425-L435","name":"Turing.ToPartrec.Cfg","line":425,"kind":"inductive","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg","doc":"The set of configurations of the machine:\n\n* `halt v`: The machine is about to stop and `v : List ℕ` is the result.\n* `ret k v`: The machine is about to pass `v : List ℕ` to continuation `k : Cont`.\n\nWe don't have a state corresponding to normal evaluation because these are evaluated immediately\nto a `ret` \"in zero steps\" using the `stepNormal` function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cfg\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cfg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L415-L423","name":"Turing.ToPartrec.Cont.eval","line":415,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval","doc":"The semantics of a continuation. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L413-L413","name":"Turing.ToPartrec.instInhabitedCont","line":413,"kind":"instance","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCont","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCont\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">instInhabitedCont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L412-L412","name":"Turing.ToPartrec.Cont.fix","line":412,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.fix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.fix\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">fix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L411-L411","name":"Turing.ToPartrec.Cont.comp","line":411,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.comp\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L410-L410","name":"Turing.ToPartrec.Cont.cons₂","line":410,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.cons₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.cons₂\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">cons₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L409-L409","name":"Turing.ToPartrec.Cont.cons₁","line":409,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.cons₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.cons₁\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">cons₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> → <span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L408-L408","name":"Turing.ToPartrec.Cont.halt","line":408,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.halt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont.halt\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span>.<span class=\"name\">halt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\">Cont</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L406-L413","name":"Turing.ToPartrec.Cont","line":406,"kind":"inductive","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont","doc":"The type of continuations, built up during evaluation of a `Code` expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Cont\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Cont</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L259-L365","name":"Turing.ToPartrec.Code.exists_code","line":259,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.exists_code","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.exists_code\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">exists_code</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Mathlib/Computability/Halting.html#Nat.Partrec'\">Nat.Partrec'</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L237-L257","name":"Turing.ToPartrec.Code.exists_code.comp","line":237,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.exists_code.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.exists_code.comp\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">exists_code</span>.<span class=\"name\">comp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">m</span></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">n</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>), <span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">m</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ (<span class=\"fn\">c</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>), <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Vector/Defs.html#List.Vector\">List.Vector</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <span class=\"fn\">m</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">↑<span class=\"fn\">v</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> (<span class=\"fn\">(<a href=\"./Mathlib/Data/Vector/Basic.html#List.Vector.mOfFn\">List.Vector.mOfFn</a> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">n</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span> <span class=\"fn\">v</span></span></span>)</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L204-L233","name":"Turing.ToPartrec.Code.prec","line":204,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.prec","doc":"`prec f g` implements the `prec` (primitive recursion) operation of partial recursive\nfunctions. `prec f g` evaluates as:\n\n* `prec f g [] = [f []]`\n* `prec f g (0 :: v) = [f v]`\n* `prec f g (n+1 :: v) = [g (n :: prec f g (n :: v) :: v)]`\n\nIt is implemented as:\n\n    G (a :: b :: IH :: v) = (b :: a+1 :: b-1 :: g (a :: IH :: v) :: v)\n    F (0 :: f_v :: v) = (f_v :: v)\n    F (n+1 :: f_v :: v) = (fix G (0 :: n :: f_v :: v)).tail.tail\n    prec f g (a :: v) = [(F (a :: f v :: v)).head]\n\nBecause `fix` always evaluates its body at least once, we must special case the `0` case to avoid\ncalling `g` more times than necessary (which could be bad if `g` diverges). If the input is\n`0 :: v`, then `F (0 :: f v :: v) = (f v :: v)` so we return `[f v]`. If the input is `n+1 :: v`,\nwe evaluate the function from the bottom up, with initial state `0 :: n :: f v :: v`. The first\nnumber counts up, providing arguments for the applications to `g`, while the second number counts\ndown, providing the exit condition (this is the initial `b` in the return value of `G`, which is\nstripped by `fix`). After the `fix` is complete, the final state is `n :: 0 :: res :: v` where\n`res` is the desired result, and the rest reduces this to `[res]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.prec\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">prec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L190-L202","name":"Turing.ToPartrec.Code.rfind","line":190,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.rfind","doc":"`rfind f` performs the function of the `rfind` primitive of partial recursive functions.\n`rfind f v` returns the smallest `n` such that `(f (n :: v)).head = 0`.\n\nIt is implemented as:\n\n    rfind f v = pred (fix (fun (n::v) => f (n::v) :: n+1 :: v) (0 :: v))\n\nThe idea is that the initial state is `0 :: v`, and the `fix` keeps `n :: v` as its internal state;\nit calls `f (n :: v)` as the exit test and `n+1 :: v` as the next state. At the end we get\n`n+1 :: v` where `n` is the desired output, and `pred (n+1 :: v) = [n]` returns the result.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.rfind\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">rfind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L186-L188","name":"Turing.ToPartrec.Code.pred_eval","line":186,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.pred_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.pred_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">pred_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.pred\">pred</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span>.<a href=\"./Init/Prelude.html#Nat.pred\">pred</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L181-L184","name":"Turing.ToPartrec.Code.pred","line":181,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.pred","doc":"`pred` returns the predecessor of the head of the input:\n`pred [] = [0]`, `pred (0 :: v) = [0]`, `pred (n+1 :: v) = [n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.pred\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">pred</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L178-L179","name":"Turing.ToPartrec.Code.zero_eval","line":178,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">zero_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero\">zero</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">0</span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L174-L176","name":"Turing.ToPartrec.Code.zero","line":174,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero","doc":"`zero` is the constant zero function: `zero v = [0]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L171-L172","name":"Turing.ToPartrec.Code.head_eval","line":171,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.head_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.head_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">head_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.head\">head</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L167-L169","name":"Turing.ToPartrec.Code.head","line":167,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.head","doc":"`head` gets the head of the input list: `head [] = [0]`, `head (n :: v) = [n]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.head\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">head</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L164-L165","name":"Turing.ToPartrec.Code.id_eval","line":164,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.id_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.id_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">id_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.id\">id</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">v</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L160-L162","name":"Turing.ToPartrec.Code.id","line":160,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.id","doc":"`id` is the identity function: `id v = v`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.id\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">id</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L157-L158","name":"Turing.ToPartrec.Code.nil_eval","line":157,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.nil_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.nil_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">nil_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.nil\">nil</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L153-L155","name":"Turing.ToPartrec.Code.nil","line":153,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.nil","doc":"`nil` is the constant nil function: `nil v = []`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.nil\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L147-L151","name":"Turing.ToPartrec.Code.fix_eval","line":147,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">fix_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix\">fix</a></span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/Data/PFun.html#PFun.fix\">PFun.fix</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt;\n    <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part.map\">Part.map</a> <span class=\"fn\">(fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L142-L145","name":"Turing.ToPartrec.Code.case_eval","line":142,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.case_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.case_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">case_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.case\">case</a></span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt;\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat.rec\">Nat.rec</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span>)</span> <span class=\"fn\">(fun (<span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>) (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Part.html#Part\">Part</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L139-L140","name":"Turing.ToPartrec.Code.comp_eval","line":139,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.comp_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.comp_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">comp_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">g</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.comp\">comp</a></span> <span class=\"fn\">g</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L133-L137","name":"Turing.ToPartrec.Code.cons_eval","line":133,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.cons_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.cons_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">cons_eval</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">fs</span> : <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.cons\">cons</a></span> <span class=\"fn\">fs</span>)</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\">do\n  let <span class=\"fn\">n</span> ← <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span>\n  let <span class=\"fn\">ns</span> ← <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">fs</span>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <span class=\"fn\">v</span></span>\n  <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> (<span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ns</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L130-L131","name":"Turing.ToPartrec.Code.tail_eval","line":130,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.tail_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.tail_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">tail_eval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.tail\">tail</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L127-L128","name":"Turing.ToPartrec.Code.succ_eval","line":127,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.succ_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.succ_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">succ_eval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.succ\">succ</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">v</span>.<a href=\"./Mathlib/Data/List/Defs.html#List.headI\">headI</a></span>.<a href=\"./Init/Prelude.html#Nat.succ\">succ</a></span><a href=\"./Init/Prelude.html#List.cons\">]</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L124-L125","name":"Turing.ToPartrec.Code.zero'_eval","line":124,"kind":"theorem","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero'_eval","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero'_eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">zero'_eval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero'\">zero'</a>.<a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\">eval</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">v</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">v</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L83-L120","name":"Turing.ToPartrec.Code.eval","line":83,"kind":"def","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval","doc":"The semantics of the `Code` primitives, as partial functions `List ℕ →. List ℕ`. By convention\nwe functions that return a single result return a singleton `[n]`, or in some cases `n :: v` where\n`v` will be ignored by a subsequent function.\n\n* `zero'` appends a `0` to the input. That is, `zero' v = 0 :: v`.\n* `succ` returns the successor of the head of the input, defaulting to zero if there is no head:\n  * `succ [] = [1]`\n  * `succ (n :: v) = [n + 1]`\n* `tail` returns the tail of the input\n  * `tail [] = []`\n  * `tail (n :: v) = v`\n* `cons f fs` calls `f` and `fs` on the input and conses the results:\n  * `cons f fs v = (f v).head :: fs v`\n* `comp f g` calls `f` on the output of `g`:\n  * `comp f g v = f (g v)`\n* `case f g` cases on the head of the input, calling `f` or `g` depending on whether it is zero or\n  a successor (similar to `Nat.casesOn`).\n  * `case f g [] = f []`\n  * `case f g (0 :: v) = f v`\n  * `case f g (n+1 :: v) = g (n :: v)`\n* `fix f` calls `f` repeatedly, using the head of the result of `f` to decide whether to call `f`\n  again or finish:\n  * `fix f v = []` if `f v = []`\n  * `fix f v = w` if `f v = 0 :: w`\n  * `fix f v = fix f w` if `f v = n+1 :: w` (the exact value of `n` is discarded)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.eval\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">eval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> <a href=\"./Mathlib/Data/PFun.html#PFun\">→.</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L81-L81","name":"Turing.ToPartrec.instInhabitedCode","line":81,"kind":"instance","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instInhabitedCode\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">instInhabitedCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L81-L81","name":"Turing.ToPartrec.instDecidableEqCode","line":81,"kind":"instance","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instDecidableEqCode","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.instDecidableEqCode\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">instDecidableEqCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L80-L80","name":"Turing.ToPartrec.Code.fix","line":80,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.fix\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">fix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L79-L79","name":"Turing.ToPartrec.Code.case","line":79,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.case","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.case\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">case</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L78-L78","name":"Turing.ToPartrec.Code.comp","line":78,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.comp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.comp\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">comp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L77-L77","name":"Turing.ToPartrec.Code.cons","line":77,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.cons\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">cons</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a> → <a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L76-L76","name":"Turing.ToPartrec.Code.tail","line":76,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.tail","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.tail\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L75-L75","name":"Turing.ToPartrec.Code.succ","line":75,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.succ","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.succ\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">succ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L74-L74","name":"Turing.ToPartrec.Code.zero'","line":74,"kind":"ctor","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code.zero'\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span>.<span class=\"name\">zero'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\">Code</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Computability/TMConfig.lean#L71-L81","name":"Turing.ToPartrec.Code","line":71,"kind":"inductive","docLink":"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code","doc":"The type of codes for primitive recursive functions. Unlike `Nat.Partrec.Code`, this uses a set\nof operations on `List ℕ`. See `Code.eval` for a description of the behavior of the primitives. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Computability/TMConfig.html#Turing.ToPartrec.Code\"><span class=\"name\">Turing</span>.<span class=\"name\">ToPartrec</span>.<span class=\"name\">Code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}