{"name":"Mathlib.Data.String.Lemmas","instances":[],"imports":["Init","Mathlib.Data.Nat.Notation","Mathlib.Data.String.Defs","Mathlib.Tactic.Basic","Batteries.Tactic.Alias"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L38-L39","name":"String.leftpad_suffix","line":38,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_suffix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_suffix\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/String/Defs.html#String.IsSuffix\">IsSuffix</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L35-L36","name":"String.leftpad_prefix","line":35,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_prefix","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_prefix\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.replicate\">replicate</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span>) <span class=\"fn\">c</span>)</span>.<a href=\"./Mathlib/Data/String/Defs.html#String.IsPrefix\">IsPrefix</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L32-L33","name":"String.leftpad_length","line":32,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.leftpad_length","doc":"**Alias** of `String.length_leftpad`.\n\n---\n\nThe length of the String returned by `String.leftpad n a c` is equal\nto the larger of `n` and `s.length` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.leftpad_length\"><span class=\"name\">String</span>.<span class=\"name\">leftpad_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L26-L30","name":"String.length_leftpad","line":26,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_leftpad","doc":"The length of the String returned by `String.leftpad n a c` is equal\nto the larger of `n` and `s.length` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_leftpad\"><span class=\"name\">String</span>.<span class=\"name\">length_leftpad</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.leftpad\">leftpad</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Max.max\">max</a> <span class=\"fn\">n</span> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L23-L24","name":"String.length_eq_list_length","line":23,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_eq_list_length","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_eq_list_length\"><span class=\"name\">String</span>.<span class=\"name\">length_eq_list_length</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\">l</span> }</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L20-L21","name":"String.length_replicate","line":20,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.length_replicate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.length_replicate\"><span class=\"name\">String</span>.<span class=\"name\">length_replicate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/String/Defs.html#String.replicate\">replicate</a> <span class=\"fn\">n</span> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Data/String/Basic.html#String.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/String/Lemmas.lean#L17-L18","name":"String.congr_append","line":17,"kind":"theorem","docLink":"./Mathlib/Data/String/Lemmas.html#String.congr_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/String/Lemmas.html#String.congr_append\"><span class=\"name\">String</span>.<span class=\"name\">congr_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">{ <span class=\"fn\">data</span> := <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#String.data\">data</a></span> }</span></div></div>"}]}