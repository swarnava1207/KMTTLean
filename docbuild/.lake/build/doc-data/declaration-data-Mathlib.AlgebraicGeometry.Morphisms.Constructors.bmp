{"name":"Mathlib.AlgebraicGeometry.Morphisms.Constructors","instances":[{"typeNames":["AlgebraicGeometry.AffineTargetMorphismProperty.toProperty"],"name":"AlgebraicGeometry.AffineTargetMorphismProperty.diagonal_respectsIso","className":"CategoryTheory.MorphismProperty.Respects"},{"typeNames":["AlgebraicGeometry.AffineTargetMorphismProperty.diagonal"],"name":"AlgebraicGeometry.HasAffineProperty.diagonal_affineProperty_isLocal","className":"AlgebraicGeometry.AffineTargetMorphismProperty.IsLocal"},{"typeNames":["CategoryTheory.MorphismProperty.diagonal","AlgebraicGeometry.AffineTargetMorphismProperty.diagonal"],"name":"AlgebraicGeometry.instHasAffinePropertyDiagonalSchemeDiagonal","className":"AlgebraicGeometry.HasAffineProperty"},{"typeNames":["CategoryTheory.MorphismProperty.diagonal"],"name":"AlgebraicGeometry.instIsLocalAtTargetDiagonalScheme","className":"AlgebraicGeometry.IsLocalAtTarget"},{"typeNames":["CategoryTheory.MorphismProperty.diagonal"],"name":"AlgebraicGeometry.instIsLocalAtSourceDiagonalSchemeOfHasOfPostcompPropertyOfRespectsRightIsOpenImmersion","className":"AlgebraicGeometry.IsLocalAtSource"}],"imports":["Init","Mathlib.AlgebraicGeometry.Morphisms.Basic","Mathlib.RingTheory.RingHomProperties"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L379-L386","name":"AlgebraicGeometry.AffineTargetMorphismProperty.isStableUnderBaseChange_of_isStableUnderBaseChangeOnAffine_of_isLocalAtTarget","line":379,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.isStableUnderBaseChange_of_isStableUnderBaseChangeOnAffine_of_isLocalAtTarget","doc":"If `P` is local at the target, to show that `P` is stable under base change, it suffices to\ncheck this for base change along a morphism of affine schemes. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.isStableUnderBaseChange_of_isStableUnderBaseChangeOnAffine_of_isLocalAtTarget\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">AffineTargetMorphismProperty</span>.<span class=\"name\">isStableUnderBaseChange_of_isStableUnderBaseChangeOnAffine_of_isLocalAtTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₂</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.of\">of</a> <span class=\"fn\">P</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.IsStableUnderBaseChange\">IsStableUnderBaseChange</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.IsStableUnderBaseChange\">IsStableUnderBaseChange</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L365-L373","name":"AlgebraicGeometry.stalkwise_Spec_map_iff","line":365,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_Spec_map_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_Spec_map_iff\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">stalkwise_Spec_map_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] → <span class=\"fn\">(<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span>) → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/RingHomProperties.html#RingHom.RespectsIso\">RingHom.RespectsIso</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat\">CommRingCat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">φ</span> : <span class=\"fn\">R</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise\">stalkwise</a> <span class=\"fn\">(fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Spec.map\">Spec.map</a> <span class=\"fn\">φ</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/Ideal/Defs.html#Ideal\">Ideal</a> <span class=\"fn\">↑<span class=\"fn\">S</span></span></span>) (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/RingTheory/Ideal/Prime.html#Ideal.IsPrime\">IsPrime</a></span>),\n    <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Localization/AtPrime.html#Localization.localRingHom\">Localization.localRingHom</a> <span class=\"fn\">(<a href=\"./Mathlib/RingTheory/Ideal/Maps.html#Ideal.comap\">Ideal.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat.Hom.hom\">CommRingCat.Hom.hom</a> <span class=\"fn\">φ</span>)</span> <span class=\"fn\">p</span>)</span> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Algebra/Category/Ring/Basic.html#CommRingCat.Hom.hom\">CommRingCat.Hom.hom</a> <span class=\"fn\">φ</span>)</span> <span class=\"fn\">⋯</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L351-L363","name":"AlgebraicGeometry.stalkwise_isLocalAtSource_of_respectsIso","line":351,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_isLocalAtSource_of_respectsIso","doc":"If `P` respects isos, then `stalkwise P` is local at the source. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_isLocalAtSource_of_respectsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">stalkwise_isLocalAtSource_of_respectsIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] → <span class=\"fn\">(<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span>) → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/RingHomProperties.html#RingHom.RespectsIso\">RingHom.RespectsIso</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise\">stalkwise</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L335-L349","name":"AlgebraicGeometry.stalkwiseIsLocalAtTarget_of_respectsIso","line":335,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwiseIsLocalAtTarget_of_respectsIso","doc":"If `P` respects isos, then `stalkwise P` is local at the target. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwiseIsLocalAtTarget_of_respectsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">stalkwiseIsLocalAtTarget_of_respectsIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] → <span class=\"fn\">(<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span>) → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/RingHomProperties.html#RingHom.RespectsIso\">RingHom.RespectsIso</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise\">stalkwise</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L321-L333","name":"AlgebraicGeometry.stalkwise_respectsIso","line":321,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_respectsIso","doc":"If `P` respects isos, then `stalkwise P` respects isos. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise_respectsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">stalkwise_respectsIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] → <span class=\"fn\">(<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span>) → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Mathlib/RingTheory/RingHomProperties.html#RingHom.RespectsIso\">RingHom.RespectsIso</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise\">stalkwise</a> <span class=\"fn\">fun {<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L312-L315","name":"AlgebraicGeometry.stalkwise","line":312,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise","doc":"`stalkwise P` holds for a morphism if all stalks satisfy `P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.stalkwise\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">stalkwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">R </span><span class=\"fn\">S</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">R</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <span class=\"fn\">S</span></span>] → <span class=\"fn\">(<span class=\"fn\">R</span> <a href=\"./Mathlib/Algebra/Ring/Hom/Defs.html#RingHom\">→+*</a> <span class=\"fn\">S</span>) → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L297-L308","name":"AlgebraicGeometry.topologically_isLocalAtSource'","line":297,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtSource'","doc":"A variant of `topologically_isLocalAtSource`\nthat takes one iff statement instead of two implications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtSource'\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_isLocalAtSource'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>) {<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}\n    (<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">X</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/OpenCover.html#TopologicalSpace.IsOpenCover\">TopologicalSpace.IsOpenCover</a> <span class=\"fn\">U</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> → (<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>)</span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L284-L295","name":"AlgebraicGeometry.topologically_isLocalAtSource","line":284,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtSource\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_isLocalAtSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₁</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> → <span class=\"fn\">∀ (<span class=\"fn\">U</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">X</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₂</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">X</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">X</span> → <span class=\"fn\">Y</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> →\n      <span class=\"fn\">∀ {<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">X</span></span></span>),\n        <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/OpenCover.html#TopologicalSpace.IsOpenCover\">TopologicalSpace.IsOpenCover</a> <span class=\"fn\">U</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Prelude.html#Subtype.val\">Subtype.val</a>)</span>)</span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L271-L282","name":"AlgebraicGeometry.topologically_isLocalAtTarget'","line":271,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtTarget'","doc":"A variant of `topologically_isLocalAtTarget`\nthat takes one iff statement instead of two implications. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtTarget'\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_isLocalAtTarget'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) {<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}\n    (<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">β</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/OpenCover.html#TopologicalSpace.IsOpenCover\">TopologicalSpace.IsOpenCover</a> <span class=\"fn\">U</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> → (<span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">U</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens.carrier\">carrier</a></span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.restrictPreimage\">restrictPreimage</a></span> <span class=\"fn\">f</span>)</span></span></span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L253-L269","name":"AlgebraicGeometry.topologically_isLocalAtTarget","line":253,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtTarget","doc":"To check that a topologically defined morphism property is local at the target,\nwe may check the corresponding properties on topological spaces. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isLocalAtTarget\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_isLocalAtTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₂</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) (<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <span class=\"fn\">β</span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#IsOpen\">IsOpen</a> <span class=\"fn\">s</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.restrictPreimage\">restrictPreimage</a></span> <span class=\"fn\">f</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₃</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) {<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u}\n    (<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens\">TopologicalSpace.Opens</a> <span class=\"fn\">β</span></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/OpenCover.html#TopologicalSpace.IsOpenCover\">TopologicalSpace.IsOpenCover</a> <span class=\"fn\">U</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#Continuous\">Continuous</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">U</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/Topology/Sets/Opens.html#TopologicalSpace.Opens.carrier\">carrier</a></span>.<a href=\"./Mathlib/Data/Set/Operations.html#Set.restrictPreimage\">restrictPreimage</a></span> <span class=\"fn\">f</span>)</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L242-L251","name":"AlgebraicGeometry.topologically_respectsIso","line":242,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_respectsIso","doc":"If a property of maps of topological spaces is satisfied by homeomorphisms and is stable\nunder composition, the induced property on schemes respects isomorphisms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_respectsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_respectsIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₁</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Topology/Homeomorph/Defs.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₂</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] [<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">γ</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)\n    (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L233-L240","name":"AlgebraicGeometry.topologically_iso_le","line":233,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_iso_le","doc":"If a property of maps of topological spaces is satisfied by all homeomorphisms,\nevery isomorphism of schemes satisfies the induced property. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_iso_le\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_iso_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Topology/Homeomorph/Defs.html#Homeomorph\">≃ₜ</a> <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.isomorphisms\">CategoryTheory.MorphismProperty.isomorphisms</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a>   <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L223-L231","name":"AlgebraicGeometry.topologically_isStableUnderComposition","line":223,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isStableUnderComposition","doc":"If a property of maps of topological spaces is stable under composition, the induced\nmorphism property of schemes is stable under composition. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically_isStableUnderComposition\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically_isStableUnderComposition</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\">inst_1</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] [<span class=\"fn\">inst_2</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">γ</span></span>] (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)\n    (<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">g</span></span> → <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">g</span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\">topologically</a> <span class=\"fn\">fun {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] [<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] =&gt; <span class=\"fn\">P</span></span>)</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Composition.html#CategoryTheory.MorphismProperty.IsStableUnderComposition\">IsStableUnderComposition</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L216-L219","name":"AlgebraicGeometry.topologically","line":216,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically","doc":"`topologically P` holds for a morphism if the underlying topological map satisfies `P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.topologically\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">topologically</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">α</span></span>] → <span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">β</span></span>] → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L195-L210","name":"AlgebraicGeometry.universally_isLocalAtSource","line":195,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.universally_isLocalAtSource","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.universally_isLocalAtSource\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">universally_isLocalAtSource</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.universally\">universally</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L175-L193","name":"AlgebraicGeometry.universally_isLocalAtTarget","line":175,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.universally_isLocalAtTarget","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.universally_isLocalAtTarget\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">universally_isLocalAtTarget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP₂</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a>} (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>) {<span class=\"fn\">ι</span> : <a href=\"./foundational_types.html\">Type</a> u} (<span class=\"fn\">U</span> : <span class=\"fn\"><span class=\"fn\">ι</span> → <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme.Opens\">Opens</a></span></span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Sets/OpenCover.html#TopologicalSpace.IsOpenCover\">TopologicalSpace.IsOpenCover</a> <span class=\"fn\">U</span></span> → <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\">ι</span>), <span class=\"fn\"><span class=\"fn\">P</span> (<span class=\"fn\">f</span> <a href=\"./Mathlib/AlgebraicGeometry/Restrict.html#AlgebraicGeometry.morphismRestrict\">∣_</a> <span class=\"fn\"><span class=\"fn\">U</span> <span class=\"fn\">i</span></span>)</span>)</span> → <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">f</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.universally\">universally</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L155-L169","name":"AlgebraicGeometry.instIsLocalAtSourceDiagonalSchemeOfHasOfPostcompPropertyOfRespectsRightIsOpenImmersion","line":155,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instIsLocalAtSourceDiagonalSchemeOfHasOfPostcompPropertyOfRespectsRightIsOpenImmersion","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instIsLocalAtSourceDiagonalSchemeOfHasOfPostcompPropertyOfRespectsRightIsOpenImmersion\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">instIsLocalAtSourceDiagonalSchemeOfHasOfPostcompPropertyOfRespectsRightIsOpenImmersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Composition.html#CategoryTheory.MorphismProperty.HasOfPostcompProperty\">HasOfPostcompProperty</a></span> <a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">IsOpenImmersion</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsRight\">RespectsRight</a></span> <a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">IsOpenImmersion</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtSource\">IsLocalAtSource</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L150-L152","name":"AlgebraicGeometry.instIsLocalAtTargetDiagonalScheme","line":150,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instIsLocalAtTargetDiagonalScheme","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instIsLocalAtTargetDiagonalScheme\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">instIsLocalAtTargetDiagonalScheme</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.IsLocalAtTarget\">IsLocalAtTarget</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L139-L148","name":"AlgebraicGeometry.instHasAffinePropertyDiagonalSchemeDiagonal","line":139,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instHasAffinePropertyDiagonalSchemeDiagonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.instHasAffinePropertyDiagonalSchemeDiagonal\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">instHasAffinePropertyDiagonalSchemeDiagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L122-L137","name":"AlgebraicGeometry.HasAffineProperty.diagonal_affineProperty_isLocal","line":122,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_affineProperty_isLocal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_affineProperty_isLocal\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">HasAffineProperty</span>.<span class=\"name\">diagonal_affineProperty_isLocal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.IsLocal\">IsLocal</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.IsLocal\">IsLocal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L110-L120","name":"AlgebraicGeometry.HasAffineProperty.diagonal_iff","line":110,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_iff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_iff\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">HasAffineProperty</span>.<span class=\"name\">diagonal_iff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/AffineScheme.html#AlgebraicGeometry.IsAffine\">IsAffine</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L94-L108","name":"AlgebraicGeometry.HasAffineProperty.diagonal_of_diagonal_of_isPullback","line":94,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_diagonal_of_isPullback","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_diagonal_of_isPullback\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">HasAffineProperty</span>.<span class=\"name\">diagonal_of_diagonal_of_isPullback</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y </span><span class=\"fn\">U </span><span class=\"fn\">V</span> : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\">U</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/AffineScheme.html#AlgebraicGeometry.IsAffine\">IsAffine</a> <span class=\"fn\">U</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/OpenImmersion.html#AlgebraicGeometry.IsOpenImmersion\">IsOpenImmersion</a> <span class=\"fn\">g</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">iV</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">X</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f'</span> : <span class=\"fn\">V</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">U</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/CommSq.html#CategoryTheory.IsPullback\">CategoryTheory.IsPullback</a> <span class=\"fn\">iV</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L86-L92","name":"AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover_diagonal","line":86,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover_diagonal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover_diagonal\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">HasAffineProperty</span>.<span class=\"name\">diagonal_of_openCover_diagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝒰</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover\">OpenCover</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/AffineScheme.html#AlgebraicGeometry.IsAffine\">IsAffine</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.obj\">obj</a></span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒰</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.1</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.pullbackHom\">Scheme.Cover.pullbackHom</a> <span class=\"fn\">𝒰</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L63-L84","name":"AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover","line":63,"kind":"theorem","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.HasAffineProperty.diagonal_of_openCover\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">HasAffineProperty</span>.<span class=\"name\">diagonal_of_openCover</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty\">CategoryTheory.MorphismProperty</a> <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.HasAffineProperty\">HasAffineProperty</a> <span class=\"fn\">P</span> <span class=\"fn\">Q</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <a href=\"./Mathlib/AlgebraicGeometry/Scheme.html#AlgebraicGeometry.Scheme\">Scheme</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝒰</span> : <span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover\">OpenCover</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/AffineScheme.html#AlgebraicGeometry.IsAffine\">IsAffine</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.obj\">obj</a></span> <span class=\"fn\">i</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">𝒰'</span> : <span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>) → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback\">CategoryTheory.Limits.pullback</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.map\">map</a></span> <span class=\"fn\">i</span>)</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/Open.html#AlgebraicGeometry.Scheme.OpenCover\">OpenCover</a></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>) (<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">𝒰'</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>), <span class=\"fn\"><a href=\"./Mathlib/AlgebraicGeometry/AffineScheme.html#AlgebraicGeometry.IsAffine\">IsAffine</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">𝒰'</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.obj\">obj</a></span> <span class=\"fn\">j</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h𝒰'</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\">𝒰</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>) (<span class=\"fn\">j </span><span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">𝒰'</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.J\">J</a></span>),\n    <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Limits/Shapes/Pullback/HasPullback.html#CategoryTheory.Limits.pullback.mapDesc\">CategoryTheory.Limits.pullback.mapDesc</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">𝒰'</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.map\">map</a></span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">𝒰'</span> <span class=\"fn\">i</span>)</span>.<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.map\">map</a></span> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/AlgebraicGeometry/Cover/MorphismProperty.html#AlgebraicGeometry.Scheme.Cover.pullbackHom\">Scheme.Cover.pullbackHom</a> <span class=\"fn\">𝒰</span> <span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Limits.html#CategoryTheory.MorphismProperty.diagonal\">diagonal</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L52-L61","name":"AlgebraicGeometry.AffineTargetMorphismProperty.diagonal_respectsIso","line":52,"kind":"instance","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal_respectsIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal_respectsIso\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">AffineTargetMorphismProperty</span>.<span class=\"name\">diagonal_respectsIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.toProperty\">toProperty</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\">diagonal</a></span>.<a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty.toProperty\">toProperty</a></span>.<a href=\"./Mathlib/CategoryTheory/MorphismProperty/Basic.html#CategoryTheory.MorphismProperty.RespectsIso\">RespectsIso</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/AlgebraicGeometry/Morphisms/Constructors.lean#L43-L50","name":"AlgebraicGeometry.AffineTargetMorphismProperty.diagonal","line":43,"kind":"def","docLink":"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal","doc":"The `AffineTargetMorphismProperty` associated to `(targetAffineLocally P).diagonal`.\nSee `diagonal_targetAffineLocally_eq_targetAffineLocally`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/AlgebraicGeometry/Morphisms/Constructors.html#AlgebraicGeometry.AffineTargetMorphismProperty.diagonal\"><span class=\"name\">AlgebraicGeometry</span>.<span class=\"name\">AffineTargetMorphismProperty</span>.<span class=\"name\">diagonal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/AlgebraicGeometry/Morphisms/Basic.html#AlgebraicGeometry.AffineTargetMorphismProperty\">AffineTargetMorphismProperty</a></div></div>"}]}