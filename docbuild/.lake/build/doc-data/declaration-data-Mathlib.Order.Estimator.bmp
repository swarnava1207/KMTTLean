{"name":"Mathlib.Order.Estimator","instances":[{"typeNames":["Estimator.trivial"],"name":"instBotTrivial","className":"Bot"},{"typeNames":["Unit"],"name":"instWellFoundedGTUnit","className":"IsWellFounded"},{"typeNames":["Estimator.trivial"],"name":"instWellFoundedGTTrivial","className":"IsWellFounded"},{"typeNames":["Thunk.pure","Estimator.trivial"],"name":"instEstimatorPureTrivial","className":"Estimator"},{"typeNames":["HAdd.hAdd","Prod"],"name":"instEstimatorDataHAddThunkProd","className":"EstimatorData"},{"typeNames":["HAdd.hAdd","Prod"],"name":"instEstimatorNatHAddThunkProd","className":"Estimator"},{"typeNames":["Set.Elem"],"name":"instWellFoundedGTElemRangeBound","className":"IsWellFounded"},{"typeNames":["Estimator.fst"],"name":"instEstimatorDataFstProdOfDecidableLTOfWellFoundedGTSubtypeProdLe","className":"EstimatorData"}],"imports":["Init","Mathlib.Data.Set.Operations","Mathlib.Order.Heyting.Basic","Mathlib.Order.RelClasses","Mathlib.Order.Hom.Basic","Mathlib.Lean.Thunk"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L219-L237","name":"Estimator.fstInst","line":219,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.fstInst","doc":"Given an estimator for a pair, we can extract an estimator for the first factor. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.fstInst\"><span class=\"name\">Estimator</span>.<span class=\"name\">fstInst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Lean/Thunk.html#Thunk.prod\">prod</a></span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#Estimator.fst\">fst</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Lean/Thunk.html#Thunk.prod\">prod</a></span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">ε</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L210-L217","name":"instEstimatorDataFstProdOfDecidableLTOfWellFoundedGTSubtypeProdLe","line":210,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instEstimatorDataFstProdOfDecidableLTOfWellFoundedGTSubtypeProdLe","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorDataFstProdOfDecidableLTOfWellFoundedGTSubtypeProdLe\"><span class=\"name\">instEstimatorDataFstProdOfDecidableLTOfWellFoundedGTSubtypeProdLe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Lean/Thunk.html#Thunk.prod\">prod</a></span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">p</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">q</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#Estimator.fst\">Estimator.fst</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/Lean/Thunk.html#Thunk.prod\">prod</a></span> <span class=\"fn\">b</span>)</span> <span class=\"fn\">ε</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L205-L208","name":"instWellFoundedGTElemRangeBound","line":205,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instWellFoundedGTElemRangeBound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instWellFoundedGTElemRangeBound\"><span class=\"name\">instWellFoundedGTElemRangeBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span>)</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L201-L201","name":"Estimator.fst.inner","line":201,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.fst.inner","doc":"The wrapped bound for a value in `α × β`,\nwhich we will use as a bound for the first component. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.fst.inner\"><span class=\"name\">Estimator</span>.<span class=\"name\">fst</span>.<span class=\"name\">inner</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">p</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator.fst\">fst</a> <span class=\"fn\">p</span> <span class=\"fn\">ε</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">ε</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L197-L197","name":"Estimator.fst.mk","line":197,"kind":"ctor","docLink":"./Mathlib/Order/Estimator.html#Estimator.fst.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.fst.mk\"><span class=\"name\">Estimator</span>.<span class=\"name\">fst</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">p</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inner</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator.fst\">fst</a> <span class=\"fn\">p</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L192-L201","name":"Estimator.fst","line":192,"kind":"structure","docLink":"./Mathlib/Order/Estimator.html#Estimator.fst","doc":"An estimator for `(a, b)` can be turned into an estimator for `a`,\nsimply by repeatedly running `improve` until the first factor \"improves\".\nThe hypothesis that `>` is well-founded on `{ q // q ≤ (a, b) }` ensures this terminates.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.fst\"><span class=\"name\">Estimator</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">p</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_4</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L171-L183","name":"instEstimatorNatHAddThunkProd","line":171,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instEstimatorNatHAddThunkProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorNatHAddThunkProd\"><span class=\"name\">instEstimatorNatHAddThunkProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">εa</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">εb</span> : <a href=\"./foundational_types.html\">Type</a> u_4}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">εa</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">b</span> <span class=\"fn\">εb</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) (<span class=\"fn\">εa</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">εb</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L161-L161","name":"instEstimatorDataHAddThunkProd_bound","line":161,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd_bound","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd_bound\"><span class=\"name\">instEstimatorDataHAddThunkProd_bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εa</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εb</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">εa</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">b</span> <span class=\"fn\">εb</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">εa</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">εb</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">e</span>.1</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">e</span>.2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L161-L161","name":"instEstimatorDataHAddThunkProd_improve","line":161,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd_improve","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd_improve\"><span class=\"name\">instEstimatorDataHAddThunkProd_improve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εa</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εb</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">εa</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">b</span> <span class=\"fn\">εb</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">εa</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">εb</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\">EstimatorData.improve</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\">EstimatorData.improve</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">e</span>.1</span></span> with\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">e'</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">e</span>.2</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt;\n    <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\">EstimatorData.improve</a> <span class=\"fn\">b</span> <span class=\"fn\"><span class=\"fn\">e</span>.2</span></span> with\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">e</span>.1</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">e'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n    | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#Option.none\">none</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L161-L169","name":"instEstimatorDataHAddThunkProd","line":161,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorDataHAddThunkProd\"><span class=\"name\">instEstimatorDataHAddThunkProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εa</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">εb</span> : <a href=\"./foundational_types.html\">Type</a> u_4)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">εa</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">b</span> <span class=\"fn\">εb</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) (<span class=\"fn\">εa</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">εb</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L143-L152","name":"Estimator.improveUntil_spec","line":143,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#Estimator.improveUntil_spec","doc":"If `Estimator.improveUntil a p e` returns `some e'`, then `bound a e'` satisfies `p`.\nOtherwise, that value `a` must not satisfy `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntil_spec\"><span class=\"name\">Estimator</span>.<span class=\"name\">improveUntil_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span>)</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntil\">improveUntil</a> <span class=\"fn\">a</span> <span class=\"fn\">p</span> <span class=\"fn\">e</span></span> with\n| <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>\n| <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L121-L141","name":"Estimator.improveUntilAux_spec","line":121,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#Estimator.improveUntilAux_spec","doc":"If `Estimator.improveUntil a p e` returns `some e'`, then `bound a e'` satisfies `p`.\nOtherwise, that value `a` must not satisfy `p`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntilAux_spec\"><span class=\"name\">Estimator</span>.<span class=\"name\">improveUntilAux_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span>)</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntilAux\">improveUntilAux</a> <span class=\"fn\">a</span> <span class=\"fn\">p</span> <span class=\"fn\">e</span> <span class=\"fn\">r</span></span> with\n| <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">a_1</span></span> =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>\n| <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e'</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L111-L118","name":"Estimator.improveUntil","line":111,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.improveUntil","doc":"Improve an estimate until it satisfies a predicate,\nor else return the best available estimate, if any improvement was made.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntil\"><span class=\"name\">Estimator</span>.<span class=\"name\">improveUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span>)</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L97-L109","name":"Estimator.improveUntilAux","line":97,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.improveUntilAux","doc":"Implementation of `Estimator.improveUntil`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.improveUntilAux\"><span class=\"name\">Estimator</span>.<span class=\"name\">improveUntilAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Mathlib/Data/Set/Operations.html#Set.range\">Set.range</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span>)</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span>)</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L84-L88","name":"instEstimatorPureTrivial","line":84,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instEstimatorPureTrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instEstimatorPureTrivial\"><span class=\"name\">instEstimatorPureTrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Thunk.pure\">Thunk.pure</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#Estimator.trivial\">Estimator.trivial</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L79-L82","name":"instWellFoundedGTTrivial","line":79,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instWellFoundedGTTrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instWellFoundedGTTrivial\"><span class=\"name\">instWellFoundedGTTrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#Estimator.trivial\">Estimator.trivial</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L76-L77","name":"instWellFoundedGTUnit","line":76,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instWellFoundedGTUnit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instWellFoundedGTUnit\"><span class=\"name\">instWellFoundedGTUnit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#WellFoundedGT\">WellFoundedGT</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L74-L74","name":"instBotTrivial","line":74,"kind":"instance","docLink":"./Mathlib/Order/Estimator.html#instBotTrivial","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#instBotTrivial\"><span class=\"name\">instBotTrivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Notation.html#Bot\">Bot</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/Estimator.html#Estimator.trivial\">Estimator.trivial</a> <span class=\"fn\">a</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L71-L72","name":"Estimator.trivial","line":71,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.trivial","doc":"A trivial estimator, containing the actual value. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.trivial\"><span class=\"name\">Estimator</span>.<span class=\"name\">trivial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L61-L61","name":"Estimator.improve_spec","line":61,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#Estimator.improve_spec","doc":"Calling `improve` either gives a strictly better bound,\nor a proof that the current bound is exact. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.improve_spec\"><span class=\"name\">Estimator</span>.<span class=\"name\">improve_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\">EstimatorData.improve</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> with\n| <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span>\n| <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e'</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L58-L58","name":"Estimator.bound_le","line":58,"kind":"theorem","docLink":"./Mathlib/Order/Estimator.html#Estimator.bound_le","doc":"The calculated bounds are always lower bounds. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.bound_le\"><span class=\"name\">Estimator</span>.<span class=\"name\">bound_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L56-L56","name":"Estimator.mk","line":56,"kind":"ctor","docLink":"./Mathlib/Order/Estimator.html#Estimator.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.mk\"><span class=\"name\">Estimator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toEstimatorData</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bound_le</span> : <span class=\"fn\">∀ (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>), <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">improve_spec</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>),\n    <span class=\"fn\">match <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\">EstimatorData.improve</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> with\n    | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Core.html#Thunk.get\">get</a></span>\n    | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">e'</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\">EstimatorData.bound</a> <span class=\"fn\">a</span> <span class=\"fn\">e'</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L56-L63","name":"Estimator.toEstimatorData","line":56,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#Estimator.toEstimatorData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator.toEstimatorData\"><span class=\"name\">Estimator</span>.<span class=\"name\">toEstimatorData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#Estimator\">Estimator</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L50-L63","name":"Estimator","line":50,"kind":"class","docLink":"./Mathlib/Order/Estimator.html#Estimator","doc":"Given `[Estimator a ε]`\n* we have `bound a e ≤ a.get`, and\n* `improve a e` returns none iff `bound a e = a.get`,\n  and otherwise it returns a strictly better bound.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#Estimator\"><span class=\"name\">Estimator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Order/Defs/PartialOrder.html#Preorder\">Preorder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_3)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L48-L48","name":"EstimatorData.improve","line":48,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#EstimatorData.improve","doc":"Generate an improved lower bound. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#EstimatorData.improve\"><span class=\"name\">EstimatorData</span>.<span class=\"name\">improve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L46-L46","name":"EstimatorData.bound","line":46,"kind":"def","docLink":"./Mathlib/Order/Estimator.html#EstimatorData.bound","doc":"The value of the bound for `a` representation by a term of `ε`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#EstimatorData.bound\"><span class=\"name\">EstimatorData</span>.<span class=\"name\">bound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L44-L44","name":"EstimatorData.mk","line":44,"kind":"ctor","docLink":"./Mathlib/Order/Estimator.html#EstimatorData.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#EstimatorData.mk\"><span class=\"name\">EstimatorData</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bound</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">improve</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Estimator.html#EstimatorData\">EstimatorData</a> <span class=\"fn\">a</span> <span class=\"fn\">ε</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Order/Estimator.lean#L37-L48","name":"EstimatorData","line":37,"kind":"class","docLink":"./Mathlib/Order/Estimator.html#EstimatorData","doc":"Given `[EstimatorData a ε]`\n* a term `e : ε` can be interpreted via `bound a e : α` as a lower bound for `a`, and\n* we can ask for an improved lower bound via `improve a e : Option ε`.\n\nThe value `a` in `α` that we are estimating is hidden inside a `Thunk` to avoid evaluation.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Order/Estimator.html#EstimatorData\"><span class=\"name\">EstimatorData</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_3)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u_1 u_3)</div></div>"}]}