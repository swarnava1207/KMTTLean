{"name":"Mathlib.NumberTheory.FactorisationProperties","instances":[],"imports":["Init","Mathlib.Algebra.GeomSum","Mathlib.Algebra.IsPrimePow","Mathlib.NumberTheory.Divisors","Mathlib.Tactic.FinCases","Mathlib.Tactic.NormNum.Prime"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L190-L195","name":"Nat.infinite_odd_deficient","line":190,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_odd_deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_odd_deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">infinite_odd_deficient</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Parity.html#Odd\">Odd</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L180-L188","name":"Nat.infinite_even_deficient","line":180,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_even_deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_even_deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">infinite_even_deficient</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><a href=\"./Mathlib/Algebra/Group/Even.html#Even\">Even</a> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L173-L178","name":"Nat.infinite_deficient","line":173,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_deficient","doc":"There exists infinitely many deficient numbers "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.infinite_deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">infinite_deficient</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">n</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a>.<a href=\"./Mathlib/Data/Finite/Defs.html#Set.Infinite\">Infinite</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L169-L171","name":"Nat.Prime.deficient","line":169,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">deficient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L165-L167","name":"IsPrimePow.deficient","line":165,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#IsPrimePow.deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#IsPrimePow.deficient\"><span class=\"name\">IsPrimePow</span>.<span class=\"name\">deficient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Algebra/IsPrimePow.html#IsPrimePow\">IsPrimePow</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L138-L163","name":"Nat.Prime.deficient_pow","line":138,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.deficient_pow","doc":"Any natural number power of a prime is deficient "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.deficient_pow\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">deficient_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">m</span>).<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L133-L136","name":"Nat.Prime.not_perfect","line":133,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_perfect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_perfect\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">not_perfect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L125-L131","name":"Nat.Prime.not_pseudoperfect","line":125,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_pseudoperfect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_pseudoperfect\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">not_pseudoperfect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Pseudoperfect\">Pseudoperfect</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L120-L123","name":"Nat.Prime.not_weird","line":120,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_weird","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_weird\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">not_weird</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Weird\">Weird</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L117-L118","name":"Nat.Prime.not_abundant","line":117,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_abundant","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Prime.not_abundant\"><span class=\"name\">Nat</span>.<span class=\"name\">Prime</span>.<span class=\"name\">not_abundant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Nat/Prime/Defs.html#Nat.Prime\">Prime</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L114-L115","name":"Nat.Perfect.pseudoperfect","line":114,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Perfect.pseudoperfect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Perfect.pseudoperfect\"><span class=\"name\">Nat</span>.<span class=\"name\">Perfect</span>.<span class=\"name\">pseudoperfect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Pseudoperfect\">Pseudoperfect</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L108-L112","name":"Nat.deficient_or_perfect_or_abundant","line":108,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_or_perfect_or_abundant","doc":"A positive natural number is either deficient, perfect, or abundant "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_or_perfect_or_abundant\"><span class=\"name\">Nat</span>.<span class=\"name\">deficient_or_perfect_or_abundant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L103-L106","name":"Nat.abundant_iff_not_perfect_and_not_deficient","line":103,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.abundant_iff_not_perfect_and_not_deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.abundant_iff_not_perfect_and_not_deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">abundant_iff_not_perfect_and_not_deficient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L98-L101","name":"Nat.perfect_iff_not_abundant_and_not_deficient","line":98,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.perfect_iff_not_abundant_and_not_deficient","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.perfect_iff_not_abundant_and_not_deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">perfect_iff_not_abundant_and_not_deficient</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L93-L96","name":"Nat.deficient_iff_not_abundant_and_not_perfect","line":93,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_iff_not_abundant_and_not_perfect","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_iff_not_abundant_and_not_perfect\"><span class=\"name\">Nat</span>.<span class=\"name\">deficient_iff_not_abundant_and_not_perfect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.Perfect\">Perfect</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L81-L91","name":"Nat.weird_seventy","line":81,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.weird_seventy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.weird_seventy\"><span class=\"name\">Nat</span>.<span class=\"name\">weird_seventy</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Weird\">Weird</a> <span class=\"fn\">70</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L77-L79","name":"Nat.abundant_twelve","line":77,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.abundant_twelve","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.abundant_twelve\"><span class=\"name\">Nat</span>.<span class=\"name\">abundant_twelve</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\">Abundant</a> <span class=\"fn\">12</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L75-L75","name":"Nat.deficient_three","line":75,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_three","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_three\"><span class=\"name\">Nat</span>.<span class=\"name\">deficient_three</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a> <span class=\"fn\">3</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L74-L74","name":"Nat.deficient_two","line":74,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_two","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_two\"><span class=\"name\">Nat</span>.<span class=\"name\">deficient_two</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a> <span class=\"fn\">2</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L73-L73","name":"Nat.deficient_one","line":73,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.deficient_one\"><span class=\"name\">Nat</span>.<span class=\"name\">deficient_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\">Deficient</a> <span class=\"fn\">1</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L68-L71","name":"Nat.not_pseudoperfect_iff_forall","line":68,"kind":"theorem","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.not_pseudoperfect_iff_forall","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.not_pseudoperfect_iff_forall\"><span class=\"name\">Nat</span>.<span class=\"name\">not_pseudoperfect_iff_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Pseudoperfect\">Pseudoperfect</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">∀ <span class=\"fn\">s</span> ⊆ <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Mathlib/NumberTheory/Divisors.html#Nat.properDivisors\">properDivisors</a></span>, <span class=\"fn\">∑ <span class=\"fn\">i</span> ∈ <span class=\"fn\">s</span>, <span class=\"fn\">i</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L65-L66","name":"Nat.Weird","line":65,"kind":"def","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Weird","doc":"`n : ℕ` is a _weird_ number if and only if it is abundant but not pseudoperfect. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Weird\"><span class=\"name\">Nat</span>.<span class=\"name\">Weird</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L60-L63","name":"Nat.Pseudoperfect","line":60,"kind":"def","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Pseudoperfect","doc":"A positive natural number `n` is _pseudoperfect_ if there exists a subset of the proper\ndivisors of `n` such that the sum of that subset is equal to `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Pseudoperfect\"><span class=\"name\">Nat</span>.<span class=\"name\">Pseudoperfect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L57-L58","name":"Nat.Deficient","line":57,"kind":"def","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient","doc":"`n : ℕ` is _deficient_ if the sum of the proper divisors of `n` is less than `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Deficient\"><span class=\"name\">Nat</span>.<span class=\"name\">Deficient</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/NumberTheory/FactorisationProperties.lean#L54-L55","name":"Nat.Abundant","line":54,"kind":"def","docLink":"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant","doc":"`n : ℕ` is _abundant_ if the sum of the proper divisors of `n` is greater than `n`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/NumberTheory/FactorisationProperties.html#Nat.Abundant\"><span class=\"name\">Nat</span>.<span class=\"name\">Abundant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}