{"name":"Mathlib.Data.Ineq","instances":[{"typeNames":["Eq"],"name":"Mathlib.instDecidableEqIneq","className":"Decidable"},{"typeNames":["Mathlib.Ineq"],"name":"Mathlib.instInhabitedIneq","className":"Inhabited"},{"typeNames":["Mathlib.Ineq"],"name":"Mathlib.instReprIneq","className":"Repr"},{"typeNames":["Mathlib.Ineq"],"name":"Mathlib.Ineq.instToString","className":"ToString"},{"typeNames":["Mathlib.Ineq"],"name":"Mathlib.Ineq.instToFormat","className":"Std.ToFormat"}],"imports":["Init","Mathlib.Lean.Expr.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L86-L98","name":"Lean.Expr.ineqOrNotIneq?","line":86,"kind":"def","docLink":"./Mathlib/Data/Ineq.html#Lean.Expr.ineqOrNotIneq?","doc":"Given an expression `e`, parse it as a `=`, `≤` or `<`, or the negation of such, and return this\nrelation (as a `Linarith.Ineq`) together with the type in which the (in)equality occurs, the two\nsides of the (in)equality, and a boolean flag indicating the presence or absence of the `¬`.\n\nThis function is more naturally in the `Option` monad, but it is convenient to put in `MetaM`\nfor compositionality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Lean.Expr.ineqOrNotIneq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ineqOrNotIneq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L67-L84","name":"Lean.Expr.ineq?","line":67,"kind":"def","docLink":"./Mathlib/Data/Ineq.html#Lean.Expr.ineq?","doc":"Given an expression `e`, parse it as a `=`, `≤` or `<`, and return this relation (as a\n`Linarith.Ineq`) together with the type in which the (in)equality occurs and the two sides of the\n(in)equality.\n\nThis function is more naturally in the `Option` monad, but it is convenient to put in `MetaM`\nfor compositionality.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Lean.Expr.ineq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ineq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Mathlib.Ineq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L58-L58","name":"Mathlib.Ineq.instToFormat","line":58,"kind":"instance","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToFormat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToFormat\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">instToFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Format/Basic.html#Std.ToFormat\">Std.ToFormat</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L56-L56","name":"Mathlib.Ineq.instToString","line":56,"kind":"instance","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToString","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.instToString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L50-L54","name":"Mathlib.Ineq.toString","line":50,"kind":"def","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.toString","doc":"Prints an `Ineq` as the corresponding infix symbol. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.toString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L41-L48","name":"Mathlib.Ineq.cmp","line":41,"kind":"def","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.cmp","doc":"`Ineq` is ordered `eq < le < lt`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.cmp\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">cmp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Init/Data/Ord.html#Ordering\">Ordering</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L30-L39","name":"Mathlib.Ineq.max","line":30,"kind":"def","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.max","doc":"`max R1 R2` computes the strength of the sum of two inequalities. If `t1 R1 0` and `t2 R2 0`,\nthen `t1 + t2 (max R1 R2) 0`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.max\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">max</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a> → <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L26-L26","name":"Mathlib.instReprIneq","line":26,"kind":"instance","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instReprIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instReprIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L26-L26","name":"Mathlib.instInhabitedIneq","line":26,"kind":"instance","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instInhabitedIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instInhabitedIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L26-L26","name":"Mathlib.instDecidableEqIneq","line":26,"kind":"instance","docLink":"./Mathlib/Data/Ineq.html#Mathlib.instDecidableEqIneq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.instDecidableEqIneq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">instDecidableEqIneq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L25-L25","name":"Mathlib.Ineq.lt","line":25,"kind":"ctor","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.lt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L25-L25","name":"Mathlib.Ineq.le","line":25,"kind":"ctor","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.le\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L25-L25","name":"Mathlib.Ineq.eq","line":25,"kind":"ctor","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq.eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq.eq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\">Ineq</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/Ineq.lean#L22-L26","name":"Mathlib.Ineq","line":22,"kind":"inductive","docLink":"./Mathlib/Data/Ineq.html#Mathlib.Ineq","doc":"The three-element type `Ineq` is used to represent the strength of a comparison between\nterms. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/Ineq.html#Mathlib.Ineq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Ineq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}