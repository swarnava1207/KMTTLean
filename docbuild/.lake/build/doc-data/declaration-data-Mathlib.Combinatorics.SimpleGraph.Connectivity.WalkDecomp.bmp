{"name":"Mathlib.Combinatorics.SimpleGraph.Connectivity.WalkDecomp","instances":[],"imports":["Init","Mathlib.Combinatorics.SimpleGraph.Walk"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L281-L310","name":"SimpleGraph.Walk.mem_support_iff_exists_getVert","line":281,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.mem_support_iff_exists_getVert","doc":"Given a walk `w` and a node in the support, there exists a natural `n`, such that given node\nis the `n`-th node (zero-indexed) in the walk. In addition, `n` is at most the length of the path.\nDue to the definition of `getVert` it would otherwise be legal to return a larger `n` for the last\nnode. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.mem_support_iff_exists_getVert\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">mem_support_iff_exists_getVert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L275-L277","name":"SimpleGraph.Walk.rotate_edges","line":275,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate_edges","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate_edges\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">rotate_edges</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate\">rotate</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span> <a href=\"./Mathlib/Data/List/Rotate.html#List.IsRotated\">~r</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L269-L273","name":"SimpleGraph.Walk.rotate_darts","line":269,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate_darts","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate_darts\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">rotate_darts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate\">rotate</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span> <a href=\"./Mathlib/Data/List/Rotate.html#List.IsRotated\">~r</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L262-L267","name":"SimpleGraph.Walk.support_rotate","line":262,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_rotate","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_rotate\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">support_rotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate\">rotate</a></span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span> <a href=\"./Mathlib/Data/List/Rotate.html#List.IsRotated\">~r</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>.<a href=\"./Init/Data/List/Basic.html#List.tail\">tail</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L258-L260","name":"SimpleGraph.Walk.rotate","line":258,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate","doc":"Rotate a loop walk such that it is centered at the given vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.rotate\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">rotate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">u</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L246-L256","name":"SimpleGraph.Walk.not_mem_support_takeUntil_takeUntil","line":246,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.not_mem_support_takeUntil_takeUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.not_mem_support_takeUntil_takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">not_mem_support_takeUntil_takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">w</span> ∉ <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L219-L244","name":"SimpleGraph.Walk.takeUntil_takeUntil","line":219,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_takeUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil_takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">x</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">x</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L213-L217","name":"SimpleGraph.Walk.length_takeUntil_lt","line":213,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_takeUntil_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_takeUntil_lt\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">length_takeUntil_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">huw</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L206-L211","name":"SimpleGraph.Walk.snd_takeUntil","line":206,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.snd_takeUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.snd_takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">snd_takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hsu</span> : <span class=\"fn\">w</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">u</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.snd\">snd</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L190-L204","name":"SimpleGraph.Walk.getVert_takeUntil","line":190,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.getVert_takeUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.getVert_takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">getVert_takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.getVert\">getVert</a></span> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L184-L188","name":"SimpleGraph.Walk.length_dropUntil_le","line":184,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_dropUntil_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_dropUntil_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">length_dropUntil_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L178-L182","name":"SimpleGraph.Walk.length_takeUntil_le","line":178,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_takeUntil_le","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.length_takeUntil_le\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">length_takeUntil_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.length\">length</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L174-L176","name":"SimpleGraph.Walk.edges_dropUntil_subset","line":174,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.edges_dropUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.edges_dropUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">edges_dropUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L170-L172","name":"SimpleGraph.Walk.edges_takeUntil_subset","line":170,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.edges_takeUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.edges_takeUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">edges_takeUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L165-L168","name":"SimpleGraph.Walk.darts_dropUntil_subset","line":165,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.darts_dropUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.darts_dropUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">darts_dropUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L160-L163","name":"SimpleGraph.Walk.darts_takeUntil_subset","line":160,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.darts_takeUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.darts_takeUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">darts_takeUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.darts\">darts</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L155-L158","name":"SimpleGraph.Walk.support_dropUntil_subset","line":155,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_dropUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_dropUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">support_dropUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L150-L153","name":"SimpleGraph.Walk.support_takeUntil_subset","line":150,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_takeUntil_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.support_takeUntil_subset\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">support_takeUntil_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L143-L148","name":"SimpleGraph.Walk.dropUntil_copy","line":143,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil_copy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil_copy\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">dropUntil_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">v' </span><span class=\"fn\">w'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">hv</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">hv</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">⋯</span> <span class=\"fn\">hw</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L136-L141","name":"SimpleGraph.Walk.takeUntil_copy","line":136,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_copy","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_copy\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil_copy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">v' </span><span class=\"fn\">w'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hv</span> : <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">hv</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">hv</span> <span class=\"fn\">hw</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">⋯</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.copy\">copy</a></span> <span class=\"fn\">hv</span> <span class=\"fn\">⋯</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L114-L134","name":"SimpleGraph.Walk.count_edges_takeUntil_le_one","line":114,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.count_edges_takeUntil_le_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.count_edges_takeUntil_le_one\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">count_edges_takeUntil_le_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <span class=\"fn\"><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">s(</a><span class=\"fn\">u</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">,</a> <span class=\"fn\">x</span><a href=\"./Mathlib/Data/Sym/Sym2.html#Sym2.mk\">)</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.edges\">edges</a></span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L102-L112","name":"SimpleGraph.Walk.count_support_takeUntil_eq_one","line":102,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.count_support_takeUntil_eq_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.count_support_takeUntil_eq_one\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">count_support_takeUntil_eq_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">List.count</a> <span class=\"fn\">u</span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L94-L100","name":"SimpleGraph.Walk.mem_support_iff_exists_append","line":94,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.mem_support_iff_exists_append","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.mem_support_iff_exists_append\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">mem_support_iff_exists_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∃ (<span class=\"fn\">q</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span>) (<span class=\"fn\">r</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">w</span> <span class=\"fn\">v</span></span>), <span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.append\">append</a></span> <span class=\"fn\">r</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L80-L92","name":"SimpleGraph.Walk.take_spec","line":80,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.take_spec","doc":"The `takeUntil` and `dropUntil` functions split a walk into two pieces.\nThe lemma `SimpleGraph.Walk.count_support_takeUntil_eq_one` specifies where this split occurs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.take_spec\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">take_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.append\">append</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\">dropUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L66-L78","name":"SimpleGraph.Walk.dropUntil","line":66,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil","doc":"Given a vertex in the support of a path, give the path from (and including) that vertex to\nthe end. In other words, drop vertices from the front of a path until (and not including)\nthat vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.dropUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">dropUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">w</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L52-L64","name":"SimpleGraph.Walk.nil_takeUntil","line":52,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.nil_takeUntil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.nil_takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">nil_takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwp</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hwp</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.Nil\">Nil</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L48-L50","name":"SimpleGraph.Walk.takeUntil_first","line":48,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_first","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_first\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil_first</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L43-L46","name":"SimpleGraph.Walk.takeUntil_cons","line":43,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_cons","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_cons\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w </span><span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v'</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v'</span> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwp</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadj</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph.Adj\">Adj</a></span> <span class=\"fn\">u</span> <span class=\"fn\">v'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.cons\">cons</a> <span class=\"fn\">hadj</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.cons\">cons</a> <span class=\"fn\">hadj</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">w</span> <span class=\"fn\">hwp</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L41-L41","name":"SimpleGraph.Walk.takeUntil_nil","line":41,"kind":"theorem","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_nil","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil_nil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">u</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.nil\">nil</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.nil\">nil</a>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\">takeUntil</a></span> <span class=\"fn\">u</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.nil\">nil</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.lean#L29-L39","name":"SimpleGraph.Walk.takeUntil","line":29,"kind":"def","docLink":"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil","doc":"Given a vertex in the support of a path, give the path up until (and including) that vertex. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Combinatorics/SimpleGraph/Connectivity/WalkDecomp.html#SimpleGraph.Walk.takeUntil\"><span class=\"name\">SimpleGraph</span>.<span class=\"name\">Walk</span>.<span class=\"name\">takeUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">V</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/Combinatorics/SimpleGraph/Basic.html#SimpleGraph\">SimpleGraph</a> <span class=\"fn\">V</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">V</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <span class=\"fn\">V</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\">V</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk.support\">support</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/Combinatorics/SimpleGraph/Walk.html#SimpleGraph.Walk\">Walk</a></span> <span class=\"fn\">v</span> <span class=\"fn\">u</span></span></span></div></div>"}]}