{"name":"Mathlib.SetTheory.Nimber.Field","instances":[{"typeNames":["Nimber","OfNat.ofNat"],"name":"Nimber.instCharPOfNatNat","className":"CharP"},{"typeNames":["Nimber"],"name":"Nimber.instMul","className":"Mul"},{"typeNames":["Nimber"],"name":"Nimber.instMulZeroClass","className":"MulZeroClass"},{"typeNames":["Nimber"],"name":"Nimber.instNoZeroDivisors","className":"NoZeroDivisors"},{"typeNames":["Nimber"],"name":"Nimber.instIsCancelMulZero","className":"IsCancelMulZero"},{"typeNames":["Nimber"],"name":"Nimber.instCommRing","className":"CommRing"},{"typeNames":["Nimber"],"name":"Nimber.instIsDomain","className":"IsDomain"},{"typeNames":["Nimber"],"name":"Nimber.instCancelMonoidWithZero","className":"CancelMonoidWithZero"},{"typeNames":["Set.Elem"],"name":"Nimber.instSmallElemInvSet","className":"Small"},{"typeNames":["Nimber"],"name":"Nimber.instInv","className":"Inv"},{"typeNames":["Nimber"],"name":"Nimber.instField","className":"Field"}],"imports":["Init","Mathlib.Algebra.CharP.Two","Mathlib.SetTheory.Nimber.Basic","Mathlib.Tactic.Abel"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L339-L343","name":"Nimber.instField","line":339,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instField","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instField\"><span class=\"name\">Nimber</span>.<span class=\"name\">instField</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Field/Defs.html#Field\">Field</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L336-L337","name":"Nimber.inv_eq_invAux","line":336,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.inv_eq_invAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.inv_eq_invAux\"><span class=\"name\">Nimber</span>.<span class=\"name\">inv_eq_invAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv.inv\">⁻¹</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L333-L334","name":"Nimber.instInv","line":333,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instInv","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instInv\"><span class=\"name\">Nimber</span>.<span class=\"name\">instInv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Notation/Defs.html#Inv\">Inv</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L330-L331","name":"Nimber.mul_invAux_cancel","line":330,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_invAux_cancel","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_invAux_cancel\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_invAux_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L298-L300","name":"Nimber.invAux_mem_invSet_of_lt","line":298,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_mem_invSet_of_lt","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_mem_invSet_of_lt\"><span class=\"name\">Nimber</span>.<span class=\"name\">invAux_mem_invSet_of_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L294-L296","name":"Nimber.invAux_not_mem_invSet","line":294,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_not_mem_invSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_not_mem_invSet\"><span class=\"name\">Nimber</span>.<span class=\"name\">invAux_not_mem_invSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> ∉ <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L289-L292","name":"Nimber.mem_invSet_of_lt_invAux","line":289,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mem_invSet_of_lt_invAux","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mem_invSet_of_lt_invAux\"><span class=\"name\">Nimber</span>.<span class=\"name\">mem_invSet_of_lt_invAux</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L285-L287","name":"Nimber.invAux_ne_zero","line":285,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_ne_zero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux_ne_zero\"><span class=\"name\">Nimber</span>.<span class=\"name\">invAux_ne_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L272-L278","name":"Nimber.instSmallElemInvSet","line":272,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instSmallElemInvSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instSmallElemInvSet\"><span class=\"name\">Nimber</span>.<span class=\"name\">instSmallElemInvSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Small/Defs.html#Small\">Small.{u, u + 1}</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L256-L263","name":"Nimber.invSet_recOn","line":256,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet_recOn","doc":"A recursion principle for `invSet`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet_recOn\"><span class=\"name\">Nimber</span>.<span class=\"name\">invSet_recOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h0</span> : <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">0</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\"><span class=\"fn\">a'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\">∀ (<span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> (<span class=\"fn\"><span class=\"fn\">a'</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a'</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>))</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L250-L254","name":"Nimber.cons_mem_invSet","line":250,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.cons_mem_invSet","doc":"\"cons\" is our operation `(1 + (a + a') * b) / a'` in the definition of the inverse. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.cons_mem_invSet\"><span class=\"name\">Nimber</span>.<span class=\"name\">cons_mem_invSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">a'</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha₀</span> : <span class=\"fn\">a'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a'</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\">invAux</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a'</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L246-L248","name":"Nimber.zero_mem_invSet","line":246,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.zero_mem_invSet","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.zero_mem_invSet\"><span class=\"name\">Nimber</span>.<span class=\"name\">zero_mem_invSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\">invSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L239-L242","name":"Nimber.invSet","line":239,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet","doc":"The set in the definition of `invAux a`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invSet\"><span class=\"name\">Nimber</span>.<span class=\"name\">invSet</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/Set/Defs.html#Set\">Set</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L229-L237","name":"Nimber.invAux","line":229,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux","doc":"The nimber inverse `a⁻¹` is mutually recursively defined as the smallest nimber not in the set\n`s = invSet a`, which itself is defined as the smallest set with `0 ∈ s` and\n`(1 + (a + a') * b) / a' ∈ s` for `0 < a' < a` and `b ∈ s`.\n\nThis preliminary definition \"accidentally\" satisfies `invAux 0 = 1`, which the real inverse\ncorrects. The lemma `inv_eq_invAux` can be used to transfer between the two. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.invAux\"><span class=\"name\">Nimber</span>.<span class=\"name\">invAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L223-L223","name":"Nimber.instCancelMonoidWithZero","line":223,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCancelMonoidWithZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCancelMonoidWithZero\"><span class=\"name\">Nimber</span>.<span class=\"name\">instCancelMonoidWithZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#CancelMonoidWithZero\">CancelMonoidWithZero</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L222-L222","name":"Nimber.instIsDomain","line":222,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instIsDomain","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instIsDomain\"><span class=\"name\">Nimber</span>.<span class=\"name\">instIsDomain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#IsDomain\">IsDomain</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L211-L220","name":"Nimber.instCommRing","line":211,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCommRing","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCommRing\"><span class=\"name\">Nimber</span>.<span class=\"name\">instCommRing</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/Ring/Defs.html#CommRing\">CommRing</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L208-L209","name":"Nimber.mul_one","line":208,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_one\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L197-L206","name":"Nimber.one_mul","line":197,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.one_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.one_mul\"><span class=\"name\">Nimber</span>.<span class=\"name\">one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L189-L195","name":"Nimber.instIsCancelMulZero","line":189,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instIsCancelMulZero","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instIsCancelMulZero\"><span class=\"name\">Nimber</span>.<span class=\"name\">instIsCancelMulZero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#IsCancelMulZero\">IsCancelMulZero</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L167-L187","name":"Nimber.mul_assoc","line":167,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_assoc","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_assoc\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L160-L161","name":"Nimber.add_mul","line":160,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.add_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.add_mul\"><span class=\"name\">Nimber</span>.<span class=\"name\">add_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L115-L158","name":"Nimber.mul_add","line":115,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_add","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_add\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L108-L113","name":"Nimber.mul_comm","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_comm","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_comm\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L101-L106","name":"Nimber.instNoZeroDivisors","line":101,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instNoZeroDivisors","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instNoZeroDivisors\"><span class=\"name\">Nimber</span>.<span class=\"name\">instNoZeroDivisors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#NoZeroDivisors\">NoZeroDivisors</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L88-L94","name":"Nimber.instMulZeroClass","line":88,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instMulZeroClass","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instMulZeroClass\"><span class=\"name\">Nimber</span>.<span class=\"name\">instMulZeroClass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/GroupWithZero/Defs.html#MulZeroClass\">MulZeroClass</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L82-L86","name":"Nimber.mul_le_of_forall_ne","line":82,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_le_of_forall_ne","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_le_of_forall_ne\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_le_of_forall_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∀ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">c</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">c</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L77-L80","name":"Nimber.exists_of_lt_mul","line":77,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.exists_of_lt_mul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.exists_of_lt_mul\"><span class=\"name\">Nimber</span>.<span class=\"name\">exists_of_lt_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L61-L66","name":"Nimber.mul_def","line":61,"kind":"theorem","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul_def\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Order/SetNotation.html#InfSet.sInf\">sInf</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">{</a><span class=\"fn\">x</span> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">:</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> <a href=\"./Mathlib/Data/Set/Defs.html#setOf\">|</a> <span class=\"fn\">∃ <span class=\"fn\">a'</span> &lt; <span class=\"fn\">a</span>, <span class=\"fn\">∃ <span class=\"fn\">b'</span> &lt; <span class=\"fn\">b</span>, <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b'</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span></span><a href=\"./Mathlib/Data/Set/Defs.html#setOf\">}</a><a href=\"./Mathlib/Order/Notation.html#HasCompl.compl\">ᶜ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L58-L59","name":"Nimber.instMul","line":58,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instMul","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instMul\"><span class=\"name\">Nimber</span>.<span class=\"name\">instMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L50-L56","name":"Nimber.mul","line":50,"kind":"def","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul","doc":"Nimber multiplication is recursively defined so that `a * b` is the smallest nimber not equal to\n`a' * b + a * b' + a' * b'` for `a' < a` and `b' < b`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.mul\"><span class=\"name\">Nimber</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/Nimber/Field.lean#L39-L41","name":"Nimber.instCharPOfNatNat","line":39,"kind":"instance","docLink":"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCharPOfNatNat","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/Nimber/Field.html#Nimber.instCharPOfNatNat\"><span class=\"name\">Nimber</span>.<span class=\"name\">instCharPOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Algebra/CharP/Defs.html#CharP\">CharP</a> <a href=\"./Mathlib/SetTheory/Nimber/Basic.html#Nimber\">Nimber</a> <span class=\"fn\">2</span></span></div></div>"}]}