{"name":"Mathlib.Lean.Expr.ReplaceRec","instances":[],"imports":["Init","Lean.Expr","Mathlib.Util.MemoFix"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Lean/Expr/ReplaceRec.lean#L19-L32","name":"Lean.Expr.replaceRec","line":19,"kind":"def","docLink":"./Mathlib/Lean/Expr/ReplaceRec.html#Lean.Expr.replaceRec","doc":"A version of `Expr.replace` where the replacement function is available to the function `f?`.\n\n`replaceRec f? e` will call `f? r e` where `r = replaceRec f?`.\nIf `f? r e = none` then `r` will be called on each immediate subexpression of `e` and reassembled.\nIf it is `some x`, traversal terminates and `x` is returned.\nIf you wish to recursively replace things in the implementation of `f?`, you can apply `r`.\n\nThe function is also memoised, which means that if the\nsame expression (by reference) is encountered the cached replacement is used. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Lean/Expr/ReplaceRec.html#Lean.Expr.replaceRec\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">replaceRec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f?</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>"}]}