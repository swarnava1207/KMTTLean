{"name":"Lean.Meta.Tactic.Simp.BuiltinSimprocs.Util","instances":[],"imports":["Lean.Meta.Tactic.Simp.Simproc"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover/lean4/blob/045d07d2349b9989278991fbcd79a6430032930d/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/Util.lean#L11-L21","name":"Lean.Meta.Simp.evalPropStep","line":11,"kind":"def","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/Util.html#Lean.Meta.Simp.evalPropStep","doc":"Let `result` be the result of evaluating proposition `p`, return a `.done` step where\nthe resulting expression is `True`(`False`) if `result is `true`(`false`), and the\nproof is uses `Decidable p` and the auxiliary theorems `eq_true_of_decide`/`eq_false_of_decide`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/Util.html#Lean.Meta.Simp.evalPropStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">evalPropStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Step</a></span></div></div>"}]}