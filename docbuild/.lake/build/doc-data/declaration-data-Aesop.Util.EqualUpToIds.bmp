{"name":"Aesop.Util.EqualUpToIds","instances":[{"typeNames":["Aesop.EqualUpToIdsM"],"name":"Aesop.instMonadEqualUpToIdsM","className":"Monad"}],"imports":["Init","Batteries.Lean.Meta.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L416-L421","name":"Aesop.tacticStatesEqualUpToIds'","line":416,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">EqualUpToIdsM.State</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L410-L414","name":"Aesop.tacticStatesEqualUpToIds","line":410,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.tacticStatesEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">tacticStatesEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L403-L408","name":"Aesop.unassignedMVarsEqualUptoIds'","line":403,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">EqualUpToIdsM.State</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L397-L401","name":"Aesop.unassignedMVarsEqualUptoIds","line":397,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.unassignedMVarsEqualUptoIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">unassignedMVarsEqualUptoIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L389-L395","name":"Aesop.exprsEqualUpToIds'","line":389,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds'\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L381-L387","name":"Aesop.exprsEqualUpToIds","line":381,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.exprsEqualUpToIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">exprsEqualUpToIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁ </span><span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁ </span><span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L369-L377","name":"Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","line":369,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.tacticStatesEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">tacticStatesEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goals₁ </span><span class=\"fn\">goals₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L365-L367","name":"Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","line":365,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L362-L363","name":"Aesop.EqualUpToIds.exprsEqualUpToIdsCore","line":362,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.exprsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">exprsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L326-L357","name":"Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","line":326,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.unassignedMVarsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">unassignedMVarsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L311-L324","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","line":311,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore.go\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls₁ </span><span class=\"fn\">decls₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">decls₁</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">decls₂</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gctx</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L299-L324","name":"Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","line":299,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localContextsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localContextsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁ </span><span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁ </span><span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L283-L297","name":"Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","line":283,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.localDeclsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">localDeclsEqualUpToIdsCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <a href=\"./Lean/LocalContext.html#Lean.LocalDecl\">Lean.LocalDecl</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L250-L281","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues","line":250,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.compareMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span>.<span class=\"name\">compareMVarValues</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a> → <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L243-L248","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar","line":243,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃.normalizeMVar\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span>.<span class=\"name\">normalizeMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L196-L281","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃","line":196,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₃\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₃</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L190-L194","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr","line":190,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂.printExpr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₂</span>.<span class=\"name\">printExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L174-L194","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂","line":174,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\">ExprsEqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L167-L172","name":"Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁","line":167,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.exprsEqualUpToIdsCore₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">exprsEqualUpToIdsCore₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L160-L162","name":"Aesop.EqualUpToIds.ExprsEqualUpToIdsM","line":160,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.ExprsEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">ExprsEqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L152-L153","name":"Aesop.EqualUpToIds.levelsEqualUpToIdsCore","line":152,"kind":"opaque","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L129-L147","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","line":129,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a> → <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L122-L127","name":"Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","line":122,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.Unsafe.levelsEqualUpToIdsCore\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">Unsafe</span>.<span class=\"name\">levelsEqualUpToIdsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L112-L112","name":"Aesop.EqualUpToIds.MVarValue.delayedAssignment","line":112,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.delayedAssignment\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">delayedAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">da</span> : <a href=\"./Lean/MetavarContext.html#Lean.DelayedMetavarAssignment\">Lean.DelayedMetavarAssignment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L111-L111","name":"Aesop.EqualUpToIds.MVarValue.expr","line":111,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.expr\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L110-L110","name":"Aesop.EqualUpToIds.MVarValue.mvarId","line":110,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue.mvarId\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\">MVarValue</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L109-L112","name":"Aesop.EqualUpToIds.MVarValue","line":109,"kind":"inductive","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.MVarValue\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">MVarValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L107-L107","name":"Aesop.EqualUpToIds.GoalContext.equalFVarIds","line":107,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.equalFVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">equalFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L106-L106","name":"Aesop.EqualUpToIds.GoalContext.localInstances₂","line":106,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L105-L105","name":"Aesop.EqualUpToIds.GoalContext.lctx₂","line":105,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L104-L104","name":"Aesop.EqualUpToIds.GoalContext.localInstances₁","line":104,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.localInstances₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">localInstances₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L103-L103","name":"Aesop.EqualUpToIds.GoalContext.lctx₁","line":103,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.lctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">lctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L102-L102","name":"Aesop.EqualUpToIds.GoalContext.mk","line":102,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₁</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₁</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx₂</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">Lean.LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInstances₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">Lean.LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalFVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\">GoalContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L102-L107","name":"Aesop.EqualUpToIds.GoalContext","line":102,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.GoalContext\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">GoalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L91-L100","name":"Aesop.EqualUpToIds.equalCommonMVars?","line":91,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId₁ </span><span class=\"fn\">mvarId₂</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L80-L89","name":"Aesop.EqualUpToIds.equalCommonLMVars?","line":80,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.equalCommonLMVars?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">equalCommonLMVars?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lmvarId₁ </span><span class=\"fn\">lmvarId₂</span> : <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L76-L78","name":"Aesop.EqualUpToIds.readAllowAssignmentDiff","line":76,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readAllowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readAllowAssignmentDiff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L72-L74","name":"Aesop.EqualUpToIds.readMCtx₂","line":72,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₂</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L68-L70","name":"Aesop.EqualUpToIds.readMCtx₁","line":68,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readMCtx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readMCtx₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L64-L66","name":"Aesop.EqualUpToIds.readCommonMCtx?","line":64,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIds.readCommonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIds</span>.<span class=\"name\">readCommonMCtx?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L57-L60","name":"Aesop.EqualUpToIdsM.run","line":57,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L51-L55","name":"Aesop.EqualUpToIdsM.run'","line":51,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.run'\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L47-L49","name":"Aesop.instMonadEqualUpToIdsM","line":47,"kind":"instance","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.instMonadEqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">instMonadEqualUpToIdsM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\">EqualUpToIdsM</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L42-L43","name":"Aesop.EqualUpToIdsM","line":42,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L37-L37","name":"Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","line":37,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues","doc":"A map from metavariables which are unassigned in the right goal\nto their corresponding expression in the left goal. Only used when\n`allowAssignmentDiff = true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.rightUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">rightUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L33-L33","name":"Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","line":33,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues","doc":"A map from metavariables which are unassigned in the left goal\nto their corresponding expression in the right goal. Only used when\n`allowAssignmentDiff = true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.leftUnassignedMVarValues\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">leftUnassignedMVarValues</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L29-L29","name":"Aesop.EqualUpToIdsM.State.equalLMVarIds","line":29,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalLMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalLMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L28-L28","name":"Aesop.EqualUpToIdsM.State.equalMVarIds","line":28,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.equalMVarIds\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">equalMVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L27-L27","name":"Aesop.EqualUpToIdsM.State.mk","line":27,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalMVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalLMVarIds</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a> <a href=\"./Lean/Level.html#Lean.LMVarId\">Lean.LMVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leftUnassignedMVarValues </span><span class=\"fn\">rightUnassignedMVarValues</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\">State</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L27-L37","name":"Aesop.EqualUpToIdsM.State","line":27,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.State\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L25-L25","name":"Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","line":25,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff","doc":"Allow metavariables to be unassigned on one side of the comparison and\nassigned on the other. So when we compare two expressions and we encounter\na metavariable `?x` in one of them and a subexpression `e` in the other (at\nthe same position), we consider `?x` equal to `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.allowAssignmentDiff\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">allowAssignmentDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L19-L19","name":"Aesop.EqualUpToIdsM.Context.mctx₂","line":19,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₂\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₂</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L18-L18","name":"Aesop.EqualUpToIdsM.Context.mctx₁","line":18,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mctx₁\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mctx₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L17-L17","name":"Aesop.EqualUpToIdsM.Context.commonMCtx?","line":17,"kind":"def","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.commonMCtx?\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">commonMCtx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L16-L16","name":"Aesop.EqualUpToIdsM.Context.mk","line":16,"kind":"ctor","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context.mk\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commonMCtx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx₁ </span><span class=\"fn\">mctx₂</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowAssignmentDiff</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\">Context</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Util/EqualUpToIds.lean#L16-L25","name":"Aesop.EqualUpToIdsM.Context","line":16,"kind":"structure","docLink":"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Util/EqualUpToIds.html#Aesop.EqualUpToIdsM.Context\"><span class=\"name\">Aesop</span>.<span class=\"name\">EqualUpToIdsM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}