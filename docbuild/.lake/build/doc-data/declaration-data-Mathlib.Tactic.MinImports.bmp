{"name":"Mathlib.Tactic.MinImports","instances":[],"imports":["Init","Lean.Elab.DefView","Lean.Util.CollectAxioms","Mathlib.Init","ImportGraph.Imports"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L252-L253","name":"Mathlib.Command.MinImports.«command#min_importsIn_»","line":252,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.«command#min_importsIn_»","doc":"`#min_imports in cmd` scans the syntax `cmd` and the declaration obtained by elaborating `cmd`\nto find a collection of minimal imports that should be sufficient for `cmd` to work. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.«command#min_importsIn_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">«command#min_importsIn_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L248-L250","name":"Mathlib.Command.MinImports.minImpsStx","line":248,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsStx","doc":"`#min_imports in cmd` scans the syntax `cmd` and the declaration obtained by elaborating `cmd`\nto find a collection of minimal imports that should be sufficient for `cmd` to work. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsStx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">minImpsStx</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L232-L246","name":"Mathlib.Command.MinImports.minImpsCore","line":232,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsCore","doc":"`minImpsCore stx id` is the internal function to elaborate the `#min_imports in` command.\nIt collects the irredundant imports to parse and elaborate `stx` and logs\n```lean\nimport A\nimport B\n...\nimport Z\n```\nThe `id` input is expected to be the name of the declaration that is currently processed.\nIt is used to provide the internally generated name for \"nameless\" `instance`s.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.minImpsCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">minImpsCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L225-L230","name":"Mathlib.Command.MinImports.getIrredundantImports","line":225,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIrredundantImports","doc":"`getIrredundantImports env importNames` takes an `Environment` and a `NameSet` as inputs.\nAssuming that `importNames` are module names,\nit returns the `NameSet` consisting of a minimal collection of module names whose transitive\nclosure is enough to parse (and elaborate) `cmd`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIrredundantImports\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getIrredundantImports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">importNames</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L198-L223","name":"Mathlib.Command.MinImports.getAllImports","line":198,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllImports","doc":"`getAllImports cmd id` takes a `Syntax` input `cmd` and returns the `NameSet` of all the\nmodule names that are implied by\n* the `SyntaxNodeKinds`,\n* the attributes of `cmd` (if there are any),\n* the identifiers contained in `cmd`,\n* if `cmd` adds a declaration `d` to the environment, then also all the module names implied by `d`.\nThe argument `id` is expected to be an identifier.\nIt is used either for the internally generated name of a \"nameless\" `instance` or when parsing\nan identifier representing the name of a declaration.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllImports\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAllImports</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dbg?</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L175-L196","name":"Mathlib.Command.MinImports.getAllDependencies","line":175,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllDependencies","doc":"`getAllDependencies cmd id` takes a `Syntax` input `cmd` and returns the `NameSet` of all the\ndeclaration names that are implied by\n* the `SyntaxNodeKinds`,\n* the attributes of `cmd` (if there are any),\n* the identifiers contained in `cmd`,\n* if `cmd` adds a declaration `d` to the environment, then also all the module names implied by `d`.\nThe argument `id` is expected to be an identifier.\nIt is used either for the internally generated name of a \"nameless\" `instance` or when parsing\nan identifier representing the name of a declaration.\n\nNote that the return value does not contain dependencies of the dependencies;\nyou can use `Lean.NameSet.transitivelyUsedConstants` to get those.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAllDependencies\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAllDependencies</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd </span><span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L136-L173","name":"Mathlib.Command.MinImports.getDeclName","line":136,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getDeclName","doc":"`getDeclName cmd id` takes a `Syntax` input `cmd` and returns the `Name` of the declaration defined\nby `cmd`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getDeclName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L118-L134","name":"Mathlib.Command.MinImports.previousInstName","line":118,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.previousInstName","doc":"`previousInstName nm` takes as input a name `nm`, assuming that it is the name of an\nauto-generated \"nameless\" `instance`.\nIf `nm` ends in `..._n`, where `n` is a number, it returns the same name, but with `_n` replaced\nby `_(n-1)`, unless `n ≤ 1`, in which case it simply removes the `_n` suffix.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.previousInstName\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">previousInstName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L107-L116","name":"Mathlib.Command.MinImports.getAttrs","line":107,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrs","doc":"`getAttrs env stx` returns all attribute declaration names contained in `stx` and registered\nin the `Environment `env`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L99-L105","name":"Mathlib.Command.MinImports.getAttrNames","line":99,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrNames","doc":"`getAttrNames stx` extracts `attribute`s from `stx`.\nIt does not collect `simp`, `ext`, `to_additive`.\nIt should collect almost all other attributes, e.g., `fun_prop`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getAttrNames\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getAttrNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L92-L97","name":"Mathlib.Command.MinImports.getIds","line":92,"kind":"opaque","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIds","doc":"`getIds stx` extracts all identifiers, collecting them in a `NameSet`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getIds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L75-L90","name":"Mathlib.Command.MinImports.getId","line":75,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getId","doc":"`getId stx` takes as input a `Syntax` `stx`.\nIf `stx` contains a `declId`, then it returns the `ident`-syntax for the `declId`.\nIf `stx` is a nameless instance, then it also tries to fetch the `ident` for the instance.\nOtherwise it returns `.missing`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Lean.Elab.Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L68-L73","name":"Mathlib.Command.MinImports.getVisited","line":68,"kind":"def","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getVisited","doc":"extracts the names of the declarations in `env` on which `decl` depends. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getVisited\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getVisited</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Lean.Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/MinImports.lean#L59-L66","name":"Mathlib.Command.MinImports.getSyntaxNodeKinds","line":59,"kind":"opaque","docLink":"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getSyntaxNodeKinds","doc":"`getSyntaxNodeKinds stx` takes a `Syntax` input `stx` and returns the `NameSet` of all the\n`SyntaxNodeKinds` and all the identifiers contained in `stx`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/MinImports.html#Mathlib.Command.MinImports.getSyntaxNodeKinds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Command</span>.<span class=\"name\">MinImports</span>.<span class=\"name\">getSyntaxNodeKinds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a></span></div></div>"}]}