{"name":"Mathlib.SetTheory.ZFC.Ordinal","instances":[],"imports":["Init","Mathlib.Order.GameAdd","Mathlib.Order.RelIso.Set","Mathlib.SetTheory.ZFC.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L233-L235","name":"ZFSet.isOrdinal_empty","line":233,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L223-L229","name":"ZFSet.isOrdinal_iff_isWellOrder","line":223,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isWellOrder","doc":"An ordinal is a transitive set, well-ordered under membership. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isWellOrder\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_iff_isWellOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>\n      <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L218-L221","name":"ZFSet.IsOrdinal.isWellOrder","line":218,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isWellOrder","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isWellOrder\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">isWellOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/RelClasses.html#IsWellOrder\">IsWellOrder</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>\n  <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L205-L216","name":"ZFSet.isOrdinal_iff_isTrichotomous","line":205,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isTrichotomous","doc":"An ordinal is a transitive set, trichotomous under membership. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isTrichotomous\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_iff_isTrichotomous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrichotomous\">IsTrichotomous</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>\n      <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L202-L203","name":"ZFSet.IsOrdinal.isTrichotomous","line":202,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTrichotomous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTrichotomous\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">isTrichotomous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrichotomous\">IsTrichotomous</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>\n  <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L198-L200","name":"ZFSet.IsOrdinal.mem_trichotomous","line":198,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trichotomous","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trichotomous\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem_trichotomous</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L193-L196","name":"ZFSet.IsOrdinal.subset_total","line":193,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_total","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_total\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">subset_total</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L189-L191","name":"ZFSet.IsOrdinal.mem_or_subset","line":189,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_or_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_or_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem_or_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L186-L187","name":"ZFSet.IsOrdinal.not_subset_iff_mem","line":186,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.not_subset_iff_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.not_subset_iff_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">not_subset_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L178-L184","name":"ZFSet.IsOrdinal.not_mem_iff_subset","line":178,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.not_mem_iff_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.not_mem_iff_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">not_mem_iff_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> ∉ <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L172-L176","name":"ZFSet.IsOrdinal.mem_of_subset_of_mem","line":172,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_of_subset_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_of_subset_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem_of_subset_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hz</span> : <span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L170-L170","name":"ZFSet.IsOrdinal.eq_or_mem_of_subset","line":170,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.eq_or_mem_of_subset","doc":"**Alias** of the forward direction of `ZFSet.IsOrdinal.subset_iff_eq_or_mem`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.eq_or_mem_of_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">eq_or_mem_of_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L150-L168","name":"ZFSet.IsOrdinal.subset_iff_eq_or_mem","line":150,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_iff_eq_or_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_iff_eq_or_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">subset_iff_eq_or_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L143-L148","name":"ZFSet.isOrdinal_iff_forall_mem_isOrdinal","line":143,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_forall_mem_isOrdinal","doc":"An ordinal is a transitive set of ordinals. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_forall_mem_isOrdinal\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_iff_forall_mem_isOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L137-L141","name":"ZFSet.isOrdinal_iff_forall_mem_isTransitive","line":137,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_forall_mem_isTransitive","doc":"An ordinal is a transitive set of transitive sets. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_forall_mem_isTransitive\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_iff_forall_mem_isTransitive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L132-L135","name":"ZFSet.IsOrdinal.mem","line":132,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L121-L130","name":"ZFSet.isOrdinal_iff_isTrans","line":121,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isTrans","doc":"The simplified form of transitivity used within `IsOrdinal` yields an equivalent definition to\nthe standard one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isOrdinal_iff_isTrans\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isOrdinal_iff_isTrans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Prelude.html#And\">∧</a>     <span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a>\n      <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L118-L119","name":"ZFSet.IsOrdinal.isTrans","line":118,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTrans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTrans\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">isTrans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Order/Defs/Unbundled.html#IsTrans\">IsTrans</a> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Subtype\">}</a> <span class=\"fn\">(<a href=\"./Mathlib/Order/RelIso/Set.html#Subrel\">Subrel</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L115-L116","name":"ZFSet.IsOrdinal.mem_trans","line":115,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trans\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L112-L113","name":"ZFSet.IsOrdinal.subset_of_mem","line":112,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.subset_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">subset_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L108-L108","name":"ZFSet.IsOrdinal.mem_trans'","line":108,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trans'","doc":"The membership operation within an ordinal is transitive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mem_trans'\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mem_trans'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z </span><span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span> → <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L106-L106","name":"ZFSet.IsOrdinal.isTransitive","line":106,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTransitive","doc":"An ordinal is a transitive set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.isTransitive\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">isTransitive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L104-L104","name":"ZFSet.IsOrdinal.mk","line":104,"kind":"ctor","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal.mk\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isTransitive</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem_trans'</span> : <span class=\"fn\">∀ {<span class=\"fn\">y </span><span class=\"fn\">z </span><span class=\"fn\">w</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>}, <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span> → <span class=\"fn\"><span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">w</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\">IsOrdinal</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L99-L108","name":"ZFSet.IsOrdinal","line":99,"kind":"structure","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal","doc":"A set `x` is a von Neumann ordinal when it's a transitive set, that's transitive under `∈`. We\nprove that this further implies that `x` is well-ordered under `∈` in `isOrdinal_iff_isWellOrder`.\n\nThe transitivity condition `a ∈ b → b ∈ c → a ∈ c` can be written without assuming `a ∈ x` and\n`b ∈ x`. The lemma `isOrdinal_iff_isTrans` shows this condition is equivalent to the usual one. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsOrdinal\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsOrdinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L95-L95","name":"ZFSet.IsTransitive.subset_powerset","line":95,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.subset_powerset","doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_subset_powerset`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.subset_powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">subset_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> → <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">powerset</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L92-L93","name":"ZFSet.isTransitive_iff_subset_powerset","line":92,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_subset_powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_subset_powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isTransitive_iff_subset_powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">powerset</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L90-L90","name":"ZFSet.IsTransitive.sUnion_subset","line":90,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion_subset","doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_sUnion_subset`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">sUnion_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> → <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L83-L88","name":"ZFSet.isTransitive_iff_sUnion_subset","line":83,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_sUnion_subset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_sUnion_subset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isTransitive_iff_sUnion_subset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L78-L81","name":"ZFSet.IsTransitive.powerset","line":78,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.powerset","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.powerset\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">powerset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.powerset\">powerset</a></span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L69-L76","name":"ZFSet.IsTransitive.union","line":69,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.union","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.union\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">union</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Union.union\">∪</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L63-L67","name":"ZFSet.IsTransitive.sUnion'","line":63,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion'","doc":"The union of transitive sets is transitive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion'\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">sUnion'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\">∀ <span class=\"fn\">y</span> ∈ <span class=\"fn\">x</span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L57-L61","name":"ZFSet.IsTransitive.sUnion","line":57,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion","doc":"The union of a transitive set is transitive. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.sUnion\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">sUnion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet.sUnion\">⋃₀</a> <span class=\"fn\">x</span>).<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L52-L55","name":"ZFSet.IsTransitive.inter","line":52,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.inter","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.inter\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">inter</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Core.html#Inter.inter\">∩</a> <span class=\"fn\">y</span>).<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L50-L50","name":"ZFSet.IsTransitive.mem_trans","line":50,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.mem_trans","doc":"**Alias** of the forward direction of `ZFSet.isTransitive_iff_mem_trans`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.mem_trans\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">mem_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> → <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L47-L48","name":"ZFSet.isTransitive_iff_mem_trans","line":47,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_mem_trans","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_iff_mem_trans\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isTransitive_iff_mem_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">z</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}, <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">y</span> → <span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">z</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L45-L45","name":"ZFSet.IsTransitive.subset_of_mem","line":45,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.subset_of_mem","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive.subset_of_mem\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span>.<span class=\"name\">subset_of_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u}</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">x</span> → <span class=\"fn\">y</span> <a href=\"./Init/Core.html#HasSubset.Subset\">⊆</a> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L42-L43","name":"ZFSet.isTransitive_empty","line":42,"kind":"theorem","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_empty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.isTransitive_empty\"><span class=\"name\">ZFSet</span>.<span class=\"name\">isTransitive_empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>.<a href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\">IsTransitive</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/SetTheory/ZFC/Ordinal.lean#L36-L40","name":"ZFSet.IsTransitive","line":36,"kind":"def","docLink":"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive","doc":"A transitive set is one where every element is a subset.\n\nThis is equivalent to being an infinite-open interval in the transitive closure of membership. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/SetTheory/ZFC/Ordinal.html#ZFSet.IsTransitive\"><span class=\"name\">ZFSet</span>.<span class=\"name\">IsTransitive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Mathlib/SetTheory/ZFC/Basic.html#ZFSet\">ZFSet.{u_1}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}