{"name":"Mathlib.CategoryTheory.Limits.Sifted","instances":[{"typeNames":[],"name":"CategoryTheory.IsSifted.instIsConnected","className":"CategoryTheory.IsConnected"},{"typeNames":[],"name":"CategoryTheory.IsSifted.instIsSiftedOrEmptyOfHasBinaryCoproducts","className":"CategoryTheory.Functor.Final"},{"typeNames":[],"name":"CategoryTheory.IsSifted.isSifted_of_hasBinaryCoproducts_and_nonempty","className":"CategoryTheory.IsSifted"},{"typeNames":["CategoryTheory.Functor.prod'"],"name":"CategoryTheory.instFinalProdProd'","className":"CategoryTheory.Functor.Final"}],"imports":["Init","Mathlib.CategoryTheory.Limits.Final"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L113-L114","name":"CategoryTheory.instFinalProdProd'","line":113,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.instFinalProdProd'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.instFinalProdProd'\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instFinalProdProd'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSiftedOrEmpty\">IsSiftedOrEmpty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v₁, u₁}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D'</span> : <a href=\"./foundational_types.html\">Type</a> u₂}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v₂, u₂}</a> <span class=\"fn\">D'</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">Functor</a> <span class=\"fn\">C</span> <span class=\"fn\">D'</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><span class=\"fn\">G</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">F</span>.<a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.Functor.prod'\">prod'</a></span> <span class=\"fn\">G</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L100-L102","name":"CategoryTheory.IsSifted.isSifted_of_hasBinaryCoproducts_and_nonempty","line":100,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_of_hasBinaryCoproducts_and_nonempty","doc":"A nonempty category with binary coproducts is sifted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_of_hasBinaryCoproducts_and_nonempty\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">isSifted_of_hasBinaryCoproducts_and_nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.HasBinaryCoproducts\">Limits.HasBinaryCoproducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L84-L98","name":"CategoryTheory.IsSifted.instIsSiftedOrEmptyOfHasBinaryCoproducts","line":84,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.instIsSiftedOrEmptyOfHasBinaryCoproducts","doc":"A category with binary coproducts is sifted or empty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.instIsSiftedOrEmptyOfHasBinaryCoproducts\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">instIsSiftedOrEmptyOfHasBinaryCoproducts</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Shapes/BinaryProducts.html#CategoryTheory.Limits.HasBinaryCoproducts\">Limits.HasBinaryCoproducts</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSiftedOrEmpty\">IsSiftedOrEmpty</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L69-L82","name":"CategoryTheory.IsSifted.instIsConnected","line":69,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.instIsConnected","doc":"A sifted category is connected. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.instIsConnected\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">instIsConnected</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/IsConnected.html#CategoryTheory.IsConnected\">IsConnected</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L64-L67","name":"CategoryTheory.IsSifted.isSifted_iff_asSmallIsSifted","line":64,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_iff_asSmallIsSifted","doc":"In particular a category is sifted iff and only if it is so when viewed as a small category "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_iff_asSmallIsSifted\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">isSifted_iff_asSmallIsSifted</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/ULift.html#CategoryTheory.AsSmall\">AsSmall</a> <span class=\"fn\">C</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L52-L62","name":"CategoryTheory.IsSifted.isSifted_of_equiv","line":52,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_of_equiv","doc":"Being sifted is preserved by equivalences of categories "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.isSifted_of_equiv\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">isSifted_of_equiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">D</span> : <a href=\"./foundational_types.html\">Type</a> u₁}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v₁, u₁}</a> <span class=\"fn\">D</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\">D</span> <a href=\"./Mathlib/CategoryTheory/Equivalence.html#CategoryTheory.Equivalence\">≌</a> <span class=\"fn\">C</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">D</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L40-L40","name":"CategoryTheory.IsSifted.nonempty","line":40,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.nonempty","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.nonempty\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">nonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L39-L39","name":"CategoryTheory.IsSifted.mk","line":39,"kind":"ctor","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toFinal</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.Functor.diag\">Functor.diag</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">nonempty</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L39-L40","name":"CategoryTheory.IsSifted.toFinal","line":39,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.toFinal","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted.toFinal\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span>.<span class=\"name\">toFinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\">IsSifted</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.Functor.diag\">Functor.diag</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L36-L40","name":"CategoryTheory.IsSifted","line":36,"kind":"class","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted","doc":"A category `C` `IsSfited` if\n1. the diagonal functor `C ⥤ C × C` is final.\n2. there exists some object. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSifted\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSifted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_extends\">extends</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Products/Basic.html#CategoryTheory.Functor.diag\">CategoryTheory.Functor.diag</a> <span class=\"fn\">C</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Limits/Final.html#CategoryTheory.Functor.Final\">Final</a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Limits/Sifted.lean#L33-L34","name":"CategoryTheory.IsSiftedOrEmpty","line":33,"kind":"def","docLink":"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSiftedOrEmpty","doc":"A category `C` `IsSiftedOrEmpty` if the diagonal functor `C ⥤ C × C` is final. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Limits/Sifted.html#CategoryTheory.IsSiftedOrEmpty\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">IsSiftedOrEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{v, u}</a> <span class=\"fn\">C</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>"}]}