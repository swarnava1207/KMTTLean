{"name":"Mathlib.Data.PFunctor.Multivariate.W","instances":[{"typeNames":["MvPFunctor.WPath"],"name":"MvPFunctor.WPath.inhabited","className":"Inhabited"},{"typeNames":["MvPFunctor.W"],"name":"MvPFunctor.mvfunctorW","className":"MvFunctor"}],"imports":["Init","Mathlib.Data.PFunctor.Multivariate.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L251-L252","name":"MvPFunctor.wDest'_wMk'","line":251,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'_wMk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\">wDest'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'\">wMk'</a></span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L248-L249","name":"MvPFunctor.wDest'_wMk","line":248,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'_wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'_wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\">wDest'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\">a</span>, <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.splitFun\">TypeVec.splitFun</a> <span class=\"fn\">f'</span> <span class=\"fn\">f</span></span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L244-L246","name":"MvPFunctor.wDest'","line":244,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'","doc":"Destructor for the W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wDest'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wDest'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L240-L242","name":"MvPFunctor.wMk'","line":240,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'","doc":"Constructor for the W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk'\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L227-L231","name":"MvPFunctor.map_objAppend1","line":227,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.map_objAppend1","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.map_objAppend1\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">map_objAppend1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">γ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> (<span class=\"fn\">g</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.appendFun\">:::</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\">wMap</a></span> <span class=\"fn\">g</span></span>) <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\">objAppend1</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\">objAppend1</a></span> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f'</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\">wMap</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L221-L225","name":"MvPFunctor.objAppend1","line":221,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1","doc":"Constructor of a value of `P.obj (α ::: β)` from components.\nUseful to avoid complicated type annotation "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.objAppend1\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">objAppend1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\">P</span></span> (<span class=\"fn\">α</span> <a href=\"./Mathlib/Data/TypeVec.html#TypeVec.append1\">:::</a> <span class=\"fn\">β</span>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L200-L217","name":"MvPFunctor.w_map_wMk","line":200,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_map_wMk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_map_wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_map_wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">g</span> <span class=\"fn\">f'</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor.map\">MvFunctor.map</a> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L196-L198","name":"MvPFunctor.wMk_eq","line":196,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">g'</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">i</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">i</span></span>⟩</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">⟨<span class=\"fn\"><a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span></span>⟩</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L193-L194","name":"MvPFunctor.wMap","line":193,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap","doc":"W-types are functorial "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMap\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">β</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L189-L191","name":"MvPFunctor.w_cases","line":189,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_cases","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_cases\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L175-L187","name":"MvPFunctor.w_ind","line":175,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_ind","doc":"Induction principle for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.w_ind\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">w_ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>), <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L166-L173","name":"MvPFunctor.wRec_eq","line":166,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec_eq","doc":"Defining equation for the recursor of `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\">wRec</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\">wMk</a></span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">f'</span> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\">wRec</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L157-L164","name":"MvPFunctor.wRec","line":157,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec","doc":"Recursor for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wRec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L151-L155","name":"MvPFunctor.wMk","line":151,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk","doc":"Constructor for `W` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L137-L141","name":"MvPFunctor.wp_ind","line":137,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp_ind","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp_ind\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wp_ind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ih</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>) (<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>), <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">wPathDestRight</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span>)</span> → <span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">f'</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">C</span> <span class=\"fn\">x</span> <span class=\"fn\">f'</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L131-L134","name":"MvPFunctor.wpRec_eq","line":131,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec_eq","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec_eq\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\">wpRec</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">f'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span> <span class=\"fn\">f</span> <span class=\"fn\">f'</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\">wpRec</a></span> <span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">wPathDestRight</a></span> <span class=\"fn\">f'</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L126-L129","name":"MvPFunctor.wpRec","line":126,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpRec\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">C</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>) → <span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\">C</span>)</span> → <span class=\"fn\">C</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">α</span></span> → <span class=\"fn\">C</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L121-L124","name":"MvPFunctor.wpMk","line":121,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpMk","doc":"Constructor for `wp` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wpMk\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wpMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L114-L114","name":"MvPFunctor.mvfunctorW","line":114,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.mvfunctorW","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.mvfunctorW\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">mvfunctorW</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor/Multivariate.html#MvFunctor\">MvFunctor</a> <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\">W</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L110-L112","name":"MvPFunctor.W","line":110,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W","doc":"W-type of `P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.W\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">W</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u}</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L102-L108","name":"MvPFunctor.wp","line":102,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp","doc":"Polynomial functor for the W-type of `P`. `A` is a data-less well-founded\ntree whereas, for a given `a : A`, `B a` is a valid path in tree `a` so\nthat `Wp.obj α` is made of a tree and a function from its valid paths to\nthe values it contains "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wp\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> <span class=\"fn\">n</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L97-L100","name":"MvPFunctor.comp_wPathCasesOn","line":97,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.comp_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.comp_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">comp_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_2}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">α</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">g'</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">i</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.comp\">TypeVec.comp</a> <span class=\"fn\">h</span> <span class=\"fn\">(<span class=\"fn\">g</span> <span class=\"fn\">i</span>)</span></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L93-L95","name":"MvPFunctor.wPathCasesOn_eta","line":93,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn_eta","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn_eta\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathCasesOn_eta</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\">wPathDestLeft</a></span> <span class=\"fn\">h</span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">wPathDestRight</a></span> <span class=\"fn\">h</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">h</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L89-L91","name":"MvPFunctor.wPathDestRight_wPathCasesOn","line":89,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestRight_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\">wPathDestRight</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L85-L87","name":"MvPFunctor.wPathDestLeft_wPathCasesOn","line":85,"kind":"theorem","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft_wPathCasesOn","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft_wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestLeft_wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\">wPathDestLeft</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\">wPathCasesOn</a></span> <span class=\"fn\">g'</span> <span class=\"fn\">g</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">g'</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L80-L83","name":"MvPFunctor.wPathDestRight","line":80,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestRight\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L76-L78","name":"MvPFunctor.wPathDestLeft","line":76,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathDestLeft\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathDestLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L68-L74","name":"MvPFunctor.wPathCasesOn","line":68,"kind":"def","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn","doc":"Specialized destructor on `WPath` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.wPathCasesOn\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">wPathCasesOn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec\">TypeVec.{u_1}</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g'</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">Arrow</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>) → <span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span>)</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/TypeVec.html#TypeVec.Arrow\">TypeVec.Arrow</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">α</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L63-L66","name":"MvPFunctor.WPath.inhabited","line":63,"kind":"instance","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.inhabited","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.inhabited\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">inhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">I</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W.head\">head</a></span> <span class=\"fn\">i</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">x</span> <span class=\"fn\">i</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L60-L61","name":"MvPFunctor.WPath.child","line":60,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.child","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.child\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">child</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">j</span>)</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L59-L59","name":"MvPFunctor.WPath.root","line":59,"kind":"ctor","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.root","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath.root\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span>.<span class=\"name\">root</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.A\">A</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.B\">B</a></span> <span class=\"fn\">a</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.drop\">drop</a></span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.B\">B</a></span> <span class=\"fn\">a</span> <span class=\"fn\">i</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\">WPath</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/W/Basic.html#WType.mk\">WType.mk</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">i</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/PFunctor/Multivariate/W.lean#L57-L61","name":"MvPFunctor.WPath","line":57,"kind":"inductive","docLink":"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath","doc":"A path from the root of a tree to one of its node "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/PFunctor/Multivariate/W.html#MvPFunctor.WPath\"><span class=\"name\">MvPFunctor</span>.<span class=\"name\">WPath</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor\">MvPFunctor.{u}</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">P</span>.<a href=\"./Mathlib/Data/PFunctor/Multivariate/Basic.html#MvPFunctor.last\">last</a></span>.<a href=\"./Mathlib/Data/PFunctor/Univariate/Basic.html#PFunctor.W\">W</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Data/Fin/Fin2.html#Fin2\">Fin2</a> <span class=\"fn\">n</span></span> → <a href=\"./foundational_types.html\">Type</a> u</span></span></div></div>"}]}