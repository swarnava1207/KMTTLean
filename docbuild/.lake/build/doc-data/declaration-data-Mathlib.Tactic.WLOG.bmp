{"name":"Mathlib.Tactic.WLOG","instances":[],"imports":["Init","Mathlib.Tactic.Core","Lean.Meta.Tactic.Cases"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L113-L130","name":"Mathlib.Tactic.wlog","line":113,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.wlog","doc":"`wlog h : P` will add an assumption `h : P` to the main goal, and add a side goal that requires\nshowing that the case `h : ¬ P` can be reduced to the case where `P` holds (typically by symmetry).\n\nThe side goal will be at the top of the stack. In this side goal, there will be two additional\nassumptions:\n- `h : ¬ P`: the assumption that `P` does not hold\n- `this`: which is the statement that in the old context `P` suffices to prove the goal.\n  By default, the name `this` is used, but the idiom `with H` can be added to specify the name:\n  `wlog h : P with H`.\n\nTypically, it is useful to use the variant `wlog h : P generalizing x y`,\nto revert certain parts of the context before creating the new goal.\nIn this way, the wlog-claim `this` can be applied to `x` and `y` in different orders\n(exploiting symmetry, which is the typical use case).\n\nBy default, the entire context is reverted. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.wlog\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">wlog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L50-L111","name":"Lean.MVarId.wlog","line":50,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Lean.MVarId.wlog","doc":"`wlog goal h P xs H` will return two goals: the `hypothesisGoal`, which adds an assumption\n`h : P` to the context of `goal`, and the `reductionGoal`, which requires showing that the case\n`h : ¬ P` can be reduced to the case where `P` holds (typically by symmetry).\n\nIn `reductionGoal`, there will be two additional assumptions:\n- `h : ¬ P`: the assumption that `P` does not hold\n- `H`: which is the statement that in the old context `P` suffices to prove the goal.\n  If `H` is `none`, the name `this` is used.\n\nIf `xs` is `none`, all hypotheses are reverted to produce the reduction goal's hypothesis `H`.\nOtherwise, the `xs` are elaborated to hypotheses in the context of `goal`, and only those\nhypotheses are reverted (and any that depend on them).\n\nIf `h` is `none`, the hypotheses of types `P` and `¬ P` in both branches will be inaccessible. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Lean.MVarId.wlog\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">wlog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`ident</span>)</span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">Elab.Tactic.TacticM</a> <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">Mathlib.Tactic.WLOGResult</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L47-L47","name":"Mathlib.Tactic.WLOGResult.revertedFVarIds","line":47,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.revertedFVarIds","doc":"The array of `FVarId`s that was reverted to produce the reduction hypothesis `H` in\n`reductionGoal`, which are still present in the context of `reductionGoal` (but not necessarily\n`hypothesisGoal`). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.revertedFVarIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">revertedFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L43-L43","name":"Mathlib.Tactic.WLOGResult.hypothesisFVarId","line":43,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisFVarId","doc":"The `FVarId` of the hypothesis `h` in `hypothesisGoal` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisFVarId\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">hypothesisFVarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L41-L41","name":"Mathlib.Tactic.WLOGResult.hypothesisGoal","line":41,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisGoal","doc":"The original goal with the additional assumption `h : P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.hypothesisGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">hypothesisGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L39-L39","name":"Mathlib.Tactic.WLOGResult.reductionFVarIds","line":39,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionFVarIds","doc":"The pair `(HFVarId, negHypFVarId)` of `FVarIds` for `reductionGoal`:\n\n* `HFVarId`: `H`, the statement that in the original context `P` suffices to prove the goal.\n* `negHypFVarId`: `h : ¬ P`, the assumption that `P` does not hold\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionFVarIds\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">reductionFVarIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L33-L33","name":"Mathlib.Tactic.WLOGResult.reductionGoal","line":33,"kind":"def","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionGoal","doc":"The `reductionGoal` requires showing that the case `h : ¬ P` can be reduced to the case where\n`P` holds. It has two additional assumptions in its context:\n\n* `h : ¬ P`: the assumption that `P` does not hold\n* `H`: the statement that in the original context `P` suffices to prove the goal.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.reductionGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">reductionGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L26-L26","name":"Mathlib.Tactic.WLOGResult.mk","line":26,"kind":"ctor","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.mk","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reductionGoal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reductionFVarIds</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypothesisGoal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hypothesisFVarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">revertedFVarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\">WLOGResult</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/WLOG.lean#L25-L47","name":"Mathlib.Tactic.WLOGResult","line":25,"kind":"structure","docLink":"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult","doc":"The result of running `wlog` on a goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/WLOG.html#Mathlib.Tactic.WLOGResult\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">WLOGResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}