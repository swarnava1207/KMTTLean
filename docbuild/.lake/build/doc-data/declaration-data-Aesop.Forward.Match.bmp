{"name":"Aesop.Forward.Match","instances":[{"typeNames":["Aesop.ForwardRuleMatch"],"name":"Aesop.ForwardRuleMatch.instToMessageData","className":"Lean.ToMessageData"}],"imports":["Init","Aesop.Forward.Match.Types","Aesop.Forward.PremiseIndex","Aesop.Forward.SlotIndex","Aesop.Rule","Aesop.Rule.Forward","Aesop.RuleTac.Descr","Aesop.RuleTac.ElabRuleTerm","Aesop.RuleTac.Forward.Basic","Aesop.Script.SpecificTactics","Batteries.Lean.Meta.UnusedNames","Lean"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L220-L223","name":"Aesop.ForwardRuleMatch.toUnsafeRule?","line":220,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toUnsafeRule?","doc":"Convert an unsafe forward rule match to an unsafe rule. Fails if the match\nis not an unsafe rule match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toUnsafeRule?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">toUnsafeRule?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Rule.html#Aesop.UnsafeRule\">UnsafeRule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L215-L218","name":"Aesop.ForwardRuleMatch.toSafeRule?","line":215,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toSafeRule?","doc":"Convert a safe forward rule match to a safe rule. Fails if the match is not\na safe rule match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toSafeRule?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">toSafeRule?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Rule.html#Aesop.SafeRule\">SafeRule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L210-L213","name":"Aesop.ForwardRuleMatch.toNormRule?","line":210,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toNormRule?","doc":"Convert a norm forward rule match to a norm rule. Fails if the match is not\na norm rule match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toNormRule?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">toNormRule?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/Rule.html#Aesop.NormRule\">NormRule</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L198-L208","name":"Aesop.ForwardRuleMatch.toRule?","line":198,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toRule?","doc":"Convert a forward rule match `m` to a rule. Fails if `mkExtra? m` fails. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toRule?\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">toRule?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkExtra?</span> : <span class=\"fn\"><a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Aesop/Rule/Basic.html#Aesop.Rule\">Rule</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L194-L196","name":"Aesop.ForwardRuleMatch.toRuleTacDescr","line":194,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toRuleTacDescr","doc":"Convert a forward rule match to a rule tactic description. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.toRuleTacDescr\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">toRuleTacDescr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/RuleTac/Descr.html#Aesop.RuleTacDescr\">RuleTacDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L164-L192","name":"Aesop.ForwardRuleMatch.apply","line":164,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.apply","doc":"Apply a forward rule match to a goal. This adds the hypothesis corresponding\nto the match to the local context. Returns the new goal, the added hypothesis\nand the hypotheses that were removed (if any). Hypotheses may be removed if the\nmatch is for a `destruct` rule. If the `skip` function, when applied to the\nnormalised type of the new hypothesis, returns true, then the hypothesis is not\nadded to the local context. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.apply\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">skip?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/Script/ScriptM.html#Aesop.ScriptT\">ScriptT</a> <a href=\"./Aesop/BaseM.html#Aesop.BaseM\">BaseM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a></span>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L128-L162","name":"Aesop.ForwardRuleMatch.getProof","line":128,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.getProof","doc":"Construct the proof of the new hypothesis represented by `m`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.getProof\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">getProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L123-L126","name":"Aesop.ForwardRuleMatch.getPropHyps","line":123,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.getPropHyps","doc":"Get the hypotheses from the match whose types are propositions.  "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.getPropHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">getPropHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L115-L121","name":"Aesop.ForwardRuleMatch.anyHyp","line":115,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.anyHyp","doc":"Returns `true` if any hypothesis contained in `m` satisfies `f`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.anyHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">anyHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L111-L113","name":"Aesop.ForwardRuleMatch.foldHyps","line":111,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.foldHyps","doc":"Fold over the hypotheses contained in a match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.foldHyps\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">foldHyps</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\">σ</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">σ</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L102-L109","name":"Aesop.ForwardRuleMatch.foldHypsM","line":102,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.foldHypsM","doc":"Fold over the hypotheses contained in a match. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.foldHypsM\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">foldHypsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">M</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">M</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a> → <span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">σ</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">M</span> <span class=\"fn\">σ</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L99-L100","name":"Aesop.ForwardRuleMatch.instToMessageData","line":99,"kind":"instance","docLink":"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.instToMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.ForwardRuleMatch.instToMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">ForwardRuleMatch</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">Lean.ToMessageData</a> <a href=\"./Aesop/Forward/Match/Types.html#Aesop.ForwardRuleMatch\">ForwardRuleMatch</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L91-L93","name":"Aesop.CompleteMatch.toMessageData","line":91,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.CompleteMatch.toMessageData","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.CompleteMatch.toMessageData\"><span class=\"name\">Aesop</span>.<span class=\"name\">CompleteMatch</span>.<span class=\"name\">toMessageData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">Lean.MessageData</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L73-L88","name":"Aesop.CompleteMatch.reconstructArgs","line":73,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.CompleteMatch.reconstructArgs","doc":"Given a complete match `m` for `r`, get arguments to `r` contained in the\nmatch's slots and substitution. For non-immediate arguments, we return `none`.\nThe returned levels are suitable assignments for the level mvars of `r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.CompleteMatch.reconstructArgs\"><span class=\"name\">Aesop</span>.<span class=\"name\">CompleteMatch</span>.<span class=\"name\">reconstructArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Aesop/Rule/Forward.html#Aesop.ForwardRule\">ForwardRule</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.CompleteMatch\">CompleteMatch</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Aesop/RPINF/Basic.html#Aesop.RPINF\">RPINF</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Level.html#Lean.Level\">Lean.Level</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L65-L67","name":"Aesop.Match.containsPatSubst","line":65,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.Match.containsPatSubst","doc":"Returns `true` if the match contains the given pattern substitution. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.Match.containsPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Match</span>.<span class=\"name\">containsPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L60-L63","name":"Aesop.Match.containsHyp","line":60,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.Match.containsHyp","doc":"Returns `true` if the match contains the given hyp. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.Match.containsHyp\"><span class=\"name\">Aesop</span>.<span class=\"name\">Match</span>.<span class=\"name\">containsHyp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyp</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">Lean.FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L46-L58","name":"Aesop.Match.addHypOrPatSubst","line":46,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.Match.addHypOrPatSubst","doc":"Add a hyp or pattern substitution to the match. `subst` is the substitution\nthat results from matching a hypothesis against slot `m.level + 1`, or from the\npattern. `isPatSubst` is `true` if the substitution resulted from a pattern\nsubstitution. `forwardDeps` are the forward dependencies of slot\n`m.level + 1`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.Match.addHypOrPatSubst\"><span class=\"name\">Aesop</span>.<span class=\"name\">Match</span>.<span class=\"name\">addHypOrPatSubst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPatSubst</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forwardDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L33-L44","name":"Aesop.Match.initial","line":33,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.Match.initial","doc":"Create a one-element match. `subst` is the substitution that results from\nmatching a hypothesis against slot 0, or from a pattern substitution.\n`isPatSubst` is `true` if the substitution resulted from a rule pattern.\n`forwardDeps` are the forward dependencies of slot 0. `conclusionDeps` are the\nconclusion dependencies of the rule to which this match belongs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.Match.initial\"><span class=\"name\">Aesop</span>.<span class=\"name\">Match</span>.<span class=\"name\">initial</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subst</span> : <a href=\"./Aesop/Forward/Substitution.html#Aesop.Substitution\">Substitution</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isPatSubst</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forwardDeps </span><span class=\"fn\">conclusionDeps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Aesop/Forward/PremiseIndex.html#Aesop.PremiseIndex\">PremiseIndex</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Aesop/Forward/Match/Types.html#Aesop.Match\">Match</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/aesop/blob/57185dfad68d78356f9462af984882d6f262aa5d/Aesop/Forward/Match.lean#L25-L29","name":"Aesop.elabForwardRuleTerm","line":25,"kind":"def","docLink":"./Aesop/Forward/Match.html#Aesop.elabForwardRuleTerm","doc":"Elaborate the term of a forward rule in the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Aesop/Forward/Match.html#Aesop.elabForwardRuleTerm\"><span class=\"name\">Aesop</span>.<span class=\"name\">elabForwardRuleTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Aesop/RuleTac/RuleTerm.html#Aesop.RuleTerm\">RuleTerm</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></span></div></div>"}]}