{"name":"Mathlib.Condensed.Discrete.LocallyConstant","instances":[{"typeNames":["TopCat.carrier"],"name":"CompHausLike.LocallyConstant.instHasPropCarrierToTopFiber","className":"CompHausLike.HasProp"},{"typeNames":["CategoryTheory.Adjunction.unit"],"name":"CompHausLike.LocallyConstant.instIsIsoFunctorTypeUnitSheafCoherentTopologyAdjunction","className":"CategoryTheory.IsIso"},{"typeNames":["CondensedSet.LocallyConstant.functor"],"name":"CondensedSet.LocallyConstant.instFaithfulFunctor","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["CondensedSet.LocallyConstant.functor"],"name":"CondensedSet.LocallyConstant.instFullFunctor","className":"CategoryTheory.Functor.Full"},{"typeNames":["Condensed.discrete"],"name":"CondensedSet.LocallyConstant.instFaithfulCondensedTypeDiscrete","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["Condensed.discrete"],"name":"CondensedSet.LocallyConstant.instFullCondensedTypeDiscrete","className":"CategoryTheory.Functor.Full"},{"typeNames":["Subtype"],"name":"LightCondSet.LocallyConstant.instHasPropAndTotallyDisconnectedSpaceCarrierSecondCountableTopologySubtypeToTop","className":"CompHausLike.HasProp"},{"typeNames":["LightCondSet.LocallyConstant.functor"],"name":"LightCondSet.LocallyConstant.instFaithfulFunctor","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["LightCondSet.LocallyConstant.functor"],"name":"LightCondSet.LocallyConstant.instFullFunctor","className":"CategoryTheory.Functor.Full"},{"typeNames":["LightCondensed.discrete"],"name":"LightCondSet.LocallyConstant.instFaithfulLightCondensedTypeDiscrete","className":"CategoryTheory.Functor.Faithful"},{"typeNames":["LightCondensed.discrete"],"name":"LightCondSet.LocallyConstant.instFullLightCondensedTypeDiscrete","className":"CategoryTheory.Functor.Full"}],"imports":["Init","Mathlib.Condensed.Discrete.Basic","Mathlib.Condensed.TopComparison","Mathlib.Topology.Category.CompHausLike.SigmaComparison","Mathlib.Topology.FiberPartition"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L430-L430","name":"LightCondSet.LocallyConstant.instFullLightCondensedTypeDiscrete","line":430,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFullLightCondensedTypeDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFullLightCondensedTypeDiscrete\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFullLightCondensedTypeDiscrete</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discrete\">LightCondensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> u))</span>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L427-L427","name":"LightCondSet.LocallyConstant.instFaithfulLightCondensedTypeDiscrete","line":427,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFaithfulLightCondensedTypeDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFaithfulLightCondensedTypeDiscrete\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFaithfulLightCondensedTypeDiscrete</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discrete\">LightCondensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> u))</span>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L424-L424","name":"LightCondSet.LocallyConstant.instFullFunctor","line":424,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFullFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFullFunctor\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFullFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L422-L422","name":"LightCondSet.LocallyConstant.instFaithfulFunctor","line":422,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFaithfulFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instFaithfulFunctor\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFaithfulFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L418-L420","name":"LightCondSet.LocallyConstant.functorFullyFaithful","line":418,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functorFullyFaithful","doc":"`LightCondSet.LocallyConstant.functor` is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functorFullyFaithful\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorFullyFaithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.FullyFaithful\">FullyFaithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L411-L416","name":"LightCondSet.LocallyConstant.iso","line":411,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.iso","doc":"`LightCondSet.LocallyConstant.functor` is isomorphic to `LightCondensed.discrete`\n(by uniqueness of adjoints).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.iso\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">iso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\">functor</a> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Basic.html#LightCondensed.discrete\">LightCondensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> u)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L405-L408","name":"LightCondSet.LocallyConstant.instHasPropAndTotallyDisconnectedSpaceCarrierSecondCountableTopologySubtypeToTop","line":405,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instHasPropAndTotallyDisconnectedSpaceCarrierSecondCountableTopologySubtypeToTop","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.instHasPropAndTotallyDisconnectedSpaceCarrierSecondCountableTopologySubtypeToTop\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instHasPropAndTotallyDisconnectedSpaceCarrierSecondCountableTopologySubtypeToTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <a href=\"./Mathlib/Topology/Category/LightProfinite/Basic.html#LightProfinite\">LightProfinite</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">CompHausLike.HasProp</a> <span class=\"fn\">(fun (<span class=\"fn\">X</span> : <a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a>) =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/Connected/TotallyDisconnected.html#TotallyDisconnectedSpace\">TotallyDisconnectedSpace</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/Bases.html#SecondCountableTopology\">SecondCountableTopology</a> <span class=\"fn\">↑<span class=\"fn\">X</span></span></span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L399-L403","name":"LightCondSet.LocallyConstant.functor","line":399,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor","doc":"The functor from sets to light condensed sets given by locally constant maps into the set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#LightCondSet.LocallyConstant.functor\"><span class=\"name\">LightCondSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(Type</a> u) <a href=\"./Mathlib/Condensed/Light/Basic.html#LightCondSet\">LightCondSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L393-L393","name":"CondensedSet.LocallyConstant.instFullCondensedTypeDiscrete","line":393,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFullCondensedTypeDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFullCondensedTypeDiscrete\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFullCondensedTypeDiscrete</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discrete\">Condensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> (u_1 + 1)))</span>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L390-L390","name":"CondensedSet.LocallyConstant.instFaithfulCondensedTypeDiscrete","line":390,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFaithfulCondensedTypeDiscrete","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFaithfulCondensedTypeDiscrete\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFaithfulCondensedTypeDiscrete</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discrete\">Condensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> (u_1 + 1)))</span>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L387-L387","name":"CondensedSet.LocallyConstant.instFullFunctor","line":387,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFullFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFullFunctor\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFullFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Full\">Full</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L385-L385","name":"CondensedSet.LocallyConstant.instFaithfulFunctor","line":385,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFaithfulFunctor","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.instFaithfulFunctor\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instFaithfulFunctor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.Faithful\">Faithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L381-L383","name":"CondensedSet.LocallyConstant.functorFullyFaithful","line":381,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functorFullyFaithful","doc":"`CondensedSet.LocallyConstant.functor` is fully faithful. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functorFullyFaithful\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorFullyFaithful</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">functor</a>.<a href=\"./Mathlib/CategoryTheory/Functor/FullyFaithful.html#CategoryTheory.Functor.FullyFaithful\">FullyFaithful</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L374-L379","name":"CondensedSet.LocallyConstant.iso","line":374,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.iso","doc":"`CondensedSet.LocallyConstant.functor` is isomorphic to `Condensed.discrete`\n(by uniqueness of adjoints).\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.iso\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">iso</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\">functor</a> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/Basic.html#Condensed.discrete\">Condensed.discrete</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1))</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L368-L371","name":"CondensedSet.LocallyConstant.functor","line":368,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor","doc":"The functor from sets to condensed sets given by locally constant maps into the set. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CondensedSet.LocallyConstant.functor\"><span class=\"name\">CondensedSet</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(Type</a> (u + 1)) <a href=\"./Mathlib/Condensed/Basic.html#CondensedSet\">CondensedSet</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L355-L356","name":"CompHausLike.LocallyConstant.instIsIsoFunctorTypeUnitSheafCoherentTopologyAdjunction","line":355,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.instIsIsoFunctorTypeUnitSheafCoherentTopologyAdjunction","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.instIsIsoFunctorTypeUnitSheafCoherentTopologyAdjunction\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instIsIsoFunctorTypeUnitSheafCoherentTopologyAdjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.IsIso\">CategoryTheory.IsIso</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction\">adjunction</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.unit\">unit</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L325-L325","name":"CompHausLike.LocallyConstant.adjunction_unit","line":325,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_unit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_unit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction_unit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction\">adjunction</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.unit\">unit</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit\">unit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L325-L325","name":"CompHausLike.LocallyConstant.adjunction_counit","line":325,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_counit","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_counit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction_counit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction\">adjunction</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction.counit\">counit</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit\">counit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L322-L353","name":"CompHausLike.LocallyConstant.adjunction","line":322,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction","doc":"`CompHausLike.LocallyConstant.functor` is left adjoint to the forgetful functor.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span></span> <a href=\"./Mathlib/CategoryTheory/Adjunction/Basic.html#CategoryTheory.Adjunction\">⊣</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.sheafSections\">CategoryTheory.sheafSections</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L303-L320","name":"CompHausLike.LocallyConstant.adjunction_left_triangle","line":303,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_left_triangle","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.adjunction_left_triangle\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">adjunction_left_triangle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> (max u w))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit\">unit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>)</span>\n    <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit\">counit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.Hom.val\">val</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryTheory.CategoryStruct.id</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L297-L301","name":"CompHausLike.LocallyConstant.unitIso","line":297,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unitIso","doc":"The unit of the adjunction is an iso. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unitIso\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">unitIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.sheafSections\">CategoryTheory.sheafSections</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n      <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L293-L293","name":"CompHausLike.LocallyConstant.unit_app","line":293,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit_app\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">unit_app</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <a href=\"./foundational_types.html\">Type</a> (max u u_1))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./foundational_types.html\">(Type</a> (max u u_1)))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit\">unit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">x✝</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.const\">LocallyConstant.const</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">x</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L290-L295","name":"CompHausLike.LocallyConstant.unit","line":290,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit","doc":"The unit of the adjunciton is given by mapping each element to the corresponding constant map.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.unit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">unit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <a href=\"./foundational_types.html\">(Type</a> (max u u_1))</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n    <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.sheafSections\">CategoryTheory.sheafSections</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u u_1)))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n      <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L250-L250","name":"CompHausLike.LocallyConstant.counit_app_val","line":250,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit_app_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit_app_val\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counit_app_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf\">CategoryTheory.Sheaf</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit\">counit</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.Hom.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp\">counitApp</a> <span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L248-L288","name":"CompHausLike.LocallyConstant.counit","line":248,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit","doc":"The counit is natural in both `S : CompHausLike P` and\n`Y : Sheaf (coherentTopology (CompHausLike P)) (Type (max u w))` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counit\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.sheafSections\">CategoryTheory.sheafSections</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n        <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.id\">CategoryTheory.Functor.id</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf\">CategoryTheory.Sheaf</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L239-L246","name":"CompHausLike.LocallyConstant.functorIso","line":239,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorIso","doc":"`CompHausLike.LocallyConstant.functor` is naturally isomorphic to the restriction of\n`topCatToSheafCompHausLike` to discrete topological spaces.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorIso\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.discrete\">TopCat.discrete</a>.<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor.comp\">comp</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Condensed/TopComparison.html#topCatToSheafCompHausLike\">topCatToSheafCompHausLike</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L228-L228","name":"CompHausLike.LocallyConstant.functor_obj_val","line":228,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor_obj_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor_obj_val\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functor_obj_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> (max u w))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L228-L228","name":"CompHausLike.LocallyConstant.functor_map_val","line":228,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor_map_val","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor_map_val\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functor_map_val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\">functor</a> <span class=\"fn\">P</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.Hom.val\">val</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L227-L237","name":"CompHausLike.LocallyConstant.functor","line":227,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor","doc":"`CompHausLike.LocallyConstant.functorToPresheaves` lands in sheaves. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functor\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))\n  <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf\">CategoryTheory.Sheaf</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Sites/Coherent/Basic.html#CategoryTheory.coherentTopology\">CategoryTheory.coherentTopology</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span>)</span> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L222-L225","name":"CompHausLike.LocallyConstant.functorToPresheavesIso","line":222,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheavesIso","doc":"`locallyConstantIsoContinuousMap` is a natural isomorphism. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheavesIso\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorToPresheavesIso</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitPullbacks\">HasExplicitPullbacks</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> :\n  <span class=\"fn\">∀ ⦃<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>⦄ (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/EffectiveEpi/Basic.html#CategoryTheory.EffectiveEpi\">CategoryTheory.EffectiveEpi</a> <span class=\"fn\">f</span></span> → <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Defs.html#Function.Surjective\">Function.Surjective</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">f</span>)</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> (max u w))</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/TopComparison.html#TopCat.toSheafCompHausLike\">TopCat.toSheafCompHausLike</a> <span class=\"fn\">P</span> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.discrete\">TopCat.discrete</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span> <span class=\"fn\">hs</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Sites/Sheaf.html#CategoryTheory.Sheaf.val\">val</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L200-L200","name":"CompHausLike.LocallyConstant.counitApp_app","line":200,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp_app\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counitApp_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a✝</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp\">counitApp</a> <span class=\"fn\">Y</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">x✝</span> <span class=\"fn\">a✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppApp\">counitAppApp</a> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">x✝</span>)</span> <span class=\"fn\">Y</span> <span class=\"fn\">a✝</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L199-L216","name":"CompHausLike.LocallyConstant.counitApp","line":199,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp","doc":"The counit is natural in `S : CompHausLike P` "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitApp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counitApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L192-L197","name":"CompHausLike.LocallyConstant.incl_comap","line":192,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.incl_comap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.incl_comap\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">incl_comap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S </span><span class=\"fn\">T</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.unop\">Opposite.unop</a> <span class=\"fn\">S</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">S</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">T</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span> <span class=\"fn\">f</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">g</span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">f</span>\n        <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber.mk\">Function.Fiber.mk</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span>\n          <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span>\n            <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber.preimage\">Function.Fiber.preimage</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">a</span>)</span>)</span>)</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span>\n    <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.componentHom\">componentHom</a> <span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">g</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L177-L189","name":"CompHausLike.LocallyConstant.componentHom","line":177,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.componentHom","doc":"This is an auxiliary definition, the details do not matter. What's important is that this map exists\nso that the lemma `incl_comap` works.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.componentHom\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">componentHom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">T</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\">T</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">S</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">f</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a>   <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">f</span>\n    <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber.mk\">Function.Fiber.mk</a> <span class=\"fn\">(⇑<span class=\"fn\">f</span>)</span>\n      <span class=\"fn\">(<span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/ConcreteCategory/Basic.html#CategoryTheory.ConcreteCategory.hom\">CategoryTheory.ConcreteCategory.hom</a> <span class=\"fn\">g</span>)</span>\n        <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber.preimage\">Function.Fiber.preimage</a> <span class=\"fn\">(⇑<span class=\"fn\">(<a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\">g</span>)</span> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">a</span>)</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L167-L173","name":"CompHausLike.LocallyConstant.incl_of_counitAppApp","line":167,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.incl_of_counitAppApp","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.incl_of_counitAppApp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">incl_of_counitAppApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppApp\">counitAppApp</a> <span class=\"fn\">S</span> <span class=\"fn\">Y</span> <span class=\"fn\">f</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppAppImage\">counitAppAppImage</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L152-L165","name":"CompHausLike.LocallyConstant.presheaf_ext","line":152,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.presheaf_ext","doc":"To check equality of two elements of `X(S)`, it suffices to check equality after composing with\neach `X(S) → X(Sᵢ)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.presheaf_ext\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">presheaf_ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">X</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span>)</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span> <span class=\"fn\">y</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L138-L149","name":"CompHausLike.LocallyConstant.counitAppApp","line":138,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppApp","doc":"The counit is defined as follows: given a locally constant map `f : S → Y(*)`, let\n`S = S₁ ⊔ ⋯ ⊔ Sₙ` be the corresponding decomposition of `S` into the fibers. We need to provide an\nelement of `Y(S)`. It suffices to provide an element of `Y(Sᵢ)` for all `i`. Let `yᵢ ∈ Y(*)` denote\nthe value of `f` on `Sᵢ`. Our desired element is the image of `yᵢ` under the canonical map\n`Y(*) → Y(Sᵢ)`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppApp\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counitAppApp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Limits/Preserves/Finite.html#CategoryTheory.Limits.PreservesFiniteProducts\">CategoryTheory.Limits.PreservesFiniteProducts</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L134-L136","name":"CompHausLike.LocallyConstant.counitAppAppImage","line":134,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppAppImage","doc":"The projection of the counit. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.counitAppAppImage\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">counitAppAppImage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Y</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit.{u + 1}</a>)</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">f</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Y</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L120-L127","name":"CompHausLike.LocallyConstant.sigmaComparison_comp_sigmaIso","line":120,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaComparison_comp_sigmaIso","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaComparison_comp_sigmaIso\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">sigmaComparison_comp_sigmaIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w))</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Functor.mapIso\">mapIso</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIso\">sigmaIso</a> <span class=\"fn\">r</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Opposites.html#CategoryTheory.Iso.op\">op</a></span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span>\n    <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryTheory.CategoryStruct.comp</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/SigmaComparison.html#CompHausLike.sigmaComparison\">sigmaComparison</a> <span class=\"fn\">X</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>) =&gt; <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span>)</span>\n      <span class=\"fn\">fun (<span class=\"fn\">g</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">(<a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.of\">of</a> <span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span>)</span>)</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">a</span></span></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">X</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\">sigmaIncl</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.op\">op</a></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L115-L118","name":"CompHausLike.LocallyConstant.sigmaIso","line":115,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIso","doc":"The canonical map from the coproduct induced by `f` to `S` as an isomorphism in\n`CompHausLike P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIso\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">sigmaIso</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.HasExplicitFiniteCoproducts\">HasExplicitFiniteCoproducts</a> <span class=\"fn\">P</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Limits.html#CompHausLike.finiteCoproduct\">finiteCoproduct</a> <span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">r</span>)</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <span class=\"fn\">Q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L112-L113","name":"CompHausLike.LocallyConstant.sigmaIncl","line":112,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl","doc":"The inclusion map from a component of the coproduct induced by `f` into `S`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.sigmaIncl\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">sigmaIncl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span></span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Q</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L110-L110","name":"CompHausLike.LocallyConstant.instHasPropCarrierToTopFiber","line":110,"kind":"instance","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.instHasPropCarrierToTopFiber","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.instHasPropCarrierToTopFiber\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">instHasPropCarrierToTopFiber</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\">fiber</a> <span class=\"fn\">r</span> <span class=\"fn\">a</span>)</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L107-L108","name":"CompHausLike.LocallyConstant.fiber","line":107,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber","doc":"A fiber of a locally constant map as a `CompHausLike P`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.fiber\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">fiber</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">∀ (<span class=\"fn\">S</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>) (<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span></span> → <a href=\"./foundational_types.html\">Prop</a></span>), <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.HasProp\">HasProp</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Subtype\">Subtype</a> <span class=\"fn\">p</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Z</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">Z</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Mathlib/Logic/Function/FiberPartition.html#Function.Fiber\">Function.Fiber</a> <span class=\"fn\">⇑<span class=\"fn\">r</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L91-L91","name":"CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_hom","line":91,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_hom","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_hom\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">locallyConstantIsoContinuousMap_hom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">Y</span> <span class=\"fn\">X</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap\">locallyConstantIsoContinuousMap</a> <span class=\"fn\">Y</span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.hom\">hom</a></span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">f</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L91-L91","name":"CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_inv_apply","line":91,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_inv_apply","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap_inv_apply\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">locallyConstantIsoContinuousMap_inv_apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">C(</a><span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">,</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.discrete\">TopCat.discrete</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">)</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">Y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap\">locallyConstantIsoContinuousMap</a> <span class=\"fn\">Y</span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso.inv\">inv</a></span> <span class=\"fn\">f</span>)</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L87-L97","name":"CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap","line":87,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap","doc":"Locally constant maps are the same as continuous maps when the target is equipped with the discrete\ntopology\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.locallyConstantIsoContinuousMap\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">locallyConstantIsoContinuousMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Y</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> u_2)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Topology/Defs/Basic.html#TopologicalSpace\">TopologicalSpace</a> <span class=\"fn\">Y</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">Y</span> <span class=\"fn\">X</span></span> <a href=\"./Mathlib/CategoryTheory/Iso.html#CategoryTheory.Iso\">≅</a> <a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">C(</a><span class=\"fn\">Y</span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">,</a> <span class=\"fn\">↑<span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.discrete\">TopCat.discrete</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span></span><a href=\"./Mathlib/Topology/ContinuousMap/Defs.html#ContinuousMap\">)</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L80-L80","name":"CompHausLike.LocallyConstant.functorToPresheaves_obj_obj","line":80,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_obj_obj","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_obj_obj\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorToPresheaves_obj_obj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> (max u w))</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">x✝</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\">x✝</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">X</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L80-L80","name":"CompHausLike.LocallyConstant.functorToPresheaves_map_app","line":80,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_map_app","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_map_app\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorToPresheaves_map_app</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <a href=\"./foundational_types.html\">Type</a> (max u w)}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t</span> :\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">{\n        <span class=\"fn\">obj</span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>) =&gt;\n          <span class=\"fn\">match <span class=\"fn\">x</span> with\n          | <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">X✝</span></span></span></span>,\n        <span class=\"fn\">map</span> :=\n          <span class=\"fn\">fun {<span class=\"fn\">X </span><span class=\"fn\">Y</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>} (<span class=\"fn\">f</span> : <span class=\"fn\">X</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y</span>)\n            (<span class=\"fn\">g</span> :\n              <span class=\"fn\">match <span class=\"fn\">X</span> with\n              | <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">X✝</span></span></span>) =&gt;\n          <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span> <span class=\"fn\">g</span></span></span>,\n        <span class=\"fn\">map_id</span> := <span class=\"fn\">⋯</span>, <span class=\"fn\">map_comp</span> := <span class=\"fn\">⋯</span> }</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span>\n    <span class=\"fn\">x✝</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span>)</span>.<a href=\"./Mathlib/CategoryTheory/NatTrans.html#CategoryTheory.NatTrans.app\">app</a></span> <span class=\"fn\">x✝</span> <span class=\"fn\">t</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.map\">LocallyConstant.map</a> <span class=\"fn\">f</span> <span class=\"fn\">t</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L80-L80","name":"CompHausLike.LocallyConstant.functorToPresheaves_obj_map","line":80,"kind":"theorem","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_obj_map","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves_obj_map\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorToPresheaves_obj_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">X</span> : <a href=\"./foundational_types.html\">Type</a> (max u w))</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">X✝ </span><span class=\"fn\">Y✝</span> : <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">X✝</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">Y✝</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> :\n  <span class=\"fn\">match <span class=\"fn\">X✝</span> with\n  | <span class=\"fn\"><a href=\"./Mathlib/Data/Opposite.html#Opposite.op\">Opposite.op</a> <span class=\"fn\">S</span></span> =&gt; <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant\">LocallyConstant</a> <span class=\"fn\">(↑<span class=\"fn\"><span class=\"fn\">S</span>.<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike.toTop\">toTop</a></span>)</span> <span class=\"fn\">X</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\">functorToPresheaves</a>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.obj\">obj</a></span> <span class=\"fn\">X</span>)</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Prefunctor.html#Prefunctor.map\">map</a></span> <span class=\"fn\">f</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Mathlib/Topology/LocallyConstant/Basic.html#LocallyConstant.comap\">LocallyConstant.comap</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat.Hom.hom\">TopCat.Hom.hom</a> <span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom.unop\">unop</a></span>)</span> <span class=\"fn\">g</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Condensed/Discrete/LocallyConstant.lean#L76-L85","name":"CompHausLike.LocallyConstant.functorToPresheaves","line":76,"kind":"def","docLink":"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves","doc":"The functor from the category of sets to presheaves on `CompHausLike P` given by locally constant\nmaps.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Condensed/Discrete/LocallyConstant.html#CompHausLike.LocallyConstant.functorToPresheaves\"><span class=\"name\">CompHausLike</span>.<span class=\"name\">LocallyConstant</span>.<span class=\"name\">functorToPresheaves</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Mathlib/Topology/Category/TopCat/Basic.html#TopCat\">TopCat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <a href=\"./foundational_types.html\">(Type</a> (max u w)) <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Functor/Basic.html#CategoryTheory.Functor\">CategoryTheory.Functor</a> <span class=\"fn\">(<a href=\"./Mathlib/Topology/Category/CompHausLike/Basic.html#CompHausLike\">CompHausLike</a> <span class=\"fn\">P</span>)</span><a href=\"./Mathlib/Data/Opposite.html#Opposite\">ᵒᵖ</a> <a href=\"./foundational_types.html\">(Type</a> (max u w)))</span></span></div></div>"}]}