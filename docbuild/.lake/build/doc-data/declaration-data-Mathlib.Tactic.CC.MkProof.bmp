{"name":"Mathlib.Tactic.CC.MkProof","instances":[],"imports":["Init","Batteries.Data.RBMap.Alter","Mathlib.Tactic.CC.Datatypes","Mathlib.Tactic.CC.Lemmas","Mathlib.Tactic.Relation.Rfl","Mathlib.Tactic.Relation.Symm"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L623-L631","name":"Mathlib.Tactic.CC.CCM.simplifyAC","line":623,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyAC","doc":"If `e` can be simplified by the AC module, return the simplified term and the proof term of the\nequality. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyAC\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">simplifyAC</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L601-L621","name":"Mathlib.Tactic.CC.CCM.simplifyACStep","line":601,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyACStep","doc":"The single step of `simplifyAC`.\n\nSimplifies an expression `e` by either simplifying one argument to the AC operator, or the whole\nexpression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyACStep\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">simplifyACStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>))</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L585-L599","name":"Mathlib.Tactic.CC.CCM.simplifyACCore","line":585,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyACCore","doc":"Given `e := lhs * r` and `H : lhs = rhs`, return `rhs * r` and the proof of `e = rhs * r`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.simplifyACCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">simplifyACCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> (<a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L561-L583","name":"Mathlib.Tactic.CC.CCM.mkACSimpProof","line":561,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkACSimpProof","doc":"Given `tr := t*r` `sr := s*r` `tEqs : t = s`, return a proof for `tr = sr`\n\nWe use `a*b` to denote an AC application. That is, `(a*b)*(c*a)` is the term `a*a*b*c`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkACSimpProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkACSimpProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tr </span><span class=\"fn\">t </span><span class=\"fn\">s </span><span class=\"fn\">r </span><span class=\"fn\">sr</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.ACApps\">ACApps</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tEqs</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L553-L559","name":"Mathlib.Tactic.CC.CCM.mkACProof","line":553,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkACProof","doc":"Return the proof of `e₁ = e₂` using `ac_rfl` tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkACProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkACProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L542-L551","name":"Mathlib.Tactic.CC.CCM.mkNeOfNeOfEq","line":542,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkNeOfNeOfEq","doc":"Given `aNeB₁ : a ≠ b₁`, `b₁` and `b`, return a proof of `a ≠ b` if `b` and `b₁` are in the\nsame equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkNeOfNeOfEq\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkNeOfNeOfEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aNeB₁ </span><span class=\"fn\">b₁ </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L531-L540","name":"Mathlib.Tactic.CC.CCM.mkNeOfEqOfNe","line":531,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkNeOfEqOfNe","doc":"Given `a`, `a₁` and `a₁NeB : a₁ ≠ b`, return a proof of `a ≠ b` if `a` and `a₁` are in the\nsame equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkNeOfEqOfNe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkNeOfEqOfNe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">a₁ </span><span class=\"fn\">a₁NeB</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L522-L529","name":"Mathlib.Tactic.CC.CCM.getInconsistencyProof","line":522,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getInconsistencyProof","doc":"Build a proof of `False` if the context is inconsistent.\nReturns `none` if `False` is not known to be true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getInconsistencyProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getInconsistencyProof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L516-L520","name":"Mathlib.Tactic.CC.CCM.getPropEqProof","line":516,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getPropEqProof","doc":"Build a proof for `a = b`. Fails if `a` and `b` are not known to be equal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getPropEqProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getPropEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L510-L514","name":"Mathlib.Tactic.CC.CCM.getEqFalseProof","line":510,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqFalseProof","doc":"Build a proof for `e = False`. Fails if `e` is not known to be false. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqFalseProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getEqFalseProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L504-L508","name":"Mathlib.Tactic.CC.CCM.getEqTrueProof","line":504,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqTrueProof","doc":"Build a proof for `e = True`. Fails if `e` is not known to be true. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqTrueProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getEqTrueProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L497-L501","name":"Mathlib.Tactic.CC.CCM.getHEqProof","line":497,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getHEqProof","doc":"Build a proof for `HEq e₁ e₂`.\nThe result is `none` if `e₁` and `e₂` are not in the same equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getHEqProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getHEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L491-L495","name":"Mathlib.Tactic.CC.CCM.getEqProof","line":491,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqProof","doc":"Build a proof for `e₁ = e₂`.\nThe result is `none` if `e₁` and `e₂` are not in the same equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getEqProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L418-L489","name":"Mathlib.Tactic.CC.CCM.getEqProofCore","line":418,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqProofCore","doc":"If `asHEq` is `true`, then build a proof for `HEq e₁ e₂`.\nOtherwise, build a proof for `e₁ = e₂`.\nThe result is `none` if `e₁` and `e₂` are not in the same equivalence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEqProofCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getEqProofCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asHEq</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L382-L416","name":"Mathlib.Tactic.CC.CCM.mkProof","line":382,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkProof","doc":"Use the format of `H` to try and construct a proof or `lhs = rhs`:\n* If `H = .congr`, then use congruence.\n* If `H = .eqTrue`, try to prove `lhs = True` or `rhs = True`,\n  if they have the format `R a b`, by proving `a = b`.\n* Otherwise, return the (delayed) proof encoded by `H` itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.EntryExpr\">EntryExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L364-L380","name":"Mathlib.Tactic.CC.CCM.mkDelayedProof","line":364,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkDelayedProof","doc":"Turn a delayed proof into an actual proof term. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkDelayedProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkDelayedProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L354-L362","name":"Mathlib.Tactic.CC.CCM.mkCongrProof","line":354,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCongrProof","doc":"Use congruence on arguments to prove `e₁ = e₂`.\n\nSpecial case: if `e₁` and `e₂` have the form `R lhs₁ rhs₁` and `R lhs₂ rhs₂` such that\n`R` is symmetric and `lhs₁ = rhs₂`, then use those facts instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCongrProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkCongrProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L319-L352","name":"Mathlib.Tactic.CC.CCM.mkSymmCongrProof","line":319,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkSymmCongrProof","doc":"If `e₁ : R lhs₁ rhs₁`, `e₂ : R lhs₂ rhs₂` and `lhs₁ = rhs₂`, where `R` is a symmetric relation,\nprove `R lhs₁ rhs₁` is equivalent to `R lhs₂ rhs₂`.\n\n * if `lhs₁` is known to equal `lhs₂`, return `none`\n * if `lhs₁` is not known to equal `rhs₂`, fail. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkSymmCongrProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkSymmCongrProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L240-L317","name":"Mathlib.Tactic.CC.CCM.mkCongrProofCore","line":240,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCongrProofCore","doc":"Use congruence on arguments to prove `lhs = rhs`.\n\nThat is, tries to prove that `lhsFn lhsArgs[0] ... lhsArgs[n-1] = lhsFn rhsArgs[0] ... rhsArgs[n-1]`\nby showing that `lhsArgs[i] = rhsArgs[i]` for all `i`.\n\nFails if the head function of `lhs` is not that of `rhs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCongrProofCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkCongrProofCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L231-L237","name":"Mathlib.Tactic.CC.CCM.mkTransOpt","line":231,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkTransOpt","doc":"Apply transitivity to `H₁?` and `H₂`, which are both `Eq` or `HEq` depending on `heqProofs`.\n\nIf `H₁?` is `none`, return `H₂` instead. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkTransOpt\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkTransOpt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L227-L229","name":"Mathlib.Tactic.CC.CCM.mkTrans","line":227,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkTrans","doc":"Apply transitivity to `H₁` and `H₂`, which are both `Eq` or `HEq` depending on `heqProofs`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkTrans\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkTrans</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H₁ </span><span class=\"fn\">H₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L222-L225","name":"Mathlib.Tactic.CC.CCM.isEqFalse","line":222,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqFalse","doc":"Is the proposition `e` known to be false? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqFalse\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isEqFalse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L217-L220","name":"Mathlib.Tactic.CC.CCM.isEqTrue","line":217,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqTrue","doc":"Is the proposition `e` known to be true? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqTrue\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isEqTrue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L207-L215","name":"Mathlib.Tactic.CC.CCM.isNotEqv","line":207,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isNotEqv","doc":"Is `e₁ ≠ e₂` known to be true?\n\nNote that this is stronger than `not (isEqv e₁ e₂)`:\nonly if we can prove they are distinct this returns `true`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isNotEqv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isNotEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L201-L205","name":"Mathlib.Tactic.CC.CCM.isEqv","line":201,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqv","doc":"Are `e₁` and `e₂` known to be in the same equivalence class? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isEqv\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isEqv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L191-L199","name":"Mathlib.Tactic.CC.CCM.flipProof","line":191,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipProof","doc":"Apply symmetry to `H`, which is an `Eq` or a `HEq`.\n\n* If `heqProofs` is true, ensure the result is a `HEq` (otherwise it is assumed to be `Eq`).\n* If `flipped` is true, apply `symm`, otherwise keep the same direction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipProof\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">flipProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.EntryExpr\">EntryExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flipped </span><span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.EntryExpr\">EntryExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L176-L189","name":"Mathlib.Tactic.CC.CCM.flipDelayedProofCore","line":176,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipDelayedProofCore","doc":"In a delayed way, apply symmetry to `H`, which is an `Eq` or a `HEq`.\n\n* If `heqProofs` is true, ensure the result is a `HEq` (otherwise it is assumed to be `Eq`).\n* If `flipped` is true, apply `symm`, otherwise keep the same direction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipDelayedProofCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">flipDelayedProofCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flipped </span><span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.DelayedExpr\">DelayedExpr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L161-L174","name":"Mathlib.Tactic.CC.CCM.flipProofCore","line":161,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipProofCore","doc":"Apply symmetry to `H`, which is an `Eq` or a `HEq`.\n\n* If `heqProofs` is true, ensure the result is a `HEq` (otherwise it is assumed to be `Eq`).\n* If `flipped` is true, apply `symm`, otherwise keep the same direction. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.flipProofCore\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">flipProofCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">H</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">flipped </span><span class=\"fn\">heqProofs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L155-L159","name":"Mathlib.Tactic.CC.CCM.hasHEqProofs","line":155,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.hasHEqProofs","doc":"Does the congruence class with root `root` have any `HEq` proofs? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.hasHEqProofs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">hasHEqProofs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">root</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L142-L153","name":"Mathlib.Tactic.CC.CCM.updateMT","line":142,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.updateMT","doc":"Update the modification time of the congruence class of `e`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.updateMT\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">updateMT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L137-L140","name":"Mathlib.Tactic.CC.CCM.setFO","line":137,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.setFO","doc":"Treat the entry associated with `e` as a first-order function. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.setFO\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">setFO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L131-L135","name":"Mathlib.Tactic.CC.CCM.mkCCCongrTheorem","line":131,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCCCongrTheorem","doc":"Try to find a congruence theorem for the expression `e` with support for `HEq`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCCCongrTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkCCCongrTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCCongrTheorem\">CCCongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L110-L129","name":"Mathlib.Tactic.CC.CCM.mkCCHCongrTheorem","line":110,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCCHCongrTheorem","doc":"Try to find a congruence theorem for an application of `fn` with `nargs` arguments, with support\nfor `HEq`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.mkCCHCongrTheorem\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">mkCCHCongrTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nargs</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCCongrTheorem\">CCCongrTheorem</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L60-L108","name":"Mathlib.Tactic.CC.CCM.isCongruent","line":60,"kind":"opaque","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isCongruent","doc":"Return true iff the given function application are congruent\n\n`e₁` should have the form `f a` and `e₂` the form `g b`.\n\nSee paper: Congruence Closure for Intensional Type Theory. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isCongruent\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isCongruent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁ </span><span class=\"fn\">e₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L56-L58","name":"Mathlib.Tactic.CC.CCM.isCgRoot","line":56,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isCgRoot","doc":"Is `e` the root of its congruence class? "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.isCgRoot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">isCgRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L52-L54","name":"Mathlib.Tactic.CC.CCM.getRoot","line":52,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getRoot","doc":"Return the root expression of the expression's congruence class. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getRoot\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L43-L50","name":"Mathlib.Tactic.CC.CCM.normalize","line":43,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.normalize","doc":"Use the normalizer to normalize `e`.\n\nIf no normalizer was configured, returns `e` itself. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.normalize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">normalize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L39-L41","name":"Mathlib.Tactic.CC.CCM.getEntry","line":39,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEntry","doc":"Look up an entry associated with the given expression. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getEntry\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.Entry\">Entry</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L34-L37","name":"Mathlib.Tactic.CC.CCM.getCache","line":34,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getCache","doc":"Read the `cache` field of the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.getCache\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">getCache</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCCongrTheoremCache\">CCCongrTheoremCache</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L29-L32","name":"Mathlib.Tactic.CC.CCM.modifyCache","line":29,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.modifyCache","doc":"Update the `cache` field of the state. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.modifyCache\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">modifyCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCCongrTheoremCache\">CCCongrTheoremCache</a> → <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCCongrTheoremCache\">CCCongrTheoremCache</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L25-L27","name":"Mathlib.Tactic.CC.CCM.run","line":25,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.run","doc":"Run a computation in the `CCM` monad. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM.run\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\">CCM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCStructure\">CCStructure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Mathlib/Tactic/CC/Datatypes.html#Mathlib.Tactic.CC.CCStructure\">CCStructure</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/CC/MkProof.lean#L20-L21","name":"Mathlib.Tactic.CC.CCM","line":20,"kind":"def","docLink":"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM","doc":"The monad for the `cc` tactic stores the current state of the tactic. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/CC/MkProof.html#Mathlib.Tactic.CC.CCM\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">CC</span>.<span class=\"name\">CCM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"}]}