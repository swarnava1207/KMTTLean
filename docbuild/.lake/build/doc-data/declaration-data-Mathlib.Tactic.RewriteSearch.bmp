{"name":"Mathlib.Tactic.RewriteSearch","instances":[{"typeNames":["Mathlib.Tactic.RewriteSearch.SearchNode"],"name":"Mathlib.Tactic.RewriteSearch.SearchNode.instOrd","className":"Ord"}],"imports":["Init","Lean.Meta.Tactic.Rewrites","Mathlib.Algebra.Order.Group.Nat","Mathlib.Data.List.EditDistance.Estimator","Mathlib.Data.MLList.BestFirst","Mathlib.Order.Interval.Finset.Nat","Batteries.Data.MLList.Heartbeats"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L290-L305","name":"Mathlib.Tactic.RewriteSearch.tacticRw_search_","line":290,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.tacticRw_search_","doc":"`rw_search` attempts to solve an equality goal\nby repeatedly rewriting using lemmas from the library.\n\nIf no solution is found,\nthe best sequence of rewrites found before `maxHeartbeats` elapses is returned.\n\nThe search is a best-first search, minimising the Levenshtein edit distance between\nthe pretty-printed expressions on either side of the equality.\n(The strings are tokenized at spaces,\nseparating delimiters `(`, `)`, `[`, `]`, and `,` into their own tokens.)\n\nYou can use `rw_search [-my_lemma, -my_theorem]`\nto prevent `rw_search` from using the names theorems.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.tacticRw_search_\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">tacticRw_search_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L260-L284","name":"Mathlib.Tactic.RewriteSearch.SearchNode.search","line":260,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.search","doc":"Perform best first search on the graph of rewrites from the specified `SearchNode`.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.search\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">search</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stopAtRfl </span><span class=\"fn\">stopAtDistZero</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxQueued</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/MLList/Basic.html#MLList\">MLList</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L241-L258","name":"Mathlib.Tactic.RewriteSearch.SearchNode.rewrites","line":241,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rewrites","doc":"Given a pair of `DiscrTree` trees\nindexing all rewrite lemmas in the imported files and the current file,\ntry rewriting the current goal in the `SearchNode` by one of them,\nreturning a `MLList MetaM SearchNode`, i.e. a lazy list of next possible goals.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rewrites\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">rewrites</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hyps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lemmas</span> : <span class=\"fn\"><a href=\"./Lean/Meta/LazyDiscrTree.html#Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef\">Lean.Meta.LazyDiscrTree.ModuleDiscrTreeRef</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RwDirection\">Lean.Meta.Rewrites.RwDirection</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Data/NameMap.html#Lean.NameSet\">Lean.NameSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Batteries/Data/MLList/Basic.html#MLList\">MLList</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L234-L239","name":"Mathlib.Tactic.RewriteSearch.SearchNode.rewrite","line":234,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rewrite","doc":"Given a `RewriteResult` from the `rw?` tactic, create a new `SearchNode` with the new goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rewrite\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">rewrite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Meta/Tactic/Rewrites.html#Lean.Meta.Rewrites.RewriteResult\">Lean.Meta.Rewrites.RewriteResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L230-L232","name":"Mathlib.Tactic.RewriteSearch.SearchNode.estimator","line":230,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.estimator","doc":"We can obtain lower bounds, and improve them, for the Levenshtein distance. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.estimator\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">estimator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L227-L229","name":"Mathlib.Tactic.RewriteSearch.SearchNode.prio","line":227,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.prio","doc":"The priority function for search is Levenshtein distance plus a penalty. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.prio\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">prio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L196-L225","name":"Mathlib.Tactic.RewriteSearch.SearchNode.penalty","line":196,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.penalty","doc":"A somewhat arbitrary penalty function.\nNote that `n.lastIdx` penalizes using later lemmas from a particular call to `rw?` at a node,\nbut once we have moved on to the next node these penalties are \"forgiven\".\n\n(You might in interpret this as encouraging\nthe algorithm to \"trust\" the ordering provided by `rw?`.)\n\nI tried out a various (positive) linear combinations of\n`.history.size`, `.lastIdx`, and `.ppGoal.length` (and also the `.log2`s of these).\n* `.lastIdx.log2` is quite good, and the best coefficient is around 1.\n* `.lastIdx / 10` is almost as good.\n* `.history.size` makes things worse (similarly with `.log2`).\n* `.ppGoal.length` makes little difference (similarly with `.log2`).\nHere testing consisting of running the current `rw_search` test suite,\nrejecting values for which any failed, and trying to minimize the run time reported by\n```shell\nlake build &&  \\\ntime (lake env lean test/RewriteSearch/Basic.lean; \\\n  lake env lean test/RewriteSearch/Polynomial.lean)\n```\n\nWith a larger test suite it might be worth running this minimization again,\nand considering other penalty functions.\n\n(If you do this, please choose a penalty function which is in the interior of the region\nwhere the test suite works.\nI think it would be a bad idea to optimize the run time at the expense of fragility.)\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.penalty\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">penalty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L193-L194","name":"Mathlib.Tactic.RewriteSearch.SearchNode.instOrd","line":193,"kind":"instance","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.instOrd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.instOrd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">instOrd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord.html#Ord\">Ord</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L187-L191","name":"Mathlib.Tactic.RewriteSearch.SearchNode.lastIdx","line":187,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.lastIdx","doc":"Report the index of the most recently applied lemma, in the ordering returned by `rw?`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.lastIdx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">lastIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">ℕ</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L182-L185","name":"Mathlib.Tactic.RewriteSearch.SearchNode.push","line":182,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.push","doc":"Add an additional step to the `SearchNode` history. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.push\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expr</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">symm</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L180-L181","name":"Mathlib.Tactic.RewriteSearch.SearchNode.init","line":180,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.init","doc":"Construct an initial `SearchNode` from a goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.init\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">init</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L161-L178","name":"Mathlib.Tactic.RewriteSearch.SearchNode.mk","line":161,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mk","doc":"Construct a `SearchNode`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mk\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">history</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L148-L159","name":"Mathlib.Tactic.RewriteSearch.SearchNode.toString","line":148,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.toString","doc":"Represent a search node as string, solely for debugging. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.toString\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L141-L146","name":"Mathlib.Tactic.RewriteSearch.SearchNode.compute_dist?","line":141,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.compute_dist?","doc":"Fill in the `SearchNode.dist?` field with the edit distance between the two sides. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.compute_dist?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">compute_dist?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L127-L139","name":"Mathlib.Tactic.RewriteSearch.SearchNode.compute_rfl?","line":127,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.compute_rfl?","doc":"Check whether a goal can be solved by `rfl`, and fill in the `SearchNode.rfl?` field. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.compute_rfl?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">compute_rfl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L117-L125","name":"Mathlib.Tactic.RewriteSearch.SearchNode.editCost","line":117,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.editCost","doc":"What is the cost for changing a token?\n`Levenshtein.defaultCost` just uses constant cost `1` for any token.\n\nIt may be interesting to try others.\nthe only one I've experimented with so far is `Levenshtein.stringLogLengthCost`,\nwhich performs quite poorly!\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.editCost\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">editCost</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Data/List/EditDistance/Defs.html#Levenshtein.Cost\">Levenshtein.Cost</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L114-L114","name":"Mathlib.Tactic.RewriteSearch.SearchNode.dist?","line":114,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.dist?","doc":"The edit distance between the tokenizations of the two sides\n(or `none` if this hasn't been computed yet). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.dist?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">dist?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L111-L111","name":"Mathlib.Tactic.RewriteSearch.SearchNode.rfl?","line":111,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rfl?","doc":"Whether the current goal can be closed by `rfl` (or `none` if this hasn't been test yet). "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rfl?\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">rfl?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L109-L109","name":"Mathlib.Tactic.RewriteSearch.SearchNode.rhs","line":109,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rhs","doc":"The tokenization of the right-hand-side of the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.rhs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L107-L107","name":"Mathlib.Tactic.RewriteSearch.SearchNode.lhs","line":107,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.lhs","doc":"The tokenization of the left-hand-side of the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.lhs\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">lhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L105-L105","name":"Mathlib.Tactic.RewriteSearch.SearchNode.ppGoal","line":105,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.ppGoal","doc":"The pretty printed current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.ppGoal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">ppGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L103-L103","name":"Mathlib.Tactic.RewriteSearch.SearchNode.type","line":103,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.type","doc":"The type of the current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.type\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L101-L101","name":"Mathlib.Tactic.RewriteSearch.SearchNode.goal","line":101,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.goal","doc":"The current goal. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.goal\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L99-L99","name":"Mathlib.Tactic.RewriteSearch.SearchNode.mctx","line":99,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mctx","doc":"The metavariable context after rewriting.\nWe carry this around so the search can safely backtrack. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mctx\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">mctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L96-L96","name":"Mathlib.Tactic.RewriteSearch.SearchNode.history","line":96,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.history","doc":"The lemmas used so far. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.history\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">history</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L93-L93","name":"Mathlib.Tactic.RewriteSearch.SearchNode.mk'","line":93,"kind":"ctor","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mk'","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode.mk'\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span>.<span class=\"name\">mk'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">history</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Nat\">ℕ</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">Lean.MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">Lean.MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ppGoal</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rfl?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dist?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">ℕ</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\">SearchNode</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L90-L114","name":"Mathlib.Tactic.RewriteSearch.SearchNode","line":90,"kind":"structure","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode","doc":"Data structure containing the history of a rewrite search.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.SearchNode\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">SearchNode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L76-L88","name":"Mathlib.Tactic.RewriteSearch.tokenize","line":76,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.tokenize","doc":"Tokenize a string at whitespace, and then pull off delimiters.\n"},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.tokenize\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">tokenize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L66-L71","name":"Mathlib.Tactic.RewriteSearch.splitDelimiters.auxEnd","line":66,"kind":"opaque","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters.auxEnd","doc":"Pull off trailing delimiters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters.auxEnd\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">splitDelimiters</span>.<span class=\"name\">auxEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">back</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L60-L65","name":"Mathlib.Tactic.RewriteSearch.splitDelimiters.auxStart","line":60,"kind":"opaque","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters.auxStart","doc":"Pull off leading delimiters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters.auxStart\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">splitDelimiters</span>.<span class=\"name\">auxStart</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">front</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/RewriteSearch.lean#L57-L74","name":"Mathlib.Tactic.RewriteSearch.splitDelimiters","line":57,"kind":"def","docLink":"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters","doc":"Separate a string into a list of strings by pulling off initial `(` or `]` characters,\nand pulling off terminal `)`, `]`, or `,` characters. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/RewriteSearch.html#Mathlib.Tactic.RewriteSearch.splitDelimiters\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RewriteSearch</span>.<span class=\"name\">splitDelimiters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>"}]}