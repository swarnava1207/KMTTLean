{"name":"Mathlib.CategoryTheory.Category.KleisliCat","instances":[{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.KleisliCat.categoryStruct","className":"CategoryTheory.CategoryStruct"},{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.KleisliCat.category","className":"CategoryTheory.Category"},{"typeNames":["CategoryTheory.KleisliCat"],"name":"CategoryTheory.instInhabitedKleisliCatId","className":"Inhabited"},{"typeNames":["CategoryTheory.KleisliCat.mk"],"name":"CategoryTheory.instInhabitedMkId","className":"Inhabited"}],"imports":["Init","Mathlib.CategoryTheory.Category.Basic"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L63-L64","name":"CategoryTheory.instInhabitedMkId","line":63,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedMkId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedMkId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedMkId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk\">KleisliCat.mk</a> <a href=\"./Init/Prelude.html#id\">id</a> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L60-L61","name":"CategoryTheory.instInhabitedKleisliCatId","line":60,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedKleisliCatId","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.instInhabitedKleisliCatId\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">instInhabitedKleisliCatId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <a href=\"./Init/Prelude.html#id\">id</a>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L56-L58","name":"CategoryTheory.KleisliCat.comp_def","line":56,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.comp_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.comp_def\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">comp_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">γ</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\">α</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ys</span> : <span class=\"fn\">β</span> <a href=\"./Mathlib/Combinatorics/Quiver/Basic.html#Quiver.Hom\">⟶</a> <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.comp\">CategoryStruct.comp</a> <span class=\"fn\">xs</span> <span class=\"fn\">ys</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">ys</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L52-L54","name":"CategoryTheory.KleisliCat.id_def","line":52,"kind":"theorem","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.id_def","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.id_def\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">id_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct.id\">CategoryStruct.id</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Pure.pure\">pure</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L44-L50","name":"CategoryTheory.KleisliCat.category","line":44,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.category","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.category\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">category</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.Category\">Category.{max u v, u + 1}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L38-L42","name":"CategoryTheory.KleisliCat.categoryStruct","line":38,"kind":"instance","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.categoryStruct","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.categoryStruct\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">categoryStruct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/Basic.html#CategoryTheory.CategoryStruct\">CategoryStruct.{max u v, u + 1}</a> <span class=\"fn\">(<a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <span class=\"fn\">m</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L34-L36","name":"CategoryTheory.KleisliCat.mk","line":34,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk","doc":"Construct an object of the Kleisli category from a type. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat.mk\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\">KleisliCat</a> <span class=\"fn\">m</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/CategoryTheory/Category/KleisliCat.lean#L28-L32","name":"CategoryTheory.KleisliCat","line":28,"kind":"def","docLink":"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat","doc":"The Kleisli category on the (type-)monad `m`. Note that the monad is not assumed to be lawful\nyet. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/CategoryTheory/Category/KleisliCat.html#CategoryTheory.KleisliCat\"><span class=\"name\">CategoryTheory</span>.<span class=\"name\">KleisliCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v)</span> → <a href=\"./foundational_types.html\">Type</a> (u + 1)</span></div></div>"}]}