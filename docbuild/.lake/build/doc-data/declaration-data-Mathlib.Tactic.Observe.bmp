{"name":"Mathlib.Tactic.Observe","instances":[],"imports":["Init","Mathlib.Init","Lean.Meta.Tactic.TryThis","Lean.Elab.Tactic.ElabTerm","Lean.Meta.Tactic.LibrarySearch"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Observe.lean#L54-L55","name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","line":54,"kind":"def","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_Using__,,»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">«tacticObserve?__:_Using__,,»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Observe.lean#L50-L51","name":"Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","line":50,"kind":"def","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.«tacticObserve?__:_»\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">«tacticObserve?__:_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Tactic/Observe.lean#L21-L30","name":"Mathlib.Tactic.LibrarySearch.observe","line":21,"kind":"def","docLink":"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.observe","doc":"`observe hp : p` asserts the proposition `p`, and tries to prove it using `exact?`.\nIf no proof is found, the tactic fails.\nIn other words, this tactic is equivalent to `have hp : p := by exact?`.\n\nIf `hp` is omitted, then the placeholder `this` is used.\n\nThe variant `observe? hp : p` will emit a trace message of the form `have hp : p := proof_term`.\nThis may be particularly useful to speed up proofs. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Tactic/Observe.html#Mathlib.Tactic.LibrarySearch.observe\"><span class=\"name\">Mathlib</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">LibrarySearch</span>.<span class=\"name\">observe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>"}]}