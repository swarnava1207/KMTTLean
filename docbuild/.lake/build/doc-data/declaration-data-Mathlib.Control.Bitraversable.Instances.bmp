{"name":"Mathlib.Control.Bitraversable.Instances","instances":[{"typeNames":["Prod"],"name":"instBitraversableProd","className":"Bitraversable"},{"typeNames":["Prod"],"name":"instLawfulBitraversableProd","className":"LawfulBitraversable"},{"typeNames":["Sum"],"name":"instBitraversableSum","className":"Bitraversable"},{"typeNames":["Sum"],"name":"instLawfulBitraversableSum","className":"LawfulBitraversable"},{"typeNames":["Functor.Const"],"name":"Bitraversable.const","className":"Bitraversable"},{"typeNames":["Functor.Const"],"name":"LawfulBitraversable.const","className":"LawfulBitraversable"},{"typeNames":["flip"],"name":"Bitraversable.flip","className":"Bitraversable"},{"typeNames":["flip"],"name":"LawfulBitraversable.flip","className":"LawfulBitraversable"},{"typeNames":[],"name":"Bitraversable.traversable","className":"Traversable"},{"typeNames":[],"name":"Bitraversable.isLawfulTraversable","className":"LawfulTraversable"},{"typeNames":["Function.bicompl"],"name":"instBitraversableBicompl","className":"Bitraversable"},{"typeNames":["Function.bicompl"],"name":"instLawfulBitraversableBicomplOfLawfulTraversable","className":"LawfulBitraversable"},{"typeNames":["Function.bicompr"],"name":"instBitraversableBicompr","className":"Bitraversable"},{"typeNames":["Function.bicompr"],"name":"instLawfulBitraversableBicomprOfLawfulTraversable","className":"LawfulBitraversable"}],"imports":["Init","Mathlib.Control.Bitraversable.Lemmas","Mathlib.Control.Traversable.Lemmas"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L137-L142","name":"instLawfulBitraversableBicomprOfLawfulTraversable","line":137,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableBicomprOfLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableBicomprOfLawfulTraversable\"><span class=\"name\">instLawfulBitraversableBicomprOfLawfulTraversable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompr\">Function.bicompr</a> <span class=\"fn\">F</span> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L135-L135","name":"instBitraversableBicompr","line":135,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableBicompr","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableBicompr\"><span class=\"name\">instBitraversableBicompr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompr\">Function.bicompr</a> <span class=\"fn\">F</span> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L130-L133","name":"Bicompr.bitraverse","line":130,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bicompr.bitraverse","doc":"The bitraverse function for `bicompr`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bicompr.bitraverse\"><span class=\"name\">Bicompr</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompr\">Function.bicompr</a> <span class=\"fn\">F</span> <span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompr\">Function.bicompr</a> <span class=\"fn\">F</span> <span class=\"fn\">t</span> <span class=\"fn\">β</span> <span class=\"fn\">β'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L115-L122","name":"instLawfulBitraversableBicomplOfLawfulTraversable","line":115,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableBicomplOfLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableBicomplOfLawfulTraversable\"><span class=\"name\">instLawfulBitraversableBicomplOfLawfulTraversable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompl\">Function.bicompl</a> <span class=\"fn\">t</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L113-L113","name":"instBitraversableBicompl","line":113,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableBicompl","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableBicompl\"><span class=\"name\">instBitraversableBicompl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompl\">Function.bicompl</a> <span class=\"fn\">t</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L108-L111","name":"Bicompl.bitraverse","line":108,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bicompl.bitraverse","doc":"The bitraverse function for `bicompl`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bicompl.bitraverse\"><span class=\"name\">Bicompl</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">F </span><span class=\"fn\">G</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">G</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β </span><span class=\"fn\">α' </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">α'</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompl\">Function.bicompl</a> <span class=\"fn\">t</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span> <span class=\"fn\">α</span> <span class=\"fn\">α'</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Mathlib/Logic/Function/Basic.html#Function.bicompl\">Function.bicompl</a> <span class=\"fn\">t</span> <span class=\"fn\">F</span> <span class=\"fn\">G</span> <span class=\"fn\">β</span> <span class=\"fn\">β'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L91-L96","name":"Bitraversable.isLawfulTraversable","line":91,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.isLawfulTraversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.isLawfulTraversable\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">isLawfulTraversable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#LawfulTraversable\">LawfulTraversable</a> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L88-L89","name":"Bitraversable.traversable","line":88,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.traversable","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.traversable\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">traversable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Traversable/Basic.html#Traversable\">Traversable</a> <span class=\"fn\">(<span class=\"fn\">t</span> <span class=\"fn\">α</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L83-L84","name":"LawfulBitraversable.flip","line":83,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#LawfulBitraversable.flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#LawfulBitraversable.flip\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">_root_.flip</a> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L79-L79","name":"Bitraversable.flip","line":79,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.flip","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.flip\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">flip</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">_root_.flip</a> <span class=\"fn\">t</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L74-L77","name":"flip.bitraverse","line":74,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#flip.bitraverse","doc":"The bitraverse function for `flip`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#flip.bitraverse\"><span class=\"name\">flip</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <span class=\"fn\">t</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">α' </span><span class=\"fn\">β </span><span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">t</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Init/Core.html#flip\">flip</a> <span class=\"fn\">t</span> <span class=\"fn\">α'</span> <span class=\"fn\">β'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L71-L72","name":"LawfulBitraversable.const","line":71,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#LawfulBitraversable.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#LawfulBitraversable.const\"><span class=\"name\">LawfulBitraversable</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <a href=\"./Mathlib/Control/Functor.html#Functor.Const\">Functor.Const</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L69-L69","name":"Bitraversable.const","line":69,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.const","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Bitraversable.const\"><span class=\"name\">Bitraversable</span>.<span class=\"name\">const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <a href=\"./Mathlib/Control/Functor.html#Functor.Const\">Functor.Const</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L63-L67","name":"Const.bitraverse","line":63,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Const.bitraverse","doc":"The bitraverse function for `Const`. It throws away the second map. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Const.bitraverse\"><span class=\"name\">Const</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Mathlib/Control/Functor.html#Functor.Const\">Functor.Const</a> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">(<a href=\"./Mathlib/Control/Functor.html#Functor.Const\">Functor.Const</a> <span class=\"fn\">α'</span> <span class=\"fn\">β'</span>)</span></span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L57-L59","name":"instLawfulBitraversableSum","line":57,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableSum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableSum\"><span class=\"name\">instLawfulBitraversableSum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <a href=\"./Init/Core.html#Sum\">Sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L55-L55","name":"instBitraversableSum","line":55,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableSum","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableSum\"><span class=\"name\">instBitraversableSum</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <a href=\"./Init/Core.html#Sum\">Sum</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L50-L53","name":"Sum.bitraverse","line":50,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Sum.bitraverse","doc":"The bitraverse function for `α ⊕ β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Sum.bitraverse\"><span class=\"name\">Sum</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α'</span> <a href=\"./Init/Core.html#Sum\">⊕</a> <span class=\"fn\">β'</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L44-L46","name":"instLawfulBitraversableProd","line":44,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instLawfulBitraversableProd\"><span class=\"name\">instLawfulBitraversableProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#LawfulBitraversable\">LawfulBitraversable</a> <a href=\"./Init/Prelude.html#Prod\">Prod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L42-L42","name":"instBitraversableProd","line":42,"kind":"instance","docLink":"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableProd","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#instBitraversableProd\"><span class=\"name\">instBitraversableProd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Mathlib/Control/Bitraversable/Basic.html#Bitraversable\">Bitraversable</a> <a href=\"./Init/Prelude.html#Prod\">Prod</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Control/Bitraversable/Instances.lean#L38-L40","name":"Prod.bitraverse","line":38,"kind":"def","docLink":"./Mathlib/Control/Bitraversable/Instances.html#Prod.bitraverse","doc":"The bitraverse function for `α × β`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Control/Bitraversable/Instances.html#Prod.bitraverse\"><span class=\"name\">Prod</span>.<span class=\"name\">bitraverse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">F</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Applicative\">Applicative</a> <span class=\"fn\">F</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">α'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f'</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> <span class=\"fn\">β'</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">F</span> (<span class=\"fn\">α'</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β'</span>)</span></span></div></div>"}]}