{"name":"Mathlib.Data.List.Flatten","instances":[],"imports":["Init","Mathlib.Data.List.Induction"],"declarations":[{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L162-L162","name":"List.append_join_map_append","line":162,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.append_join_map_append","doc":"**Alias** of `List.append_flatten_map_append`.\n\n---\n\nWe can rebracket `x ++ (l₁ ++ x) ++ (l₂ ++ x) ++ ... ++ (lₙ ++ x)` to\n`(x ++ l₁) ++ (x ++ l₂) ++ ... ++ (x ++ lₙ) ++ x` where `L = [l₁, l₂, ..., lₙ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.append_join_map_append\"><span class=\"name\">List</span>.<span class=\"name\">append_join_map_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L153-L160","name":"List.append_flatten_map_append","line":153,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.append_flatten_map_append","doc":"We can rebracket `x ++ (l₁ ++ x) ++ (l₂ ++ x) ++ ... ++ (lₙ ++ x)` to\n`(x ++ l₁) ++ (x ++ l₂) ++ ... ++ (x ++ lₙ) ++ x` where `L = [l₁, l₂, ..., lₙ]`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.append_flatten_map_append\"><span class=\"name\">List</span>.<span class=\"name\">append_flatten_map_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x_1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(fun (<span class=\"fn\">x_1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x_1</span>)</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">x</span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L151-L151","name":"List.join_drop_length_sub_one","line":151,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.join_drop_length_sub_one","doc":"**Alias** of `List.flatten_drop_length_sub_one`."},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.join_drop_length_sub_one\"><span class=\"name\">List</span>.<span class=\"name\">join_drop_length_sub_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> (<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L145-L149","name":"List.flatten_drop_length_sub_one","line":145,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.flatten_drop_length_sub_one","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.flatten_drop_length_sub_one\"><span class=\"name\">List</span>.<span class=\"name\">flatten_drop_length_sub_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">L</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> (<span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.getLast\">getLast</a></span> <span class=\"fn\">h</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L142-L143","name":"List.drop_take_succ_join_eq_getElem'","line":142,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_join_eq_getElem'","doc":"**Alias** of `List.drop_take_succ_flatten_eq_getElem'`.\n\n---\n\nIn a flatten of sublists, taking the slice between the indices `A` and `B - 1` gives back the\noriginal sublist of index `i` if `A` is the sum of the lengths of sublists of index `< i`, and\n`B` is the sum of the lengths of sublists of index `≤ i`.\n\nSee `List.drop_take_succ_flatten_eq_getElem` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_join_eq_getElem'\"><span class=\"name\">List</span>.<span class=\"name\">drop_take_succ_join_eq_getElem'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L128-L140","name":"List.drop_take_succ_flatten_eq_getElem'","line":128,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_flatten_eq_getElem'","doc":"In a flatten of sublists, taking the slice between the indices `A` and `B - 1` gives back the\noriginal sublist of index `i` if `A` is the sum of the lengths of sublists of index `< i`, and\n`B` is the sum of the lengths of sublists of index `≤ i`.\n\nSee `List.drop_take_succ_flatten_eq_getElem` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_flatten_eq_getElem'\"><span class=\"name\">List</span>.<span class=\"name\">drop_take_succ_flatten_eq_getElem'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L117-L125","name":"List.drop_take_succ_eq_cons_getElem","line":117,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_eq_cons_getElem","doc":"Taking only the first `i+1` elements in a list, and then dropping the first `i` ones, one is\nleft with a list of length `1` made of the `i`-th element of the original list. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.drop_take_succ_eq_cons_getElem\"><span class=\"name\">List</span>.<span class=\"name\">drop_take_succ_eq_cons_getElem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">L</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">L</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#List.cons\">]</a></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L115-L115","name":"List.drop_sum_join'","line":115,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.drop_sum_join'","doc":"**Alias** of `List.drop_sum_flatten'`.\n\n---\n\nIn a join, dropping all the elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join after dropping the first `i` sublists.\n\nSee `List.drop_sum_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.drop_sum_join'\"><span class=\"name\">List</span>.<span class=\"name\">drop_sum_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L104-L113","name":"List.drop_sum_flatten'","line":104,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.drop_sum_flatten'","doc":"In a join, dropping all the elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join after dropping the first `i` sublists.\n\nSee `List.drop_sum_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.drop_sum_flatten'\"><span class=\"name\">List</span>.<span class=\"name\">drop_sum_flatten'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">i</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L101-L101","name":"List.take_sum_join'","line":101,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.take_sum_join'","doc":"**Alias** of `List.take_sum_flatten'`.\n\n---\n\nIn a join, taking the first elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join of the first `i` sublists.\n\nSee `List.take_sum_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.take_sum_join'\"><span class=\"name\">List</span>.<span class=\"name\">take_sum_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L90-L99","name":"List.take_sum_flatten'","line":90,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.take_sum_flatten'","doc":"In a join, taking the first elements up to an index which is the sum of the lengths of the\nfirst `i` sublists, is the same as taking the join of the first `i` sublists.\n\nSee `List.take_sum_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.take_sum_flatten'\"><span class=\"name\">List</span>.<span class=\"name\">take_sum_flatten'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">ℕ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span>)</span>)</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">i</span> <span class=\"fn\">L</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L87-L87","name":"List.count_bind'","line":87,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.count_bind'","doc":"**Alias** of `List.count_flatMap'`.\n\n---\n\nSee `List.count_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.count_bind'\"><span class=\"name\">List</span>.<span class=\"name\">count_bind'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L82-L85","name":"List.count_flatMap'","line":82,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.count_flatMap'","doc":"See `List.count_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.count_flatMap'\"><span class=\"name\">List</span>.<span class=\"name\">count_flatMap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L79-L79","name":"List.countP_bind'","line":79,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.countP_bind'","doc":"**Alias** of `List.countP_flatMap'`.\n\n---\n\nSee `List.countP_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.countP_bind'\"><span class=\"name\">List</span>.<span class=\"name\">countP_bind'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L73-L77","name":"List.countP_flatMap'","line":73,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.countP_flatMap'","doc":"See `List.countP_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.countP_flatMap'\"><span class=\"name\">List</span>.<span class=\"name\">countP_flatMap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L70-L70","name":"List.length_bind'","line":70,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.length_bind'","doc":"**Alias** of `List.length_flatMap'`.\n\n---\n\nSee `List.length_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.length_bind'\"><span class=\"name\">List</span>.<span class=\"name\">length_bind'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<a href=\"./Init/Prelude.html#List.length\">length</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L64-L68","name":"List.length_flatMap'","line":64,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.length_flatMap'","doc":"See `List.length_flatMap` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.length_flatMap'\"><span class=\"name\">List</span>.<span class=\"name\">length_flatMap'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> (<a href=\"./Init/Prelude.html#List.length\">length</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <span class=\"fn\">f</span>) <span class=\"fn\">l</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L61-L61","name":"List.count_join'","line":61,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.count_join'","doc":"**Alias** of `List.count_flatten'`.\n\n---\n\nSee `List.count_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.count_join'\"><span class=\"name\">List</span>.<span class=\"name\">count_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L56-L59","name":"List.count_flatten'","line":56,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.count_flatten'","doc":"See `List.count_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.count_flatten'\"><span class=\"name\">List</span>.<span class=\"name\">count_flatten'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.count\">count</a> <span class=\"fn\">a</span>)</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L53-L53","name":"List.countP_join'","line":53,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.countP_join'","doc":"**Alias** of `List.countP_flatten'`.\n\n---\n\nSee `List.countP_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.countP_join'\"><span class=\"name\">List</span>.<span class=\"name\">countP_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L46-L51","name":"List.countP_flatten'","line":46,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.countP_flatten'","doc":"See `List.countP_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.countP_flatten'\"><span class=\"name\">List</span>.<span class=\"name\">countP_flatten'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span> <span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.countP\">countP</a> <span class=\"fn\">p</span>)</span> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L43-L43","name":"List.length_join'","line":43,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.length_join'","doc":"**Alias** of `List.length_flatten'`.\n\n---\n\nSee `List.length_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.length_join'\"><span class=\"name\">List</span>.<span class=\"name\">length_join'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L38-L41","name":"List.length_flatten'","line":38,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.length_flatten'","doc":"See `List.length_flatten` for the corresponding statement using `List.sum`. "},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.length_flatten'\"><span class=\"name\">List</span>.<span class=\"name\">length_flatten'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">L</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">L</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#Nat.sum\">Nat.sum</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.map\">map</a> <a href=\"./Init/Prelude.html#List.length\">length</a> <span class=\"fn\">L</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L32-L35","name":"List.Sublist.flatMap","line":32,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.Sublist.flatMap","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.Sublist.flatMap\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">flatMap</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₁</span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.flatMap\">flatMap</a> <span class=\"fn\">f</span> <span class=\"fn\">l₂</span>)</span></span></div></div>"},{"info":{"sourceLink":"https://github.com/leanprover-community/mathlib4/blob/0cc1f970691e01afdf9d8bb9f8307cd7b6aca12a/Mathlib/Data/List/Flatten.lean#L22-L30","name":"List.Sublist.flatten","line":22,"kind":"theorem","docLink":"./Mathlib/Data/List/Flatten.html#List.Sublist.flatten","doc":""},"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Mathlib/Data/List/Flatten.html#List.Sublist.flatten\"><span class=\"name\">List</span>.<span class=\"name\">Sublist</span>.<span class=\"name\">flatten</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l₁ </span><span class=\"fn\">l₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\">l₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">l₁</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span>.<a href=\"./Init/Data/List/Basic.html#List.Sublist\">Sublist</a></span> <span class=\"fn\"><span class=\"fn\">l₂</span>.<a href=\"./Init/Data/List/Basic.html#List.flatten\">flatten</a></span></span></div></div>"}]}